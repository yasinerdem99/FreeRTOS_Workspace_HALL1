
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080058bc  080058bc  000068bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c8  080059c8  000069c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080059cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004200  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000426c  2000426c  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fe0  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f78  00000000  00000000  0001b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0001dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcd  00000000  00000000  0001f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b8a  00000000  00000000  0001ff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014170  00000000  00000000  00043b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5da2  00000000  00000000  00057c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012da31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005274  00000000  00000000  0012da74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00132ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058a4 	.word	0x080058a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080058a4 	.word	0x080058a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	20000128 	.word	0x20000128

080005e0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	if(file==STDERR_FILENO)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d116      	bne.n	8000620 <_write+0x40>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RED, strlen(RED) , HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2205      	movs	r2, #5
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <_write+0x90>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <_write+0x94>)
 80005fc:	f001 fe56 	bl	80022ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	481a      	ldr	r0, [pc, #104]	@ (8000674 <_write+0x94>)
 800060c:	f001 fe4e 	bl	80022ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(RST) , HAL_MAX_DELAY);
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2204      	movs	r2, #4
 8000616:	4918      	ldr	r1, [pc, #96]	@ (8000678 <_write+0x98>)
 8000618:	4816      	ldr	r0, [pc, #88]	@ (8000674 <_write+0x94>)
 800061a:	f001 fe47 	bl	80022ac <HAL_UART_Transmit>
 800061e:	e021      	b.n	8000664 <_write+0x84>
	}

	else if(file==STDOUT_FILENO)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d116      	bne.n	8000654 <_write+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)GRN, strlen(GRN) , HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2205      	movs	r2, #5
 800062c:	4913      	ldr	r1, [pc, #76]	@ (800067c <_write+0x9c>)
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <_write+0x94>)
 8000630:	f001 fe3c 	bl	80022ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b29a      	uxth	r2, r3
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	480d      	ldr	r0, [pc, #52]	@ (8000674 <_write+0x94>)
 8000640:	f001 fe34 	bl	80022ac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(GRN) , HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2205      	movs	r2, #5
 800064a:	490b      	ldr	r1, [pc, #44]	@ (8000678 <_write+0x98>)
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <_write+0x94>)
 800064e:	f001 fe2d 	bl	80022ac <HAL_UART_Transmit>
 8000652:	e007      	b.n	8000664 <_write+0x84>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	68b9      	ldr	r1, [r7, #8]
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <_write+0x94>)
 8000660:	f001 fe24 	bl	80022ac <HAL_UART_Transmit>

	}
	return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	080058bc 	.word	0x080058bc
 8000674:	20000328 	.word	0x20000328
 8000678:	080058c4 	.word	0x080058c4
 800067c:	080058cc 	.word	0x080058cc

08000680 <_read>:

int _read(int file, char *ptr, int len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
    if (file == STDIN_FILENO)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d124      	bne.n	80006dc <_read+0x5c>
    {
        for (int i = 0; i < len; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e01d      	b.n	80006d4 <_read+0x54>
        {
            // Her karakteri tek tek oku
            HAL_UART_Receive(&huart2, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	18d1      	adds	r1, r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2201      	movs	r2, #1
 80006a4:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <_read+0x68>)
 80006a6:	f001 fe8c 	bl	80023c2 <HAL_UART_Receive>

            // Enter (CR veya LF) gelirse bitir
            if (ptr[i] == '\r' || ptr[i] == '\n')
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b0d      	cmp	r3, #13
 80006b4:	d005      	beq.n	80006c2 <_read+0x42>
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d105      	bne.n	80006ce <_read+0x4e>
            {
                ptr[i] = '\0'; // Satır sonunu null karakterle değiştir
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
                break;
 80006cc:	e006      	b.n	80006dc <_read+0x5c>
        for (int i = 0; i < len; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbdd      	blt.n	8000698 <_read+0x18>
            }
        }
    }
    return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000328 	.word	0x20000328

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b08e      	sub	sp, #56	@ 0x38
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fb13 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f835 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f8bb 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 f88f 	bl	8000820 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <main+0x68>)
 8000704:	f107 041c 	add.w	r4, r7, #28
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fe42 	bl	80033a6 <osThreadCreate>
 8000722:	4603      	mov	r3, r0
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <main+0x6c>)
 8000726:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <main+0x70>)
 800072a:	463c      	mov	r4, r7
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 800073a:	463b      	mov	r3, r7
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fe31 	bl	80033a6 <osThreadCreate>
 8000744:	4603      	mov	r3, r0
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <main+0x74>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800074a:	f002 fe25 	bl	8003398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x62>
 8000752:	bf00      	nop
 8000754:	080058dc 	.word	0x080058dc
 8000758:	20000370 	.word	0x20000370
 800075c:	08005900 	.word	0x08005900
 8000760:	20000374 	.word	0x20000374

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fa96 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <SystemClock_Config+0xb4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <SystemClock_Config+0xb4>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <SystemClock_Config+0xb4>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <SystemClock_Config+0xb8>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <SystemClock_Config+0xb8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fdf3 	bl	80013c0 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007e0:	f000 f8d2 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f856 	bl	80018b0 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800080a:	f000 f8bd 	bl	8000988 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f001 fcd8 	bl	800220c <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f891 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000328 	.word	0x20000328
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_GPIO_Init+0x30>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	fprintf(stdout,"system initialized\r\n");
 80008b0:	4b22      	ldr	r3, [pc, #136]	@ (800093c <gorev2+0x94>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2214      	movs	r2, #20
 80008b8:	2101      	movs	r1, #1
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <gorev2+0x98>)
 80008bc:	f004 f88a 	bl	80049d4 <fwrite>

	fprintf(stderr, "error\r\n");
 80008c0:	4b1e      	ldr	r3, [pc, #120]	@ (800093c <gorev2+0x94>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	2207      	movs	r2, #7
 80008c8:	2101      	movs	r1, #1
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <gorev2+0x9c>)
 80008cc:	f004 f882 	bl	80049d4 <fwrite>
  /* Infinite loop */

  for(;;)
  {

	memset(input, 0, sizeof(input)); // diziyi sıfırla
 80008d0:	2203      	movs	r2, #3
 80008d2:	2100      	movs	r1, #0
 80008d4:	481c      	ldr	r0, [pc, #112]	@ (8000948 <gorev2+0xa0>)
 80008d6:	f004 f9e5 	bl	8004ca4 <memset>
	fgets(input,sizeof(input),stdin);
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <gorev2+0x94>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2103      	movs	r1, #3
 80008e4:	4818      	ldr	r0, [pc, #96]	@ (8000948 <gorev2+0xa0>)
 80008e6:	f003 ff4b 	bl	8004780 <fgets>
	input[strcspn(input, "\r\n")] = 0;
 80008ea:	4918      	ldr	r1, [pc, #96]	@ (800094c <gorev2+0xa4>)
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <gorev2+0xa0>)
 80008ee:	f004 f9e1 	bl	8004cb4 <strcspn>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <gorev2+0xa0>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	54d1      	strb	r1, [r2, r3]

	if (strlen(input) == 1 && input[0] == 's')
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <gorev2+0xa0>)
 80008fc:	f7ff fcb8 	bl	8000270 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10c      	bne.n	8000920 <gorev2+0x78>
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <gorev2+0xa0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b73      	cmp	r3, #115	@ 0x73
 800090c:	d108      	bne.n	8000920 <gorev2+0x78>
	     {
	         fprintf(stdout, "s alındı\r\n");
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <gorev2+0x94>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	220c      	movs	r2, #12
 8000916:	2101      	movs	r1, #1
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <gorev2+0xa8>)
 800091a:	f004 f85b 	bl	80049d4 <fwrite>
 800091e:	e00b      	b.n	8000938 <gorev2+0x90>
	     }
	else if(strlen(input)>0)
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <gorev2+0xa0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0d3      	beq.n	80008d0 <gorev2+0x28>
	     {
	         fprintf(stderr, "gecersiz karakter: %s\r\n", input);
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <gorev2+0x94>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a06      	ldr	r2, [pc, #24]	@ (8000948 <gorev2+0xa0>)
 8000930:	4908      	ldr	r1, [pc, #32]	@ (8000954 <gorev2+0xac>)
 8000932:	4618      	mov	r0, r3
 8000934:	f003 ffd2 	bl	80048dc <fiprintf>
	memset(input, 0, sizeof(input)); // diziyi sıfırla
 8000938:	e7ca      	b.n	80008d0 <gorev2+0x28>
 800093a:	bf00      	nop
 800093c:	2000001c 	.word	0x2000001c
 8000940:	0800591c 	.word	0x0800591c
 8000944:	08005934 	.word	0x08005934
 8000948:	20000378 	.word	0x20000378
 800094c:	0800593c 	.word	0x0800593c
 8000950:	08005940 	.word	0x08005940
 8000954:	08005950 	.word	0x08005950

08000958 <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gorev1 */
  /* Infinite loop */
  for(;;)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <gorev1+0x8>

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 f9f3 	bl	8000d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010000 	.word	0x40010000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	@ (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fa99 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <HAL_UART_MspInit+0x94>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d133      	bne.n	8000a76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_UART_MspInit+0x98>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <HAL_UART_MspInit+0x9c>)
 8000a62:	f000 fb11 	bl	8001088 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2026      	movs	r0, #38	@ 0x26
 8000a6c:	f000 fa50 	bl	8000f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a70:	2026      	movs	r0, #38	@ 0x26
 8000a72:	f000 fa69 	bl	8000f48 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40004400 	.word	0x40004400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <HAL_InitTick+0xd0>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b5c <HAL_InitTick+0xd0>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aac:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <HAL_InitTick+0xd0>)
 8000aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab8:	f107 020c 	add.w	r2, r7, #12
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f8d4 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ac8:	f001 f8be 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8000acc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ad0:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <HAL_InitTick+0xd4>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000ade:	4a22      	ldr	r2, [pc, #136]	@ (8000b68 <HAL_InitTick+0xdc>)
 8000ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000ae4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aea:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b02:	4818      	ldr	r0, [pc, #96]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000b04:	f001 f8e6 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d11b      	bne.n	8000b4e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b16:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <HAL_InitTick+0xd8>)
 8000b18:	f001 f936 	bl	8001d88 <HAL_TIM_Base_Start_IT>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d111      	bne.n	8000b4e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fa0c 	bl	8000f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b0f      	cmp	r3, #15
 8000b34:	d808      	bhi.n	8000b48 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b36:	2200      	movs	r2, #0
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	2019      	movs	r0, #25
 8000b3c:	f000 f9e8 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_InitTick+0xe0>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e002      	b.n	8000b4e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3730      	adds	r7, #48	@ 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	2000037c 	.word	0x2000037c
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bae:	f001 f95b 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000037c 	.word	0x2000037c

08000bbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <USART2_IRQHandler+0x10>)
 8000bc2:	f001 fc95 	bl	80024f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000328 	.word	0x20000328

08000bd0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_isatty>:

int _isatty(int file)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_sbrk>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
 8000c68:	f004 f8da 	bl	8004e20 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20020000 	.word	0x20020000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200003c4 	.word	0x200003c4
 8000ca0:	20004270 	.word	0x20004270

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f004 f899 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fcf7 	bl	80006ec <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d0c:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 8000d10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d14:	2000426c 	.word	0x2000426c

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f8d8 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f7ff fe9e 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe20 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200003c8 	.word	0x200003c8

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200003c8 	.word	0x200003c8

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f72:	f7ff ff09 	bl	8000d88 <HAL_GetTick>
 8000f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d008      	beq.n	8000f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e052      	b.n	800103c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0216 	bic.w	r2, r2, #22
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <HAL_DMA_Abort+0x62>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0208 	bic.w	r2, r2, #8
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe6:	e013      	b.n	8001010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe8:	f7ff fece 	bl	8000d88 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d90c      	bls.n	8001010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e015      	b.n	800103c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1e4      	bne.n	8000fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001022:	223f      	movs	r2, #63	@ 0x3f
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d004      	beq.n	8001062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00c      	b.n	800107c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e16b      	b.n	800137c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 815a 	bne.w	8001376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80b4 	beq.w	8001376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a5f      	ldr	r2, [pc, #380]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a5b      	ldr	r2, [pc, #364]	@ (8001398 <HAL_GPIO_Init+0x310>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x314>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <HAL_GPIO_Init+0x318>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_GPIO_Init+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x328>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x20a>
 800128e:	2307      	movs	r3, #7
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001292:	2308      	movs	r3, #8
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x310>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae90 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e267      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d075      	beq.n	80014ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013de:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d00c      	beq.n	8001404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b85      	ldr	r3, [pc, #532]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b82      	ldr	r3, [pc, #520]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001402:	d10b      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4b7e      	ldr	r3, [pc, #504]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d05b      	beq.n	80014c8 <HAL_RCC_OscConfig+0x108>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d157      	bne.n	80014c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e242      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d106      	bne.n	8001434 <HAL_RCC_OscConfig+0x74>
 8001426:	4b76      	ldr	r3, [pc, #472]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a75      	ldr	r2, [pc, #468]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b70      	ldr	r3, [pc, #448]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6f      	ldr	r2, [pc, #444]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b6d      	ldr	r3, [pc, #436]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001458:	4b69      	ldr	r3, [pc, #420]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a68      	ldr	r2, [pc, #416]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a65      	ldr	r2, [pc, #404]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc86 	bl	8000d88 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc82 	bl	8000d88 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e207      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xc0>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc72 	bl	8000d88 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fc6e 	bl	8000d88 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1f3      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0xe8>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d063      	beq.n	800159e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1c7      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4937      	ldr	r1, [pc, #220]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e03a      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fc27 	bl	8000d88 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fc23 	bl	8000d88 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1a8      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4925      	ldr	r1, [pc, #148]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e015      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fc06 	bl	8000d88 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fc02 	bl	8000d88 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e187      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d036      	beq.n	8001618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbe6 	bl	8000d88 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fbe2 	bl	8000d88 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e167      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x200>
 80015de:	e01b      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbcf 	bl	8000d88 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e00e      	b.n	800160c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbcb 	bl	8000d88 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d907      	bls.n	800160c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e150      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	42470000 	.word	0x42470000
 8001608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ea      	bne.n	80015ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8097 	beq.w	8001754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a73      	ldr	r2, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb8b 	bl	8000d88 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fb87 	bl	8000d88 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e10c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x2ea>
 800169c:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a63      	ldr	r2, [pc, #396]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x30c>
 80016b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016cc:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b55      	ldr	r3, [pc, #340]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a54      	ldr	r2, [pc, #336]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d015      	beq.n	8001718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fb4c 	bl	8000d88 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff fb48 	bl	8000d88 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0cb      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	4b49      	ldr	r3, [pc, #292]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ee      	beq.n	80016f4 <HAL_RCC_OscConfig+0x334>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fb36 	bl	8000d88 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fb32 	bl	8000d88 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0b5      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a1 	beq.w	80018a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175e:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d05c      	beq.n	8001824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d141      	bne.n	80017f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb06 	bl	8000d88 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fb02 	bl	8000d88 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e087      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fadb 	bl	8000d88 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fad7 	bl	8000d88 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e05c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x416>
 80017f4:	e054      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fac4 	bl	8000d88 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fac0 	bl	8000d88 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e045      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
 8001822:	e03d      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e038      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000
 8001838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4ec>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d028      	beq.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d121      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d11a      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cc      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d90c      	bls.n	80018ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b8      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001904:	4b59      	ldr	r3, [pc, #356]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a58      	ldr	r2, [pc, #352]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800190e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191c:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	494d      	ldr	r1, [pc, #308]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d044      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d119      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e067      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4934      	ldr	r1, [pc, #208]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f9f2 	bl	8000d88 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f9ee 	bl	8000d88 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a36:	f000 f821 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	490a      	ldr	r1, [pc, #40]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f818 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08005970 	.word	0x08005970
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a80:	b090      	sub	sp, #64	@ 0x40
 8001a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a94:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d00d      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x40>
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	f200 80a1 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aae:	e09b      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ab4:	e09b      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab6:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aba:	e098      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d028      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae8:	fb03 f201 	mul.w	r2, r3, r1
 8001aec:	2300      	movs	r3, #0
 8001aee:	fb00 f303 	mul.w	r3, r0, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af6:	fba0 1202 	umull	r1, r2, r0, r2
 8001afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001afc:	460a      	mov	r2, r1
 8001afe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b02:	4413      	add	r3, r2
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	61fa      	str	r2, [r7, #28]
 8001b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b16:	f7fe fbb3 	bl	8000280 <__aeabi_uldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b22:	e053      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	617a      	str	r2, [r7, #20]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b36:	f04f 0b00 	mov.w	fp, #0
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ebb2 080a 	subs.w	r8, r2, sl
 8001b56:	eb63 090b 	sbc.w	r9, r3, fp
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b72:	eb63 0509 	sbc.w	r5, r3, r9
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	00eb      	lsls	r3, r5, #3
 8001b80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b84:	00e2      	lsls	r2, r4, #3
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	eb14 030a 	adds.w	r3, r4, sl
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	eb45 030b 	adc.w	r3, r5, fp
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	60fa      	str	r2, [r7, #12]
 8001bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc0:	f7fe fb5e 	bl	8000280 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3740      	adds	r7, #64	@ 0x40
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	017d7840 	.word	0x017d7840

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08005980 	.word	0x08005980

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08005980 	.word	0x08005980

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f839 	bl	8001d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f9c0 	bl	8002098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e04e      	b.n	8001e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dca:	d01d      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1e      	ldr	r2, [pc, #120]	@ (8001e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	@ (8001e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a18      	ldr	r2, [pc, #96]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d010      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	e007      	b.n	8001e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40000800 	.word	0x40000800
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40001800 	.word	0x40001800

08001e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0202 	mvn.w	r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8d2 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8c4 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8d5 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0204 	mvn.w	r2, #4
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8ac 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f89e 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8af 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d020      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01b      	beq.n	8001f64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f886 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f878 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f889 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0210 	mvn.w	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2208      	movs	r2, #8
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f860 	bl	800205c <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f852 	bl	8002048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f863 	bl	8002070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0201 	mvn.w	r2, #1
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fcc8 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f900 	bl	80021f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f834 	bl	8002084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8d2 	bl	80021e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a43      	ldr	r2, [pc, #268]	@ (80021b8 <TIM_Base_SetConfig+0x120>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d013      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b6:	d00f      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a40      	ldr	r2, [pc, #256]	@ (80021bc <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00b      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	@ (80021c0 <TIM_Base_SetConfig+0x128>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3e      	ldr	r2, [pc, #248]	@ (80021c4 <TIM_Base_SetConfig+0x12c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d003      	beq.n	80020d8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3d      	ldr	r2, [pc, #244]	@ (80021c8 <TIM_Base_SetConfig+0x130>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d108      	bne.n	80020ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a32      	ldr	r2, [pc, #200]	@ (80021b8 <TIM_Base_SetConfig+0x120>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f8:	d027      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <TIM_Base_SetConfig+0x124>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d023      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <TIM_Base_SetConfig+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01f      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <TIM_Base_SetConfig+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01b      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2c      	ldr	r2, [pc, #176]	@ (80021c8 <TIM_Base_SetConfig+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d017      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2b      	ldr	r2, [pc, #172]	@ (80021cc <TIM_Base_SetConfig+0x134>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <TIM_Base_SetConfig+0x138>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00f      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <TIM_Base_SetConfig+0x13c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00b      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a28      	ldr	r2, [pc, #160]	@ (80021d8 <TIM_Base_SetConfig+0x140>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <TIM_Base_SetConfig+0x144>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d003      	beq.n	800214a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <TIM_Base_SetConfig+0x148>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d108      	bne.n	800215c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <TIM_Base_SetConfig+0x120>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d003      	beq.n	800218a <TIM_Base_SetConfig+0xf2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <TIM_Base_SetConfig+0x130>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d103      	bne.n	8002192 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f043 0204 	orr.w	r2, r3, #4
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40014400 	.word	0x40014400
 80021d4:	40014800 	.word	0x40014800
 80021d8:	40001800 	.word	0x40001800
 80021dc:	40001c00 	.word	0x40001c00
 80021e0:	40002000 	.word	0x40002000

080021e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e042      	b.n	80022a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fbda 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	@ 0x24
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800224e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fe15 	bl	8002e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d175      	bne.n	80023b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Transmit+0x2c>
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e06e      	b.n	80023ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	@ 0x21
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fd4d 	bl	8000d88 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	88fa      	ldrh	r2, [r7, #6]
 80022f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002304:	d108      	bne.n	8002318 <HAL_UART_Transmit+0x6c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e003      	b.n	8002320 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002320:	e02e      	b.n	8002380 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fbb3 	bl	8002a98 <UART_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03a      	b.n	80023ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3302      	adds	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e007      	b.n	8002372 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1cb      	bne.n	8002322 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2140      	movs	r1, #64	@ 0x40
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fb7f 	bl	8002a98 <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e006      	b.n	80023ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08a      	sub	sp, #40	@ 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 8081 	bne.w	80024e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_UART_Receive+0x2e>
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e079      	b.n	80024e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2222      	movs	r2, #34	@ 0x22
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002408:	f7fe fcbe 	bl	8000d88 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002422:	d108      	bne.n	8002436 <HAL_UART_Receive+0x74>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	e003      	b.n	800243e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800243e:	e047      	b.n	80024d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2200      	movs	r2, #0
 8002448:	2120      	movs	r1, #32
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fb24 	bl	8002a98 <UART_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e042      	b.n	80024e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10c      	bne.n	8002482 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002474:	b29a      	uxth	r2, r3
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3302      	adds	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	e01f      	b.n	80024c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248a:	d007      	beq.n	800249c <HAL_UART_Receive+0xda>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_UART_Receive+0xe8>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d106      	bne.n	80024aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e008      	b.n	80024bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	3301      	adds	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1b2      	bne.n	8002440 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
  }
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0ba      	sub	sp, #232	@ 0xe8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800252e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_UART_IRQHandler+0x66>
 8002542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fbd7 	bl	8002d02 <UART_Receive_IT>
      return;
 8002554:	e273      	b.n	8002a3e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80de 	beq.w	800271c <HAL_UART_IRQHandler+0x22c>
 8002560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002570:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80d1 	beq.w	800271c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xae>
 8002586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xd2>
 80025aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f043 0204 	orr.w	r2, r3, #4
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
 80025f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d105      	bne.n	800260a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f043 0208 	orr.w	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 820a 	beq.w	8002a34 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_UART_IRQHandler+0x14e>
 800262c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fb62 	bl	8002d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002648:	2b40      	cmp	r3, #64	@ 0x40
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_UART_IRQHandler+0x17a>
 8002662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d04f      	beq.n	800270a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa6d 	bl	8002b4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	2b40      	cmp	r3, #64	@ 0x40
 800267c:	d141      	bne.n	8002702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3314      	adds	r3, #20
 8002684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1d9      	bne.n	800267e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d013      	beq.n	80026fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	4a8a      	ldr	r2, [pc, #552]	@ (8002900 <HAL_UART_IRQHandler+0x410>)
 80026d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fcb0 	bl	8001044 <HAL_DMA_Abort_IT>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d016      	beq.n	8002718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e00e      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9b6 	bl	8002a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e00a      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9b2 	bl	8002a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002708:	e006      	b.n	8002718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9ae 	bl	8002a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002716:	e18d      	b.n	8002a34 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	bf00      	nop
    return;
 800271a:	e18b      	b.n	8002a34 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	2b01      	cmp	r3, #1
 8002722:	f040 8167 	bne.w	80029f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8160 	beq.w	80029f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8159 	beq.w	80029f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	f040 80ce 	bne.w	8002904 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a9 	beq.w	80028d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002786:	429a      	cmp	r2, r3
 8002788:	f080 80a2 	bcs.w	80028d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002792:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800279e:	f000 8088 	beq.w	80028b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027de:	e841 2300 	strex	r3, r2, [r1]
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1d9      	bne.n	80027a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3314      	adds	r3, #20
 800280e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002812:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002816:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800281a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e1      	bne.n	80027ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800283a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800283c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800284e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002850:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002854:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002856:	e841 2300 	strex	r3, r2, [r1]
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800285c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1e3      	bne.n	800282a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800287a:	e853 3f00 	ldrex	r3, [r3]
 800287e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002882:	f023 0310 	bic.w	r3, r3, #16
 8002886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002894:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002896:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800289a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800289c:	e841 2300 	strex	r3, r2, [r1]
 80028a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e3      	bne.n	8002870 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fb59 	bl	8000f64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f8d9 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028ce:	e0b3      	b.n	8002a38 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 80ad 	bne.w	8002a38 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e8:	f040 80a6 	bne.w	8002a38 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8c1 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
      return;
 80028fe:	e09b      	b.n	8002a38 <HAL_UART_IRQHandler+0x548>
 8002900:	08002c11 	.word	0x08002c11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800290c:	b29b      	uxth	r3, r3
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 808e 	beq.w	8002a3c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8089 	beq.w	8002a3c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800293a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002940:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800294e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002954:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800295c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e3      	bne.n	800292a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	623b      	str	r3, [r7, #32]
   return(result);
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3314      	adds	r3, #20
 8002982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002986:	633a      	str	r2, [r7, #48]	@ 0x30
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800298c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e3      	bne.n	8002962 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0310 	bic.w	r3, r3, #16
 80029be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029cc:	61fa      	str	r2, [r7, #28]
 80029ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	69b9      	ldr	r1, [r7, #24]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	617b      	str	r3, [r7, #20]
   return(result);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e3      	bne.n	80029a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f847 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f2:	e023      	b.n	8002a3c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_UART_IRQHandler+0x524>
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f910 	bl	8002c32 <UART_Transmit_IT>
    return;
 8002a12:	e014      	b.n	8002a3e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00e      	beq.n	8002a3e <HAL_UART_IRQHandler+0x54e>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f950 	bl	8002cd2 <UART_EndTransmit_IT>
    return;
 8002a32:	e004      	b.n	8002a3e <HAL_UART_IRQHandler+0x54e>
    return;
 8002a34:	bf00      	nop
 8002a36:	e002      	b.n	8002a3e <HAL_UART_IRQHandler+0x54e>
      return;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_IRQHandler+0x54e>
      return;
 8002a3c:	bf00      	nop
  }
}
 8002a3e:	37e8      	adds	r7, #232	@ 0xe8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa8:	e03b      	b.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d037      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab2:	f7fe f969 	bl	8000d88 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d302      	bcc.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e03a      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d023      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b80      	cmp	r3, #128	@ 0x80
 8002ade:	d020      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d01d      	beq.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d116      	bne.n	8002b22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f81d 	bl	8002b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2208      	movs	r2, #8
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d0b4      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b095      	sub	sp, #84	@ 0x54
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	330c      	adds	r3, #12
 8002b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e5      	bne.n	8002b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d119      	bne.n	8002bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 0310 	bic.w	r3, r3, #16
 8002bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002be2:	61ba      	str	r2, [r7, #24]
 8002be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	6979      	ldr	r1, [r7, #20]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e5      	bne.n	8002bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c04:	bf00      	nop
 8002c06:	3754      	adds	r7, #84	@ 0x54
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff21 	bl	8002a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b21      	cmp	r3, #33	@ 0x21
 8002c44:	d13e      	bne.n	8002cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4e:	d114      	bne.n	8002c7a <UART_Transmit_IT+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	1c9a      	adds	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	621a      	str	r2, [r3, #32]
 8002c78:	e008      	b.n	8002c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	1c59      	adds	r1, r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6211      	str	r1, [r2, #32]
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fea6 	bl	8002a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b08c      	sub	sp, #48	@ 0x30
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b22      	cmp	r3, #34	@ 0x22
 8002d1c:	f040 80aa 	bne.w	8002e74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d28:	d115      	bne.n	8002d56 <UART_Receive_IT+0x54>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d111      	bne.n	8002d56 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d54:	e024      	b.n	8002da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d64:	d007      	beq.n	8002d76 <UART_Receive_IT+0x74>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <UART_Receive_IT+0x82>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e008      	b.n	8002d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4619      	mov	r1, r3
 8002dae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d15d      	bne.n	8002e70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0220 	bic.w	r2, r2, #32
 8002dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d135      	bne.n	8002e66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e20:	623a      	str	r2, [r7, #32]
 8002e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	69f9      	ldr	r1, [r7, #28]
 8002e26:	6a3a      	ldr	r2, [r7, #32]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d10a      	bne.n	8002e58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fe0e 	bl	8002a80 <HAL_UARTEx_RxEventCallback>
 8002e64:	e002      	b.n	8002e6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fdf6 	bl	8002a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e002      	b.n	8002e76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3730      	adds	r7, #48	@ 0x30
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b0c0      	sub	sp, #256	@ 0x100
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	ea40 0301 	orr.w	r3, r0, r1
 8002ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ed8:	f021 010c 	bic.w	r1, r1, #12
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	6999      	ldr	r1, [r3, #24]
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	ea40 0301 	orr.w	r3, r0, r1
 8002f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b8f      	ldr	r3, [pc, #572]	@ (800314c <UART_SetConfig+0x2cc>)
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d005      	beq.n	8002f20 <UART_SetConfig+0xa0>
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8003150 <UART_SetConfig+0x2d0>)
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d104      	bne.n	8002f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7fe fe92 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f28:	e003      	b.n	8002f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f2a:	f7fe fe79 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8002f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3c:	f040 810c 	bne.w	8003158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f62:	4621      	mov	r1, r4
 8002f64:	eb12 0801 	adds.w	r8, r2, r1
 8002f68:	4629      	mov	r1, r5
 8002f6a:	eb43 0901 	adc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb49 0303 	adc.w	r3, r9, r3
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fae:	460b      	mov	r3, r1
 8002fb0:	18db      	adds	r3, r3, r3
 8002fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	eb42 0303 	adc.w	r3, r2, r3
 8002fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fc4:	f7fd f95c 	bl	8000280 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <UART_SetConfig+0x2d4>)
 8002fce:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	011c      	lsls	r4, r3, #4
 8002fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	464b      	mov	r3, r9
 8002fec:	1891      	adds	r1, r2, r2
 8002fee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ff0:	415b      	adcs	r3, r3
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb43 0b01 	adc.w	fp, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003018:	4692      	mov	sl, r2
 800301a:	469b      	mov	fp, r3
 800301c:	4643      	mov	r3, r8
 800301e:	eb1a 0303 	adds.w	r3, sl, r3
 8003022:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003026:	464b      	mov	r3, r9
 8003028:	eb4b 0303 	adc.w	r3, fp, r3
 800302c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800303c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003044:	460b      	mov	r3, r1
 8003046:	18db      	adds	r3, r3, r3
 8003048:	643b      	str	r3, [r7, #64]	@ 0x40
 800304a:	4613      	mov	r3, r2
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	647b      	str	r3, [r7, #68]	@ 0x44
 8003052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800305a:	f7fd f911 	bl	8000280 <__aeabi_uldivmod>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4611      	mov	r1, r2
 8003064:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <UART_SetConfig+0x2d4>)
 8003066:	fba3 2301 	umull	r2, r3, r3, r1
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2264      	movs	r2, #100	@ 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800307a:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <UART_SetConfig+0x2d4>)
 800307c:	fba3 2302 	umull	r2, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003088:	441c      	add	r4, r3
 800308a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003094:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	1891      	adds	r1, r2, r2
 80030a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030a4:	415b      	adcs	r3, r3
 80030a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030ac:	4641      	mov	r1, r8
 80030ae:	1851      	adds	r1, r2, r1
 80030b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80030b2:	4649      	mov	r1, r9
 80030b4:	414b      	adcs	r3, r1
 80030b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030c4:	4659      	mov	r1, fp
 80030c6:	00cb      	lsls	r3, r1, #3
 80030c8:	4651      	mov	r1, sl
 80030ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ce:	4651      	mov	r1, sl
 80030d0:	00ca      	lsls	r2, r1, #3
 80030d2:	4610      	mov	r0, r2
 80030d4:	4619      	mov	r1, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	4642      	mov	r2, r8
 80030da:	189b      	adds	r3, r3, r2
 80030dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030e0:	464b      	mov	r3, r9
 80030e2:	460a      	mov	r2, r1
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003100:	460b      	mov	r3, r1
 8003102:	18db      	adds	r3, r3, r3
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003106:	4613      	mov	r3, r2
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800310e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003116:	f7fd f8b3 	bl	8000280 <__aeabi_uldivmod>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <UART_SetConfig+0x2d4>)
 8003120:	fba3 1302 	umull	r1, r3, r3, r2
 8003124:	095b      	lsrs	r3, r3, #5
 8003126:	2164      	movs	r1, #100	@ 0x64
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	3332      	adds	r3, #50	@ 0x32
 8003132:	4a08      	ldr	r2, [pc, #32]	@ (8003154 <UART_SetConfig+0x2d4>)
 8003134:	fba2 2303 	umull	r2, r3, r2, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4422      	add	r2, r4
 8003146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003148:	e106      	b.n	8003358 <UART_SetConfig+0x4d8>
 800314a:	bf00      	nop
 800314c:	40011000 	.word	0x40011000
 8003150:	40011400 	.word	0x40011400
 8003154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003162:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800316a:	4642      	mov	r2, r8
 800316c:	464b      	mov	r3, r9
 800316e:	1891      	adds	r1, r2, r2
 8003170:	6239      	str	r1, [r7, #32]
 8003172:	415b      	adcs	r3, r3
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317a:	4641      	mov	r1, r8
 800317c:	1854      	adds	r4, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb43 0501 	adc.w	r5, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	00eb      	lsls	r3, r5, #3
 800318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003192:	00e2      	lsls	r2, r4, #3
 8003194:	4614      	mov	r4, r2
 8003196:	461d      	mov	r5, r3
 8003198:	4643      	mov	r3, r8
 800319a:	18e3      	adds	r3, r4, r3
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031a0:	464b      	mov	r3, r9
 80031a2:	eb45 0303 	adc.w	r3, r5, r3
 80031a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031c6:	4629      	mov	r1, r5
 80031c8:	008b      	lsls	r3, r1, #2
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d0:	4621      	mov	r1, r4
 80031d2:	008a      	lsls	r2, r1, #2
 80031d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4b60      	ldr	r3, [pc, #384]	@ (8003364 <UART_SetConfig+0x4e4>)
 80031e2:	fba3 2302 	umull	r2, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	011c      	lsls	r4, r3, #4
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031fc:	4642      	mov	r2, r8
 80031fe:	464b      	mov	r3, r9
 8003200:	1891      	adds	r1, r2, r2
 8003202:	61b9      	str	r1, [r7, #24]
 8003204:	415b      	adcs	r3, r3
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320c:	4641      	mov	r1, r8
 800320e:	1851      	adds	r1, r2, r1
 8003210:	6139      	str	r1, [r7, #16]
 8003212:	4649      	mov	r1, r9
 8003214:	414b      	adcs	r3, r1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003224:	4659      	mov	r1, fp
 8003226:	00cb      	lsls	r3, r1, #3
 8003228:	4651      	mov	r1, sl
 800322a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322e:	4651      	mov	r1, sl
 8003230:	00ca      	lsls	r2, r1, #3
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	4603      	mov	r3, r0
 8003238:	4642      	mov	r2, r8
 800323a:	189b      	adds	r3, r3, r2
 800323c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003240:	464b      	mov	r3, r9
 8003242:	460a      	mov	r2, r1
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003256:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003264:	4649      	mov	r1, r9
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	4641      	mov	r1, r8
 800326a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326e:	4641      	mov	r1, r8
 8003270:	008a      	lsls	r2, r1, #2
 8003272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003276:	f7fd f803 	bl	8000280 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4611      	mov	r1, r2
 8003280:	4b38      	ldr	r3, [pc, #224]	@ (8003364 <UART_SetConfig+0x4e4>)
 8003282:	fba3 2301 	umull	r2, r3, r3, r1
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2264      	movs	r2, #100	@ 0x64
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	1acb      	subs	r3, r1, r3
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	3332      	adds	r3, #50	@ 0x32
 8003294:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <UART_SetConfig+0x4e4>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a0:	441c      	add	r4, r3
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032a6:	2200      	movs	r2, #0
 80032a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80032ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032b0:	4642      	mov	r2, r8
 80032b2:	464b      	mov	r3, r9
 80032b4:	1891      	adds	r1, r2, r2
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	415b      	adcs	r3, r3
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c0:	4641      	mov	r1, r8
 80032c2:	1851      	adds	r1, r2, r1
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	4649      	mov	r1, r9
 80032c8:	414b      	adcs	r3, r1
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d8:	4659      	mov	r1, fp
 80032da:	00cb      	lsls	r3, r1, #3
 80032dc:	4651      	mov	r1, sl
 80032de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e2:	4651      	mov	r1, sl
 80032e4:	00ca      	lsls	r2, r1, #3
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	4642      	mov	r2, r8
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032f2:	464b      	mov	r3, r9
 80032f4:	460a      	mov	r2, r1
 80032f6:	eb42 0303 	adc.w	r3, r2, r3
 80032fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	663b      	str	r3, [r7, #96]	@ 0x60
 8003306:	667a      	str	r2, [r7, #100]	@ 0x64
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003314:	4649      	mov	r1, r9
 8003316:	008b      	lsls	r3, r1, #2
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800331e:	4641      	mov	r1, r8
 8003320:	008a      	lsls	r2, r1, #2
 8003322:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003326:	f7fc ffab 	bl	8000280 <__aeabi_uldivmod>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <UART_SetConfig+0x4e4>)
 8003330:	fba3 1302 	umull	r1, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	2164      	movs	r1, #100	@ 0x64
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	3332      	adds	r3, #50	@ 0x32
 8003342:	4a08      	ldr	r2, [pc, #32]	@ (8003364 <UART_SetConfig+0x4e4>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4422      	add	r2, r4
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800335e:	46bd      	mov	sp, r7
 8003360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003364:	51eb851f 	.word	0x51eb851f

08003368 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337a:	2b84      	cmp	r3, #132	@ 0x84
 800337c:	d005      	beq.n	800338a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800337e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	3303      	adds	r3, #3
 8003388:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800339c:	f000 fa7a 	bl	8003894 <vTaskStartScheduler>
  
  return osOK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a8:	b089      	sub	sp, #36	@ 0x24
 80033aa:	af04      	add	r7, sp, #16
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <osThreadCreate+0x54>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01c      	beq.n	80033fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685c      	ldr	r4, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691e      	ldr	r6, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ffc8 	bl	8003368 <makeFreeRtosPriority>
 80033d8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	9301      	str	r3, [sp, #4]
 80033e6:	9100      	str	r1, [sp, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4632      	mov	r2, r6
 80033ec:	4629      	mov	r1, r5
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 f8a0 	bl	8003534 <xTaskCreateStatic>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e01c      	b.n	8003434 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685c      	ldr	r4, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003406:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ffaa 	bl	8003368 <makeFreeRtosPriority>
 8003414:	4602      	mov	r2, r0
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	4632      	mov	r2, r6
 8003422:	4629      	mov	r1, r5
 8003424:	4620      	mov	r0, r4
 8003426:	f000 f8e5 	bl	80035f4 <xTaskCreate>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d001      	beq.n	8003434 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003434:	68fb      	ldr	r3, [r7, #12]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800343e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f04f 32ff 	mov.w	r2, #4294967295
 8003456:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f103 0208 	add.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f103 0208 	add.w	r2, r3, #8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d103      	bne.n	8003514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	1e5a      	subs	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	@ 0x38
 8003538:	af04      	add	r7, sp, #16
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	61fb      	str	r3, [r7, #28]
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	e7fd      	b.n	800357a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800357e:	23a0      	movs	r3, #160	@ 0xa0
 8003580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2ba0      	cmp	r3, #160	@ 0xa0
 8003586:	d00b      	beq.n	80035a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	61bb      	str	r3, [r7, #24]
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01e      	beq.n	80035e6 <xTaskCreateStatic+0xb2>
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01b      	beq.n	80035e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035c0:	2300      	movs	r3, #0
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	9302      	str	r3, [sp, #8]
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f851 	bl	8003680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035e0:	f000 f8ee 	bl	80037c0 <prvAddNewTaskToReadyList>
 80035e4:	e001      	b.n	80035ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035ea:	697b      	ldr	r3, [r7, #20]
	}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	@ 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	@ 0x30
 80035f8:	af04      	add	r7, sp, #16
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe65 	bl	80042d8 <pvPortMalloc>
 800360e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003616:	20a0      	movs	r0, #160	@ 0xa0
 8003618:	f000 fe5e 	bl	80042d8 <pvPortMalloc>
 800361c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
 800362a:	e005      	b.n	8003638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800362c:	6978      	ldr	r0, [r7, #20]
 800362e:	f000 ff21 	bl	8004474 <vPortFree>
 8003632:	e001      	b.n	8003638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	2300      	movs	r3, #0
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f80f 	bl	8003680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003662:	69f8      	ldr	r0, [r7, #28]
 8003664:	f000 f8ac 	bl	80037c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003668:	2301      	movs	r3, #1
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e002      	b.n	8003674 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003674:	69bb      	ldr	r3, [r7, #24]
	}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003698:	3b01      	subs	r3, #1
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	617b      	str	r3, [r7, #20]
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	e7fd      	b.n	80036c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01f      	beq.n	8003710 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e012      	b.n	80036fc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	7819      	ldrb	r1, [r3, #0]
 80036de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	3334      	adds	r3, #52	@ 0x34
 80036e6:	460a      	mov	r2, r1
 80036e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	d9e9      	bls.n	80036d6 <prvInitialiseNewTask+0x56>
 8003702:	e000      	b.n	8003706 <prvInitialiseNewTask+0x86>
			{
				break;
 8003704:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800370e:	e003      	b.n	8003718 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	2b06      	cmp	r3, #6
 800371c:	d901      	bls.n	8003722 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800371e:	2306      	movs	r3, #6
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003726:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fea0 	bl	800347e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	3318      	adds	r3, #24
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fe9b 	bl	800347e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003750:	f1c3 0207 	rsb	r2, r3, #7
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	2200      	movs	r2, #0
 800376a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	334c      	adds	r3, #76	@ 0x4c
 8003772:	224c      	movs	r2, #76	@ 0x4c
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fa94 	bl	8004ca4 <memset>
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <prvInitialiseNewTask+0x134>)
 8003780:	651a      	str	r2, [r3, #80]	@ 0x50
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	4a0c      	ldr	r2, [pc, #48]	@ (80037b8 <prvInitialiseNewTask+0x138>)
 8003786:	655a      	str	r2, [r3, #84]	@ 0x54
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <prvInitialiseNewTask+0x13c>)
 800378c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	69b8      	ldr	r0, [r7, #24]
 8003794:	f000 fb8e 	bl	8003eb4 <pxPortInitialiseStack>
 8003798:	4602      	mov	r2, r0
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037aa:	bf00      	nop
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20004120 	.word	0x20004120
 80037b8:	20004188 	.word	0x20004188
 80037bc:	200041f0 	.word	0x200041f0

080037c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c8:	f000 fca6 	bl	8004118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003878 <prvAddNewTaskToReadyList+0xb8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a29      	ldr	r2, [pc, #164]	@ (8003878 <prvAddNewTaskToReadyList+0xb8>)
 80037d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037d6:	4b29      	ldr	r3, [pc, #164]	@ (800387c <prvAddNewTaskToReadyList+0xbc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037de:	4a27      	ldr	r2, [pc, #156]	@ (800387c <prvAddNewTaskToReadyList+0xbc>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e4:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <prvAddNewTaskToReadyList+0xb8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d110      	bne.n	800380e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037ec:	f000 fa9e 	bl	8003d2c <prvInitialiseTaskLists>
 80037f0:	e00d      	b.n	800380e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037f2:	4b23      	ldr	r3, [pc, #140]	@ (8003880 <prvAddNewTaskToReadyList+0xc0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037fa:	4b20      	ldr	r3, [pc, #128]	@ (800387c <prvAddNewTaskToReadyList+0xbc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	429a      	cmp	r2, r3
 8003806:	d802      	bhi.n	800380e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <prvAddNewTaskToReadyList+0xbc>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800380e:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <prvAddNewTaskToReadyList+0xc4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <prvAddNewTaskToReadyList+0xc4>)
 8003816:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	2201      	movs	r2, #1
 800381e:	409a      	lsls	r2, r3
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <prvAddNewTaskToReadyList+0xc8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <prvAddNewTaskToReadyList+0xc8>)
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4a15      	ldr	r2, [pc, #84]	@ (800388c <prvAddNewTaskToReadyList+0xcc>)
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7ff fe29 	bl	8003498 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003846:	f000 fc99 	bl	800417c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800384a:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <prvAddNewTaskToReadyList+0xc0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00e      	beq.n	8003870 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <prvAddNewTaskToReadyList+0xbc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <prvAddNewTaskToReadyList+0xd0>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200004cc 	.word	0x200004cc
 800387c:	200003cc 	.word	0x200003cc
 8003880:	200004d8 	.word	0x200004d8
 8003884:	200004e8 	.word	0x200004e8
 8003888:	200004d4 	.word	0x200004d4
 800388c:	200003d0 	.word	0x200003d0
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038a2:	463a      	mov	r2, r7
 80038a4:	1d39      	adds	r1, r7, #4
 80038a6:	f107 0308 	add.w	r3, r7, #8
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fc fe7e 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	9202      	str	r2, [sp, #8]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	460a      	mov	r2, r1
 80038c2:	4921      	ldr	r1, [pc, #132]	@ (8003948 <vTaskStartScheduler+0xb4>)
 80038c4:	4821      	ldr	r0, [pc, #132]	@ (800394c <vTaskStartScheduler+0xb8>)
 80038c6:	f7ff fe35 	bl	8003534 <xTaskCreateStatic>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4a20      	ldr	r2, [pc, #128]	@ (8003950 <vTaskStartScheduler+0xbc>)
 80038ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <vTaskStartScheduler+0xbc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e001      	b.n	80038e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d11b      	bne.n	8003920 <vTaskStartScheduler+0x8c>
	__asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	613b      	str	r3, [r7, #16]
}
 80038fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038fc:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <vTaskStartScheduler+0xc0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	334c      	adds	r3, #76	@ 0x4c
 8003902:	4a15      	ldr	r2, [pc, #84]	@ (8003958 <vTaskStartScheduler+0xc4>)
 8003904:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003906:	4b15      	ldr	r3, [pc, #84]	@ (800395c <vTaskStartScheduler+0xc8>)
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <vTaskStartScheduler+0xcc>)
 8003910:	2201      	movs	r2, #1
 8003912:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <vTaskStartScheduler+0xd0>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800391a:	f000 fb59 	bl	8003fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800391e:	e00f      	b.n	8003940 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d10b      	bne.n	8003940 <vTaskStartScheduler+0xac>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60fb      	str	r3, [r7, #12]
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <vTaskStartScheduler+0xa8>
}
 8003940:	bf00      	nop
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	08005968 	.word	0x08005968
 800394c:	08003cfd 	.word	0x08003cfd
 8003950:	200004f0 	.word	0x200004f0
 8003954:	200003cc 	.word	0x200003cc
 8003958:	2000001c 	.word	0x2000001c
 800395c:	200004ec 	.word	0x200004ec
 8003960:	200004d8 	.word	0x200004d8
 8003964:	200004d0 	.word	0x200004d0

08003968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <vTaskSuspendAll+0x18>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a03      	ldr	r2, [pc, #12]	@ (8003980 <vTaskSuspendAll+0x18>)
 8003974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	200004f4 	.word	0x200004f4

08003984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003992:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <xTaskResumeAll+0x118>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	603b      	str	r3, [r7, #0]
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	e7fd      	b.n	80039ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039b2:	f000 fbb1 	bl	8004118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039b6:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	4a37      	ldr	r2, [pc, #220]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c0:	4b36      	ldr	r3, [pc, #216]	@ (8003a9c <xTaskResumeAll+0x118>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d161      	bne.n	8003a8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039c8:	4b35      	ldr	r3, [pc, #212]	@ (8003aa0 <xTaskResumeAll+0x11c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05d      	beq.n	8003a8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039d0:	e02e      	b.n	8003a30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d2:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <xTaskResumeAll+0x120>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3318      	adds	r3, #24
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fd7e 	bl	80034e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fd79 	bl	80034e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa8 <xTaskResumeAll+0x124>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <xTaskResumeAll+0x124>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <xTaskResumeAll+0x128>)
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fd3e 	bl	8003498 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a20:	4b23      	ldr	r3, [pc, #140]	@ (8003ab0 <xTaskResumeAll+0x12c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a30:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <xTaskResumeAll+0x120>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1cc      	bne.n	80039d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a3e:	f000 fa19 	bl	8003e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a42:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <xTaskResumeAll+0x134>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a4e:	f000 f837 	bl	8003ac0 <xTaskIncrementTick>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a58:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f1      	bne.n	8003a4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <xTaskResumeAll+0x134>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a70:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <xTaskResumeAll+0x130>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <xTaskResumeAll+0x138>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a8c:	f000 fb76 	bl	800417c <vPortExitCritical>

	return xAlreadyYielded;
 8003a90:	68bb      	ldr	r3, [r7, #8]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200004f4 	.word	0x200004f4
 8003aa0:	200004cc 	.word	0x200004cc
 8003aa4:	2000048c 	.word	0x2000048c
 8003aa8:	200004d4 	.word	0x200004d4
 8003aac:	200003d0 	.word	0x200003d0
 8003ab0:	200003cc 	.word	0x200003cc
 8003ab4:	200004e0 	.word	0x200004e0
 8003ab8:	200004dc 	.word	0x200004dc
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	4b4f      	ldr	r3, [pc, #316]	@ (8003c08 <xTaskIncrementTick+0x148>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 808f 	bne.w	8003bf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <xTaskIncrementTick+0x14c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003adc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c0c <xTaskIncrementTick+0x14c>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d121      	bne.n	8003b2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ae8:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	603b      	str	r3, [r7, #0]
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <xTaskIncrementTick+0x46>
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <xTaskIncrementTick+0x154>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3e      	ldr	r2, [pc, #248]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4a3e      	ldr	r2, [pc, #248]	@ (8003c14 <xTaskIncrementTick+0x154>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c18 <xTaskIncrementTick+0x158>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a3c      	ldr	r2, [pc, #240]	@ (8003c18 <xTaskIncrementTick+0x158>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	f000 f9a4 	bl	8003e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d348      	bcc.n	8003bc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b40:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	601a      	str	r2, [r3, #0]
					break;
 8003b48:	e03e      	b.n	8003bc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4a:	4b31      	ldr	r3, [pc, #196]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d203      	bcs.n	8003b6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b62:	4a2e      	ldr	r2, [pc, #184]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b68:	e02e      	b.n	8003bc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fcb6 	bl	80034e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fcad 	bl	80034e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <xTaskIncrementTick+0x160>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <xTaskIncrementTick+0x160>)
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c24 <xTaskIncrementTick+0x164>)
 8003ba6:	441a      	add	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f7ff fc72 	bl	8003498 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <xTaskIncrementTick+0x168>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3b9      	bcc.n	8003b36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc6:	e7b6      	b.n	8003b36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bc8:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <xTaskIncrementTick+0x168>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bce:	4915      	ldr	r1, [pc, #84]	@ (8003c24 <xTaskIncrementTick+0x164>)
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d901      	bls.n	8003be4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003be4:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <xTaskIncrementTick+0x16c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e004      	b.n	8003bfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <xTaskIncrementTick+0x170>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c30 <xTaskIncrementTick+0x170>)
 8003bfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bfc:	697b      	ldr	r3, [r7, #20]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200004f4 	.word	0x200004f4
 8003c0c:	200004d0 	.word	0x200004d0
 8003c10:	20000484 	.word	0x20000484
 8003c14:	20000488 	.word	0x20000488
 8003c18:	200004e4 	.word	0x200004e4
 8003c1c:	200004ec 	.word	0x200004ec
 8003c20:	200004d4 	.word	0x200004d4
 8003c24:	200003d0 	.word	0x200003d0
 8003c28:	200003cc 	.word	0x200003cc
 8003c2c:	200004e0 	.word	0x200004e0
 8003c30:	200004dc 	.word	0x200004dc

08003c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce4 <vTaskSwitchContext+0xb0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c42:	4b29      	ldr	r3, [pc, #164]	@ (8003ce8 <vTaskSwitchContext+0xb4>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c48:	e045      	b.n	8003cd6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <vTaskSwitchContext+0xb4>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b26      	ldr	r3, [pc, #152]	@ (8003cec <vTaskSwitchContext+0xb8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c5e:	7afb      	ldrb	r3, [r7, #11]
 8003c60:	f1c3 031f 	rsb	r3, r3, #31
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	4922      	ldr	r1, [pc, #136]	@ (8003cf0 <vTaskSwitchContext+0xbc>)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	607b      	str	r3, [r7, #4]
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <vTaskSwitchContext+0x5a>
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a14      	ldr	r2, [pc, #80]	@ (8003cf0 <vTaskSwitchContext+0xbc>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d104      	bne.n	8003cc2 <vTaskSwitchContext+0x8e>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <vTaskSwitchContext+0xc0>)
 8003cca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ccc:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <vTaskSwitchContext+0xc0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	334c      	adds	r3, #76	@ 0x4c
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <vTaskSwitchContext+0xc4>)
 8003cd4:	6013      	str	r3, [r2, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	200004f4 	.word	0x200004f4
 8003ce8:	200004e0 	.word	0x200004e0
 8003cec:	200004d4 	.word	0x200004d4
 8003cf0:	200003d0 	.word	0x200003d0
 8003cf4:	200003cc 	.word	0x200003cc
 8003cf8:	2000001c 	.word	0x2000001c

08003cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d04:	f000 f852 	bl	8003dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d08:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <prvIdleTask+0x28>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d9f9      	bls.n	8003d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <prvIdleTask+0x2c>)
 8003d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d20:	e7f0      	b.n	8003d04 <prvIdleTask+0x8>
 8003d22:	bf00      	nop
 8003d24:	200003d0 	.word	0x200003d0
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e00c      	b.n	8003d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a12      	ldr	r2, [pc, #72]	@ (8003d8c <prvInitialiseTaskLists+0x60>)
 8003d44:	4413      	add	r3, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff fb79 	bl	800343e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d9ef      	bls.n	8003d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d58:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d5a:	f7ff fb70 	bl	800343e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5e:	480d      	ldr	r0, [pc, #52]	@ (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d60:	f7ff fb6d 	bl	800343e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d64:	480c      	ldr	r0, [pc, #48]	@ (8003d98 <prvInitialiseTaskLists+0x6c>)
 8003d66:	f7ff fb6a 	bl	800343e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d6a:	480c      	ldr	r0, [pc, #48]	@ (8003d9c <prvInitialiseTaskLists+0x70>)
 8003d6c:	f7ff fb67 	bl	800343e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d70:	480b      	ldr	r0, [pc, #44]	@ (8003da0 <prvInitialiseTaskLists+0x74>)
 8003d72:	f7ff fb64 	bl	800343e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <prvInitialiseTaskLists+0x78>)
 8003d78:	4a05      	ldr	r2, [pc, #20]	@ (8003d90 <prvInitialiseTaskLists+0x64>)
 8003d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <prvInitialiseTaskLists+0x7c>)
 8003d7e:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <prvInitialiseTaskLists+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200003d0 	.word	0x200003d0
 8003d90:	2000045c 	.word	0x2000045c
 8003d94:	20000470 	.word	0x20000470
 8003d98:	2000048c 	.word	0x2000048c
 8003d9c:	200004a0 	.word	0x200004a0
 8003da0:	200004b8 	.word	0x200004b8
 8003da4:	20000484 	.word	0x20000484
 8003da8:	20000488 	.word	0x20000488

08003dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003db2:	e019      	b.n	8003de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db4:	f000 f9b0 	bl	8004118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <prvCheckTasksWaitingTermination+0x50>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fb8b 	bl	80034e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dca:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e00 <prvCheckTasksWaitingTermination+0x54>)
 8003dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dde:	f000 f9cd 	bl	800417c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f810 	bl	8003e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <prvCheckTasksWaitingTermination+0x58>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e1      	bne.n	8003db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200004a0 	.word	0x200004a0
 8003e00:	200004cc 	.word	0x200004cc
 8003e04:	200004b4 	.word	0x200004b4

08003e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	334c      	adds	r3, #76	@ 0x4c
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 ff6f 	bl	8004cf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb23 	bl	8004474 <vPortFree>
				vPortFree( pxTCB );
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fb20 	bl	8004474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e34:	e019      	b.n	8003e6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d103      	bne.n	8003e48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fb17 	bl	8004474 <vPortFree>
	}
 8003e46:	e010      	b.n	8003e6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d00b      	beq.n	8003e6a <prvDeleteTCB+0x62>
	__asm volatile
 8003e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60fb      	str	r3, [r7, #12]
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	e7fd      	b.n	8003e66 <prvDeleteTCB+0x5e>
	}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e84:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e86:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e8c:	e008      	b.n	8003ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8e:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <prvResetNextTaskUnblockTime+0x38>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000484 	.word	0x20000484
 8003eb0:	200004ec 	.word	0x200004ec

08003eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3b04      	subs	r3, #4
 8003ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <pxPortInitialiseStack+0x64>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3b14      	subs	r3, #20
 8003eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3b04      	subs	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f06f 0202 	mvn.w	r2, #2
 8003f02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3b20      	subs	r3, #32
 8003f08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	08003f1d 	.word	0x08003f1d

08003f1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f26:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <prvTaskExitError+0x58>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d00b      	beq.n	8003f48 <prvTaskExitError+0x2c>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <prvTaskExitError+0x28>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	60bb      	str	r3, [r7, #8]
}
 8003f5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f5c:	bf00      	nop
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0fc      	beq.n	8003f5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c
	...

08003f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <pxCurrentTCBConst2>)
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6808      	ldr	r0, [r1, #0]
 8003f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8a:	f380 8809 	msr	PSP, r0
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8811 	msr	BASEPRI, r0
 8003f9a:	4770      	bx	lr
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst2>:
 8003fa0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fa8:	4808      	ldr	r0, [pc, #32]	@ (8003fcc <prvPortStartFirstTask+0x24>)
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	6800      	ldr	r0, [r0, #0]
 8003fae:	f380 8808 	msr	MSP, r0
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8814 	msr	CONTROL, r0
 8003fba:	b662      	cpsie	i
 8003fbc:	b661      	cpsie	f
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	df00      	svc	0
 8003fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fca:	bf00      	nop
 8003fcc:	e000ed08 	.word	0xe000ed08

08003fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fd6:	4b47      	ldr	r3, [pc, #284]	@ (80040f4 <xPortStartScheduler+0x124>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a47      	ldr	r2, [pc, #284]	@ (80040f8 <xPortStartScheduler+0x128>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d10b      	bne.n	8003ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	60fb      	str	r3, [r7, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <xPortStartScheduler+0x124>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80040fc <xPortStartScheduler+0x12c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10b      	bne.n	800401a <xPortStartScheduler+0x4a>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	613b      	str	r3, [r7, #16]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800401a:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <xPortStartScheduler+0x130>)
 800401c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	22ff      	movs	r2, #255	@ 0xff
 800402a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <xPortStartScheduler+0x134>)
 8004040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004042:	4b31      	ldr	r3, [pc, #196]	@ (8004108 <xPortStartScheduler+0x138>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004048:	e009      	b.n	800405e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800404a:	4b2f      	ldr	r3, [pc, #188]	@ (8004108 <xPortStartScheduler+0x138>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	4a2d      	ldr	r2, [pc, #180]	@ (8004108 <xPortStartScheduler+0x138>)
 8004052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d0ef      	beq.n	800404a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800406a:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <xPortStartScheduler+0x138>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1c3 0307 	rsb	r3, r3, #7
 8004072:	2b04      	cmp	r3, #4
 8004074:	d00b      	beq.n	800408e <xPortStartScheduler+0xbe>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60bb      	str	r3, [r7, #8]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <xPortStartScheduler+0x138>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <xPortStartScheduler+0x138>)
 8004096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004098:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <xPortStartScheduler+0x138>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <xPortStartScheduler+0x138>)
 80040a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <xPortStartScheduler+0x13c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a16      	ldr	r2, [pc, #88]	@ (800410c <xPortStartScheduler+0x13c>)
 80040b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040b8:	4b14      	ldr	r3, [pc, #80]	@ (800410c <xPortStartScheduler+0x13c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a13      	ldr	r2, [pc, #76]	@ (800410c <xPortStartScheduler+0x13c>)
 80040be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040c4:	f000 f8da 	bl	800427c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <xPortStartScheduler+0x140>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040ce:	f000 f8f9 	bl	80042c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <xPortStartScheduler+0x144>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a0f      	ldr	r2, [pc, #60]	@ (8004114 <xPortStartScheduler+0x144>)
 80040d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80040dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040de:	f7ff ff63 	bl	8003fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040e2:	f7ff fda7 	bl	8003c34 <vTaskSwitchContext>
	prvTaskExitError();
 80040e6:	f7ff ff19 	bl	8003f1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	e000ed00 	.word	0xe000ed00
 80040f8:	410fc271 	.word	0x410fc271
 80040fc:	410fc270 	.word	0x410fc270
 8004100:	e000e400 	.word	0xe000e400
 8004104:	200004f8 	.word	0x200004f8
 8004108:	200004fc 	.word	0x200004fc
 800410c:	e000ed20 	.word	0xe000ed20
 8004110:	2000000c 	.word	0x2000000c
 8004114:	e000ef34 	.word	0xe000ef34

08004118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <vPortEnterCritical+0x5c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	4a0e      	ldr	r2, [pc, #56]	@ (8004174 <vPortEnterCritical+0x5c>)
 800413a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800413c:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <vPortEnterCritical+0x5c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <vPortEnterCritical+0x60>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <vPortEnterCritical+0x4e>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	603b      	str	r3, [r7, #0]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <vPortEnterCritical+0x4a>
	}
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000000c 	.word	0x2000000c
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <vPortExitCritical+0x50>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <vPortExitCritical+0x26>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	607b      	str	r3, [r7, #4]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <vPortExitCritical+0x50>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	4a08      	ldr	r2, [pc, #32]	@ (80041cc <vPortExitCritical+0x50>)
 80041aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <vPortExitCritical+0x50>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <vPortExitCritical+0x44>
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	2000000c 	.word	0x2000000c

080041d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041d0:	f3ef 8009 	mrs	r0, PSP
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <pxCurrentTCBConst>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f01e 0f10 	tst.w	lr, #16
 80041e0:	bf08      	it	eq
 80041e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	6010      	str	r0, [r2, #0]
 80041ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041f4:	f380 8811 	msr	BASEPRI, r0
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f7ff fd18 	bl	8003c34 <vTaskSwitchContext>
 8004204:	f04f 0000 	mov.w	r0, #0
 8004208:	f380 8811 	msr	BASEPRI, r0
 800420c:	bc09      	pop	{r0, r3}
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	6808      	ldr	r0, [r1, #0]
 8004212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004216:	f01e 0f10 	tst.w	lr, #16
 800421a:	bf08      	it	eq
 800421c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004220:	f380 8809 	msr	PSP, r0
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w

08004230 <pxCurrentTCBConst>:
 8004230:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop

08004238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	607b      	str	r3, [r7, #4]
}
 8004250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004252:	f7ff fc35 	bl	8003ac0 <xTaskIncrementTick>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800425c:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <SysTick_Handler+0x40>)
 800425e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f383 8811 	msr	BASEPRI, r3
}
 800426e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004280:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <vPortSetupTimerInterrupt+0x34>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004286:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <vPortSetupTimerInterrupt+0x38>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <vPortSetupTimerInterrupt+0x3c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	@ (80042bc <vPortSetupTimerInterrupt+0x40>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <vPortSetupTimerInterrupt+0x44>)
 800429a:	3b01      	subs	r3, #1
 800429c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800429e:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <vPortSetupTimerInterrupt+0x34>)
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e010 	.word	0xe000e010
 80042b4:	e000e018 	.word	0xe000e018
 80042b8:	20000000 	.word	0x20000000
 80042bc:	10624dd3 	.word	0x10624dd3
 80042c0:	e000e014 	.word	0xe000e014

080042c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80042d4 <vPortEnableVFP+0x10>
 80042c8:	6801      	ldr	r1, [r0, #0]
 80042ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80042ce:	6001      	str	r1, [r0, #0]
 80042d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042d2:	bf00      	nop
 80042d4:	e000ed88 	.word	0xe000ed88

080042d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042e4:	f7ff fb40 	bl	8003968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042e8:	4b5c      	ldr	r3, [pc, #368]	@ (800445c <pvPortMalloc+0x184>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042f0:	f000 f924 	bl	800453c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042f4:	4b5a      	ldr	r3, [pc, #360]	@ (8004460 <pvPortMalloc+0x188>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 8095 	bne.w	800442c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01e      	beq.n	8004346 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004308:	2208      	movs	r2, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	3308      	adds	r3, #8
 8004322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <pvPortMalloc+0x6e>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	617b      	str	r3, [r7, #20]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d06f      	beq.n	800442c <pvPortMalloc+0x154>
 800434c:	4b45      	ldr	r3, [pc, #276]	@ (8004464 <pvPortMalloc+0x18c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d86a      	bhi.n	800442c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004356:	4b44      	ldr	r3, [pc, #272]	@ (8004468 <pvPortMalloc+0x190>)
 8004358:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <pvPortMalloc+0x190>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004360:	e004      	b.n	800436c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d903      	bls.n	800437e <pvPortMalloc+0xa6>
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f1      	bne.n	8004362 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800437e:	4b37      	ldr	r3, [pc, #220]	@ (800445c <pvPortMalloc+0x184>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004384:	429a      	cmp	r2, r3
 8004386:	d051      	beq.n	800442c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2208      	movs	r2, #8
 800438e:	4413      	add	r3, r2
 8004390:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1ad2      	subs	r2, r2, r3
 80043a2:	2308      	movs	r3, #8
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d920      	bls.n	80043ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <pvPortMalloc+0xfc>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043e6:	69b8      	ldr	r0, [r7, #24]
 80043e8:	f000 f90a 	bl	8004600 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004464 <pvPortMalloc+0x18c>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <pvPortMalloc+0x18c>)
 80043f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <pvPortMalloc+0x18c>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <pvPortMalloc+0x194>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d203      	bcs.n	800440e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <pvPortMalloc+0x18c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <pvPortMalloc+0x194>)
 800440c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <pvPortMalloc+0x188>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	431a      	orrs	r2, r3
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800441c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004422:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <pvPortMalloc+0x198>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <pvPortMalloc+0x198>)
 800442a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800442c:	f7ff faaa 	bl	8003984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <pvPortMalloc+0x17a>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60fb      	str	r3, [r7, #12]
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	e7fd      	b.n	800444e <pvPortMalloc+0x176>
	return pvReturn;
 8004452:	69fb      	ldr	r3, [r7, #28]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3728      	adds	r7, #40	@ 0x28
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20004108 	.word	0x20004108
 8004460:	2000411c 	.word	0x2000411c
 8004464:	2000410c 	.word	0x2000410c
 8004468:	20004100 	.word	0x20004100
 800446c:	20004110 	.word	0x20004110
 8004470:	20004114 	.word	0x20004114

08004474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04f      	beq.n	8004526 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004486:	2308      	movs	r3, #8
 8004488:	425b      	negs	r3, r3
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <vPortFree+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4013      	ands	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <vPortFree+0x46>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	e7fd      	b.n	80044b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <vPortFree+0x66>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	4b14      	ldr	r3, [pc, #80]	@ (8004530 <vPortFree+0xbc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11a      	bne.n	8004526 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004530 <vPortFree+0xbc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004500:	f7ff fa32 	bl	8003968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <vPortFree+0xc0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4413      	add	r3, r2
 800450e:	4a09      	ldr	r2, [pc, #36]	@ (8004534 <vPortFree+0xc0>)
 8004510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004512:	6938      	ldr	r0, [r7, #16]
 8004514:	f000 f874 	bl	8004600 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <vPortFree+0xc4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a06      	ldr	r2, [pc, #24]	@ (8004538 <vPortFree+0xc4>)
 8004520:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004522:	f7ff fa2f 	bl	8003984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000411c 	.word	0x2000411c
 8004534:	2000410c 	.word	0x2000410c
 8004538:	20004118 	.word	0x20004118

0800453c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004542:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004546:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004548:	4b27      	ldr	r3, [pc, #156]	@ (80045e8 <prvHeapInit+0xac>)
 800454a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0307 	bic.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <prvHeapInit+0xac>)
 800456c:	4413      	add	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <prvHeapInit+0xb0>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800457a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ec <prvHeapInit+0xb0>)
 800457c:	2200      	movs	r2, #0
 800457e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <prvHeapInit+0xb4>)
 800459c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800459e:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <prvHeapInit+0xb4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <prvHeapInit+0xb4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <prvHeapInit+0xb4>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <prvHeapInit+0xb8>)
 80045ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a09      	ldr	r2, [pc, #36]	@ (80045f8 <prvHeapInit+0xbc>)
 80045d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <prvHeapInit+0xc0>)
 80045d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045da:	601a      	str	r2, [r3, #0]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	20000500 	.word	0x20000500
 80045ec:	20004100 	.word	0x20004100
 80045f0:	20004108 	.word	0x20004108
 80045f4:	20004110 	.word	0x20004110
 80045f8:	2000410c 	.word	0x2000410c
 80045fc:	2000411c 	.word	0x2000411c

08004600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <prvInsertBlockIntoFreeList+0xac>)
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e002      	b.n	8004614 <prvInsertBlockIntoFreeList+0x14>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d8f7      	bhi.n	800460e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4413      	add	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d108      	bne.n	8004642 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d118      	bne.n	8004688 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d00d      	beq.n	800467e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e008      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800467e:	4b0c      	ldr	r3, [pc, #48]	@ (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e003      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d002      	beq.n	800469e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20004100 	.word	0x20004100
 80046b0:	20004108 	.word	0x20004108

080046b4 <_fgets_r>:
 80046b4:	2a01      	cmp	r2, #1
 80046b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ba:	4681      	mov	r9, r0
 80046bc:	460e      	mov	r6, r1
 80046be:	4615      	mov	r5, r2
 80046c0:	461c      	mov	r4, r3
 80046c2:	dd21      	ble.n	8004708 <_fgets_r+0x54>
 80046c4:	b118      	cbz	r0, 80046ce <_fgets_r+0x1a>
 80046c6:	6a03      	ldr	r3, [r0, #32]
 80046c8:	b90b      	cbnz	r3, 80046ce <_fgets_r+0x1a>
 80046ca:	f000 f8ef 	bl	80048ac <__sinit>
 80046ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046d0:	07db      	lsls	r3, r3, #31
 80046d2:	d405      	bmi.n	80046e0 <_fgets_r+0x2c>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	059f      	lsls	r7, r3, #22
 80046d8:	d402      	bmi.n	80046e0 <_fgets_r+0x2c>
 80046da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046dc:	f000 fbcb 	bl	8004e76 <__retarget_lock_acquire_recursive>
 80046e0:	3d01      	subs	r5, #1
 80046e2:	4637      	mov	r7, r6
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	b99b      	cbnz	r3, 8004710 <_fgets_r+0x5c>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4648      	mov	r0, r9
 80046ec:	f000 f98e 	bl	8004a0c <__srefill_r>
 80046f0:	b168      	cbz	r0, 800470e <_fgets_r+0x5a>
 80046f2:	42b7      	cmp	r7, r6
 80046f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046f6:	d139      	bne.n	800476c <_fgets_r+0xb8>
 80046f8:	07d8      	lsls	r0, r3, #31
 80046fa:	d405      	bmi.n	8004708 <_fgets_r+0x54>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	0599      	lsls	r1, r3, #22
 8004700:	d402      	bmi.n	8004708 <_fgets_r+0x54>
 8004702:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004704:	f000 fbb8 	bl	8004e78 <__retarget_lock_release_recursive>
 8004708:	2000      	movs	r0, #0
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	f8d4 a000 	ldr.w	sl, [r4]
 8004714:	42ab      	cmp	r3, r5
 8004716:	bf28      	it	cs
 8004718:	462b      	movcs	r3, r5
 800471a:	461a      	mov	r2, r3
 800471c:	210a      	movs	r1, #10
 800471e:	4650      	mov	r0, sl
 8004720:	4698      	mov	r8, r3
 8004722:	f7fb fd55 	bl	80001d0 <memchr>
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	b188      	cbz	r0, 800474e <_fgets_r+0x9a>
 800472a:	3001      	adds	r0, #1
 800472c:	eba0 050a 	sub.w	r5, r0, sl
 8004730:	1b5b      	subs	r3, r3, r5
 8004732:	e9c4 0300 	strd	r0, r3, [r4]
 8004736:	462a      	mov	r2, r5
 8004738:	4651      	mov	r1, sl
 800473a:	4638      	mov	r0, r7
 800473c:	f000 fb9d 	bl	8004e7a <memcpy>
 8004740:	2300      	movs	r3, #0
 8004742:	557b      	strb	r3, [r7, r5]
 8004744:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004746:	07da      	lsls	r2, r3, #31
 8004748:	d513      	bpl.n	8004772 <_fgets_r+0xbe>
 800474a:	4630      	mov	r0, r6
 800474c:	e7dd      	b.n	800470a <_fgets_r+0x56>
 800474e:	eba3 0308 	sub.w	r3, r3, r8
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	4443      	add	r3, r8
 8004758:	4638      	mov	r0, r7
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	4642      	mov	r2, r8
 800475e:	4651      	mov	r1, sl
 8004760:	f000 fb8b 	bl	8004e7a <memcpy>
 8004764:	ebb5 0508 	subs.w	r5, r5, r8
 8004768:	4447      	add	r7, r8
 800476a:	d1bb      	bne.n	80046e4 <_fgets_r+0x30>
 800476c:	2300      	movs	r3, #0
 800476e:	703b      	strb	r3, [r7, #0]
 8004770:	e7e8      	b.n	8004744 <_fgets_r+0x90>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	059b      	lsls	r3, r3, #22
 8004776:	d4e8      	bmi.n	800474a <_fgets_r+0x96>
 8004778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800477a:	f000 fb7d 	bl	8004e78 <__retarget_lock_release_recursive>
 800477e:	e7e4      	b.n	800474a <_fgets_r+0x96>

08004780 <fgets>:
 8004780:	4613      	mov	r3, r2
 8004782:	460a      	mov	r2, r1
 8004784:	4601      	mov	r1, r0
 8004786:	4802      	ldr	r0, [pc, #8]	@ (8004790 <fgets+0x10>)
 8004788:	6800      	ldr	r0, [r0, #0]
 800478a:	f7ff bf93 	b.w	80046b4 <_fgets_r>
 800478e:	bf00      	nop
 8004790:	2000001c 	.word	0x2000001c

08004794 <std>:
 8004794:	2300      	movs	r3, #0
 8004796:	b510      	push	{r4, lr}
 8004798:	4604      	mov	r4, r0
 800479a:	e9c0 3300 	strd	r3, r3, [r0]
 800479e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047a2:	6083      	str	r3, [r0, #8]
 80047a4:	8181      	strh	r1, [r0, #12]
 80047a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80047a8:	81c2      	strh	r2, [r0, #14]
 80047aa:	6183      	str	r3, [r0, #24]
 80047ac:	4619      	mov	r1, r3
 80047ae:	2208      	movs	r2, #8
 80047b0:	305c      	adds	r0, #92	@ 0x5c
 80047b2:	f000 fa77 	bl	8004ca4 <memset>
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <std+0x58>)
 80047b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <std+0x5c>)
 80047bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <std+0x60>)
 80047c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <std+0x64>)
 80047c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <std+0x68>)
 80047c8:	6224      	str	r4, [r4, #32]
 80047ca:	429c      	cmp	r4, r3
 80047cc:	d006      	beq.n	80047dc <std+0x48>
 80047ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047d2:	4294      	cmp	r4, r2
 80047d4:	d002      	beq.n	80047dc <std+0x48>
 80047d6:	33d0      	adds	r3, #208	@ 0xd0
 80047d8:	429c      	cmp	r4, r3
 80047da:	d105      	bne.n	80047e8 <std+0x54>
 80047dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e4:	f000 bb46 	b.w	8004e74 <__retarget_lock_init_recursive>
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	bf00      	nop
 80047ec:	08004af5 	.word	0x08004af5
 80047f0:	08004b17 	.word	0x08004b17
 80047f4:	08004b4f 	.word	0x08004b4f
 80047f8:	08004b73 	.word	0x08004b73
 80047fc:	20004120 	.word	0x20004120

08004800 <stdio_exit_handler>:
 8004800:	4a02      	ldr	r2, [pc, #8]	@ (800480c <stdio_exit_handler+0xc>)
 8004802:	4903      	ldr	r1, [pc, #12]	@ (8004810 <stdio_exit_handler+0x10>)
 8004804:	4803      	ldr	r0, [pc, #12]	@ (8004814 <stdio_exit_handler+0x14>)
 8004806:	f000 b87b 	b.w	8004900 <_fwalk_sglue>
 800480a:	bf00      	nop
 800480c:	20000010 	.word	0x20000010
 8004810:	0800572d 	.word	0x0800572d
 8004814:	20000020 	.word	0x20000020

08004818 <cleanup_stdio>:
 8004818:	6841      	ldr	r1, [r0, #4]
 800481a:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <cleanup_stdio+0x34>)
 800481c:	4299      	cmp	r1, r3
 800481e:	b510      	push	{r4, lr}
 8004820:	4604      	mov	r4, r0
 8004822:	d001      	beq.n	8004828 <cleanup_stdio+0x10>
 8004824:	f000 ff82 	bl	800572c <_fflush_r>
 8004828:	68a1      	ldr	r1, [r4, #8]
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <cleanup_stdio+0x38>)
 800482c:	4299      	cmp	r1, r3
 800482e:	d002      	beq.n	8004836 <cleanup_stdio+0x1e>
 8004830:	4620      	mov	r0, r4
 8004832:	f000 ff7b 	bl	800572c <_fflush_r>
 8004836:	68e1      	ldr	r1, [r4, #12]
 8004838:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <cleanup_stdio+0x3c>)
 800483a:	4299      	cmp	r1, r3
 800483c:	d004      	beq.n	8004848 <cleanup_stdio+0x30>
 800483e:	4620      	mov	r0, r4
 8004840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004844:	f000 bf72 	b.w	800572c <_fflush_r>
 8004848:	bd10      	pop	{r4, pc}
 800484a:	bf00      	nop
 800484c:	20004120 	.word	0x20004120
 8004850:	20004188 	.word	0x20004188
 8004854:	200041f0 	.word	0x200041f0

08004858 <global_stdio_init.part.0>:
 8004858:	b510      	push	{r4, lr}
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <global_stdio_init.part.0+0x30>)
 800485c:	4c0b      	ldr	r4, [pc, #44]	@ (800488c <global_stdio_init.part.0+0x34>)
 800485e:	4a0c      	ldr	r2, [pc, #48]	@ (8004890 <global_stdio_init.part.0+0x38>)
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	4620      	mov	r0, r4
 8004864:	2200      	movs	r2, #0
 8004866:	2104      	movs	r1, #4
 8004868:	f7ff ff94 	bl	8004794 <std>
 800486c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004870:	2201      	movs	r2, #1
 8004872:	2109      	movs	r1, #9
 8004874:	f7ff ff8e 	bl	8004794 <std>
 8004878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800487c:	2202      	movs	r2, #2
 800487e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004882:	2112      	movs	r1, #18
 8004884:	f7ff bf86 	b.w	8004794 <std>
 8004888:	20004258 	.word	0x20004258
 800488c:	20004120 	.word	0x20004120
 8004890:	08004801 	.word	0x08004801

08004894 <__sfp_lock_acquire>:
 8004894:	4801      	ldr	r0, [pc, #4]	@ (800489c <__sfp_lock_acquire+0x8>)
 8004896:	f000 baee 	b.w	8004e76 <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	20004261 	.word	0x20004261

080048a0 <__sfp_lock_release>:
 80048a0:	4801      	ldr	r0, [pc, #4]	@ (80048a8 <__sfp_lock_release+0x8>)
 80048a2:	f000 bae9 	b.w	8004e78 <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	20004261 	.word	0x20004261

080048ac <__sinit>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
 80048b0:	f7ff fff0 	bl	8004894 <__sfp_lock_acquire>
 80048b4:	6a23      	ldr	r3, [r4, #32]
 80048b6:	b11b      	cbz	r3, 80048c0 <__sinit+0x14>
 80048b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048bc:	f7ff bff0 	b.w	80048a0 <__sfp_lock_release>
 80048c0:	4b04      	ldr	r3, [pc, #16]	@ (80048d4 <__sinit+0x28>)
 80048c2:	6223      	str	r3, [r4, #32]
 80048c4:	4b04      	ldr	r3, [pc, #16]	@ (80048d8 <__sinit+0x2c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f5      	bne.n	80048b8 <__sinit+0xc>
 80048cc:	f7ff ffc4 	bl	8004858 <global_stdio_init.part.0>
 80048d0:	e7f2      	b.n	80048b8 <__sinit+0xc>
 80048d2:	bf00      	nop
 80048d4:	08004819 	.word	0x08004819
 80048d8:	20004258 	.word	0x20004258

080048dc <fiprintf>:
 80048dc:	b40e      	push	{r1, r2, r3}
 80048de:	b503      	push	{r0, r1, lr}
 80048e0:	4601      	mov	r1, r0
 80048e2:	ab03      	add	r3, sp, #12
 80048e4:	4805      	ldr	r0, [pc, #20]	@ (80048fc <fiprintf+0x20>)
 80048e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	f000 fbf5 	bl	80050dc <_vfiprintf_r>
 80048f2:	b002      	add	sp, #8
 80048f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f8:	b003      	add	sp, #12
 80048fa:	4770      	bx	lr
 80048fc:	2000001c 	.word	0x2000001c

08004900 <_fwalk_sglue>:
 8004900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004904:	4607      	mov	r7, r0
 8004906:	4688      	mov	r8, r1
 8004908:	4614      	mov	r4, r2
 800490a:	2600      	movs	r6, #0
 800490c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004910:	f1b9 0901 	subs.w	r9, r9, #1
 8004914:	d505      	bpl.n	8004922 <_fwalk_sglue+0x22>
 8004916:	6824      	ldr	r4, [r4, #0]
 8004918:	2c00      	cmp	r4, #0
 800491a:	d1f7      	bne.n	800490c <_fwalk_sglue+0xc>
 800491c:	4630      	mov	r0, r6
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d907      	bls.n	8004938 <_fwalk_sglue+0x38>
 8004928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800492c:	3301      	adds	r3, #1
 800492e:	d003      	beq.n	8004938 <_fwalk_sglue+0x38>
 8004930:	4629      	mov	r1, r5
 8004932:	4638      	mov	r0, r7
 8004934:	47c0      	blx	r8
 8004936:	4306      	orrs	r6, r0
 8004938:	3568      	adds	r5, #104	@ 0x68
 800493a:	e7e9      	b.n	8004910 <_fwalk_sglue+0x10>

0800493c <_fwrite_r>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	9c08      	ldr	r4, [sp, #32]
 8004942:	468a      	mov	sl, r1
 8004944:	4690      	mov	r8, r2
 8004946:	fb02 f903 	mul.w	r9, r2, r3
 800494a:	4606      	mov	r6, r0
 800494c:	b118      	cbz	r0, 8004956 <_fwrite_r+0x1a>
 800494e:	6a03      	ldr	r3, [r0, #32]
 8004950:	b90b      	cbnz	r3, 8004956 <_fwrite_r+0x1a>
 8004952:	f7ff ffab 	bl	80048ac <__sinit>
 8004956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004958:	07dd      	lsls	r5, r3, #31
 800495a:	d405      	bmi.n	8004968 <_fwrite_r+0x2c>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	0598      	lsls	r0, r3, #22
 8004960:	d402      	bmi.n	8004968 <_fwrite_r+0x2c>
 8004962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004964:	f000 fa87 	bl	8004e76 <__retarget_lock_acquire_recursive>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	0719      	lsls	r1, r3, #28
 800496c:	d516      	bpl.n	800499c <_fwrite_r+0x60>
 800496e:	6923      	ldr	r3, [r4, #16]
 8004970:	b1a3      	cbz	r3, 800499c <_fwrite_r+0x60>
 8004972:	2500      	movs	r5, #0
 8004974:	454d      	cmp	r5, r9
 8004976:	d01f      	beq.n	80049b8 <_fwrite_r+0x7c>
 8004978:	68a7      	ldr	r7, [r4, #8]
 800497a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800497e:	3f01      	subs	r7, #1
 8004980:	2f00      	cmp	r7, #0
 8004982:	60a7      	str	r7, [r4, #8]
 8004984:	da04      	bge.n	8004990 <_fwrite_r+0x54>
 8004986:	69a3      	ldr	r3, [r4, #24]
 8004988:	429f      	cmp	r7, r3
 800498a:	db0f      	blt.n	80049ac <_fwrite_r+0x70>
 800498c:	290a      	cmp	r1, #10
 800498e:	d00d      	beq.n	80049ac <_fwrite_r+0x70>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	6022      	str	r2, [r4, #0]
 8004996:	7019      	strb	r1, [r3, #0]
 8004998:	3501      	adds	r5, #1
 800499a:	e7eb      	b.n	8004974 <_fwrite_r+0x38>
 800499c:	4621      	mov	r1, r4
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 f92a 	bl	8004bf8 <__swsetup_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d0e4      	beq.n	8004972 <_fwrite_r+0x36>
 80049a8:	2500      	movs	r5, #0
 80049aa:	e005      	b.n	80049b8 <_fwrite_r+0x7c>
 80049ac:	4622      	mov	r2, r4
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 f8e3 	bl	8004b7a <__swbuf_r>
 80049b4:	3001      	adds	r0, #1
 80049b6:	d1ef      	bne.n	8004998 <_fwrite_r+0x5c>
 80049b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ba:	07da      	lsls	r2, r3, #31
 80049bc:	d405      	bmi.n	80049ca <_fwrite_r+0x8e>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	059b      	lsls	r3, r3, #22
 80049c2:	d402      	bmi.n	80049ca <_fwrite_r+0x8e>
 80049c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049c6:	f000 fa57 	bl	8004e78 <__retarget_lock_release_recursive>
 80049ca:	fbb5 f0f8 	udiv	r0, r5, r8
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080049d4 <fwrite>:
 80049d4:	b507      	push	{r0, r1, r2, lr}
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	460a      	mov	r2, r1
 80049dc:	4601      	mov	r1, r0
 80049de:	4803      	ldr	r0, [pc, #12]	@ (80049ec <fwrite+0x18>)
 80049e0:	6800      	ldr	r0, [r0, #0]
 80049e2:	f7ff ffab 	bl	800493c <_fwrite_r>
 80049e6:	b003      	add	sp, #12
 80049e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ec:	2000001c 	.word	0x2000001c

080049f0 <lflush>:
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	f003 0309 	and.w	r3, r3, #9
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	d103      	bne.n	8004a02 <lflush+0x12>
 80049fa:	4b03      	ldr	r3, [pc, #12]	@ (8004a08 <lflush+0x18>)
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	f000 be95 	b.w	800572c <_fflush_r>
 8004a02:	2000      	movs	r0, #0
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000001c 	.word	0x2000001c

08004a0c <__srefill_r>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	460c      	mov	r4, r1
 8004a10:	4605      	mov	r5, r0
 8004a12:	b118      	cbz	r0, 8004a1c <__srefill_r+0x10>
 8004a14:	6a03      	ldr	r3, [r0, #32]
 8004a16:	b90b      	cbnz	r3, 8004a1c <__srefill_r+0x10>
 8004a18:	f7ff ff48 	bl	80048ac <__sinit>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6063      	str	r3, [r4, #4]
 8004a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a24:	069e      	lsls	r6, r3, #26
 8004a26:	d408      	bmi.n	8004a3a <__srefill_r+0x2e>
 8004a28:	0758      	lsls	r0, r3, #29
 8004a2a:	d445      	bmi.n	8004ab8 <__srefill_r+0xac>
 8004a2c:	06d9      	lsls	r1, r3, #27
 8004a2e:	d407      	bmi.n	8004a40 <__srefill_r+0x34>
 8004a30:	2209      	movs	r2, #9
 8004a32:	602a      	str	r2, [r5, #0]
 8004a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	071a      	lsls	r2, r3, #28
 8004a42:	d50b      	bpl.n	8004a5c <__srefill_r+0x50>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4628      	mov	r0, r5
 8004a48:	f000 fe70 	bl	800572c <_fflush_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d1f4      	bne.n	8004a3a <__srefill_r+0x2e>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	60a0      	str	r0, [r4, #8]
 8004a54:	f023 0308 	bic.w	r3, r3, #8
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	61a0      	str	r0, [r4, #24]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f043 0304 	orr.w	r3, r3, #4
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	b91b      	cbnz	r3, 8004a70 <__srefill_r+0x64>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 feac 	bl	80057c8 <__smakebuf_r>
 8004a70:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004a74:	07b3      	lsls	r3, r6, #30
 8004a76:	d00f      	beq.n	8004a98 <__srefill_r+0x8c>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae8 <__srefill_r+0xdc>)
 8004a7c:	491b      	ldr	r1, [pc, #108]	@ (8004aec <__srefill_r+0xe0>)
 8004a7e:	481c      	ldr	r0, [pc, #112]	@ (8004af0 <__srefill_r+0xe4>)
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	f7ff ff3d 	bl	8004900 <_fwalk_sglue>
 8004a86:	81a6      	strh	r6, [r4, #12]
 8004a88:	f006 0609 	and.w	r6, r6, #9
 8004a8c:	2e09      	cmp	r6, #9
 8004a8e:	d103      	bne.n	8004a98 <__srefill_r+0x8c>
 8004a90:	4621      	mov	r1, r4
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 fdc6 	bl	8005624 <__sflush_r>
 8004a98:	6922      	ldr	r2, [r4, #16]
 8004a9a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004a9c:	6963      	ldr	r3, [r4, #20]
 8004a9e:	6a21      	ldr	r1, [r4, #32]
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b0      	blx	r6
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	6060      	str	r0, [r4, #4]
 8004aaa:	dc17      	bgt.n	8004adc <__srefill_r+0xd0>
 8004aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab0:	d116      	bne.n	8004ae0 <__srefill_r+0xd4>
 8004ab2:	f043 0320 	orr.w	r3, r3, #32
 8004ab6:	e7bf      	b.n	8004a38 <__srefill_r+0x2c>
 8004ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aba:	2900      	cmp	r1, #0
 8004abc:	d0d2      	beq.n	8004a64 <__srefill_r+0x58>
 8004abe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d002      	beq.n	8004acc <__srefill_r+0xc0>
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f9e6 	bl	8004e98 <_free_r>
 8004acc:	2300      	movs	r3, #0
 8004ace:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0c5      	beq.n	8004a64 <__srefill_r+0x58>
 8004ad8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	2000      	movs	r0, #0
 8004ade:	e7ae      	b.n	8004a3e <__srefill_r+0x32>
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	6062      	str	r2, [r4, #4]
 8004ae4:	e7a6      	b.n	8004a34 <__srefill_r+0x28>
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	080049f1 	.word	0x080049f1
 8004af0:	20000020 	.word	0x20000020

08004af4 <__sread>:
 8004af4:	b510      	push	{r4, lr}
 8004af6:	460c      	mov	r4, r1
 8004af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afc:	f000 f96c 	bl	8004dd8 <_read_r>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	bfab      	itete	ge
 8004b04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b06:	89a3      	ldrhlt	r3, [r4, #12]
 8004b08:	181b      	addge	r3, r3, r0
 8004b0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b0e:	bfac      	ite	ge
 8004b10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b12:	81a3      	strhlt	r3, [r4, #12]
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <__swrite>:
 8004b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1a:	461f      	mov	r7, r3
 8004b1c:	898b      	ldrh	r3, [r1, #12]
 8004b1e:	05db      	lsls	r3, r3, #23
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	4616      	mov	r6, r2
 8004b26:	d505      	bpl.n	8004b34 <__swrite+0x1e>
 8004b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f000 f940 	bl	8004db4 <_lseek_r>
 8004b34:	89a3      	ldrh	r3, [r4, #12]
 8004b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b3e:	81a3      	strh	r3, [r4, #12]
 8004b40:	4632      	mov	r2, r6
 8004b42:	463b      	mov	r3, r7
 8004b44:	4628      	mov	r0, r5
 8004b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b4a:	f000 b957 	b.w	8004dfc <_write_r>

08004b4e <__sseek>:
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	460c      	mov	r4, r1
 8004b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b56:	f000 f92d 	bl	8004db4 <_lseek_r>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	bf15      	itete	ne
 8004b60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b6a:	81a3      	strheq	r3, [r4, #12]
 8004b6c:	bf18      	it	ne
 8004b6e:	81a3      	strhne	r3, [r4, #12]
 8004b70:	bd10      	pop	{r4, pc}

08004b72 <__sclose>:
 8004b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b76:	f000 b8af 	b.w	8004cd8 <_close_r>

08004b7a <__swbuf_r>:
 8004b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7c:	460e      	mov	r6, r1
 8004b7e:	4614      	mov	r4, r2
 8004b80:	4605      	mov	r5, r0
 8004b82:	b118      	cbz	r0, 8004b8c <__swbuf_r+0x12>
 8004b84:	6a03      	ldr	r3, [r0, #32]
 8004b86:	b90b      	cbnz	r3, 8004b8c <__swbuf_r+0x12>
 8004b88:	f7ff fe90 	bl	80048ac <__sinit>
 8004b8c:	69a3      	ldr	r3, [r4, #24]
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	071a      	lsls	r2, r3, #28
 8004b94:	d501      	bpl.n	8004b9a <__swbuf_r+0x20>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	b943      	cbnz	r3, 8004bac <__swbuf_r+0x32>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 f82b 	bl	8004bf8 <__swsetup_r>
 8004ba2:	b118      	cbz	r0, 8004bac <__swbuf_r+0x32>
 8004ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba8:	4638      	mov	r0, r7
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	6922      	ldr	r2, [r4, #16]
 8004bb0:	1a98      	subs	r0, r3, r2
 8004bb2:	6963      	ldr	r3, [r4, #20]
 8004bb4:	b2f6      	uxtb	r6, r6
 8004bb6:	4283      	cmp	r3, r0
 8004bb8:	4637      	mov	r7, r6
 8004bba:	dc05      	bgt.n	8004bc8 <__swbuf_r+0x4e>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 fdb4 	bl	800572c <_fflush_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d1ed      	bne.n	8004ba4 <__swbuf_r+0x2a>
 8004bc8:	68a3      	ldr	r3, [r4, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60a3      	str	r3, [r4, #8]
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	701e      	strb	r6, [r3, #0]
 8004bd6:	6962      	ldr	r2, [r4, #20]
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d004      	beq.n	8004be8 <__swbuf_r+0x6e>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	07db      	lsls	r3, r3, #31
 8004be2:	d5e1      	bpl.n	8004ba8 <__swbuf_r+0x2e>
 8004be4:	2e0a      	cmp	r6, #10
 8004be6:	d1df      	bne.n	8004ba8 <__swbuf_r+0x2e>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4628      	mov	r0, r5
 8004bec:	f000 fd9e 	bl	800572c <_fflush_r>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d0d9      	beq.n	8004ba8 <__swbuf_r+0x2e>
 8004bf4:	e7d6      	b.n	8004ba4 <__swbuf_r+0x2a>
	...

08004bf8 <__swsetup_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4b29      	ldr	r3, [pc, #164]	@ (8004ca0 <__swsetup_r+0xa8>)
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	460c      	mov	r4, r1
 8004c02:	b118      	cbz	r0, 8004c0c <__swsetup_r+0x14>
 8004c04:	6a03      	ldr	r3, [r0, #32]
 8004c06:	b90b      	cbnz	r3, 8004c0c <__swsetup_r+0x14>
 8004c08:	f7ff fe50 	bl	80048ac <__sinit>
 8004c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c10:	0719      	lsls	r1, r3, #28
 8004c12:	d422      	bmi.n	8004c5a <__swsetup_r+0x62>
 8004c14:	06da      	lsls	r2, r3, #27
 8004c16:	d407      	bmi.n	8004c28 <__swsetup_r+0x30>
 8004c18:	2209      	movs	r2, #9
 8004c1a:	602a      	str	r2, [r5, #0]
 8004c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
 8004c26:	e033      	b.n	8004c90 <__swsetup_r+0x98>
 8004c28:	0758      	lsls	r0, r3, #29
 8004c2a:	d512      	bpl.n	8004c52 <__swsetup_r+0x5a>
 8004c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c2e:	b141      	cbz	r1, 8004c42 <__swsetup_r+0x4a>
 8004c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__swsetup_r+0x46>
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f92d 	bl	8004e98 <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <__swsetup_r+0x7a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c68:	d003      	beq.n	8004c72 <__swsetup_r+0x7a>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 fdab 	bl	80057c8 <__smakebuf_r>
 8004c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c76:	f013 0201 	ands.w	r2, r3, #1
 8004c7a:	d00a      	beq.n	8004c92 <__swsetup_r+0x9a>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	60a2      	str	r2, [r4, #8]
 8004c80:	6962      	ldr	r2, [r4, #20]
 8004c82:	4252      	negs	r2, r2
 8004c84:	61a2      	str	r2, [r4, #24]
 8004c86:	6922      	ldr	r2, [r4, #16]
 8004c88:	b942      	cbnz	r2, 8004c9c <__swsetup_r+0xa4>
 8004c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c8e:	d1c5      	bne.n	8004c1c <__swsetup_r+0x24>
 8004c90:	bd38      	pop	{r3, r4, r5, pc}
 8004c92:	0799      	lsls	r1, r3, #30
 8004c94:	bf58      	it	pl
 8004c96:	6962      	ldrpl	r2, [r4, #20]
 8004c98:	60a2      	str	r2, [r4, #8]
 8004c9a:	e7f4      	b.n	8004c86 <__swsetup_r+0x8e>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e7f7      	b.n	8004c90 <__swsetup_r+0x98>
 8004ca0:	2000001c 	.word	0x2000001c

08004ca4 <memset>:
 8004ca4:	4402      	add	r2, r0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <strcspn>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461e      	mov	r6, r3
 8004cba:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004cbe:	b144      	cbz	r4, 8004cd2 <strcspn+0x1e>
 8004cc0:	1e4a      	subs	r2, r1, #1
 8004cc2:	e001      	b.n	8004cc8 <strcspn+0x14>
 8004cc4:	42a5      	cmp	r5, r4
 8004cc6:	d004      	beq.n	8004cd2 <strcspn+0x1e>
 8004cc8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	d1f9      	bne.n	8004cc4 <strcspn+0x10>
 8004cd0:	e7f2      	b.n	8004cb8 <strcspn+0x4>
 8004cd2:	1a30      	subs	r0, r6, r0
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cd8 <_close_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d06      	ldr	r5, [pc, #24]	@ (8004cf4 <_close_r+0x1c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fb ff74 	bl	8000bd0 <_close>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_close_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_close_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	2000425c 	.word	0x2000425c

08004cf8 <_reclaim_reent>:
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <_reclaim_reent+0xb8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4283      	cmp	r3, r0
 8004cfe:	b570      	push	{r4, r5, r6, lr}
 8004d00:	4604      	mov	r4, r0
 8004d02:	d053      	beq.n	8004dac <_reclaim_reent+0xb4>
 8004d04:	69c3      	ldr	r3, [r0, #28]
 8004d06:	b31b      	cbz	r3, 8004d50 <_reclaim_reent+0x58>
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	b163      	cbz	r3, 8004d26 <_reclaim_reent+0x2e>
 8004d0c:	2500      	movs	r5, #0
 8004d0e:	69e3      	ldr	r3, [r4, #28]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	5959      	ldr	r1, [r3, r5]
 8004d14:	b9b1      	cbnz	r1, 8004d44 <_reclaim_reent+0x4c>
 8004d16:	3504      	adds	r5, #4
 8004d18:	2d80      	cmp	r5, #128	@ 0x80
 8004d1a:	d1f8      	bne.n	8004d0e <_reclaim_reent+0x16>
 8004d1c:	69e3      	ldr	r3, [r4, #28]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	68d9      	ldr	r1, [r3, #12]
 8004d22:	f000 f8b9 	bl	8004e98 <_free_r>
 8004d26:	69e3      	ldr	r3, [r4, #28]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	b111      	cbz	r1, 8004d32 <_reclaim_reent+0x3a>
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 f8b3 	bl	8004e98 <_free_r>
 8004d32:	69e3      	ldr	r3, [r4, #28]
 8004d34:	689d      	ldr	r5, [r3, #8]
 8004d36:	b15d      	cbz	r5, 8004d50 <_reclaim_reent+0x58>
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	682d      	ldr	r5, [r5, #0]
 8004d3e:	f000 f8ab 	bl	8004e98 <_free_r>
 8004d42:	e7f8      	b.n	8004d36 <_reclaim_reent+0x3e>
 8004d44:	680e      	ldr	r6, [r1, #0]
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 f8a6 	bl	8004e98 <_free_r>
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	e7e1      	b.n	8004d14 <_reclaim_reent+0x1c>
 8004d50:	6961      	ldr	r1, [r4, #20]
 8004d52:	b111      	cbz	r1, 8004d5a <_reclaim_reent+0x62>
 8004d54:	4620      	mov	r0, r4
 8004d56:	f000 f89f 	bl	8004e98 <_free_r>
 8004d5a:	69e1      	ldr	r1, [r4, #28]
 8004d5c:	b111      	cbz	r1, 8004d64 <_reclaim_reent+0x6c>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 f89a 	bl	8004e98 <_free_r>
 8004d64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d66:	b111      	cbz	r1, 8004d6e <_reclaim_reent+0x76>
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 f895 	bl	8004e98 <_free_r>
 8004d6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d70:	b111      	cbz	r1, 8004d78 <_reclaim_reent+0x80>
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f890 	bl	8004e98 <_free_r>
 8004d78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004d7a:	b111      	cbz	r1, 8004d82 <_reclaim_reent+0x8a>
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 f88b 	bl	8004e98 <_free_r>
 8004d82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004d84:	b111      	cbz	r1, 8004d8c <_reclaim_reent+0x94>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f886 	bl	8004e98 <_free_r>
 8004d8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004d8e:	b111      	cbz	r1, 8004d96 <_reclaim_reent+0x9e>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 f881 	bl	8004e98 <_free_r>
 8004d96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004d98:	b111      	cbz	r1, 8004da0 <_reclaim_reent+0xa8>
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 f87c 	bl	8004e98 <_free_r>
 8004da0:	6a23      	ldr	r3, [r4, #32]
 8004da2:	b11b      	cbz	r3, 8004dac <_reclaim_reent+0xb4>
 8004da4:	4620      	mov	r0, r4
 8004da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004daa:	4718      	bx	r3
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	bf00      	nop
 8004db0:	2000001c 	.word	0x2000001c

08004db4 <_lseek_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d07      	ldr	r5, [pc, #28]	@ (8004dd4 <_lseek_r+0x20>)
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fb ff2b 	bl	8000c1e <_lseek>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_lseek_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_lseek_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	2000425c 	.word	0x2000425c

08004dd8 <_read_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d07      	ldr	r5, [pc, #28]	@ (8004df8 <_read_r+0x20>)
 8004ddc:	4604      	mov	r4, r0
 8004dde:	4608      	mov	r0, r1
 8004de0:	4611      	mov	r1, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	602a      	str	r2, [r5, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7fb fc4a 	bl	8000680 <_read>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_read_r+0x1e>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_read_r+0x1e>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	2000425c 	.word	0x2000425c

08004dfc <_write_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	@ (8004e1c <_write_r+0x20>)
 8004e00:	4604      	mov	r4, r0
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fb fbe8 	bl	80005e0 <_write>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_write_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_write_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	2000425c 	.word	0x2000425c

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	@ (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	2000001c 	.word	0x2000001c

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 fd30 	bl	80058a4 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080059c4 	.word	0x080059c4
 8004e68:	080059c4 	.word	0x080059c4
 8004e6c:	080059c4 	.word	0x080059c4
 8004e70:	080059c8 	.word	0x080059c8

08004e74 <__retarget_lock_init_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <__retarget_lock_acquire_recursive>:
 8004e76:	4770      	bx	lr

08004e78 <__retarget_lock_release_recursive>:
 8004e78:	4770      	bx	lr

08004e7a <memcpy>:
 8004e7a:	440a      	add	r2, r1
 8004e7c:	4291      	cmp	r1, r2
 8004e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e82:	d100      	bne.n	8004e86 <memcpy+0xc>
 8004e84:	4770      	bx	lr
 8004e86:	b510      	push	{r4, lr}
 8004e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e90:	4291      	cmp	r1, r2
 8004e92:	d1f9      	bne.n	8004e88 <memcpy+0xe>
 8004e94:	bd10      	pop	{r4, pc}
	...

08004e98 <_free_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	2900      	cmp	r1, #0
 8004e9e:	d041      	beq.n	8004f24 <_free_r+0x8c>
 8004ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea4:	1f0c      	subs	r4, r1, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfb8      	it	lt
 8004eaa:	18e4      	addlt	r4, r4, r3
 8004eac:	f000 f8e0 	bl	8005070 <__malloc_lock>
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f28 <_free_r+0x90>)
 8004eb2:	6813      	ldr	r3, [r2, #0]
 8004eb4:	b933      	cbnz	r3, 8004ec4 <_free_r+0x2c>
 8004eb6:	6063      	str	r3, [r4, #4]
 8004eb8:	6014      	str	r4, [r2, #0]
 8004eba:	4628      	mov	r0, r5
 8004ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec0:	f000 b8dc 	b.w	800507c <__malloc_unlock>
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	d908      	bls.n	8004eda <_free_r+0x42>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	1821      	adds	r1, r4, r0
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	bf01      	itttt	eq
 8004ed0:	6819      	ldreq	r1, [r3, #0]
 8004ed2:	685b      	ldreq	r3, [r3, #4]
 8004ed4:	1809      	addeq	r1, r1, r0
 8004ed6:	6021      	streq	r1, [r4, #0]
 8004ed8:	e7ed      	b.n	8004eb6 <_free_r+0x1e>
 8004eda:	461a      	mov	r2, r3
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	b10b      	cbz	r3, 8004ee4 <_free_r+0x4c>
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	d9fa      	bls.n	8004eda <_free_r+0x42>
 8004ee4:	6811      	ldr	r1, [r2, #0]
 8004ee6:	1850      	adds	r0, r2, r1
 8004ee8:	42a0      	cmp	r0, r4
 8004eea:	d10b      	bne.n	8004f04 <_free_r+0x6c>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	4401      	add	r1, r0
 8004ef0:	1850      	adds	r0, r2, r1
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	6011      	str	r1, [r2, #0]
 8004ef6:	d1e0      	bne.n	8004eba <_free_r+0x22>
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	6053      	str	r3, [r2, #4]
 8004efe:	4408      	add	r0, r1
 8004f00:	6010      	str	r0, [r2, #0]
 8004f02:	e7da      	b.n	8004eba <_free_r+0x22>
 8004f04:	d902      	bls.n	8004f0c <_free_r+0x74>
 8004f06:	230c      	movs	r3, #12
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	e7d6      	b.n	8004eba <_free_r+0x22>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	1821      	adds	r1, r4, r0
 8004f10:	428b      	cmp	r3, r1
 8004f12:	bf04      	itt	eq
 8004f14:	6819      	ldreq	r1, [r3, #0]
 8004f16:	685b      	ldreq	r3, [r3, #4]
 8004f18:	6063      	str	r3, [r4, #4]
 8004f1a:	bf04      	itt	eq
 8004f1c:	1809      	addeq	r1, r1, r0
 8004f1e:	6021      	streq	r1, [r4, #0]
 8004f20:	6054      	str	r4, [r2, #4]
 8004f22:	e7ca      	b.n	8004eba <_free_r+0x22>
 8004f24:	bd38      	pop	{r3, r4, r5, pc}
 8004f26:	bf00      	nop
 8004f28:	20004268 	.word	0x20004268

08004f2c <sbrk_aligned>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f6c <sbrk_aligned+0x40>)
 8004f30:	460c      	mov	r4, r1
 8004f32:	6831      	ldr	r1, [r6, #0]
 8004f34:	4605      	mov	r5, r0
 8004f36:	b911      	cbnz	r1, 8004f3e <sbrk_aligned+0x12>
 8004f38:	f000 fca4 	bl	8005884 <_sbrk_r>
 8004f3c:	6030      	str	r0, [r6, #0]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 fc9f 	bl	8005884 <_sbrk_r>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d103      	bne.n	8004f52 <sbrk_aligned+0x26>
 8004f4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f4e:	4620      	mov	r0, r4
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d0f8      	beq.n	8004f4e <sbrk_aligned+0x22>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 fc90 	bl	8005884 <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d1f2      	bne.n	8004f4e <sbrk_aligned+0x22>
 8004f68:	e7ef      	b.n	8004f4a <sbrk_aligned+0x1e>
 8004f6a:	bf00      	nop
 8004f6c:	20004264 	.word	0x20004264

08004f70 <_malloc_r>:
 8004f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f74:	1ccd      	adds	r5, r1, #3
 8004f76:	f025 0503 	bic.w	r5, r5, #3
 8004f7a:	3508      	adds	r5, #8
 8004f7c:	2d0c      	cmp	r5, #12
 8004f7e:	bf38      	it	cc
 8004f80:	250c      	movcc	r5, #12
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	4606      	mov	r6, r0
 8004f86:	db01      	blt.n	8004f8c <_malloc_r+0x1c>
 8004f88:	42a9      	cmp	r1, r5
 8004f8a:	d904      	bls.n	8004f96 <_malloc_r+0x26>
 8004f8c:	230c      	movs	r3, #12
 8004f8e:	6033      	str	r3, [r6, #0]
 8004f90:	2000      	movs	r0, #0
 8004f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800506c <_malloc_r+0xfc>
 8004f9a:	f000 f869 	bl	8005070 <__malloc_lock>
 8004f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa2:	461c      	mov	r4, r3
 8004fa4:	bb44      	cbnz	r4, 8004ff8 <_malloc_r+0x88>
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f7ff ffbf 	bl	8004f2c <sbrk_aligned>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	d158      	bne.n	8005066 <_malloc_r+0xf6>
 8004fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fb8:	4627      	mov	r7, r4
 8004fba:	2f00      	cmp	r7, #0
 8004fbc:	d143      	bne.n	8005046 <_malloc_r+0xd6>
 8004fbe:	2c00      	cmp	r4, #0
 8004fc0:	d04b      	beq.n	800505a <_malloc_r+0xea>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	eb04 0903 	add.w	r9, r4, r3
 8004fcc:	f000 fc5a 	bl	8005884 <_sbrk_r>
 8004fd0:	4581      	cmp	r9, r0
 8004fd2:	d142      	bne.n	800505a <_malloc_r+0xea>
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	1a6d      	subs	r5, r5, r1
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f7ff ffa6 	bl	8004f2c <sbrk_aligned>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d03a      	beq.n	800505a <_malloc_r+0xea>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	442b      	add	r3, r5
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	f8d8 3000 	ldr.w	r3, [r8]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	bb62      	cbnz	r2, 800504c <_malloc_r+0xdc>
 8004ff2:	f8c8 7000 	str.w	r7, [r8]
 8004ff6:	e00f      	b.n	8005018 <_malloc_r+0xa8>
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	1b52      	subs	r2, r2, r5
 8004ffc:	d420      	bmi.n	8005040 <_malloc_r+0xd0>
 8004ffe:	2a0b      	cmp	r2, #11
 8005000:	d917      	bls.n	8005032 <_malloc_r+0xc2>
 8005002:	1961      	adds	r1, r4, r5
 8005004:	42a3      	cmp	r3, r4
 8005006:	6025      	str	r5, [r4, #0]
 8005008:	bf18      	it	ne
 800500a:	6059      	strne	r1, [r3, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	bf08      	it	eq
 8005010:	f8c8 1000 	streq.w	r1, [r8]
 8005014:	5162      	str	r2, [r4, r5]
 8005016:	604b      	str	r3, [r1, #4]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f82f 	bl	800507c <__malloc_unlock>
 800501e:	f104 000b 	add.w	r0, r4, #11
 8005022:	1d23      	adds	r3, r4, #4
 8005024:	f020 0007 	bic.w	r0, r0, #7
 8005028:	1ac2      	subs	r2, r0, r3
 800502a:	bf1c      	itt	ne
 800502c:	1a1b      	subne	r3, r3, r0
 800502e:	50a3      	strne	r3, [r4, r2]
 8005030:	e7af      	b.n	8004f92 <_malloc_r+0x22>
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	42a3      	cmp	r3, r4
 8005036:	bf0c      	ite	eq
 8005038:	f8c8 2000 	streq.w	r2, [r8]
 800503c:	605a      	strne	r2, [r3, #4]
 800503e:	e7eb      	b.n	8005018 <_malloc_r+0xa8>
 8005040:	4623      	mov	r3, r4
 8005042:	6864      	ldr	r4, [r4, #4]
 8005044:	e7ae      	b.n	8004fa4 <_malloc_r+0x34>
 8005046:	463c      	mov	r4, r7
 8005048:	687f      	ldr	r7, [r7, #4]
 800504a:	e7b6      	b.n	8004fba <_malloc_r+0x4a>
 800504c:	461a      	mov	r2, r3
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	42a3      	cmp	r3, r4
 8005052:	d1fb      	bne.n	800504c <_malloc_r+0xdc>
 8005054:	2300      	movs	r3, #0
 8005056:	6053      	str	r3, [r2, #4]
 8005058:	e7de      	b.n	8005018 <_malloc_r+0xa8>
 800505a:	230c      	movs	r3, #12
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	4630      	mov	r0, r6
 8005060:	f000 f80c 	bl	800507c <__malloc_unlock>
 8005064:	e794      	b.n	8004f90 <_malloc_r+0x20>
 8005066:	6005      	str	r5, [r0, #0]
 8005068:	e7d6      	b.n	8005018 <_malloc_r+0xa8>
 800506a:	bf00      	nop
 800506c:	20004268 	.word	0x20004268

08005070 <__malloc_lock>:
 8005070:	4801      	ldr	r0, [pc, #4]	@ (8005078 <__malloc_lock+0x8>)
 8005072:	f7ff bf00 	b.w	8004e76 <__retarget_lock_acquire_recursive>
 8005076:	bf00      	nop
 8005078:	20004260 	.word	0x20004260

0800507c <__malloc_unlock>:
 800507c:	4801      	ldr	r0, [pc, #4]	@ (8005084 <__malloc_unlock+0x8>)
 800507e:	f7ff befb 	b.w	8004e78 <__retarget_lock_release_recursive>
 8005082:	bf00      	nop
 8005084:	20004260 	.word	0x20004260

08005088 <__sfputc_r>:
 8005088:	6893      	ldr	r3, [r2, #8]
 800508a:	3b01      	subs	r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	b410      	push	{r4}
 8005090:	6093      	str	r3, [r2, #8]
 8005092:	da08      	bge.n	80050a6 <__sfputc_r+0x1e>
 8005094:	6994      	ldr	r4, [r2, #24]
 8005096:	42a3      	cmp	r3, r4
 8005098:	db01      	blt.n	800509e <__sfputc_r+0x16>
 800509a:	290a      	cmp	r1, #10
 800509c:	d103      	bne.n	80050a6 <__sfputc_r+0x1e>
 800509e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050a2:	f7ff bd6a 	b.w	8004b7a <__swbuf_r>
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	1c58      	adds	r0, r3, #1
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	7019      	strb	r1, [r3, #0]
 80050ae:	4608      	mov	r0, r1
 80050b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <__sfputs_r>:
 80050b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b8:	4606      	mov	r6, r0
 80050ba:	460f      	mov	r7, r1
 80050bc:	4614      	mov	r4, r2
 80050be:	18d5      	adds	r5, r2, r3
 80050c0:	42ac      	cmp	r4, r5
 80050c2:	d101      	bne.n	80050c8 <__sfputs_r+0x12>
 80050c4:	2000      	movs	r0, #0
 80050c6:	e007      	b.n	80050d8 <__sfputs_r+0x22>
 80050c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050cc:	463a      	mov	r2, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7ff ffda 	bl	8005088 <__sfputc_r>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d1f3      	bne.n	80050c0 <__sfputs_r+0xa>
 80050d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050dc <_vfiprintf_r>:
 80050dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	460d      	mov	r5, r1
 80050e2:	b09d      	sub	sp, #116	@ 0x74
 80050e4:	4614      	mov	r4, r2
 80050e6:	4698      	mov	r8, r3
 80050e8:	4606      	mov	r6, r0
 80050ea:	b118      	cbz	r0, 80050f4 <_vfiprintf_r+0x18>
 80050ec:	6a03      	ldr	r3, [r0, #32]
 80050ee:	b90b      	cbnz	r3, 80050f4 <_vfiprintf_r+0x18>
 80050f0:	f7ff fbdc 	bl	80048ac <__sinit>
 80050f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050f6:	07d9      	lsls	r1, r3, #31
 80050f8:	d405      	bmi.n	8005106 <_vfiprintf_r+0x2a>
 80050fa:	89ab      	ldrh	r3, [r5, #12]
 80050fc:	059a      	lsls	r2, r3, #22
 80050fe:	d402      	bmi.n	8005106 <_vfiprintf_r+0x2a>
 8005100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005102:	f7ff feb8 	bl	8004e76 <__retarget_lock_acquire_recursive>
 8005106:	89ab      	ldrh	r3, [r5, #12]
 8005108:	071b      	lsls	r3, r3, #28
 800510a:	d501      	bpl.n	8005110 <_vfiprintf_r+0x34>
 800510c:	692b      	ldr	r3, [r5, #16]
 800510e:	b99b      	cbnz	r3, 8005138 <_vfiprintf_r+0x5c>
 8005110:	4629      	mov	r1, r5
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff fd70 	bl	8004bf8 <__swsetup_r>
 8005118:	b170      	cbz	r0, 8005138 <_vfiprintf_r+0x5c>
 800511a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800511c:	07dc      	lsls	r4, r3, #31
 800511e:	d504      	bpl.n	800512a <_vfiprintf_r+0x4e>
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	b01d      	add	sp, #116	@ 0x74
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	89ab      	ldrh	r3, [r5, #12]
 800512c:	0598      	lsls	r0, r3, #22
 800512e:	d4f7      	bmi.n	8005120 <_vfiprintf_r+0x44>
 8005130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005132:	f7ff fea1 	bl	8004e78 <__retarget_lock_release_recursive>
 8005136:	e7f3      	b.n	8005120 <_vfiprintf_r+0x44>
 8005138:	2300      	movs	r3, #0
 800513a:	9309      	str	r3, [sp, #36]	@ 0x24
 800513c:	2320      	movs	r3, #32
 800513e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005142:	f8cd 800c 	str.w	r8, [sp, #12]
 8005146:	2330      	movs	r3, #48	@ 0x30
 8005148:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80052f8 <_vfiprintf_r+0x21c>
 800514c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005150:	f04f 0901 	mov.w	r9, #1
 8005154:	4623      	mov	r3, r4
 8005156:	469a      	mov	sl, r3
 8005158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515c:	b10a      	cbz	r2, 8005162 <_vfiprintf_r+0x86>
 800515e:	2a25      	cmp	r2, #37	@ 0x25
 8005160:	d1f9      	bne.n	8005156 <_vfiprintf_r+0x7a>
 8005162:	ebba 0b04 	subs.w	fp, sl, r4
 8005166:	d00b      	beq.n	8005180 <_vfiprintf_r+0xa4>
 8005168:	465b      	mov	r3, fp
 800516a:	4622      	mov	r2, r4
 800516c:	4629      	mov	r1, r5
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffa1 	bl	80050b6 <__sfputs_r>
 8005174:	3001      	adds	r0, #1
 8005176:	f000 80a7 	beq.w	80052c8 <_vfiprintf_r+0x1ec>
 800517a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800517c:	445a      	add	r2, fp
 800517e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005180:	f89a 3000 	ldrb.w	r3, [sl]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 809f 	beq.w	80052c8 <_vfiprintf_r+0x1ec>
 800518a:	2300      	movs	r3, #0
 800518c:	f04f 32ff 	mov.w	r2, #4294967295
 8005190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005194:	f10a 0a01 	add.w	sl, sl, #1
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	9307      	str	r3, [sp, #28]
 800519c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80051a2:	4654      	mov	r4, sl
 80051a4:	2205      	movs	r2, #5
 80051a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051aa:	4853      	ldr	r0, [pc, #332]	@ (80052f8 <_vfiprintf_r+0x21c>)
 80051ac:	f7fb f810 	bl	80001d0 <memchr>
 80051b0:	9a04      	ldr	r2, [sp, #16]
 80051b2:	b9d8      	cbnz	r0, 80051ec <_vfiprintf_r+0x110>
 80051b4:	06d1      	lsls	r1, r2, #27
 80051b6:	bf44      	itt	mi
 80051b8:	2320      	movmi	r3, #32
 80051ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051be:	0713      	lsls	r3, r2, #28
 80051c0:	bf44      	itt	mi
 80051c2:	232b      	movmi	r3, #43	@ 0x2b
 80051c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c8:	f89a 3000 	ldrb.w	r3, [sl]
 80051cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ce:	d015      	beq.n	80051fc <_vfiprintf_r+0x120>
 80051d0:	9a07      	ldr	r2, [sp, #28]
 80051d2:	4654      	mov	r4, sl
 80051d4:	2000      	movs	r0, #0
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4621      	mov	r1, r4
 80051dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051e0:	3b30      	subs	r3, #48	@ 0x30
 80051e2:	2b09      	cmp	r3, #9
 80051e4:	d94b      	bls.n	800527e <_vfiprintf_r+0x1a2>
 80051e6:	b1b0      	cbz	r0, 8005216 <_vfiprintf_r+0x13a>
 80051e8:	9207      	str	r2, [sp, #28]
 80051ea:	e014      	b.n	8005216 <_vfiprintf_r+0x13a>
 80051ec:	eba0 0308 	sub.w	r3, r0, r8
 80051f0:	fa09 f303 	lsl.w	r3, r9, r3
 80051f4:	4313      	orrs	r3, r2
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	46a2      	mov	sl, r4
 80051fa:	e7d2      	b.n	80051a2 <_vfiprintf_r+0xc6>
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	1d19      	adds	r1, r3, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	9103      	str	r1, [sp, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	bfbb      	ittet	lt
 8005208:	425b      	neglt	r3, r3
 800520a:	f042 0202 	orrlt.w	r2, r2, #2
 800520e:	9307      	strge	r3, [sp, #28]
 8005210:	9307      	strlt	r3, [sp, #28]
 8005212:	bfb8      	it	lt
 8005214:	9204      	strlt	r2, [sp, #16]
 8005216:	7823      	ldrb	r3, [r4, #0]
 8005218:	2b2e      	cmp	r3, #46	@ 0x2e
 800521a:	d10a      	bne.n	8005232 <_vfiprintf_r+0x156>
 800521c:	7863      	ldrb	r3, [r4, #1]
 800521e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005220:	d132      	bne.n	8005288 <_vfiprintf_r+0x1ac>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	1d1a      	adds	r2, r3, #4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	9203      	str	r2, [sp, #12]
 800522a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800522e:	3402      	adds	r4, #2
 8005230:	9305      	str	r3, [sp, #20]
 8005232:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005308 <_vfiprintf_r+0x22c>
 8005236:	7821      	ldrb	r1, [r4, #0]
 8005238:	2203      	movs	r2, #3
 800523a:	4650      	mov	r0, sl
 800523c:	f7fa ffc8 	bl	80001d0 <memchr>
 8005240:	b138      	cbz	r0, 8005252 <_vfiprintf_r+0x176>
 8005242:	9b04      	ldr	r3, [sp, #16]
 8005244:	eba0 000a 	sub.w	r0, r0, sl
 8005248:	2240      	movs	r2, #64	@ 0x40
 800524a:	4082      	lsls	r2, r0
 800524c:	4313      	orrs	r3, r2
 800524e:	3401      	adds	r4, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005256:	4829      	ldr	r0, [pc, #164]	@ (80052fc <_vfiprintf_r+0x220>)
 8005258:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800525c:	2206      	movs	r2, #6
 800525e:	f7fa ffb7 	bl	80001d0 <memchr>
 8005262:	2800      	cmp	r0, #0
 8005264:	d03f      	beq.n	80052e6 <_vfiprintf_r+0x20a>
 8005266:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <_vfiprintf_r+0x224>)
 8005268:	bb1b      	cbnz	r3, 80052b2 <_vfiprintf_r+0x1d6>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	3307      	adds	r3, #7
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	3308      	adds	r3, #8
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005278:	443b      	add	r3, r7
 800527a:	9309      	str	r3, [sp, #36]	@ 0x24
 800527c:	e76a      	b.n	8005154 <_vfiprintf_r+0x78>
 800527e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005282:	460c      	mov	r4, r1
 8005284:	2001      	movs	r0, #1
 8005286:	e7a8      	b.n	80051da <_vfiprintf_r+0xfe>
 8005288:	2300      	movs	r3, #0
 800528a:	3401      	adds	r4, #1
 800528c:	9305      	str	r3, [sp, #20]
 800528e:	4619      	mov	r1, r3
 8005290:	f04f 0c0a 	mov.w	ip, #10
 8005294:	4620      	mov	r0, r4
 8005296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800529a:	3a30      	subs	r2, #48	@ 0x30
 800529c:	2a09      	cmp	r2, #9
 800529e:	d903      	bls.n	80052a8 <_vfiprintf_r+0x1cc>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0c6      	beq.n	8005232 <_vfiprintf_r+0x156>
 80052a4:	9105      	str	r1, [sp, #20]
 80052a6:	e7c4      	b.n	8005232 <_vfiprintf_r+0x156>
 80052a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ac:	4604      	mov	r4, r0
 80052ae:	2301      	movs	r3, #1
 80052b0:	e7f0      	b.n	8005294 <_vfiprintf_r+0x1b8>
 80052b2:	ab03      	add	r3, sp, #12
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	462a      	mov	r2, r5
 80052b8:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <_vfiprintf_r+0x228>)
 80052ba:	a904      	add	r1, sp, #16
 80052bc:	4630      	mov	r0, r6
 80052be:	f3af 8000 	nop.w
 80052c2:	4607      	mov	r7, r0
 80052c4:	1c78      	adds	r0, r7, #1
 80052c6:	d1d6      	bne.n	8005276 <_vfiprintf_r+0x19a>
 80052c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ca:	07d9      	lsls	r1, r3, #31
 80052cc:	d405      	bmi.n	80052da <_vfiprintf_r+0x1fe>
 80052ce:	89ab      	ldrh	r3, [r5, #12]
 80052d0:	059a      	lsls	r2, r3, #22
 80052d2:	d402      	bmi.n	80052da <_vfiprintf_r+0x1fe>
 80052d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052d6:	f7ff fdcf 	bl	8004e78 <__retarget_lock_release_recursive>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af1f 	bmi.w	8005120 <_vfiprintf_r+0x44>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e71e      	b.n	8005124 <_vfiprintf_r+0x48>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_vfiprintf_r+0x228>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f879 	bl	80053e8 <_printf_i>
 80052f6:	e7e4      	b.n	80052c2 <_vfiprintf_r+0x1e6>
 80052f8:	08005988 	.word	0x08005988
 80052fc:	08005992 	.word	0x08005992
 8005300:	00000000 	.word	0x00000000
 8005304:	080050b7 	.word	0x080050b7
 8005308:	0800598e 	.word	0x0800598e

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4698      	mov	r8, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	3b00      	subs	r3, #0
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4641      	mov	r1, r8
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c8      	blx	r9
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	@ 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d1 	beq.w	80055ac <_printf_i+0x1c4>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b8 	beq.w	8005580 <_printf_i+0x198>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005593 	.word	0x08005593
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554d 	.word	0x0800554d
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b5 	.word	0x080055b5
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005555 	.word	0x08005555
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09c      	b.n	80055ce <_printf_i+0x1e6>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	4858      	ldr	r0, [pc, #352]	@ (800561c <_printf_i+0x234>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	4852      	ldr	r0, [pc, #328]	@ (800561c <_printf_i+0x234>)
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	bf14      	ite	ne
 80054d8:	230a      	movne	r3, #10
 80054da:	2308      	moveq	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	db05      	blt.n	80054f6 <_printf_i+0x10e>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	432e      	orrs	r6, r5
 80054ee:	f021 0104 	bic.w	r1, r1, #4
 80054f2:	6021      	str	r1, [r4, #0]
 80054f4:	d04b      	beq.n	800558e <_printf_i+0x1a6>
 80054f6:	4616      	mov	r6, r2
 80054f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005500:	5dc7      	ldrb	r7, [r0, r7]
 8005502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005506:	462f      	mov	r7, r5
 8005508:	42bb      	cmp	r3, r7
 800550a:	460d      	mov	r5, r1
 800550c:	d9f4      	bls.n	80054f8 <_printf_i+0x110>
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10b      	bne.n	800552a <_printf_i+0x142>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	07df      	lsls	r7, r3, #31
 8005516:	d508      	bpl.n	800552a <_printf_i+0x142>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	4299      	cmp	r1, r3
 800551e:	bfde      	ittt	le
 8005520:	2330      	movle	r3, #48	@ 0x30
 8005522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552a:	1b92      	subs	r2, r2, r6
 800552c:	6122      	str	r2, [r4, #16]
 800552e:	f8cd a000 	str.w	sl, [sp]
 8005532:	464b      	mov	r3, r9
 8005534:	aa03      	add	r2, sp, #12
 8005536:	4621      	mov	r1, r4
 8005538:	4640      	mov	r0, r8
 800553a:	f7ff fee7 	bl	800530c <_printf_common>
 800553e:	3001      	adds	r0, #1
 8005540:	d14a      	bne.n	80055d8 <_printf_i+0x1f0>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	4832      	ldr	r0, [pc, #200]	@ (8005620 <_printf_i+0x238>)
 8005556:	2778      	movs	r7, #120	@ 0x78
 8005558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	061f      	lsls	r7, r3, #24
 8005562:	f851 5b04 	ldr.w	r5, [r1], #4
 8005566:	d402      	bmi.n	800556e <_printf_i+0x186>
 8005568:	065f      	lsls	r7, r3, #25
 800556a:	bf48      	it	mi
 800556c:	b2ad      	uxthmi	r5, r5
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b11d      	cbz	r5, 8005584 <_printf_i+0x19c>
 800557c:	2310      	movs	r3, #16
 800557e:	e7ad      	b.n	80054dc <_printf_i+0xf4>
 8005580:	4826      	ldr	r0, [pc, #152]	@ (800561c <_printf_i+0x234>)
 8005582:	e7e9      	b.n	8005558 <_printf_i+0x170>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e7f6      	b.n	800557c <_printf_i+0x194>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bd      	b.n	800550e <_printf_i+0x126>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	6961      	ldr	r1, [r4, #20]
 8005598:	1d18      	adds	r0, r3, #4
 800559a:	6030      	str	r0, [r6, #0]
 800559c:	062e      	lsls	r6, r5, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1be>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1c4>
 80055a6:	0668      	lsls	r0, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1ba>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	4616      	mov	r6, r2
 80055b2:	e7bc      	b.n	800552e <_printf_i+0x146>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	1d1a      	adds	r2, r3, #4
 80055b8:	6032      	str	r2, [r6, #0]
 80055ba:	681e      	ldr	r6, [r3, #0]
 80055bc:	6862      	ldr	r2, [r4, #4]
 80055be:	2100      	movs	r1, #0
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7fa fe05 	bl	80001d0 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1e4>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e7aa      	b.n	800552e <_printf_i+0x146>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	4632      	mov	r2, r6
 80055dc:	4649      	mov	r1, r9
 80055de:	4640      	mov	r0, r8
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ad      	beq.n	8005542 <_printf_i+0x15a>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x22c>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a6      	b.n	8005546 <_printf_i+0x15e>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09d      	beq.n	8005542 <_printf_i+0x15a>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x210>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x204>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x220>
 800561c:	08005999 	.word	0x08005999
 8005620:	080059aa 	.word	0x080059aa

08005624 <__sflush_r>:
 8005624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	0716      	lsls	r6, r2, #28
 800562e:	4605      	mov	r5, r0
 8005630:	460c      	mov	r4, r1
 8005632:	d454      	bmi.n	80056de <__sflush_r+0xba>
 8005634:	684b      	ldr	r3, [r1, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dc02      	bgt.n	8005640 <__sflush_r+0x1c>
 800563a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	dd48      	ble.n	80056d2 <__sflush_r+0xae>
 8005640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005642:	2e00      	cmp	r6, #0
 8005644:	d045      	beq.n	80056d2 <__sflush_r+0xae>
 8005646:	2300      	movs	r3, #0
 8005648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800564c:	682f      	ldr	r7, [r5, #0]
 800564e:	6a21      	ldr	r1, [r4, #32]
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	d030      	beq.n	80056b6 <__sflush_r+0x92>
 8005654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	0759      	lsls	r1, r3, #29
 800565a:	d505      	bpl.n	8005668 <__sflush_r+0x44>
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005662:	b10b      	cbz	r3, 8005668 <__sflush_r+0x44>
 8005664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	2300      	movs	r3, #0
 800566a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	4628      	mov	r0, r5
 8005670:	47b0      	blx	r6
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	d106      	bne.n	8005686 <__sflush_r+0x62>
 8005678:	6829      	ldr	r1, [r5, #0]
 800567a:	291d      	cmp	r1, #29
 800567c:	d82b      	bhi.n	80056d6 <__sflush_r+0xb2>
 800567e:	4a2a      	ldr	r2, [pc, #168]	@ (8005728 <__sflush_r+0x104>)
 8005680:	40ca      	lsrs	r2, r1
 8005682:	07d6      	lsls	r6, r2, #31
 8005684:	d527      	bpl.n	80056d6 <__sflush_r+0xb2>
 8005686:	2200      	movs	r2, #0
 8005688:	6062      	str	r2, [r4, #4]
 800568a:	04d9      	lsls	r1, r3, #19
 800568c:	6922      	ldr	r2, [r4, #16]
 800568e:	6022      	str	r2, [r4, #0]
 8005690:	d504      	bpl.n	800569c <__sflush_r+0x78>
 8005692:	1c42      	adds	r2, r0, #1
 8005694:	d101      	bne.n	800569a <__sflush_r+0x76>
 8005696:	682b      	ldr	r3, [r5, #0]
 8005698:	b903      	cbnz	r3, 800569c <__sflush_r+0x78>
 800569a:	6560      	str	r0, [r4, #84]	@ 0x54
 800569c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800569e:	602f      	str	r7, [r5, #0]
 80056a0:	b1b9      	cbz	r1, 80056d2 <__sflush_r+0xae>
 80056a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d002      	beq.n	80056b0 <__sflush_r+0x8c>
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fbf4 	bl	8004e98 <_free_r>
 80056b0:	2300      	movs	r3, #0
 80056b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056b4:	e00d      	b.n	80056d2 <__sflush_r+0xae>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	4602      	mov	r2, r0
 80056be:	1c50      	adds	r0, r2, #1
 80056c0:	d1c9      	bne.n	8005656 <__sflush_r+0x32>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0c6      	beq.n	8005656 <__sflush_r+0x32>
 80056c8:	2b1d      	cmp	r3, #29
 80056ca:	d001      	beq.n	80056d0 <__sflush_r+0xac>
 80056cc:	2b16      	cmp	r3, #22
 80056ce:	d11e      	bne.n	800570e <__sflush_r+0xea>
 80056d0:	602f      	str	r7, [r5, #0]
 80056d2:	2000      	movs	r0, #0
 80056d4:	e022      	b.n	800571c <__sflush_r+0xf8>
 80056d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056da:	b21b      	sxth	r3, r3
 80056dc:	e01b      	b.n	8005716 <__sflush_r+0xf2>
 80056de:	690f      	ldr	r7, [r1, #16]
 80056e0:	2f00      	cmp	r7, #0
 80056e2:	d0f6      	beq.n	80056d2 <__sflush_r+0xae>
 80056e4:	0793      	lsls	r3, r2, #30
 80056e6:	680e      	ldr	r6, [r1, #0]
 80056e8:	bf08      	it	eq
 80056ea:	694b      	ldreq	r3, [r1, #20]
 80056ec:	600f      	str	r7, [r1, #0]
 80056ee:	bf18      	it	ne
 80056f0:	2300      	movne	r3, #0
 80056f2:	eba6 0807 	sub.w	r8, r6, r7
 80056f6:	608b      	str	r3, [r1, #8]
 80056f8:	f1b8 0f00 	cmp.w	r8, #0
 80056fc:	dde9      	ble.n	80056d2 <__sflush_r+0xae>
 80056fe:	6a21      	ldr	r1, [r4, #32]
 8005700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005702:	4643      	mov	r3, r8
 8005704:	463a      	mov	r2, r7
 8005706:	4628      	mov	r0, r5
 8005708:	47b0      	blx	r6
 800570a:	2800      	cmp	r0, #0
 800570c:	dc08      	bgt.n	8005720 <__sflush_r+0xfc>
 800570e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	4407      	add	r7, r0
 8005722:	eba8 0800 	sub.w	r8, r8, r0
 8005726:	e7e7      	b.n	80056f8 <__sflush_r+0xd4>
 8005728:	20400001 	.word	0x20400001

0800572c <_fflush_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b913      	cbnz	r3, 800573c <_fflush_r+0x10>
 8005736:	2500      	movs	r5, #0
 8005738:	4628      	mov	r0, r5
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	b118      	cbz	r0, 8005746 <_fflush_r+0x1a>
 800573e:	6a03      	ldr	r3, [r0, #32]
 8005740:	b90b      	cbnz	r3, 8005746 <_fflush_r+0x1a>
 8005742:	f7ff f8b3 	bl	80048ac <__sinit>
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f3      	beq.n	8005736 <_fflush_r+0xa>
 800574e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005750:	07d0      	lsls	r0, r2, #31
 8005752:	d404      	bmi.n	800575e <_fflush_r+0x32>
 8005754:	0599      	lsls	r1, r3, #22
 8005756:	d402      	bmi.n	800575e <_fflush_r+0x32>
 8005758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800575a:	f7ff fb8c 	bl	8004e76 <__retarget_lock_acquire_recursive>
 800575e:	4628      	mov	r0, r5
 8005760:	4621      	mov	r1, r4
 8005762:	f7ff ff5f 	bl	8005624 <__sflush_r>
 8005766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005768:	07da      	lsls	r2, r3, #31
 800576a:	4605      	mov	r5, r0
 800576c:	d4e4      	bmi.n	8005738 <_fflush_r+0xc>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	059b      	lsls	r3, r3, #22
 8005772:	d4e1      	bmi.n	8005738 <_fflush_r+0xc>
 8005774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005776:	f7ff fb7f 	bl	8004e78 <__retarget_lock_release_recursive>
 800577a:	e7dd      	b.n	8005738 <_fflush_r+0xc>

0800577c <__swhatbuf_r>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	460c      	mov	r4, r1
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	2900      	cmp	r1, #0
 8005786:	b096      	sub	sp, #88	@ 0x58
 8005788:	4615      	mov	r5, r2
 800578a:	461e      	mov	r6, r3
 800578c:	da0d      	bge.n	80057aa <__swhatbuf_r+0x2e>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	bf14      	ite	ne
 800579a:	2340      	movne	r3, #64	@ 0x40
 800579c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80057a0:	2000      	movs	r0, #0
 80057a2:	6031      	str	r1, [r6, #0]
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	b016      	add	sp, #88	@ 0x58
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	466a      	mov	r2, sp
 80057ac:	f000 f848 	bl	8005840 <_fstat_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	dbec      	blt.n	800578e <__swhatbuf_r+0x12>
 80057b4:	9901      	ldr	r1, [sp, #4]
 80057b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057be:	4259      	negs	r1, r3
 80057c0:	4159      	adcs	r1, r3
 80057c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057c6:	e7eb      	b.n	80057a0 <__swhatbuf_r+0x24>

080057c8 <__smakebuf_r>:
 80057c8:	898b      	ldrh	r3, [r1, #12]
 80057ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057cc:	079d      	lsls	r5, r3, #30
 80057ce:	4606      	mov	r6, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	d507      	bpl.n	80057e4 <__smakebuf_r+0x1c>
 80057d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	2301      	movs	r3, #1
 80057de:	6163      	str	r3, [r4, #20]
 80057e0:	b003      	add	sp, #12
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	ab01      	add	r3, sp, #4
 80057e6:	466a      	mov	r2, sp
 80057e8:	f7ff ffc8 	bl	800577c <__swhatbuf_r>
 80057ec:	9f00      	ldr	r7, [sp, #0]
 80057ee:	4605      	mov	r5, r0
 80057f0:	4639      	mov	r1, r7
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff fbbc 	bl	8004f70 <_malloc_r>
 80057f8:	b948      	cbnz	r0, 800580e <__smakebuf_r+0x46>
 80057fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fe:	059a      	lsls	r2, r3, #22
 8005800:	d4ee      	bmi.n	80057e0 <__smakebuf_r+0x18>
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	f043 0302 	orr.w	r3, r3, #2
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	e7e2      	b.n	80057d4 <__smakebuf_r+0xc>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	6020      	str	r0, [r4, #0]
 8005812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800581e:	b15b      	cbz	r3, 8005838 <__smakebuf_r+0x70>
 8005820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f81d 	bl	8005864 <_isatty_r>
 800582a:	b128      	cbz	r0, 8005838 <__smakebuf_r+0x70>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	431d      	orrs	r5, r3
 800583c:	81a5      	strh	r5, [r4, #12]
 800583e:	e7cf      	b.n	80057e0 <__smakebuf_r+0x18>

08005840 <_fstat_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	@ (8005860 <_fstat_r+0x20>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	f7fb f9cb 	bl	8000be8 <_fstat>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d102      	bne.n	800585c <_fstat_r+0x1c>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	b103      	cbz	r3, 800585c <_fstat_r+0x1c>
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	bd38      	pop	{r3, r4, r5, pc}
 800585e:	bf00      	nop
 8005860:	2000425c 	.word	0x2000425c

08005864 <_isatty_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	@ (8005880 <_isatty_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb f9ca 	bl	8000c08 <_isatty>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_isatty_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_isatty_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	2000425c 	.word	0x2000425c

08005884 <_sbrk_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d06      	ldr	r5, [pc, #24]	@ (80058a0 <_sbrk_r+0x1c>)
 8005888:	2300      	movs	r3, #0
 800588a:	4604      	mov	r4, r0
 800588c:	4608      	mov	r0, r1
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	f7fb f9d2 	bl	8000c38 <_sbrk>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d102      	bne.n	800589e <_sbrk_r+0x1a>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b103      	cbz	r3, 800589e <_sbrk_r+0x1a>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	2000425c 	.word	0x2000425c

080058a4 <_init>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr

080058b0 <_fini>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr
