
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000571c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080058ac  080058ac  000068ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059ac  080059ac  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b4  080059b4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080059bc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004210  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000427c  2000427c  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fe0  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f78  00000000  00000000  0001b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0001dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcd  00000000  00000000  0001f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b8a  00000000  00000000  0001ff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014167  00000000  00000000  00043b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5da2  00000000  00000000  00057c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012da28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005274  00000000  00000000  0012da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00132ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005894 	.word	0x08005894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005894 	.word	0x08005894

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	20000128 	.word	0x20000128

080005e0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	if(file==STDERR_FILENO)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d116      	bne.n	8000620 <_write+0x40>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RED, strlen(RED) , HAL_MAX_DELAY);
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	2205      	movs	r2, #5
 80005f8:	491d      	ldr	r1, [pc, #116]	@ (8000670 <_write+0x90>)
 80005fa:	481e      	ldr	r0, [pc, #120]	@ (8000674 <_write+0x94>)
 80005fc:	f001 fe52 	bl	80022a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	481a      	ldr	r0, [pc, #104]	@ (8000674 <_write+0x94>)
 800060c:	f001 fe4a 	bl	80022a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(RST) , HAL_MAX_DELAY);
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2204      	movs	r2, #4
 8000616:	4918      	ldr	r1, [pc, #96]	@ (8000678 <_write+0x98>)
 8000618:	4816      	ldr	r0, [pc, #88]	@ (8000674 <_write+0x94>)
 800061a:	f001 fe43 	bl	80022a4 <HAL_UART_Transmit>
 800061e:	e021      	b.n	8000664 <_write+0x84>
	}

	else if(file==STDOUT_FILENO)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d116      	bne.n	8000654 <_write+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)GRN, strlen(GRN) , HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2205      	movs	r2, #5
 800062c:	4913      	ldr	r1, [pc, #76]	@ (800067c <_write+0x9c>)
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <_write+0x94>)
 8000630:	f001 fe38 	bl	80022a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b29a      	uxth	r2, r3
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	480d      	ldr	r0, [pc, #52]	@ (8000674 <_write+0x94>)
 8000640:	f001 fe30 	bl	80022a4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(GRN) , HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2205      	movs	r2, #5
 800064a:	490b      	ldr	r1, [pc, #44]	@ (8000678 <_write+0x98>)
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <_write+0x94>)
 800064e:	f001 fe29 	bl	80022a4 <HAL_UART_Transmit>
 8000652:	e007      	b.n	8000664 <_write+0x84>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
 800065c:	68b9      	ldr	r1, [r7, #8]
 800065e:	4805      	ldr	r0, [pc, #20]	@ (8000674 <_write+0x94>)
 8000660:	f001 fe20 	bl	80022a4 <HAL_UART_Transmit>

	}
	return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	080058ac 	.word	0x080058ac
 8000674:	20000328 	.word	0x20000328
 8000678:	080058b4 	.word	0x080058b4
 800067c:	080058bc 	.word	0x080058bc

08000680 <_read>:

int _read(int file, char *ptr, int len)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
    if (file == STDIN_FILENO)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d124      	bne.n	80006dc <_read+0x5c>
    {
        for (int i = 0; i < len; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e01d      	b.n	80006d4 <_read+0x54>
        {
            // Her karakteri tek tek oku
            HAL_UART_Receive(&huart2, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	18d1      	adds	r1, r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2201      	movs	r2, #1
 80006a4:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <_read+0x68>)
 80006a6:	f001 fe88 	bl	80023ba <HAL_UART_Receive>

            // Enter (CR veya LF) gelirse bitir
            if (ptr[i] == '\r' || ptr[i] == '\n')
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b0d      	cmp	r3, #13
 80006b4:	d005      	beq.n	80006c2 <_read+0x42>
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	68ba      	ldr	r2, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d105      	bne.n	80006ce <_read+0x4e>
            {
                ptr[i] = '\0'; // Satır sonunu null karakterle değiştir
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
                break;
 80006cc:	e006      	b.n	80006dc <_read+0x5c>
        for (int i = 0; i < len; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbdd      	blt.n	8000698 <_read+0x18>
            }
        }
    }
    return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000328 	.word	0x20000328

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b08e      	sub	sp, #56	@ 0x38
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fb0f 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f835 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f8bb 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 f88f 	bl	8000820 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <main+0x68>)
 8000704:	f107 041c 	add.w	r4, r7, #28
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fe3e 	bl	800339e <osThreadCreate>
 8000722:	4603      	mov	r3, r0
 8000724:	4a0c      	ldr	r2, [pc, #48]	@ (8000758 <main+0x6c>)
 8000726:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <main+0x70>)
 800072a:	463c      	mov	r4, r7
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 800073a:	463b      	mov	r3, r7
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fe2d 	bl	800339e <osThreadCreate>
 8000744:	4603      	mov	r3, r0
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <main+0x74>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800074a:	f002 fe21 	bl	8003390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x62>
 8000752:	bf00      	nop
 8000754:	080058cc 	.word	0x080058cc
 8000758:	20000370 	.word	0x20000370
 800075c:	080058f0 	.word	0x080058f0
 8000760:	20000374 	.word	0x20000374

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fa8e 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <SystemClock_Config+0xb4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <SystemClock_Config+0xb4>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <SystemClock_Config+0xb4>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <SystemClock_Config+0xb8>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <SystemClock_Config+0xb8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fdef 	bl	80013b8 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007e0:	f000 f8ce 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f852 	bl	80018a8 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800080a:	f000 f8b9 	bl	8000980 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	@ 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f001 fcd4 	bl	8002204 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f88d 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000328 	.word	0x20000328
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <MX_GPIO_Init+0x30>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_GPIO_Init+0x30>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	fprintf(stdout,"system initialized\r\n");
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <gorev2+0x8c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2214      	movs	r2, #20
 80008b8:	2101      	movs	r1, #1
 80008ba:	481f      	ldr	r0, [pc, #124]	@ (8000938 <gorev2+0x90>)
 80008bc:	f004 f882 	bl	80049c4 <fwrite>

	fprintf(stderr, "error\r\n");
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <gorev2+0x8c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	2207      	movs	r2, #7
 80008c8:	2101      	movs	r1, #1
 80008ca:	481c      	ldr	r0, [pc, #112]	@ (800093c <gorev2+0x94>)
 80008cc:	f004 f87a 	bl	80049c4 <fwrite>
  /* Infinite loop */

  for(;;)
  {

	memset(input, 0, sizeof(input)); // diziyi sıfırla
 80008d0:	2214      	movs	r2, #20
 80008d2:	2100      	movs	r1, #0
 80008d4:	481a      	ldr	r0, [pc, #104]	@ (8000940 <gorev2+0x98>)
 80008d6:	f004 f9dd 	bl	8004c94 <memset>
	fgets(input,sizeof(input),stdin);
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <gorev2+0x8c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2114      	movs	r1, #20
 80008e4:	4816      	ldr	r0, [pc, #88]	@ (8000940 <gorev2+0x98>)
 80008e6:	f003 ff43 	bl	8004770 <fgets>
	input[strcspn(input, "\r\n")] = 0;
 80008ea:	4916      	ldr	r1, [pc, #88]	@ (8000944 <gorev2+0x9c>)
 80008ec:	4814      	ldr	r0, [pc, #80]	@ (8000940 <gorev2+0x98>)
 80008ee:	f004 f9d9 	bl	8004ca4 <strcspn>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <gorev2+0x98>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	54d1      	strb	r1, [r2, r3]

	if (strlen(input) == 1 && input[0] == 's')
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <gorev2+0x98>)
 80008fc:	f7ff fcb8 	bl	8000270 <strlen>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10c      	bne.n	8000920 <gorev2+0x78>
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <gorev2+0x98>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b73      	cmp	r3, #115	@ 0x73
 800090c:	d108      	bne.n	8000920 <gorev2+0x78>
	     {
	         fprintf(stdout, "s alındı\r\n");
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <gorev2+0x8c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	220c      	movs	r2, #12
 8000916:	2101      	movs	r1, #1
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <gorev2+0xa0>)
 800091a:	f004 f853 	bl	80049c4 <fwrite>
 800091e:	e007      	b.n	8000930 <gorev2+0x88>
	     }
	     else
	     {
	         fprintf(stderr, "gecersiz karakter: %s\r\n", input);
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <gorev2+0x8c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <gorev2+0x98>)
 8000928:	4908      	ldr	r1, [pc, #32]	@ (800094c <gorev2+0xa4>)
 800092a:	4618      	mov	r0, r3
 800092c:	f003 ffce 	bl	80048cc <fiprintf>
	memset(input, 0, sizeof(input)); // diziyi sıfırla
 8000930:	e7ce      	b.n	80008d0 <gorev2+0x28>
 8000932:	bf00      	nop
 8000934:	2000001c 	.word	0x2000001c
 8000938:	0800590c 	.word	0x0800590c
 800093c:	08005924 	.word	0x08005924
 8000940:	20000378 	.word	0x20000378
 8000944:	0800592c 	.word	0x0800592c
 8000948:	08005930 	.word	0x08005930
 800094c:	08005940 	.word	0x08005940

08000950 <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gorev1 */
  /* Infinite loop */
  for(;;)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <gorev1+0x8>

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 f9f3 	bl	8000d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fa99 	bl	8000f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	@ (8000a78 <HAL_UART_MspInit+0x94>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d133      	bne.n	8000a6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_UART_MspInit+0x98>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4809      	ldr	r0, [pc, #36]	@ (8000a80 <HAL_UART_MspInit+0x9c>)
 8000a5a:	f000 fb11 	bl	8001080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2105      	movs	r1, #5
 8000a62:	2026      	movs	r0, #38	@ 0x26
 8000a64:	f000 fa50 	bl	8000f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a68:	2026      	movs	r0, #38	@ 0x26
 8000a6a:	f000 fa69 	bl	8000f40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	@ 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	@ 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <HAL_InitTick+0xd0>)
 8000a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8000b54 <HAL_InitTick+0xd0>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <HAL_InitTick+0xd0>)
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f8d4 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ac0:	f001 f8be 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8000ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac8:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <HAL_InitTick+0xd4>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	0c9b      	lsrs	r3, r3, #18
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000ad6:	4a22      	ldr	r2, [pc, #136]	@ (8000b60 <HAL_InitTick+0xdc>)
 8000ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000adc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000afa:	4818      	ldr	r0, [pc, #96]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000afc:	f001 f8e6 	bl	8001ccc <HAL_TIM_Base_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d11b      	bne.n	8000b46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b0e:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <HAL_InitTick+0xd8>)
 8000b10:	f001 f936 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d111      	bne.n	8000b46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 fa0c 	bl	8000f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d808      	bhi.n	8000b40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	2019      	movs	r0, #25
 8000b34:	f000 f9e8 	bl	8000f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <HAL_InitTick+0xe0>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e002      	b.n	8000b46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3730      	adds	r7, #48	@ 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	431bde83 	.word	0x431bde83
 8000b5c:	2000038c 	.word	0x2000038c
 8000b60:	40010000 	.word	0x40010000
 8000b64:	20000004 	.word	0x20000004

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ba6:	f001 f95b 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000038c 	.word	0x2000038c

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f001 fc95 	bl	80024e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000328 	.word	0x20000328

08000bc8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_isatty>:

int _isatty(int file)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_sbrk>:
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
 8000c60:	f004 f8d6 	bl	8004e10 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200003d4 	.word	0x200003d4
 8000c98:	20004280 	.word	0x20004280

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f004 f895 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fcfb 	bl	80006ec <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d04:	080059bc 	.word	0x080059bc
  ldr r2, =_sbss
 8000d08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d0c:	2000427c 	.word	0x2000427c

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f8d8 	bl	8000ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	200f      	movs	r0, #15
 8000d44:	f7ff fe9e 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe20 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	200003d8 	.word	0x200003d8

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200003d8 	.word	0x200003d8

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff4c 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff61 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ffb1 	bl	8000e8c <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff80 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff54 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f6a:	f7ff ff09 	bl	8000d80 <HAL_GetTick>
 8000f6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d008      	beq.n	8000f8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e052      	b.n	8001034 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0216 	bic.w	r2, r2, #22
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d103      	bne.n	8000fbe <HAL_DMA_Abort+0x62>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 0208 	bic.w	r2, r2, #8
 8000fcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fde:	e013      	b.n	8001008 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fe0:	f7ff fece 	bl	8000d80 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d90c      	bls.n	8001008 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e015      	b.n	8001034 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1e4      	bne.n	8000fe0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800101a:	223f      	movs	r2, #63	@ 0x3f
 800101c:	409a      	lsls	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d004      	beq.n	800105a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00c      	b.n	8001074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2205      	movs	r2, #5
 800105e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e16b      	b.n	8001374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 815a 	bne.w	800136e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b4 	beq.w	800136e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b60      	ldr	r3, [pc, #384]	@ (800138c <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a5f      	ldr	r2, [pc, #380]	@ (800138c <HAL_GPIO_Init+0x30c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b5d      	ldr	r3, [pc, #372]	@ (800138c <HAL_GPIO_Init+0x30c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a5b      	ldr	r2, [pc, #364]	@ (8001390 <HAL_GPIO_Init+0x310>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a52      	ldr	r2, [pc, #328]	@ (8001394 <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a51      	ldr	r2, [pc, #324]	@ (8001398 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	@ (800139c <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	@ (80013a0 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	@ (80013a4 <HAL_GPIO_Init+0x324>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	@ (80013a8 <HAL_GPIO_Init+0x328>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	@ (80013b0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x20a>
 8001286:	2307      	movs	r3, #7
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128a:	2308      	movs	r3, #8
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	@ (8001390 <HAL_GPIO_Init+0x310>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b30      	ldr	r3, [pc, #192]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae90 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e267      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d075      	beq.n	80014c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d6:	4b88      	ldr	r3, [pc, #544]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d00c      	beq.n	80013fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b85      	ldr	r3, [pc, #532]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d112      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b82      	ldr	r3, [pc, #520]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013fa:	d10b      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x108>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d157      	bne.n	80014c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e242      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141c:	d106      	bne.n	800142c <HAL_RCC_OscConfig+0x74>
 800141e:	4b76      	ldr	r3, [pc, #472]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a75      	ldr	r2, [pc, #468]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x98>
 8001436:	4b70      	ldr	r3, [pc, #448]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6f      	ldr	r2, [pc, #444]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b6d      	ldr	r3, [pc, #436]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6c      	ldr	r2, [pc, #432]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 8001450:	4b69      	ldr	r3, [pc, #420]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a68      	ldr	r2, [pc, #416]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b66      	ldr	r3, [pc, #408]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a65      	ldr	r2, [pc, #404]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc86 	bl	8000d80 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc82 	bl	8000d80 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e207      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xc0>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc72 	bl	8000d80 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc6e 	bl	8000d80 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1f3      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0xe8>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d063      	beq.n	8001596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ce:	4b4a      	ldr	r3, [pc, #296]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b47      	ldr	r3, [pc, #284]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d116      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e1c7      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b3b      	ldr	r3, [pc, #236]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4937      	ldr	r1, [pc, #220]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	e03a      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001528:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_RCC_OscConfig+0x244>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fc27 	bl	8000d80 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fc23 	bl	8000d80 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1a8      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4925      	ldr	r1, [pc, #148]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_RCC_OscConfig+0x244>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fc06 	bl	8000d80 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fc02 	bl	8000d80 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e187      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d036      	beq.n	8001610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d016      	beq.n	80015d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_RCC_OscConfig+0x248>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fbe6 	bl	8000d80 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbe2 	bl	8000d80 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e167      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x200>
 80015d6:	e01b      	b.n	8001610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_RCC_OscConfig+0x248>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbcf 	bl	8000d80 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	e00e      	b.n	8001604 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fbcb 	bl	8000d80 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d907      	bls.n	8001604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e150      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	42470000 	.word	0x42470000
 8001600:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b88      	ldr	r3, [pc, #544]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ea      	bne.n	80015e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8097 	beq.w	800174c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b81      	ldr	r3, [pc, #516]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b7d      	ldr	r3, [pc, #500]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a7c      	ldr	r2, [pc, #496]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b7a      	ldr	r3, [pc, #488]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b77      	ldr	r3, [pc, #476]	@ (800182c <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165a:	4b74      	ldr	r3, [pc, #464]	@ (800182c <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a73      	ldr	r2, [pc, #460]	@ (800182c <HAL_RCC_OscConfig+0x474>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fb8b 	bl	8000d80 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fb87 	bl	8000d80 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e10c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b6a      	ldr	r3, [pc, #424]	@ (800182c <HAL_RCC_OscConfig+0x474>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2ea>
 8001694:	4b64      	ldr	r3, [pc, #400]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001698:	4a63      	ldr	r2, [pc, #396]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a0:	e01c      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x30c>
 80016aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016c4:	4b58      	ldr	r3, [pc, #352]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c8:	4a57      	ldr	r2, [pc, #348]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d0:	4b55      	ldr	r3, [pc, #340]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a54      	ldr	r2, [pc, #336]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d015      	beq.n	8001710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fb4c 	bl	8000d80 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb48 	bl	8000d80 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0cb      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0ee      	beq.n	80016ec <HAL_RCC_OscConfig+0x334>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fb36 	bl	8000d80 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff fb32 	bl	8000d80 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0b5      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ee      	bne.n	8001718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001740:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a1 	beq.w	8001898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001756:	4b34      	ldr	r3, [pc, #208]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d05c      	beq.n	800181c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d141      	bne.n	80017ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b31      	ldr	r3, [pc, #196]	@ (8001830 <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb06 	bl	8000d80 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fb02 	bl	8000d80 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e087      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	491b      	ldr	r1, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x478>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fadb 	bl	8000d80 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fad7 	bl	8000d80 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e05c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x416>
 80017ec:	e054      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fac4 	bl	8000d80 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fac0 	bl	8000d80 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e045      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x444>
 800181a:	e03d      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e038      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000
 8001830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x4ec>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d028      	beq.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d121      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800186a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800186c:	4293      	cmp	r3, r2
 800186e:	d111      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	3b01      	subs	r3, #1
 800187e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0cc      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b68      	ldr	r3, [pc, #416]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d90c      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b65      	ldr	r3, [pc, #404]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a58      	ldr	r2, [pc, #352]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a52      	ldr	r2, [pc, #328]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d044      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d119      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	2b03      	cmp	r3, #3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b3f      	ldr	r3, [pc, #252]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e067      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b37      	ldr	r3, [pc, #220]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4934      	ldr	r1, [pc, #208]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7ff f9f2 	bl	8000d80 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f9ee 	bl	8000d80 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d20c      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f818 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08005960 	.word	0x08005960
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b090      	sub	sp, #64	@ 0x40
 8001a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8c:	4b59      	ldr	r3, [pc, #356]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d00d      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	f200 80a1 	bhi.w	8001be0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa6:	e09b      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aac:	e09b      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ab2:	e098      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001abc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001abe:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d028      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001adc:	2100      	movs	r1, #0
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae0:	fb03 f201 	mul.w	r2, r3, r1
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	fb00 f303 	mul.w	r3, r0, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	4a43      	ldr	r2, [pc, #268]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8001aee:	fba0 1202 	umull	r1, r2, r0, r2
 8001af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001af4:	460a      	mov	r2, r1
 8001af6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001afa:	4413      	add	r3, r2
 8001afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b00:	2200      	movs	r2, #0
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	61fa      	str	r2, [r7, #28]
 8001b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b0e:	f7fe fbb7 	bl	8000280 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4613      	mov	r3, r2
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b1a:	e053      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	099b      	lsrs	r3, r3, #6
 8001b22:	2200      	movs	r2, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	617a      	str	r2, [r7, #20]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b2e:	f04f 0b00 	mov.w	fp, #0
 8001b32:	4652      	mov	r2, sl
 8001b34:	465b      	mov	r3, fp
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	ebb2 080a 	subs.w	r8, r2, sl
 8001b4e:	eb63 090b 	sbc.w	r9, r3, fp
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b66:	ebb2 0408 	subs.w	r4, r2, r8
 8001b6a:	eb63 0509 	sbc.w	r5, r3, r9
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	00eb      	lsls	r3, r5, #3
 8001b78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7c:	00e2      	lsls	r2, r4, #3
 8001b7e:	4614      	mov	r4, r2
 8001b80:	461d      	mov	r5, r3
 8001b82:	eb14 030a 	adds.w	r3, r4, sl
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	eb45 030b 	adc.w	r3, r5, fp
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	028b      	lsls	r3, r1, #10
 8001b9e:	4621      	mov	r1, r4
 8001ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	028a      	lsls	r2, r1, #10
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb8:	f7fe fb62 	bl	8000280 <__aeabi_uldivmod>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3740      	adds	r7, #64	@ 0x40
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	00f42400 	.word	0x00f42400
 8001bfc:	017d7840 	.word	0x017d7840

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0a9b      	lsrs	r3, r3, #10
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08005970 	.word	0x08005970

08001c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c44:	f7ff ffdc 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0b5b      	lsrs	r3, r3, #13
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	@ (8001c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08005970 	.word	0x08005970

08001c68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_RCC_GetClockConfig+0x60>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40023c00 	.word	0x40023c00

08001ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f839 	bl	8001d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9c0 	bl	8002090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8d2 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8c4 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8d5 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8ac 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f89e 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8af 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f886 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f878 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f889 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f860 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f852 	bl	8002040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f863 	bl	8002068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fcc8 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f900 	bl	80021f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f834 	bl	800207c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0220 	mvn.w	r2, #32
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8d2 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a43      	ldr	r2, [pc, #268]	@ (80021b0 <TIM_Base_SetConfig+0x120>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ae:	d00f      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <TIM_Base_SetConfig+0x124>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	@ (80021b8 <TIM_Base_SetConfig+0x128>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <TIM_Base_SetConfig+0x12c>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	@ (80021c0 <TIM_Base_SetConfig+0x130>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d108      	bne.n	80020e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a32      	ldr	r2, [pc, #200]	@ (80021b0 <TIM_Base_SetConfig+0x120>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020f0:	d027      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2f      	ldr	r2, [pc, #188]	@ (80021b4 <TIM_Base_SetConfig+0x124>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d023      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	@ (80021b8 <TIM_Base_SetConfig+0x128>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <TIM_Base_SetConfig+0x12c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2c      	ldr	r2, [pc, #176]	@ (80021c0 <TIM_Base_SetConfig+0x130>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d017      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2b      	ldr	r2, [pc, #172]	@ (80021c4 <TIM_Base_SetConfig+0x134>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <TIM_Base_SetConfig+0x138>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00f      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a29      	ldr	r2, [pc, #164]	@ (80021cc <TIM_Base_SetConfig+0x13c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00b      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a28      	ldr	r2, [pc, #160]	@ (80021d0 <TIM_Base_SetConfig+0x140>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <TIM_Base_SetConfig+0x144>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <TIM_Base_SetConfig+0x148>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <TIM_Base_SetConfig+0x120>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0xf2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a10      	ldr	r2, [pc, #64]	@ (80021c0 <TIM_Base_SetConfig+0x130>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d103      	bne.n	800218a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f043 0204 	orr.w	r2, r3, #4
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e042      	b.n	800229c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fbda 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	@ 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fe15 	bl	8002e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800225c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800226c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800227c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d175      	bne.n	80023b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_UART_Transmit+0x2c>
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e06e      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2221      	movs	r2, #33	@ 0x21
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022e2:	f7fe fd4d 	bl	8000d80 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022fc:	d108      	bne.n	8002310 <HAL_UART_Transmit+0x6c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e003      	b.n	8002318 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002318:	e02e      	b.n	8002378 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2180      	movs	r1, #128	@ 0x80
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fbb3 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03a      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10b      	bne.n	800235a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002350:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3302      	adds	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e007      	b.n	800236a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3301      	adds	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1cb      	bne.n	800231a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	2140      	movs	r1, #64	@ 0x40
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fb7f 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e006      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b08a      	sub	sp, #40	@ 0x28
 80023be:	af02      	add	r7, sp, #8
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	f040 8081 	bne.w	80024de <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_UART_Receive+0x2e>
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e079      	b.n	80024e0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2222      	movs	r2, #34	@ 0x22
 80023f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002400:	f7fe fcbe 	bl	8000d80 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800241a:	d108      	bne.n	800242e <HAL_UART_Receive+0x74>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e003      	b.n	8002436 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002436:	e047      	b.n	80024c8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	2120      	movs	r1, #32
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fb24 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	b29a      	uxth	r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3302      	adds	r3, #2
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	e01f      	b.n	80024ba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002482:	d007      	beq.n	8002494 <HAL_UART_Receive+0xda>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <HAL_UART_Receive+0xe8>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e008      	b.n	80024b4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1b2      	bne.n	8002438 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0ba      	sub	sp, #232	@ 0xe8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_UART_IRQHandler+0x66>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fbd7 	bl	8002cfa <UART_Receive_IT>
      return;
 800254c:	e273      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800254e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80de 	beq.w	8002714 <HAL_UART_IRQHandler+0x22c>
 8002558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002568:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80d1 	beq.w	8002714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xae>
 800257e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0xd2>
 80025a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_UART_IRQHandler+0xf6>
 80025c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_UART_IRQHandler+0x126>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 820a 	beq.w	8002a2c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_UART_IRQHandler+0x14e>
 8002624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fb62 	bl	8002cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_UART_IRQHandler+0x17a>
 800265a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04f      	beq.n	8002702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa6d 	bl	8002b42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b40      	cmp	r3, #64	@ 0x40
 8002674:	d141      	bne.n	80026fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3314      	adds	r3, #20
 800267c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800268c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3314      	adds	r3, #20
 800269e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1d9      	bne.n	8002676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d013      	beq.n	80026f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	4a8a      	ldr	r2, [pc, #552]	@ (80028f8 <HAL_UART_IRQHandler+0x410>)
 80026d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fcb0 	bl	800103c <HAL_DMA_Abort_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026ec:	4610      	mov	r0, r2
 80026ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e00e      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9b6 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e00a      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9b2 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e006      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9ae 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800270e:	e18d      	b.n	8002a2c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	bf00      	nop
    return;
 8002712:	e18b      	b.n	8002a2c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	2b01      	cmp	r3, #1
 800271a:	f040 8167 	bne.w	80029ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8160 	beq.w	80029ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800272c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8159 	beq.w	80029ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	f040 80ce 	bne.w	80028fc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800276c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a9 	beq.w	80028c8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800277a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800277e:	429a      	cmp	r2, r3
 8002780:	f080 80a2 	bcs.w	80028c8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800278a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002796:	f000 8088 	beq.w	80028aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1d9      	bne.n	800279a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3314      	adds	r3, #20
 80027ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800280a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800280e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800281c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e1      	bne.n	80027e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800284c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e3      	bne.n	8002822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800288c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800288e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002890:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002892:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002894:	e841 2300 	strex	r3, r2, [r1]
 8002898:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800289a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e3      	bne.n	8002868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fb59 	bl	8000f5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8d9 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028c6:	e0b3      	b.n	8002a30 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 80ad 	bne.w	8002a30 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e0:	f040 80a6 	bne.w	8002a30 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8c1 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
      return;
 80028f6:	e09b      	b.n	8002a30 <HAL_UART_IRQHandler+0x548>
 80028f8:	08002c09 	.word	0x08002c09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002904:	b29b      	uxth	r3, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 808e 	beq.w	8002a34 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8089 	beq.w	8002a34 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002946:	647a      	str	r2, [r7, #68]	@ 0x44
 8002948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800294c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e3      	bne.n	8002922 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	623b      	str	r3, [r7, #32]
   return(result);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800297e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e3      	bne.n	800295a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0310 	bic.w	r3, r3, #16
 80029b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029c4:	61fa      	str	r2, [r7, #28]
 80029c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	69b9      	ldr	r1, [r7, #24]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	617b      	str	r3, [r7, #20]
   return(result);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e3      	bne.n	80029a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f847 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029ea:	e023      	b.n	8002a34 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_UART_IRQHandler+0x524>
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f910 	bl	8002c2a <UART_Transmit_IT>
    return;
 8002a0a:	e014      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <HAL_UART_IRQHandler+0x54e>
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f950 	bl	8002cca <UART_EndTransmit_IT>
    return;
 8002a2a:	e004      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
    return;
 8002a2c:	bf00      	nop
 8002a2e:	e002      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a34:	bf00      	nop
  }
}
 8002a36:	37e8      	adds	r7, #232	@ 0xe8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	e03b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d037      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe f969 	bl	8000d80 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e03a      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d023      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b80      	cmp	r3, #128	@ 0x80
 8002ad6:	d020      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d01d      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d116      	bne.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f81d 	bl	8002b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d0b4      	beq.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b095      	sub	sp, #84	@ 0x54
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e5      	bne.n	8002b7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d119      	bne.n	8002bee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f023 0310 	bic.w	r3, r3, #16
 8002bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	613b      	str	r3, [r7, #16]
   return(result);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bfc:	bf00      	nop
 8002bfe:	3754      	adds	r7, #84	@ 0x54
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff21 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b21      	cmp	r3, #33	@ 0x21
 8002c3c:	d13e      	bne.n	8002cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	d114      	bne.n	8002c72 <UART_Transmit_IT+0x48>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d110      	bne.n	8002c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	1c9a      	adds	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]
 8002c70:	e008      	b.n	8002c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	1c59      	adds	r1, r3, #1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6211      	str	r1, [r2, #32]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4619      	mov	r1, r3
 8002c92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fea6 	bl	8002a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08c      	sub	sp, #48	@ 0x30
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b22      	cmp	r3, #34	@ 0x22
 8002d14:	f040 80aa 	bne.w	8002e6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d115      	bne.n	8002d4e <UART_Receive_IT+0x54>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d111      	bne.n	8002d4e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4c:	e024      	b.n	8002d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d007      	beq.n	8002d6e <UART_Receive_IT+0x74>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <UART_Receive_IT+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e008      	b.n	8002d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4619      	mov	r1, r3
 8002da6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d15d      	bne.n	8002e68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0220 	bic.w	r2, r2, #32
 8002dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d135      	bne.n	8002e5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	613b      	str	r3, [r7, #16]
   return(result);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	623a      	str	r2, [r7, #32]
 8002e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	69f9      	ldr	r1, [r7, #28]
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d10a      	bne.n	8002e50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe0e 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
 8002e5c:	e002      	b.n	8002e64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fdf6 	bl	8002a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e002      	b.n	8002e6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3730      	adds	r7, #48	@ 0x30
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b0c0      	sub	sp, #256	@ 0x100
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ed0:	f021 010c 	bic.w	r1, r1, #12
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	ea40 0301 	orr.w	r3, r0, r1
 8002efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <UART_SetConfig+0x2cc>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0xa0>
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <UART_SetConfig+0x2d0>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d104      	bne.n	8002f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7fe fe92 	bl	8001c40 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f20:	e003      	b.n	8002f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f22:	f7fe fe79 	bl	8001c18 <HAL_RCC_GetPCLK1Freq>
 8002f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f34:	f040 810c 	bne.w	8003150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f52:	415b      	adcs	r3, r3
 8002f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	eb12 0801 	adds.w	r8, r2, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb43 0901 	adc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	18db      	adds	r3, r3, r3
 8002faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fac:	4613      	mov	r3, r2
 8002fae:	eb42 0303 	adc.w	r3, r2, r3
 8002fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fbc:	f7fd f960 	bl	8000280 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b61      	ldr	r3, [pc, #388]	@ (800314c <UART_SetConfig+0x2d4>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011c      	lsls	r4, r3, #4
 8002fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800300c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003010:	4692      	mov	sl, r2
 8003012:	469b      	mov	fp, r3
 8003014:	4643      	mov	r3, r8
 8003016:	eb1a 0303 	adds.w	r3, sl, r3
 800301a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800301e:	464b      	mov	r3, r9
 8003020:	eb4b 0303 	adc.w	r3, fp, r3
 8003024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800303c:	460b      	mov	r3, r1
 800303e:	18db      	adds	r3, r3, r3
 8003040:	643b      	str	r3, [r7, #64]	@ 0x40
 8003042:	4613      	mov	r3, r2
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800304e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003052:	f7fd f915 	bl	8000280 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4611      	mov	r1, r2
 800305c:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <UART_SetConfig+0x2d4>)
 800305e:	fba3 2301 	umull	r2, r3, r3, r1
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2264      	movs	r2, #100	@ 0x64
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	1acb      	subs	r3, r1, r3
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003072:	4b36      	ldr	r3, [pc, #216]	@ (800314c <UART_SetConfig+0x2d4>)
 8003074:	fba3 2302 	umull	r2, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003080:	441c      	add	r4, r3
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800308c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	1891      	adds	r1, r2, r2
 800309a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800309c:	415b      	adcs	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030a4:	4641      	mov	r1, r8
 80030a6:	1851      	adds	r1, r2, r1
 80030a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80030aa:	4649      	mov	r1, r9
 80030ac:	414b      	adcs	r3, r1
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030bc:	4659      	mov	r1, fp
 80030be:	00cb      	lsls	r3, r1, #3
 80030c0:	4651      	mov	r1, sl
 80030c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c6:	4651      	mov	r1, sl
 80030c8:	00ca      	lsls	r2, r1, #3
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	4642      	mov	r2, r8
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030d8:	464b      	mov	r3, r9
 80030da:	460a      	mov	r2, r1
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030f8:	460b      	mov	r3, r1
 80030fa:	18db      	adds	r3, r3, r3
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	4613      	mov	r3, r2
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800310a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800310e:	f7fd f8b7 	bl	8000280 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <UART_SetConfig+0x2d4>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	@ 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	@ 0x32
 800312a:	4a08      	ldr	r2, [pc, #32]	@ (800314c <UART_SetConfig+0x2d4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4422      	add	r2, r4
 800313e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003140:	e106      	b.n	8003350 <UART_SetConfig+0x4d8>
 8003142:	bf00      	nop
 8003144:	40011000 	.word	0x40011000
 8003148:	40011400 	.word	0x40011400
 800314c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800315a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800315e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003162:	4642      	mov	r2, r8
 8003164:	464b      	mov	r3, r9
 8003166:	1891      	adds	r1, r2, r2
 8003168:	6239      	str	r1, [r7, #32]
 800316a:	415b      	adcs	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003172:	4641      	mov	r1, r8
 8003174:	1854      	adds	r4, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0501 	adc.w	r5, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	00eb      	lsls	r3, r5, #3
 8003186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318a:	00e2      	lsls	r2, r4, #3
 800318c:	4614      	mov	r4, r2
 800318e:	461d      	mov	r5, r3
 8003190:	4643      	mov	r3, r8
 8003192:	18e3      	adds	r3, r4, r3
 8003194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003198:	464b      	mov	r3, r9
 800319a:	eb45 0303 	adc.w	r3, r5, r3
 800319e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031be:	4629      	mov	r1, r5
 80031c0:	008b      	lsls	r3, r1, #2
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c8:	4621      	mov	r1, r4
 80031ca:	008a      	lsls	r2, r1, #2
 80031cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031d0:	f7fd f856 	bl	8000280 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b60      	ldr	r3, [pc, #384]	@ (800335c <UART_SetConfig+0x4e4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	61b9      	str	r1, [r7, #24]
 80031fc:	415b      	adcs	r3, r3
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003204:	4641      	mov	r1, r8
 8003206:	1851      	adds	r1, r2, r1
 8003208:	6139      	str	r1, [r7, #16]
 800320a:	4649      	mov	r1, r9
 800320c:	414b      	adcs	r3, r1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800321c:	4659      	mov	r1, fp
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4651      	mov	r1, sl
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4651      	mov	r1, sl
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4642      	mov	r2, r8
 8003232:	189b      	adds	r3, r3, r2
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003238:	464b      	mov	r3, r9
 800323a:	460a      	mov	r2, r1
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800324e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800325c:	4649      	mov	r1, r9
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003266:	4641      	mov	r1, r8
 8003268:	008a      	lsls	r2, r1, #2
 800326a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800326e:	f7fd f807 	bl	8000280 <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4611      	mov	r1, r2
 8003278:	4b38      	ldr	r3, [pc, #224]	@ (800335c <UART_SetConfig+0x4e4>)
 800327a:	fba3 2301 	umull	r2, r3, r3, r1
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	@ 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	@ 0x32
 800328c:	4a33      	ldr	r2, [pc, #204]	@ (800335c <UART_SetConfig+0x4e4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329e:	2200      	movs	r2, #0
 80032a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80032a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	415b      	adcs	r3, r3
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ea:	464b      	mov	r3, r9
 80032ec:	460a      	mov	r2, r1
 80032ee:	eb42 0303 	adc.w	r3, r2, r3
 80032f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800330c:	4649      	mov	r1, r9
 800330e:	008b      	lsls	r3, r1, #2
 8003310:	4641      	mov	r1, r8
 8003312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003316:	4641      	mov	r1, r8
 8003318:	008a      	lsls	r2, r1, #2
 800331a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800331e:	f7fc ffaf 	bl	8000280 <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <UART_SetConfig+0x4e4>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	@ 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	3332      	adds	r3, #50	@ 0x32
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <UART_SetConfig+0x4e4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4422      	add	r2, r4
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003356:	46bd      	mov	sp, r7
 8003358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800336e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003372:	2b84      	cmp	r3, #132	@ 0x84
 8003374:	d005      	beq.n	8003382 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	3303      	adds	r3, #3
 8003380:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003394:	f000 fa7a 	bl	800388c <vTaskStartScheduler>
  
  return osOK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	bd80      	pop	{r7, pc}

0800339e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800339e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a0:	b089      	sub	sp, #36	@ 0x24
 80033a2:	af04      	add	r7, sp, #16
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <osThreadCreate+0x54>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685c      	ldr	r4, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691e      	ldr	r6, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ffc8 	bl	8003360 <makeFreeRtosPriority>
 80033d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033da:	9202      	str	r2, [sp, #8]
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	9100      	str	r1, [sp, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4632      	mov	r2, r6
 80033e4:	4629      	mov	r1, r5
 80033e6:	4620      	mov	r0, r4
 80033e8:	f000 f8a0 	bl	800352c <xTaskCreateStatic>
 80033ec:	4603      	mov	r3, r0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e01c      	b.n	800342c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685c      	ldr	r4, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffaa 	bl	8003360 <makeFreeRtosPriority>
 800340c:	4602      	mov	r2, r0
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	9200      	str	r2, [sp, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	4632      	mov	r2, r6
 800341a:	4629      	mov	r1, r5
 800341c:	4620      	mov	r0, r4
 800341e:	f000 f8e5 	bl	80035ec <xTaskCreate>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	e000      	b.n	800342e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800342c:	68fb      	ldr	r3, [r7, #12]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003436 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f103 0208 	add.w	r2, r3, #8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f103 0208 	add.w	r2, r3, #8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d103      	bne.n	800350c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	@ 0x38
 8003530:	af04      	add	r7, sp, #16
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800353a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10b      	bne.n	8003576 <xTaskCreateStatic+0x4a>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	61fb      	str	r3, [r7, #28]
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	e7fd      	b.n	8003572 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003576:	23a0      	movs	r3, #160	@ 0xa0
 8003578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2ba0      	cmp	r3, #160	@ 0xa0
 800357e:	d00b      	beq.n	8003598 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	61bb      	str	r3, [r7, #24]
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	e7fd      	b.n	8003594 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003598:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01e      	beq.n	80035de <xTaskCreateStatic+0xb2>
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01b      	beq.n	80035de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035b8:	2300      	movs	r3, #0
 80035ba:	9303      	str	r3, [sp, #12]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	9302      	str	r3, [sp, #8]
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f851 	bl	8003678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035d8:	f000 f8ee 	bl	80037b8 <prvAddNewTaskToReadyList>
 80035dc:	e001      	b.n	80035e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035e2:	697b      	ldr	r3, [r7, #20]
	}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	@ 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	@ 0x30
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe61 	bl	80042c8 <pvPortMalloc>
 8003606:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00e      	beq.n	800362c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800360e:	20a0      	movs	r0, #160	@ 0xa0
 8003610:	f000 fe5a 	bl	80042c8 <pvPortMalloc>
 8003614:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
 8003622:	e005      	b.n	8003630 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f000 ff1d 	bl	8004464 <vPortFree>
 800362a:	e001      	b.n	8003630 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	2300      	movs	r3, #0
 8003642:	9303      	str	r3, [sp, #12]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f80f 	bl	8003678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800365a:	69f8      	ldr	r0, [r7, #28]
 800365c:	f000 f8ac 	bl	80037b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003660:	2301      	movs	r3, #1
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	e002      	b.n	800366c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800366c:	69bb      	ldr	r3, [r7, #24]
	}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003690:	3b01      	subs	r3, #1
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f023 0307 	bic.w	r3, r3, #7
 800369e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	617b      	str	r3, [r7, #20]
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01f      	beq.n	8003708 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	e012      	b.n	80036f4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	7819      	ldrb	r1, [r3, #0]
 80036d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	3334      	adds	r3, #52	@ 0x34
 80036de:	460a      	mov	r2, r1
 80036e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	d9e9      	bls.n	80036ce <prvInitialiseNewTask+0x56>
 80036fa:	e000      	b.n	80036fe <prvInitialiseNewTask+0x86>
			{
				break;
 80036fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003706:	e003      	b.n	8003710 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	2b06      	cmp	r3, #6
 8003714:	d901      	bls.n	800371a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003716:	2306      	movs	r3, #6
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003724:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800372c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372e:	3304      	adds	r3, #4
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fea0 	bl	8003476 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	3318      	adds	r3, #24
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fe9b 	bl	8003476 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003744:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	f1c3 0207 	rsb	r2, r3, #7
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003754:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003758:	2200      	movs	r2, #0
 800375a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	334c      	adds	r3, #76	@ 0x4c
 800376a:	224c      	movs	r2, #76	@ 0x4c
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fa90 	bl	8004c94 <memset>
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <prvInitialiseNewTask+0x134>)
 8003778:	651a      	str	r2, [r3, #80]	@ 0x50
 800377a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377c:	4a0c      	ldr	r2, [pc, #48]	@ (80037b0 <prvInitialiseNewTask+0x138>)
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <prvInitialiseNewTask+0x13c>)
 8003784:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	69b8      	ldr	r0, [r7, #24]
 800378c:	f000 fb8e 	bl	8003eac <pxPortInitialiseStack>
 8003790:	4602      	mov	r2, r0
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037a2:	bf00      	nop
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20004130 	.word	0x20004130
 80037b0:	20004198 	.word	0x20004198
 80037b4:	20004200 	.word	0x20004200

080037b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037c0:	f000 fca2 	bl	8004108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003870 <prvAddNewTaskToReadyList+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	4a29      	ldr	r2, [pc, #164]	@ (8003870 <prvAddNewTaskToReadyList+0xb8>)
 80037cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ce:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <prvAddNewTaskToReadyList+0xbc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037d6:	4a27      	ldr	r2, [pc, #156]	@ (8003874 <prvAddNewTaskToReadyList+0xbc>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037dc:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <prvAddNewTaskToReadyList+0xb8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d110      	bne.n	8003806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037e4:	f000 fa9e 	bl	8003d24 <prvInitialiseTaskLists>
 80037e8:	e00d      	b.n	8003806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037ea:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <prvAddNewTaskToReadyList+0xc0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037f2:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <prvAddNewTaskToReadyList+0xbc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d802      	bhi.n	8003806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003800:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <prvAddNewTaskToReadyList+0xbc>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <prvAddNewTaskToReadyList+0xc4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <prvAddNewTaskToReadyList+0xc4>)
 800380e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <prvAddNewTaskToReadyList+0xc8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4313      	orrs	r3, r2
 800381e:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <prvAddNewTaskToReadyList+0xc8>)
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4a15      	ldr	r2, [pc, #84]	@ (8003884 <prvAddNewTaskToReadyList+0xcc>)
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7ff fe29 	bl	8003490 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800383e:	f000 fc95 	bl	800416c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <prvAddNewTaskToReadyList+0xc0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <prvAddNewTaskToReadyList+0xbc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <prvAddNewTaskToReadyList+0xd0>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	200004dc 	.word	0x200004dc
 8003874:	200003dc 	.word	0x200003dc
 8003878:	200004e8 	.word	0x200004e8
 800387c:	200004f8 	.word	0x200004f8
 8003880:	200004e4 	.word	0x200004e4
 8003884:	200003e0 	.word	0x200003e0
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800389a:	463a      	mov	r2, r7
 800389c:	1d39      	adds	r1, r7, #4
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe82 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038a8:	6839      	ldr	r1, [r7, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	9202      	str	r2, [sp, #8]
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	460a      	mov	r2, r1
 80038ba:	4921      	ldr	r1, [pc, #132]	@ (8003940 <vTaskStartScheduler+0xb4>)
 80038bc:	4821      	ldr	r0, [pc, #132]	@ (8003944 <vTaskStartScheduler+0xb8>)
 80038be:	f7ff fe35 	bl	800352c <xTaskCreateStatic>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4a20      	ldr	r2, [pc, #128]	@ (8003948 <vTaskStartScheduler+0xbc>)
 80038c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <vTaskStartScheduler+0xbc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e001      	b.n	80038da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d11b      	bne.n	8003918 <vTaskStartScheduler+0x8c>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	613b      	str	r3, [r7, #16]
}
 80038f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038f4:	4b15      	ldr	r3, [pc, #84]	@ (800394c <vTaskStartScheduler+0xc0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	334c      	adds	r3, #76	@ 0x4c
 80038fa:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <vTaskStartScheduler+0xc4>)
 80038fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <vTaskStartScheduler+0xc8>)
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003906:	4b14      	ldr	r3, [pc, #80]	@ (8003958 <vTaskStartScheduler+0xcc>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <vTaskStartScheduler+0xd0>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003912:	f000 fb55 	bl	8003fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003916:	e00f      	b.n	8003938 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d10b      	bne.n	8003938 <vTaskStartScheduler+0xac>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60fb      	str	r3, [r7, #12]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <vTaskStartScheduler+0xa8>
}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08005958 	.word	0x08005958
 8003944:	08003cf5 	.word	0x08003cf5
 8003948:	20000500 	.word	0x20000500
 800394c:	200003dc 	.word	0x200003dc
 8003950:	2000001c 	.word	0x2000001c
 8003954:	200004fc 	.word	0x200004fc
 8003958:	200004e8 	.word	0x200004e8
 800395c:	200004e0 	.word	0x200004e0

08003960 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <vTaskSuspendAll+0x18>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a03      	ldr	r2, [pc, #12]	@ (8003978 <vTaskSuspendAll+0x18>)
 800396c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000504 	.word	0x20000504

0800397c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800398a:	4b42      	ldr	r3, [pc, #264]	@ (8003a94 <xTaskResumeAll+0x118>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <xTaskResumeAll+0x2e>
	__asm volatile
 8003992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	603b      	str	r3, [r7, #0]
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	e7fd      	b.n	80039a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039aa:	f000 fbad 	bl	8004108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039ae:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <xTaskResumeAll+0x118>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	4a37      	ldr	r2, [pc, #220]	@ (8003a94 <xTaskResumeAll+0x118>)
 80039b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b8:	4b36      	ldr	r3, [pc, #216]	@ (8003a94 <xTaskResumeAll+0x118>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d161      	bne.n	8003a84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039c0:	4b35      	ldr	r3, [pc, #212]	@ (8003a98 <xTaskResumeAll+0x11c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05d      	beq.n	8003a84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c8:	e02e      	b.n	8003a28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039ca:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <xTaskResumeAll+0x120>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3318      	adds	r3, #24
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fd7e 	bl	80034d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3304      	adds	r3, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fd79 	bl	80034d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	2201      	movs	r2, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <xTaskResumeAll+0x124>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa0 <xTaskResumeAll+0x124>)
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <xTaskResumeAll+0x128>)
 8003a06:	441a      	add	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7ff fd3e 	bl	8003490 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a18:	4b23      	ldr	r3, [pc, #140]	@ (8003aa8 <xTaskResumeAll+0x12c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a22:	4b22      	ldr	r3, [pc, #136]	@ (8003aac <xTaskResumeAll+0x130>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a28:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <xTaskResumeAll+0x120>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cc      	bne.n	80039ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a36:	f000 fa19 	bl	8003e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <xTaskResumeAll+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a46:	f000 f837 	bl	8003ab8 <xTaskIncrementTick>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a50:	4b16      	ldr	r3, [pc, #88]	@ (8003aac <xTaskResumeAll+0x130>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f1      	bne.n	8003a46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a62:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <xTaskResumeAll+0x134>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a68:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <xTaskResumeAll+0x130>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a74:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <xTaskResumeAll+0x138>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a84:	f000 fb72 	bl	800416c <vPortExitCritical>

	return xAlreadyYielded;
 8003a88:	68bb      	ldr	r3, [r7, #8]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000504 	.word	0x20000504
 8003a98:	200004dc 	.word	0x200004dc
 8003a9c:	2000049c 	.word	0x2000049c
 8003aa0:	200004e4 	.word	0x200004e4
 8003aa4:	200003e0 	.word	0x200003e0
 8003aa8:	200003dc 	.word	0x200003dc
 8003aac:	200004f0 	.word	0x200004f0
 8003ab0:	200004ec 	.word	0x200004ec
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c00 <xTaskIncrementTick+0x148>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 808f 	bne.w	8003bea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003acc:	4b4d      	ldr	r3, [pc, #308]	@ (8003c04 <xTaskIncrementTick+0x14c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8003c04 <xTaskIncrementTick+0x14c>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d121      	bne.n	8003b24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ae0:	4b49      	ldr	r3, [pc, #292]	@ (8003c08 <xTaskIncrementTick+0x150>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	603b      	str	r3, [r7, #0]
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <xTaskIncrementTick+0x46>
 8003b02:	4b41      	ldr	r3, [pc, #260]	@ (8003c08 <xTaskIncrementTick+0x150>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <xTaskIncrementTick+0x154>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c08 <xTaskIncrementTick+0x150>)
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4a3e      	ldr	r2, [pc, #248]	@ (8003c0c <xTaskIncrementTick+0x154>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b3e      	ldr	r3, [pc, #248]	@ (8003c10 <xTaskIncrementTick+0x158>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c10 <xTaskIncrementTick+0x158>)
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	f000 f9a4 	bl	8003e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b24:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <xTaskIncrementTick+0x15c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d348      	bcc.n	8003bc0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b2e:	4b36      	ldr	r3, [pc, #216]	@ (8003c08 <xTaskIncrementTick+0x150>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <xTaskIncrementTick+0x15c>)
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3e:	601a      	str	r2, [r3, #0]
					break;
 8003b40:	e03e      	b.n	8003bc0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b42:	4b31      	ldr	r3, [pc, #196]	@ (8003c08 <xTaskIncrementTick+0x150>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d203      	bcs.n	8003b62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c14 <xTaskIncrementTick+0x15c>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b60:	e02e      	b.n	8003bc0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	3304      	adds	r3, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fcb6 	bl	80034d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	3318      	adds	r3, #24
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fcad 	bl	80034d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	4b24      	ldr	r3, [pc, #144]	@ (8003c18 <xTaskIncrementTick+0x160>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	4a22      	ldr	r2, [pc, #136]	@ (8003c18 <xTaskIncrementTick+0x160>)
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c1c <xTaskIncrementTick+0x164>)
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7ff fc72 	bl	8003490 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <xTaskIncrementTick+0x168>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b9      	bcc.n	8003b2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bbe:	e7b6      	b.n	8003b2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <xTaskIncrementTick+0x168>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	4915      	ldr	r1, [pc, #84]	@ (8003c1c <xTaskIncrementTick+0x164>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d901      	bls.n	8003bdc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bdc:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <xTaskIncrementTick+0x16c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e004      	b.n	8003bf4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bea:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <xTaskIncrementTick+0x170>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <xTaskIncrementTick+0x170>)
 8003bf2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bf4:	697b      	ldr	r3, [r7, #20]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000504 	.word	0x20000504
 8003c04:	200004e0 	.word	0x200004e0
 8003c08:	20000494 	.word	0x20000494
 8003c0c:	20000498 	.word	0x20000498
 8003c10:	200004f4 	.word	0x200004f4
 8003c14:	200004fc 	.word	0x200004fc
 8003c18:	200004e4 	.word	0x200004e4
 8003c1c:	200003e0 	.word	0x200003e0
 8003c20:	200003dc 	.word	0x200003dc
 8003c24:	200004f0 	.word	0x200004f0
 8003c28:	200004ec 	.word	0x200004ec

08003c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c32:	4b2a      	ldr	r3, [pc, #168]	@ (8003cdc <vTaskSwitchContext+0xb0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ce0 <vTaskSwitchContext+0xb4>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c40:	e045      	b.n	8003cce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003c42:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <vTaskSwitchContext+0xb4>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c48:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <vTaskSwitchContext+0xb8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	f1c3 031f 	rsb	r3, r3, #31
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4922      	ldr	r1, [pc, #136]	@ (8003ce8 <vTaskSwitchContext+0xbc>)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	607b      	str	r3, [r7, #4]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <vTaskSwitchContext+0x5a>
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4a14      	ldr	r2, [pc, #80]	@ (8003ce8 <vTaskSwitchContext+0xbc>)
 8003c96:	4413      	add	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3308      	adds	r3, #8
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d104      	bne.n	8003cba <vTaskSwitchContext+0x8e>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cec <vTaskSwitchContext+0xc0>)
 8003cc2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <vTaskSwitchContext+0xc0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	334c      	adds	r3, #76	@ 0x4c
 8003cca:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <vTaskSwitchContext+0xc4>)
 8003ccc:	6013      	str	r3, [r2, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000504 	.word	0x20000504
 8003ce0:	200004f0 	.word	0x200004f0
 8003ce4:	200004e4 	.word	0x200004e4
 8003ce8:	200003e0 	.word	0x200003e0
 8003cec:	200003dc 	.word	0x200003dc
 8003cf0:	2000001c 	.word	0x2000001c

08003cf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cfc:	f000 f852 	bl	8003da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <prvIdleTask+0x28>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d9f9      	bls.n	8003cfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <prvIdleTask+0x2c>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d18:	e7f0      	b.n	8003cfc <prvIdleTask+0x8>
 8003d1a:	bf00      	nop
 8003d1c:	200003e0 	.word	0x200003e0
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	e00c      	b.n	8003d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <prvInitialiseTaskLists+0x60>)
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fb79 	bl	8003436 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3301      	adds	r3, #1
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b06      	cmp	r3, #6
 8003d4e:	d9ef      	bls.n	8003d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d50:	480d      	ldr	r0, [pc, #52]	@ (8003d88 <prvInitialiseTaskLists+0x64>)
 8003d52:	f7ff fb70 	bl	8003436 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d56:	480d      	ldr	r0, [pc, #52]	@ (8003d8c <prvInitialiseTaskLists+0x68>)
 8003d58:	f7ff fb6d 	bl	8003436 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d5c:	480c      	ldr	r0, [pc, #48]	@ (8003d90 <prvInitialiseTaskLists+0x6c>)
 8003d5e:	f7ff fb6a 	bl	8003436 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d62:	480c      	ldr	r0, [pc, #48]	@ (8003d94 <prvInitialiseTaskLists+0x70>)
 8003d64:	f7ff fb67 	bl	8003436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d68:	480b      	ldr	r0, [pc, #44]	@ (8003d98 <prvInitialiseTaskLists+0x74>)
 8003d6a:	f7ff fb64 	bl	8003436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d9c <prvInitialiseTaskLists+0x78>)
 8003d70:	4a05      	ldr	r2, [pc, #20]	@ (8003d88 <prvInitialiseTaskLists+0x64>)
 8003d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d74:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <prvInitialiseTaskLists+0x7c>)
 8003d76:	4a05      	ldr	r2, [pc, #20]	@ (8003d8c <prvInitialiseTaskLists+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200003e0 	.word	0x200003e0
 8003d88:	2000046c 	.word	0x2000046c
 8003d8c:	20000480 	.word	0x20000480
 8003d90:	2000049c 	.word	0x2000049c
 8003d94:	200004b0 	.word	0x200004b0
 8003d98:	200004c8 	.word	0x200004c8
 8003d9c:	20000494 	.word	0x20000494
 8003da0:	20000498 	.word	0x20000498

08003da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003daa:	e019      	b.n	8003de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003dac:	f000 f9ac 	bl	8004108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <prvCheckTasksWaitingTermination+0x50>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fb8b 	bl	80034d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <prvCheckTasksWaitingTermination+0x54>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8003df8 <prvCheckTasksWaitingTermination+0x54>)
 8003dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <prvCheckTasksWaitingTermination+0x58>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <prvCheckTasksWaitingTermination+0x58>)
 8003dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dd6:	f000 f9c9 	bl	800416c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f810 	bl	8003e00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <prvCheckTasksWaitingTermination+0x58>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e1      	bne.n	8003dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200004b0 	.word	0x200004b0
 8003df8:	200004dc 	.word	0x200004dc
 8003dfc:	200004c4 	.word	0x200004c4

08003e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	334c      	adds	r3, #76	@ 0x4c
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff6b 	bl	8004ce8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d108      	bne.n	8003e2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fb1f 	bl	8004464 <vPortFree>
				vPortFree( pxTCB );
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fb1c 	bl	8004464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e2c:	e019      	b.n	8003e62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d103      	bne.n	8003e40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb13 	bl	8004464 <vPortFree>
	}
 8003e3e:	e010      	b.n	8003e62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d00b      	beq.n	8003e62 <prvDeleteTCB+0x62>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60fb      	str	r3, [r7, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <prvDeleteTCB+0x5e>
	}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <prvResetNextTaskUnblockTime+0x38>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e84:	e008      	b.n	8003e98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <prvResetNextTaskUnblockTime+0x38>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <prvResetNextTaskUnblockTime+0x3c>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000494 	.word	0x20000494
 8003ea8:	200004fc 	.word	0x200004fc

08003eac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b04      	subs	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b04      	subs	r3, #4
 8003eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003edc:	4a0c      	ldr	r2, [pc, #48]	@ (8003f10 <pxPortInitialiseStack+0x64>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3b14      	subs	r3, #20
 8003ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f06f 0202 	mvn.w	r2, #2
 8003efa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3b20      	subs	r3, #32
 8003f00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f02:	68fb      	ldr	r3, [r7, #12]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	08003f15 	.word	0x08003f15

08003f14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <prvTaskExitError+0x58>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d00b      	beq.n	8003f40 <prvTaskExitError+0x2c>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	60fb      	str	r3, [r7, #12]
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <prvTaskExitError+0x28>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	60bb      	str	r3, [r7, #8]
}
 8003f52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f54:	bf00      	nop
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0fc      	beq.n	8003f56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	2000000c 	.word	0x2000000c

08003f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f70:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <pxCurrentTCBConst2>)
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	6808      	ldr	r0, [r1, #0]
 8003f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7a:	f380 8809 	msr	PSP, r0
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	4770      	bx	lr
 8003f8c:	f3af 8000 	nop.w

08003f90 <pxCurrentTCBConst2>:
 8003f90:	200003dc 	.word	0x200003dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop

08003f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f98:	4808      	ldr	r0, [pc, #32]	@ (8003fbc <prvPortStartFirstTask+0x24>)
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	6800      	ldr	r0, [r0, #0]
 8003f9e:	f380 8808 	msr	MSP, r0
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f380 8814 	msr	CONTROL, r0
 8003faa:	b662      	cpsie	i
 8003fac:	b661      	cpsie	f
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	df00      	svc	0
 8003fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fba:	bf00      	nop
 8003fbc:	e000ed08 	.word	0xe000ed08

08003fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <xPortStartScheduler+0x124>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <xPortStartScheduler+0x128>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10b      	bne.n	8003fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <xPortStartScheduler+0x124>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3f      	ldr	r2, [pc, #252]	@ (80040ec <xPortStartScheduler+0x12c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10b      	bne.n	800400a <xPortStartScheduler+0x4a>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	613b      	str	r3, [r7, #16]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800400a:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <xPortStartScheduler+0x130>)
 800400c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	22ff      	movs	r2, #255	@ 0xff
 800401a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <xPortStartScheduler+0x134>)
 8004030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004032:	4b31      	ldr	r3, [pc, #196]	@ (80040f8 <xPortStartScheduler+0x138>)
 8004034:	2207      	movs	r2, #7
 8004036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004038:	e009      	b.n	800404e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800403a:	4b2f      	ldr	r3, [pc, #188]	@ (80040f8 <xPortStartScheduler+0x138>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3b01      	subs	r3, #1
 8004040:	4a2d      	ldr	r2, [pc, #180]	@ (80040f8 <xPortStartScheduler+0x138>)
 8004042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	b2db      	uxtb	r3, r3
 800404c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800404e:	78fb      	ldrb	r3, [r7, #3]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b80      	cmp	r3, #128	@ 0x80
 8004058:	d0ef      	beq.n	800403a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800405a:	4b27      	ldr	r3, [pc, #156]	@ (80040f8 <xPortStartScheduler+0x138>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f1c3 0307 	rsb	r3, r3, #7
 8004062:	2b04      	cmp	r3, #4
 8004064:	d00b      	beq.n	800407e <xPortStartScheduler+0xbe>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800407e:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <xPortStartScheduler+0x138>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <xPortStartScheduler+0x138>)
 8004086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <xPortStartScheduler+0x138>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004090:	4a19      	ldr	r2, [pc, #100]	@ (80040f8 <xPortStartScheduler+0x138>)
 8004092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800409c:	4b17      	ldr	r3, [pc, #92]	@ (80040fc <xPortStartScheduler+0x13c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <xPortStartScheduler+0x13c>)
 80040a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040a8:	4b14      	ldr	r3, [pc, #80]	@ (80040fc <xPortStartScheduler+0x13c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a13      	ldr	r2, [pc, #76]	@ (80040fc <xPortStartScheduler+0x13c>)
 80040ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80040b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040b4:	f000 f8da 	bl	800426c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040b8:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <xPortStartScheduler+0x140>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040be:	f000 f8f9 	bl	80042b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <xPortStartScheduler+0x144>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004104 <xPortStartScheduler+0x144>)
 80040c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80040cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040ce:	f7ff ff63 	bl	8003f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040d2:	f7ff fdab 	bl	8003c2c <vTaskSwitchContext>
	prvTaskExitError();
 80040d6:	f7ff ff1d 	bl	8003f14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	e000ed00 	.word	0xe000ed00
 80040e8:	410fc271 	.word	0x410fc271
 80040ec:	410fc270 	.word	0x410fc270
 80040f0:	e000e400 	.word	0xe000e400
 80040f4:	20000508 	.word	0x20000508
 80040f8:	2000050c 	.word	0x2000050c
 80040fc:	e000ed20 	.word	0xe000ed20
 8004100:	2000000c 	.word	0x2000000c
 8004104:	e000ef34 	.word	0xe000ef34

08004108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
}
 8004120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <vPortEnterCritical+0x5c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3301      	adds	r3, #1
 8004128:	4a0e      	ldr	r2, [pc, #56]	@ (8004164 <vPortEnterCritical+0x5c>)
 800412a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800412c:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <vPortEnterCritical+0x5c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d110      	bne.n	8004156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <vPortEnterCritical+0x60>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <vPortEnterCritical+0x4e>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	603b      	str	r3, [r7, #0]
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	e7fd      	b.n	8004152 <vPortEnterCritical+0x4a>
	}
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	2000000c 	.word	0x2000000c
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <vPortExitCritical+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10b      	bne.n	8004192 <vPortExitCritical+0x26>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004192:	4b0a      	ldr	r3, [pc, #40]	@ (80041bc <vPortExitCritical+0x50>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3b01      	subs	r3, #1
 8004198:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <vPortExitCritical+0x50>)
 800419a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <vPortExitCritical+0x50>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <vPortExitCritical+0x44>
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	2000000c 	.word	0x2000000c

080041c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041c0:	f3ef 8009 	mrs	r0, PSP
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <pxCurrentTCBConst>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f01e 0f10 	tst.w	lr, #16
 80041d0:	bf08      	it	eq
 80041d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041da:	6010      	str	r0, [r2, #0]
 80041dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80041e4:	f380 8811 	msr	BASEPRI, r0
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f7ff fd1c 	bl	8003c2c <vTaskSwitchContext>
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f380 8811 	msr	BASEPRI, r0
 80041fc:	bc09      	pop	{r0, r3}
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	6808      	ldr	r0, [r1, #0]
 8004202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004206:	f01e 0f10 	tst.w	lr, #16
 800420a:	bf08      	it	eq
 800420c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004210:	f380 8809 	msr	PSP, r0
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst>:
 8004220:	200003dc 	.word	0x200003dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	607b      	str	r3, [r7, #4]
}
 8004240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004242:	f7ff fc39 	bl	8003ab8 <xTaskIncrementTick>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <SysTick_Handler+0x40>)
 800424e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f383 8811 	msr	BASEPRI, r3
}
 800425e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <vPortSetupTimerInterrupt+0x34>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <vPortSetupTimerInterrupt+0x38>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <vPortSetupTimerInterrupt+0x3c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <vPortSetupTimerInterrupt+0x40>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	4a09      	ldr	r2, [pc, #36]	@ (80042b0 <vPortSetupTimerInterrupt+0x44>)
 800428a:	3b01      	subs	r3, #1
 800428c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800428e:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <vPortSetupTimerInterrupt+0x34>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010
 80042a4:	e000e018 	.word	0xe000e018
 80042a8:	20000000 	.word	0x20000000
 80042ac:	10624dd3 	.word	0x10624dd3
 80042b0:	e000e014 	.word	0xe000e014

080042b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80042c4 <vPortEnableVFP+0x10>
 80042b8:	6801      	ldr	r1, [r0, #0]
 80042ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80042be:	6001      	str	r1, [r0, #0]
 80042c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042c2:	bf00      	nop
 80042c4:	e000ed88 	.word	0xe000ed88

080042c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	@ 0x28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042d4:	f7ff fb44 	bl	8003960 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042d8:	4b5c      	ldr	r3, [pc, #368]	@ (800444c <pvPortMalloc+0x184>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042e0:	f000 f924 	bl	800452c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042e4:	4b5a      	ldr	r3, [pc, #360]	@ (8004450 <pvPortMalloc+0x188>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f040 8095 	bne.w	800441c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01e      	beq.n	8004336 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80042f8:	2208      	movs	r2, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	2b00      	cmp	r3, #0
 8004308:	d015      	beq.n	8004336 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	3308      	adds	r3, #8
 8004312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <pvPortMalloc+0x6e>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	617b      	str	r3, [r7, #20]
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d06f      	beq.n	800441c <pvPortMalloc+0x154>
 800433c:	4b45      	ldr	r3, [pc, #276]	@ (8004454 <pvPortMalloc+0x18c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d86a      	bhi.n	800441c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004346:	4b44      	ldr	r3, [pc, #272]	@ (8004458 <pvPortMalloc+0x190>)
 8004348:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800434a:	4b43      	ldr	r3, [pc, #268]	@ (8004458 <pvPortMalloc+0x190>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004350:	e004      	b.n	800435c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	429a      	cmp	r2, r3
 8004364:	d903      	bls.n	800436e <pvPortMalloc+0xa6>
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f1      	bne.n	8004352 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <pvPortMalloc+0x184>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004374:	429a      	cmp	r2, r3
 8004376:	d051      	beq.n	800441c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2208      	movs	r2, #8
 800437e:	4413      	add	r3, r2
 8004380:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	1ad2      	subs	r2, r2, r3
 8004392:	2308      	movs	r3, #8
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	429a      	cmp	r2, r3
 8004398:	d920      	bls.n	80043dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <pvPortMalloc+0xfc>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	613b      	str	r3, [r7, #16]
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043d6:	69b8      	ldr	r0, [r7, #24]
 80043d8:	f000 f90a 	bl	80045f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <pvPortMalloc+0x18c>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004454 <pvPortMalloc+0x18c>)
 80043e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <pvPortMalloc+0x18c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <pvPortMalloc+0x194>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d203      	bcs.n	80043fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043f6:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <pvPortMalloc+0x18c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a18      	ldr	r2, [pc, #96]	@ (800445c <pvPortMalloc+0x194>)
 80043fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <pvPortMalloc+0x188>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	431a      	orrs	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004412:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <pvPortMalloc+0x198>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	4a11      	ldr	r2, [pc, #68]	@ (8004460 <pvPortMalloc+0x198>)
 800441a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800441c:	f7ff faae 	bl	800397c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <pvPortMalloc+0x17a>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60fb      	str	r3, [r7, #12]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <pvPortMalloc+0x176>
	return pvReturn;
 8004442:	69fb      	ldr	r3, [r7, #28]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3728      	adds	r7, #40	@ 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20004118 	.word	0x20004118
 8004450:	2000412c 	.word	0x2000412c
 8004454:	2000411c 	.word	0x2000411c
 8004458:	20004110 	.word	0x20004110
 800445c:	20004120 	.word	0x20004120
 8004460:	20004124 	.word	0x20004124

08004464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04f      	beq.n	8004516 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004476:	2308      	movs	r3, #8
 8004478:	425b      	negs	r3, r3
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4413      	add	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <vPortFree+0xbc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <vPortFree+0x46>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60fb      	str	r3, [r7, #12]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <vPortFree+0x66>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60bb      	str	r3, [r7, #8]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <vPortFree+0xbc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01e      	beq.n	8004516 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11a      	bne.n	8004516 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <vPortFree+0xbc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	401a      	ands	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044f0:	f7ff fa36 	bl	8003960 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <vPortFree+0xc0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	4a09      	ldr	r2, [pc, #36]	@ (8004524 <vPortFree+0xc0>)
 8004500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004502:	6938      	ldr	r0, [r7, #16]
 8004504:	f000 f874 	bl	80045f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004508:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <vPortFree+0xc4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	4a06      	ldr	r2, [pc, #24]	@ (8004528 <vPortFree+0xc4>)
 8004510:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004512:	f7ff fa33 	bl	800397c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	2000412c 	.word	0x2000412c
 8004524:	2000411c 	.word	0x2000411c
 8004528:	20004128 	.word	0x20004128

0800452c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004532:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004538:	4b27      	ldr	r3, [pc, #156]	@ (80045d8 <prvHeapInit+0xac>)
 800453a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3307      	adds	r3, #7
 800454a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0307 	bic.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <prvHeapInit+0xac>)
 800455c:	4413      	add	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <prvHeapInit+0xb0>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800456a:	4b1c      	ldr	r3, [pc, #112]	@ (80045dc <prvHeapInit+0xb0>)
 800456c:	2200      	movs	r2, #0
 800456e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4413      	add	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004578:	2208      	movs	r2, #8
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <prvHeapInit+0xb4>)
 800458c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800458e:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <prvHeapInit+0xb4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004596:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <prvHeapInit+0xb4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <prvHeapInit+0xb4>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	@ (80045e4 <prvHeapInit+0xb8>)
 80045ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <prvHeapInit+0xbc>)
 80045c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045c4:	4b09      	ldr	r3, [pc, #36]	@ (80045ec <prvHeapInit+0xc0>)
 80045c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045ca:	601a      	str	r2, [r3, #0]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20000510 	.word	0x20000510
 80045dc:	20004110 	.word	0x20004110
 80045e0:	20004118 	.word	0x20004118
 80045e4:	20004120 	.word	0x20004120
 80045e8:	2000411c 	.word	0x2000411c
 80045ec:	2000412c 	.word	0x2000412c

080045f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045f8:	4b28      	ldr	r3, [pc, #160]	@ (800469c <prvInsertBlockIntoFreeList+0xac>)
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e002      	b.n	8004604 <prvInsertBlockIntoFreeList+0x14>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d8f7      	bhi.n	80045fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4413      	add	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d108      	bne.n	8004632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	441a      	add	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d118      	bne.n	8004678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b15      	ldr	r3, [pc, #84]	@ (80046a0 <prvInsertBlockIntoFreeList+0xb0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d00d      	beq.n	800466e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e008      	b.n	8004680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e003      	b.n	8004680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d002      	beq.n	800468e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800468e:	bf00      	nop
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20004110 	.word	0x20004110
 80046a0:	20004118 	.word	0x20004118

080046a4 <_fgets_r>:
 80046a4:	2a01      	cmp	r2, #1
 80046a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046aa:	4681      	mov	r9, r0
 80046ac:	460e      	mov	r6, r1
 80046ae:	4615      	mov	r5, r2
 80046b0:	461c      	mov	r4, r3
 80046b2:	dd21      	ble.n	80046f8 <_fgets_r+0x54>
 80046b4:	b118      	cbz	r0, 80046be <_fgets_r+0x1a>
 80046b6:	6a03      	ldr	r3, [r0, #32]
 80046b8:	b90b      	cbnz	r3, 80046be <_fgets_r+0x1a>
 80046ba:	f000 f8ef 	bl	800489c <__sinit>
 80046be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046c0:	07db      	lsls	r3, r3, #31
 80046c2:	d405      	bmi.n	80046d0 <_fgets_r+0x2c>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	059f      	lsls	r7, r3, #22
 80046c8:	d402      	bmi.n	80046d0 <_fgets_r+0x2c>
 80046ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046cc:	f000 fbcb 	bl	8004e66 <__retarget_lock_acquire_recursive>
 80046d0:	3d01      	subs	r5, #1
 80046d2:	4637      	mov	r7, r6
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	b99b      	cbnz	r3, 8004700 <_fgets_r+0x5c>
 80046d8:	4621      	mov	r1, r4
 80046da:	4648      	mov	r0, r9
 80046dc:	f000 f98e 	bl	80049fc <__srefill_r>
 80046e0:	b168      	cbz	r0, 80046fe <_fgets_r+0x5a>
 80046e2:	42b7      	cmp	r7, r6
 80046e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046e6:	d139      	bne.n	800475c <_fgets_r+0xb8>
 80046e8:	07d8      	lsls	r0, r3, #31
 80046ea:	d405      	bmi.n	80046f8 <_fgets_r+0x54>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	0599      	lsls	r1, r3, #22
 80046f0:	d402      	bmi.n	80046f8 <_fgets_r+0x54>
 80046f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046f4:	f000 fbb8 	bl	8004e68 <__retarget_lock_release_recursive>
 80046f8:	2000      	movs	r0, #0
 80046fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fe:	6863      	ldr	r3, [r4, #4]
 8004700:	f8d4 a000 	ldr.w	sl, [r4]
 8004704:	42ab      	cmp	r3, r5
 8004706:	bf28      	it	cs
 8004708:	462b      	movcs	r3, r5
 800470a:	461a      	mov	r2, r3
 800470c:	210a      	movs	r1, #10
 800470e:	4650      	mov	r0, sl
 8004710:	4698      	mov	r8, r3
 8004712:	f7fb fd5d 	bl	80001d0 <memchr>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	b188      	cbz	r0, 800473e <_fgets_r+0x9a>
 800471a:	3001      	adds	r0, #1
 800471c:	eba0 050a 	sub.w	r5, r0, sl
 8004720:	1b5b      	subs	r3, r3, r5
 8004722:	e9c4 0300 	strd	r0, r3, [r4]
 8004726:	462a      	mov	r2, r5
 8004728:	4651      	mov	r1, sl
 800472a:	4638      	mov	r0, r7
 800472c:	f000 fb9d 	bl	8004e6a <memcpy>
 8004730:	2300      	movs	r3, #0
 8004732:	557b      	strb	r3, [r7, r5]
 8004734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004736:	07da      	lsls	r2, r3, #31
 8004738:	d513      	bpl.n	8004762 <_fgets_r+0xbe>
 800473a:	4630      	mov	r0, r6
 800473c:	e7dd      	b.n	80046fa <_fgets_r+0x56>
 800473e:	eba3 0308 	sub.w	r3, r3, r8
 8004742:	6063      	str	r3, [r4, #4]
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	4443      	add	r3, r8
 8004748:	4638      	mov	r0, r7
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	4642      	mov	r2, r8
 800474e:	4651      	mov	r1, sl
 8004750:	f000 fb8b 	bl	8004e6a <memcpy>
 8004754:	ebb5 0508 	subs.w	r5, r5, r8
 8004758:	4447      	add	r7, r8
 800475a:	d1bb      	bne.n	80046d4 <_fgets_r+0x30>
 800475c:	2300      	movs	r3, #0
 800475e:	703b      	strb	r3, [r7, #0]
 8004760:	e7e8      	b.n	8004734 <_fgets_r+0x90>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	d4e8      	bmi.n	800473a <_fgets_r+0x96>
 8004768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800476a:	f000 fb7d 	bl	8004e68 <__retarget_lock_release_recursive>
 800476e:	e7e4      	b.n	800473a <_fgets_r+0x96>

08004770 <fgets>:
 8004770:	4613      	mov	r3, r2
 8004772:	460a      	mov	r2, r1
 8004774:	4601      	mov	r1, r0
 8004776:	4802      	ldr	r0, [pc, #8]	@ (8004780 <fgets+0x10>)
 8004778:	6800      	ldr	r0, [r0, #0]
 800477a:	f7ff bf93 	b.w	80046a4 <_fgets_r>
 800477e:	bf00      	nop
 8004780:	2000001c 	.word	0x2000001c

08004784 <std>:
 8004784:	2300      	movs	r3, #0
 8004786:	b510      	push	{r4, lr}
 8004788:	4604      	mov	r4, r0
 800478a:	e9c0 3300 	strd	r3, r3, [r0]
 800478e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004792:	6083      	str	r3, [r0, #8]
 8004794:	8181      	strh	r1, [r0, #12]
 8004796:	6643      	str	r3, [r0, #100]	@ 0x64
 8004798:	81c2      	strh	r2, [r0, #14]
 800479a:	6183      	str	r3, [r0, #24]
 800479c:	4619      	mov	r1, r3
 800479e:	2208      	movs	r2, #8
 80047a0:	305c      	adds	r0, #92	@ 0x5c
 80047a2:	f000 fa77 	bl	8004c94 <memset>
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <std+0x58>)
 80047a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <std+0x5c>)
 80047ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <std+0x60>)
 80047b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <std+0x64>)
 80047b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <std+0x68>)
 80047b8:	6224      	str	r4, [r4, #32]
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d006      	beq.n	80047cc <std+0x48>
 80047be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047c2:	4294      	cmp	r4, r2
 80047c4:	d002      	beq.n	80047cc <std+0x48>
 80047c6:	33d0      	adds	r3, #208	@ 0xd0
 80047c8:	429c      	cmp	r4, r3
 80047ca:	d105      	bne.n	80047d8 <std+0x54>
 80047cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d4:	f000 bb46 	b.w	8004e64 <__retarget_lock_init_recursive>
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	bf00      	nop
 80047dc:	08004ae5 	.word	0x08004ae5
 80047e0:	08004b07 	.word	0x08004b07
 80047e4:	08004b3f 	.word	0x08004b3f
 80047e8:	08004b63 	.word	0x08004b63
 80047ec:	20004130 	.word	0x20004130

080047f0 <stdio_exit_handler>:
 80047f0:	4a02      	ldr	r2, [pc, #8]	@ (80047fc <stdio_exit_handler+0xc>)
 80047f2:	4903      	ldr	r1, [pc, #12]	@ (8004800 <stdio_exit_handler+0x10>)
 80047f4:	4803      	ldr	r0, [pc, #12]	@ (8004804 <stdio_exit_handler+0x14>)
 80047f6:	f000 b87b 	b.w	80048f0 <_fwalk_sglue>
 80047fa:	bf00      	nop
 80047fc:	20000010 	.word	0x20000010
 8004800:	0800571d 	.word	0x0800571d
 8004804:	20000020 	.word	0x20000020

08004808 <cleanup_stdio>:
 8004808:	6841      	ldr	r1, [r0, #4]
 800480a:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <cleanup_stdio+0x34>)
 800480c:	4299      	cmp	r1, r3
 800480e:	b510      	push	{r4, lr}
 8004810:	4604      	mov	r4, r0
 8004812:	d001      	beq.n	8004818 <cleanup_stdio+0x10>
 8004814:	f000 ff82 	bl	800571c <_fflush_r>
 8004818:	68a1      	ldr	r1, [r4, #8]
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <cleanup_stdio+0x38>)
 800481c:	4299      	cmp	r1, r3
 800481e:	d002      	beq.n	8004826 <cleanup_stdio+0x1e>
 8004820:	4620      	mov	r0, r4
 8004822:	f000 ff7b 	bl	800571c <_fflush_r>
 8004826:	68e1      	ldr	r1, [r4, #12]
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <cleanup_stdio+0x3c>)
 800482a:	4299      	cmp	r1, r3
 800482c:	d004      	beq.n	8004838 <cleanup_stdio+0x30>
 800482e:	4620      	mov	r0, r4
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	f000 bf72 	b.w	800571c <_fflush_r>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	20004130 	.word	0x20004130
 8004840:	20004198 	.word	0x20004198
 8004844:	20004200 	.word	0x20004200

08004848 <global_stdio_init.part.0>:
 8004848:	b510      	push	{r4, lr}
 800484a:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <global_stdio_init.part.0+0x30>)
 800484c:	4c0b      	ldr	r4, [pc, #44]	@ (800487c <global_stdio_init.part.0+0x34>)
 800484e:	4a0c      	ldr	r2, [pc, #48]	@ (8004880 <global_stdio_init.part.0+0x38>)
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	4620      	mov	r0, r4
 8004854:	2200      	movs	r2, #0
 8004856:	2104      	movs	r1, #4
 8004858:	f7ff ff94 	bl	8004784 <std>
 800485c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004860:	2201      	movs	r2, #1
 8004862:	2109      	movs	r1, #9
 8004864:	f7ff ff8e 	bl	8004784 <std>
 8004868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800486c:	2202      	movs	r2, #2
 800486e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004872:	2112      	movs	r1, #18
 8004874:	f7ff bf86 	b.w	8004784 <std>
 8004878:	20004268 	.word	0x20004268
 800487c:	20004130 	.word	0x20004130
 8004880:	080047f1 	.word	0x080047f1

08004884 <__sfp_lock_acquire>:
 8004884:	4801      	ldr	r0, [pc, #4]	@ (800488c <__sfp_lock_acquire+0x8>)
 8004886:	f000 baee 	b.w	8004e66 <__retarget_lock_acquire_recursive>
 800488a:	bf00      	nop
 800488c:	20004271 	.word	0x20004271

08004890 <__sfp_lock_release>:
 8004890:	4801      	ldr	r0, [pc, #4]	@ (8004898 <__sfp_lock_release+0x8>)
 8004892:	f000 bae9 	b.w	8004e68 <__retarget_lock_release_recursive>
 8004896:	bf00      	nop
 8004898:	20004271 	.word	0x20004271

0800489c <__sinit>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4604      	mov	r4, r0
 80048a0:	f7ff fff0 	bl	8004884 <__sfp_lock_acquire>
 80048a4:	6a23      	ldr	r3, [r4, #32]
 80048a6:	b11b      	cbz	r3, 80048b0 <__sinit+0x14>
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ac:	f7ff bff0 	b.w	8004890 <__sfp_lock_release>
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <__sinit+0x28>)
 80048b2:	6223      	str	r3, [r4, #32]
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <__sinit+0x2c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f5      	bne.n	80048a8 <__sinit+0xc>
 80048bc:	f7ff ffc4 	bl	8004848 <global_stdio_init.part.0>
 80048c0:	e7f2      	b.n	80048a8 <__sinit+0xc>
 80048c2:	bf00      	nop
 80048c4:	08004809 	.word	0x08004809
 80048c8:	20004268 	.word	0x20004268

080048cc <fiprintf>:
 80048cc:	b40e      	push	{r1, r2, r3}
 80048ce:	b503      	push	{r0, r1, lr}
 80048d0:	4601      	mov	r1, r0
 80048d2:	ab03      	add	r3, sp, #12
 80048d4:	4805      	ldr	r0, [pc, #20]	@ (80048ec <fiprintf+0x20>)
 80048d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	f000 fbf5 	bl	80050cc <_vfiprintf_r>
 80048e2:	b002      	add	sp, #8
 80048e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e8:	b003      	add	sp, #12
 80048ea:	4770      	bx	lr
 80048ec:	2000001c 	.word	0x2000001c

080048f0 <_fwalk_sglue>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4607      	mov	r7, r0
 80048f6:	4688      	mov	r8, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	2600      	movs	r6, #0
 80048fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004900:	f1b9 0901 	subs.w	r9, r9, #1
 8004904:	d505      	bpl.n	8004912 <_fwalk_sglue+0x22>
 8004906:	6824      	ldr	r4, [r4, #0]
 8004908:	2c00      	cmp	r4, #0
 800490a:	d1f7      	bne.n	80048fc <_fwalk_sglue+0xc>
 800490c:	4630      	mov	r0, r6
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <_fwalk_sglue+0x38>
 8004918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491c:	3301      	adds	r3, #1
 800491e:	d003      	beq.n	8004928 <_fwalk_sglue+0x38>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	4306      	orrs	r6, r0
 8004928:	3568      	adds	r5, #104	@ 0x68
 800492a:	e7e9      	b.n	8004900 <_fwalk_sglue+0x10>

0800492c <_fwrite_r>:
 800492c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	9c08      	ldr	r4, [sp, #32]
 8004932:	468a      	mov	sl, r1
 8004934:	4690      	mov	r8, r2
 8004936:	fb02 f903 	mul.w	r9, r2, r3
 800493a:	4606      	mov	r6, r0
 800493c:	b118      	cbz	r0, 8004946 <_fwrite_r+0x1a>
 800493e:	6a03      	ldr	r3, [r0, #32]
 8004940:	b90b      	cbnz	r3, 8004946 <_fwrite_r+0x1a>
 8004942:	f7ff ffab 	bl	800489c <__sinit>
 8004946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004948:	07dd      	lsls	r5, r3, #31
 800494a:	d405      	bmi.n	8004958 <_fwrite_r+0x2c>
 800494c:	89a3      	ldrh	r3, [r4, #12]
 800494e:	0598      	lsls	r0, r3, #22
 8004950:	d402      	bmi.n	8004958 <_fwrite_r+0x2c>
 8004952:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004954:	f000 fa87 	bl	8004e66 <__retarget_lock_acquire_recursive>
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	0719      	lsls	r1, r3, #28
 800495c:	d516      	bpl.n	800498c <_fwrite_r+0x60>
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	b1a3      	cbz	r3, 800498c <_fwrite_r+0x60>
 8004962:	2500      	movs	r5, #0
 8004964:	454d      	cmp	r5, r9
 8004966:	d01f      	beq.n	80049a8 <_fwrite_r+0x7c>
 8004968:	68a7      	ldr	r7, [r4, #8]
 800496a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800496e:	3f01      	subs	r7, #1
 8004970:	2f00      	cmp	r7, #0
 8004972:	60a7      	str	r7, [r4, #8]
 8004974:	da04      	bge.n	8004980 <_fwrite_r+0x54>
 8004976:	69a3      	ldr	r3, [r4, #24]
 8004978:	429f      	cmp	r7, r3
 800497a:	db0f      	blt.n	800499c <_fwrite_r+0x70>
 800497c:	290a      	cmp	r1, #10
 800497e:	d00d      	beq.n	800499c <_fwrite_r+0x70>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	6022      	str	r2, [r4, #0]
 8004986:	7019      	strb	r1, [r3, #0]
 8004988:	3501      	adds	r5, #1
 800498a:	e7eb      	b.n	8004964 <_fwrite_r+0x38>
 800498c:	4621      	mov	r1, r4
 800498e:	4630      	mov	r0, r6
 8004990:	f000 f92a 	bl	8004be8 <__swsetup_r>
 8004994:	2800      	cmp	r0, #0
 8004996:	d0e4      	beq.n	8004962 <_fwrite_r+0x36>
 8004998:	2500      	movs	r5, #0
 800499a:	e005      	b.n	80049a8 <_fwrite_r+0x7c>
 800499c:	4622      	mov	r2, r4
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 f8e3 	bl	8004b6a <__swbuf_r>
 80049a4:	3001      	adds	r0, #1
 80049a6:	d1ef      	bne.n	8004988 <_fwrite_r+0x5c>
 80049a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049aa:	07da      	lsls	r2, r3, #31
 80049ac:	d405      	bmi.n	80049ba <_fwrite_r+0x8e>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	059b      	lsls	r3, r3, #22
 80049b2:	d402      	bmi.n	80049ba <_fwrite_r+0x8e>
 80049b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049b6:	f000 fa57 	bl	8004e68 <__retarget_lock_release_recursive>
 80049ba:	fbb5 f0f8 	udiv	r0, r5, r8
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080049c4 <fwrite>:
 80049c4:	b507      	push	{r0, r1, r2, lr}
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	460a      	mov	r2, r1
 80049cc:	4601      	mov	r1, r0
 80049ce:	4803      	ldr	r0, [pc, #12]	@ (80049dc <fwrite+0x18>)
 80049d0:	6800      	ldr	r0, [r0, #0]
 80049d2:	f7ff ffab 	bl	800492c <_fwrite_r>
 80049d6:	b003      	add	sp, #12
 80049d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049dc:	2000001c 	.word	0x2000001c

080049e0 <lflush>:
 80049e0:	898b      	ldrh	r3, [r1, #12]
 80049e2:	f003 0309 	and.w	r3, r3, #9
 80049e6:	2b09      	cmp	r3, #9
 80049e8:	d103      	bne.n	80049f2 <lflush+0x12>
 80049ea:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <lflush+0x18>)
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f000 be95 	b.w	800571c <_fflush_r>
 80049f2:	2000      	movs	r0, #0
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	2000001c 	.word	0x2000001c

080049fc <__srefill_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	460c      	mov	r4, r1
 8004a00:	4605      	mov	r5, r0
 8004a02:	b118      	cbz	r0, 8004a0c <__srefill_r+0x10>
 8004a04:	6a03      	ldr	r3, [r0, #32]
 8004a06:	b90b      	cbnz	r3, 8004a0c <__srefill_r+0x10>
 8004a08:	f7ff ff48 	bl	800489c <__sinit>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a14:	069e      	lsls	r6, r3, #26
 8004a16:	d408      	bmi.n	8004a2a <__srefill_r+0x2e>
 8004a18:	0758      	lsls	r0, r3, #29
 8004a1a:	d445      	bmi.n	8004aa8 <__srefill_r+0xac>
 8004a1c:	06d9      	lsls	r1, r3, #27
 8004a1e:	d407      	bmi.n	8004a30 <__srefill_r+0x34>
 8004a20:	2209      	movs	r2, #9
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	071a      	lsls	r2, r3, #28
 8004a32:	d50b      	bpl.n	8004a4c <__srefill_r+0x50>
 8004a34:	4621      	mov	r1, r4
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 fe70 	bl	800571c <_fflush_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1f4      	bne.n	8004a2a <__srefill_r+0x2e>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	60a0      	str	r0, [r4, #8]
 8004a44:	f023 0308 	bic.w	r3, r3, #8
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	61a0      	str	r0, [r4, #24]
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	b91b      	cbnz	r3, 8004a60 <__srefill_r+0x64>
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	f000 feac 	bl	80057b8 <__smakebuf_r>
 8004a60:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004a64:	07b3      	lsls	r3, r6, #30
 8004a66:	d00f      	beq.n	8004a88 <__srefill_r+0x8c>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <__srefill_r+0xdc>)
 8004a6c:	491b      	ldr	r1, [pc, #108]	@ (8004adc <__srefill_r+0xe0>)
 8004a6e:	481c      	ldr	r0, [pc, #112]	@ (8004ae0 <__srefill_r+0xe4>)
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	f7ff ff3d 	bl	80048f0 <_fwalk_sglue>
 8004a76:	81a6      	strh	r6, [r4, #12]
 8004a78:	f006 0609 	and.w	r6, r6, #9
 8004a7c:	2e09      	cmp	r6, #9
 8004a7e:	d103      	bne.n	8004a88 <__srefill_r+0x8c>
 8004a80:	4621      	mov	r1, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 fdc6 	bl	8005614 <__sflush_r>
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004a8c:	6963      	ldr	r3, [r4, #20]
 8004a8e:	6a21      	ldr	r1, [r4, #32]
 8004a90:	6022      	str	r2, [r4, #0]
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b0      	blx	r6
 8004a96:	2800      	cmp	r0, #0
 8004a98:	6060      	str	r0, [r4, #4]
 8004a9a:	dc17      	bgt.n	8004acc <__srefill_r+0xd0>
 8004a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa0:	d116      	bne.n	8004ad0 <__srefill_r+0xd4>
 8004aa2:	f043 0320 	orr.w	r3, r3, #32
 8004aa6:	e7bf      	b.n	8004a28 <__srefill_r+0x2c>
 8004aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aaa:	2900      	cmp	r1, #0
 8004aac:	d0d2      	beq.n	8004a54 <__srefill_r+0x58>
 8004aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d002      	beq.n	8004abc <__srefill_r+0xc0>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f9e6 	bl	8004e88 <_free_r>
 8004abc:	2300      	movs	r3, #0
 8004abe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ac2:	6063      	str	r3, [r4, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0c5      	beq.n	8004a54 <__srefill_r+0x58>
 8004ac8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	2000      	movs	r0, #0
 8004ace:	e7ae      	b.n	8004a2e <__srefill_r+0x32>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	6062      	str	r2, [r4, #4]
 8004ad4:	e7a6      	b.n	8004a24 <__srefill_r+0x28>
 8004ad6:	bf00      	nop
 8004ad8:	20000010 	.word	0x20000010
 8004adc:	080049e1 	.word	0x080049e1
 8004ae0:	20000020 	.word	0x20000020

08004ae4 <__sread>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aec:	f000 f96c 	bl	8004dc8 <_read_r>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	bfab      	itete	ge
 8004af4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004af6:	89a3      	ldrhlt	r3, [r4, #12]
 8004af8:	181b      	addge	r3, r3, r0
 8004afa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004afe:	bfac      	ite	ge
 8004b00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b02:	81a3      	strhlt	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__swrite>:
 8004b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0a:	461f      	mov	r7, r3
 8004b0c:	898b      	ldrh	r3, [r1, #12]
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	4605      	mov	r5, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	4616      	mov	r6, r2
 8004b16:	d505      	bpl.n	8004b24 <__swrite+0x1e>
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f000 f940 	bl	8004da4 <_lseek_r>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	4632      	mov	r2, r6
 8004b32:	463b      	mov	r3, r7
 8004b34:	4628      	mov	r0, r5
 8004b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	f000 b957 	b.w	8004dec <_write_r>

08004b3e <__sseek>:
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b46:	f000 f92d 	bl	8004da4 <_lseek_r>
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	bf15      	itete	ne
 8004b50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b5a:	81a3      	strheq	r3, [r4, #12]
 8004b5c:	bf18      	it	ne
 8004b5e:	81a3      	strhne	r3, [r4, #12]
 8004b60:	bd10      	pop	{r4, pc}

08004b62 <__sclose>:
 8004b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b66:	f000 b8af 	b.w	8004cc8 <_close_r>

08004b6a <__swbuf_r>:
 8004b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6c:	460e      	mov	r6, r1
 8004b6e:	4614      	mov	r4, r2
 8004b70:	4605      	mov	r5, r0
 8004b72:	b118      	cbz	r0, 8004b7c <__swbuf_r+0x12>
 8004b74:	6a03      	ldr	r3, [r0, #32]
 8004b76:	b90b      	cbnz	r3, 8004b7c <__swbuf_r+0x12>
 8004b78:	f7ff fe90 	bl	800489c <__sinit>
 8004b7c:	69a3      	ldr	r3, [r4, #24]
 8004b7e:	60a3      	str	r3, [r4, #8]
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	071a      	lsls	r2, r3, #28
 8004b84:	d501      	bpl.n	8004b8a <__swbuf_r+0x20>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	b943      	cbnz	r3, 8004b9c <__swbuf_r+0x32>
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 f82b 	bl	8004be8 <__swsetup_r>
 8004b92:	b118      	cbz	r0, 8004b9c <__swbuf_r+0x32>
 8004b94:	f04f 37ff 	mov.w	r7, #4294967295
 8004b98:	4638      	mov	r0, r7
 8004b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	6922      	ldr	r2, [r4, #16]
 8004ba0:	1a98      	subs	r0, r3, r2
 8004ba2:	6963      	ldr	r3, [r4, #20]
 8004ba4:	b2f6      	uxtb	r6, r6
 8004ba6:	4283      	cmp	r3, r0
 8004ba8:	4637      	mov	r7, r6
 8004baa:	dc05      	bgt.n	8004bb8 <__swbuf_r+0x4e>
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fdb4 	bl	800571c <_fflush_r>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d1ed      	bne.n	8004b94 <__swbuf_r+0x2a>
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	60a3      	str	r3, [r4, #8]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	6022      	str	r2, [r4, #0]
 8004bc4:	701e      	strb	r6, [r3, #0]
 8004bc6:	6962      	ldr	r2, [r4, #20]
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d004      	beq.n	8004bd8 <__swbuf_r+0x6e>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	07db      	lsls	r3, r3, #31
 8004bd2:	d5e1      	bpl.n	8004b98 <__swbuf_r+0x2e>
 8004bd4:	2e0a      	cmp	r6, #10
 8004bd6:	d1df      	bne.n	8004b98 <__swbuf_r+0x2e>
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fd9e 	bl	800571c <_fflush_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d0d9      	beq.n	8004b98 <__swbuf_r+0x2e>
 8004be4:	e7d6      	b.n	8004b94 <__swbuf_r+0x2a>
	...

08004be8 <__swsetup_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4b29      	ldr	r3, [pc, #164]	@ (8004c90 <__swsetup_r+0xa8>)
 8004bec:	4605      	mov	r5, r0
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	b118      	cbz	r0, 8004bfc <__swsetup_r+0x14>
 8004bf4:	6a03      	ldr	r3, [r0, #32]
 8004bf6:	b90b      	cbnz	r3, 8004bfc <__swsetup_r+0x14>
 8004bf8:	f7ff fe50 	bl	800489c <__sinit>
 8004bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c00:	0719      	lsls	r1, r3, #28
 8004c02:	d422      	bmi.n	8004c4a <__swsetup_r+0x62>
 8004c04:	06da      	lsls	r2, r3, #27
 8004c06:	d407      	bmi.n	8004c18 <__swsetup_r+0x30>
 8004c08:	2209      	movs	r2, #9
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	e033      	b.n	8004c80 <__swsetup_r+0x98>
 8004c18:	0758      	lsls	r0, r3, #29
 8004c1a:	d512      	bpl.n	8004c42 <__swsetup_r+0x5a>
 8004c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c1e:	b141      	cbz	r1, 8004c32 <__swsetup_r+0x4a>
 8004c20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c24:	4299      	cmp	r1, r3
 8004c26:	d002      	beq.n	8004c2e <__swsetup_r+0x46>
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f000 f92d 	bl	8004e88 <_free_r>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6923      	ldr	r3, [r4, #16]
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f043 0308 	orr.w	r3, r3, #8
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	b94b      	cbnz	r3, 8004c62 <__swsetup_r+0x7a>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c58:	d003      	beq.n	8004c62 <__swsetup_r+0x7a>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	f000 fdab 	bl	80057b8 <__smakebuf_r>
 8004c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c66:	f013 0201 	ands.w	r2, r3, #1
 8004c6a:	d00a      	beq.n	8004c82 <__swsetup_r+0x9a>
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	60a2      	str	r2, [r4, #8]
 8004c70:	6962      	ldr	r2, [r4, #20]
 8004c72:	4252      	negs	r2, r2
 8004c74:	61a2      	str	r2, [r4, #24]
 8004c76:	6922      	ldr	r2, [r4, #16]
 8004c78:	b942      	cbnz	r2, 8004c8c <__swsetup_r+0xa4>
 8004c7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c7e:	d1c5      	bne.n	8004c0c <__swsetup_r+0x24>
 8004c80:	bd38      	pop	{r3, r4, r5, pc}
 8004c82:	0799      	lsls	r1, r3, #30
 8004c84:	bf58      	it	pl
 8004c86:	6962      	ldrpl	r2, [r4, #20]
 8004c88:	60a2      	str	r2, [r4, #8]
 8004c8a:	e7f4      	b.n	8004c76 <__swsetup_r+0x8e>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7f7      	b.n	8004c80 <__swsetup_r+0x98>
 8004c90:	2000001c 	.word	0x2000001c

08004c94 <memset>:
 8004c94:	4402      	add	r2, r0
 8004c96:	4603      	mov	r3, r0
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <strcspn>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461e      	mov	r6, r3
 8004caa:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004cae:	b144      	cbz	r4, 8004cc2 <strcspn+0x1e>
 8004cb0:	1e4a      	subs	r2, r1, #1
 8004cb2:	e001      	b.n	8004cb8 <strcspn+0x14>
 8004cb4:	42a5      	cmp	r5, r4
 8004cb6:	d004      	beq.n	8004cc2 <strcspn+0x1e>
 8004cb8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <strcspn+0x10>
 8004cc0:	e7f2      	b.n	8004ca8 <strcspn+0x4>
 8004cc2:	1a30      	subs	r0, r6, r0
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cc8 <_close_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	@ (8004ce4 <_close_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fb ff78 	bl	8000bc8 <_close>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_close_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_close_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	2000426c 	.word	0x2000426c

08004ce8 <_reclaim_reent>:
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8004da0 <_reclaim_reent+0xb8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4283      	cmp	r3, r0
 8004cee:	b570      	push	{r4, r5, r6, lr}
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	d053      	beq.n	8004d9c <_reclaim_reent+0xb4>
 8004cf4:	69c3      	ldr	r3, [r0, #28]
 8004cf6:	b31b      	cbz	r3, 8004d40 <_reclaim_reent+0x58>
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	b163      	cbz	r3, 8004d16 <_reclaim_reent+0x2e>
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	69e3      	ldr	r3, [r4, #28]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	5959      	ldr	r1, [r3, r5]
 8004d04:	b9b1      	cbnz	r1, 8004d34 <_reclaim_reent+0x4c>
 8004d06:	3504      	adds	r5, #4
 8004d08:	2d80      	cmp	r5, #128	@ 0x80
 8004d0a:	d1f8      	bne.n	8004cfe <_reclaim_reent+0x16>
 8004d0c:	69e3      	ldr	r3, [r4, #28]
 8004d0e:	4620      	mov	r0, r4
 8004d10:	68d9      	ldr	r1, [r3, #12]
 8004d12:	f000 f8b9 	bl	8004e88 <_free_r>
 8004d16:	69e3      	ldr	r3, [r4, #28]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	b111      	cbz	r1, 8004d22 <_reclaim_reent+0x3a>
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f000 f8b3 	bl	8004e88 <_free_r>
 8004d22:	69e3      	ldr	r3, [r4, #28]
 8004d24:	689d      	ldr	r5, [r3, #8]
 8004d26:	b15d      	cbz	r5, 8004d40 <_reclaim_reent+0x58>
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	682d      	ldr	r5, [r5, #0]
 8004d2e:	f000 f8ab 	bl	8004e88 <_free_r>
 8004d32:	e7f8      	b.n	8004d26 <_reclaim_reent+0x3e>
 8004d34:	680e      	ldr	r6, [r1, #0]
 8004d36:	4620      	mov	r0, r4
 8004d38:	f000 f8a6 	bl	8004e88 <_free_r>
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	e7e1      	b.n	8004d04 <_reclaim_reent+0x1c>
 8004d40:	6961      	ldr	r1, [r4, #20]
 8004d42:	b111      	cbz	r1, 8004d4a <_reclaim_reent+0x62>
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 f89f 	bl	8004e88 <_free_r>
 8004d4a:	69e1      	ldr	r1, [r4, #28]
 8004d4c:	b111      	cbz	r1, 8004d54 <_reclaim_reent+0x6c>
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 f89a 	bl	8004e88 <_free_r>
 8004d54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d56:	b111      	cbz	r1, 8004d5e <_reclaim_reent+0x76>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f895 	bl	8004e88 <_free_r>
 8004d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d60:	b111      	cbz	r1, 8004d68 <_reclaim_reent+0x80>
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 f890 	bl	8004e88 <_free_r>
 8004d68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004d6a:	b111      	cbz	r1, 8004d72 <_reclaim_reent+0x8a>
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 f88b 	bl	8004e88 <_free_r>
 8004d72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004d74:	b111      	cbz	r1, 8004d7c <_reclaim_reent+0x94>
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 f886 	bl	8004e88 <_free_r>
 8004d7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004d7e:	b111      	cbz	r1, 8004d86 <_reclaim_reent+0x9e>
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 f881 	bl	8004e88 <_free_r>
 8004d86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004d88:	b111      	cbz	r1, 8004d90 <_reclaim_reent+0xa8>
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 f87c 	bl	8004e88 <_free_r>
 8004d90:	6a23      	ldr	r3, [r4, #32]
 8004d92:	b11b      	cbz	r3, 8004d9c <_reclaim_reent+0xb4>
 8004d94:	4620      	mov	r0, r4
 8004d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d9a:	4718      	bx	r3
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000001c 	.word	0x2000001c

08004da4 <_lseek_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d07      	ldr	r5, [pc, #28]	@ (8004dc4 <_lseek_r+0x20>)
 8004da8:	4604      	mov	r4, r0
 8004daa:	4608      	mov	r0, r1
 8004dac:	4611      	mov	r1, r2
 8004dae:	2200      	movs	r2, #0
 8004db0:	602a      	str	r2, [r5, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f7fb ff2f 	bl	8000c16 <_lseek>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_lseek_r+0x1e>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_lseek_r+0x1e>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	2000426c 	.word	0x2000426c

08004dc8 <_read_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4d07      	ldr	r5, [pc, #28]	@ (8004de8 <_read_r+0x20>)
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fb fc52 	bl	8000680 <_read>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_read_r+0x1e>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_read_r+0x1e>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	2000426c 	.word	0x2000426c

08004dec <_write_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	@ (8004e0c <_write_r+0x20>)
 8004df0:	4604      	mov	r4, r0
 8004df2:	4608      	mov	r0, r1
 8004df4:	4611      	mov	r1, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fb fbf0 	bl	80005e0 <_write>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_write_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_write_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	2000426c 	.word	0x2000426c

08004e10 <__errno>:
 8004e10:	4b01      	ldr	r3, [pc, #4]	@ (8004e18 <__errno+0x8>)
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	2000001c 	.word	0x2000001c

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	@ (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2600      	movs	r6, #0
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 fd30 	bl	8005894 <_init>
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2600      	movs	r6, #0
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	080059b4 	.word	0x080059b4
 8004e58:	080059b4 	.word	0x080059b4
 8004e5c:	080059b4 	.word	0x080059b4
 8004e60:	080059b8 	.word	0x080059b8

08004e64 <__retarget_lock_init_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_acquire_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <__retarget_lock_release_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <memcpy>:
 8004e6a:	440a      	add	r2, r1
 8004e6c:	4291      	cmp	r1, r2
 8004e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e72:	d100      	bne.n	8004e76 <memcpy+0xc>
 8004e74:	4770      	bx	lr
 8004e76:	b510      	push	{r4, lr}
 8004e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e80:	4291      	cmp	r1, r2
 8004e82:	d1f9      	bne.n	8004e78 <memcpy+0xe>
 8004e84:	bd10      	pop	{r4, pc}
	...

08004e88 <_free_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d041      	beq.n	8004f14 <_free_r+0x8c>
 8004e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e94:	1f0c      	subs	r4, r1, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bfb8      	it	lt
 8004e9a:	18e4      	addlt	r4, r4, r3
 8004e9c:	f000 f8e0 	bl	8005060 <__malloc_lock>
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f18 <_free_r+0x90>)
 8004ea2:	6813      	ldr	r3, [r2, #0]
 8004ea4:	b933      	cbnz	r3, 8004eb4 <_free_r+0x2c>
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	6014      	str	r4, [r2, #0]
 8004eaa:	4628      	mov	r0, r5
 8004eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb0:	f000 b8dc 	b.w	800506c <__malloc_unlock>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d908      	bls.n	8004eca <_free_r+0x42>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	1821      	adds	r1, r4, r0
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	bf01      	itttt	eq
 8004ec0:	6819      	ldreq	r1, [r3, #0]
 8004ec2:	685b      	ldreq	r3, [r3, #4]
 8004ec4:	1809      	addeq	r1, r1, r0
 8004ec6:	6021      	streq	r1, [r4, #0]
 8004ec8:	e7ed      	b.n	8004ea6 <_free_r+0x1e>
 8004eca:	461a      	mov	r2, r3
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b10b      	cbz	r3, 8004ed4 <_free_r+0x4c>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d9fa      	bls.n	8004eca <_free_r+0x42>
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	1850      	adds	r0, r2, r1
 8004ed8:	42a0      	cmp	r0, r4
 8004eda:	d10b      	bne.n	8004ef4 <_free_r+0x6c>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	4401      	add	r1, r0
 8004ee0:	1850      	adds	r0, r2, r1
 8004ee2:	4283      	cmp	r3, r0
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	d1e0      	bne.n	8004eaa <_free_r+0x22>
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	6053      	str	r3, [r2, #4]
 8004eee:	4408      	add	r0, r1
 8004ef0:	6010      	str	r0, [r2, #0]
 8004ef2:	e7da      	b.n	8004eaa <_free_r+0x22>
 8004ef4:	d902      	bls.n	8004efc <_free_r+0x74>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	602b      	str	r3, [r5, #0]
 8004efa:	e7d6      	b.n	8004eaa <_free_r+0x22>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	1821      	adds	r1, r4, r0
 8004f00:	428b      	cmp	r3, r1
 8004f02:	bf04      	itt	eq
 8004f04:	6819      	ldreq	r1, [r3, #0]
 8004f06:	685b      	ldreq	r3, [r3, #4]
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	bf04      	itt	eq
 8004f0c:	1809      	addeq	r1, r1, r0
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	6054      	str	r4, [r2, #4]
 8004f12:	e7ca      	b.n	8004eaa <_free_r+0x22>
 8004f14:	bd38      	pop	{r3, r4, r5, pc}
 8004f16:	bf00      	nop
 8004f18:	20004278 	.word	0x20004278

08004f1c <sbrk_aligned>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f5c <sbrk_aligned+0x40>)
 8004f20:	460c      	mov	r4, r1
 8004f22:	6831      	ldr	r1, [r6, #0]
 8004f24:	4605      	mov	r5, r0
 8004f26:	b911      	cbnz	r1, 8004f2e <sbrk_aligned+0x12>
 8004f28:	f000 fca4 	bl	8005874 <_sbrk_r>
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	4621      	mov	r1, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 fc9f 	bl	8005874 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d103      	bne.n	8004f42 <sbrk_aligned+0x26>
 8004f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f3e:	4620      	mov	r0, r4
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
 8004f42:	1cc4      	adds	r4, r0, #3
 8004f44:	f024 0403 	bic.w	r4, r4, #3
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d0f8      	beq.n	8004f3e <sbrk_aligned+0x22>
 8004f4c:	1a21      	subs	r1, r4, r0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 fc90 	bl	8005874 <_sbrk_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d1f2      	bne.n	8004f3e <sbrk_aligned+0x22>
 8004f58:	e7ef      	b.n	8004f3a <sbrk_aligned+0x1e>
 8004f5a:	bf00      	nop
 8004f5c:	20004274 	.word	0x20004274

08004f60 <_malloc_r>:
 8004f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f64:	1ccd      	adds	r5, r1, #3
 8004f66:	f025 0503 	bic.w	r5, r5, #3
 8004f6a:	3508      	adds	r5, #8
 8004f6c:	2d0c      	cmp	r5, #12
 8004f6e:	bf38      	it	cc
 8004f70:	250c      	movcc	r5, #12
 8004f72:	2d00      	cmp	r5, #0
 8004f74:	4606      	mov	r6, r0
 8004f76:	db01      	blt.n	8004f7c <_malloc_r+0x1c>
 8004f78:	42a9      	cmp	r1, r5
 8004f7a:	d904      	bls.n	8004f86 <_malloc_r+0x26>
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	2000      	movs	r0, #0
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800505c <_malloc_r+0xfc>
 8004f8a:	f000 f869 	bl	8005060 <__malloc_lock>
 8004f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f92:	461c      	mov	r4, r3
 8004f94:	bb44      	cbnz	r4, 8004fe8 <_malloc_r+0x88>
 8004f96:	4629      	mov	r1, r5
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ffbf 	bl	8004f1c <sbrk_aligned>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	d158      	bne.n	8005056 <_malloc_r+0xf6>
 8004fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8004fa8:	4627      	mov	r7, r4
 8004faa:	2f00      	cmp	r7, #0
 8004fac:	d143      	bne.n	8005036 <_malloc_r+0xd6>
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d04b      	beq.n	800504a <_malloc_r+0xea>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	eb04 0903 	add.w	r9, r4, r3
 8004fbc:	f000 fc5a 	bl	8005874 <_sbrk_r>
 8004fc0:	4581      	cmp	r9, r0
 8004fc2:	d142      	bne.n	800504a <_malloc_r+0xea>
 8004fc4:	6821      	ldr	r1, [r4, #0]
 8004fc6:	1a6d      	subs	r5, r5, r1
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff ffa6 	bl	8004f1c <sbrk_aligned>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d03a      	beq.n	800504a <_malloc_r+0xea>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	442b      	add	r3, r5
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	f8d8 3000 	ldr.w	r3, [r8]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	bb62      	cbnz	r2, 800503c <_malloc_r+0xdc>
 8004fe2:	f8c8 7000 	str.w	r7, [r8]
 8004fe6:	e00f      	b.n	8005008 <_malloc_r+0xa8>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	1b52      	subs	r2, r2, r5
 8004fec:	d420      	bmi.n	8005030 <_malloc_r+0xd0>
 8004fee:	2a0b      	cmp	r2, #11
 8004ff0:	d917      	bls.n	8005022 <_malloc_r+0xc2>
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	6025      	str	r5, [r4, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	6059      	strne	r1, [r3, #4]
 8004ffc:	6863      	ldr	r3, [r4, #4]
 8004ffe:	bf08      	it	eq
 8005000:	f8c8 1000 	streq.w	r1, [r8]
 8005004:	5162      	str	r2, [r4, r5]
 8005006:	604b      	str	r3, [r1, #4]
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f82f 	bl	800506c <__malloc_unlock>
 800500e:	f104 000b 	add.w	r0, r4, #11
 8005012:	1d23      	adds	r3, r4, #4
 8005014:	f020 0007 	bic.w	r0, r0, #7
 8005018:	1ac2      	subs	r2, r0, r3
 800501a:	bf1c      	itt	ne
 800501c:	1a1b      	subne	r3, r3, r0
 800501e:	50a3      	strne	r3, [r4, r2]
 8005020:	e7af      	b.n	8004f82 <_malloc_r+0x22>
 8005022:	6862      	ldr	r2, [r4, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	bf0c      	ite	eq
 8005028:	f8c8 2000 	streq.w	r2, [r8]
 800502c:	605a      	strne	r2, [r3, #4]
 800502e:	e7eb      	b.n	8005008 <_malloc_r+0xa8>
 8005030:	4623      	mov	r3, r4
 8005032:	6864      	ldr	r4, [r4, #4]
 8005034:	e7ae      	b.n	8004f94 <_malloc_r+0x34>
 8005036:	463c      	mov	r4, r7
 8005038:	687f      	ldr	r7, [r7, #4]
 800503a:	e7b6      	b.n	8004faa <_malloc_r+0x4a>
 800503c:	461a      	mov	r2, r3
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	42a3      	cmp	r3, r4
 8005042:	d1fb      	bne.n	800503c <_malloc_r+0xdc>
 8005044:	2300      	movs	r3, #0
 8005046:	6053      	str	r3, [r2, #4]
 8005048:	e7de      	b.n	8005008 <_malloc_r+0xa8>
 800504a:	230c      	movs	r3, #12
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	4630      	mov	r0, r6
 8005050:	f000 f80c 	bl	800506c <__malloc_unlock>
 8005054:	e794      	b.n	8004f80 <_malloc_r+0x20>
 8005056:	6005      	str	r5, [r0, #0]
 8005058:	e7d6      	b.n	8005008 <_malloc_r+0xa8>
 800505a:	bf00      	nop
 800505c:	20004278 	.word	0x20004278

08005060 <__malloc_lock>:
 8005060:	4801      	ldr	r0, [pc, #4]	@ (8005068 <__malloc_lock+0x8>)
 8005062:	f7ff bf00 	b.w	8004e66 <__retarget_lock_acquire_recursive>
 8005066:	bf00      	nop
 8005068:	20004270 	.word	0x20004270

0800506c <__malloc_unlock>:
 800506c:	4801      	ldr	r0, [pc, #4]	@ (8005074 <__malloc_unlock+0x8>)
 800506e:	f7ff befb 	b.w	8004e68 <__retarget_lock_release_recursive>
 8005072:	bf00      	nop
 8005074:	20004270 	.word	0x20004270

08005078 <__sfputc_r>:
 8005078:	6893      	ldr	r3, [r2, #8]
 800507a:	3b01      	subs	r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	b410      	push	{r4}
 8005080:	6093      	str	r3, [r2, #8]
 8005082:	da08      	bge.n	8005096 <__sfputc_r+0x1e>
 8005084:	6994      	ldr	r4, [r2, #24]
 8005086:	42a3      	cmp	r3, r4
 8005088:	db01      	blt.n	800508e <__sfputc_r+0x16>
 800508a:	290a      	cmp	r1, #10
 800508c:	d103      	bne.n	8005096 <__sfputc_r+0x1e>
 800508e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005092:	f7ff bd6a 	b.w	8004b6a <__swbuf_r>
 8005096:	6813      	ldr	r3, [r2, #0]
 8005098:	1c58      	adds	r0, r3, #1
 800509a:	6010      	str	r0, [r2, #0]
 800509c:	7019      	strb	r1, [r3, #0]
 800509e:	4608      	mov	r0, r1
 80050a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <__sfputs_r>:
 80050a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a8:	4606      	mov	r6, r0
 80050aa:	460f      	mov	r7, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	18d5      	adds	r5, r2, r3
 80050b0:	42ac      	cmp	r4, r5
 80050b2:	d101      	bne.n	80050b8 <__sfputs_r+0x12>
 80050b4:	2000      	movs	r0, #0
 80050b6:	e007      	b.n	80050c8 <__sfputs_r+0x22>
 80050b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050bc:	463a      	mov	r2, r7
 80050be:	4630      	mov	r0, r6
 80050c0:	f7ff ffda 	bl	8005078 <__sfputc_r>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d1f3      	bne.n	80050b0 <__sfputs_r+0xa>
 80050c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050cc <_vfiprintf_r>:
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	460d      	mov	r5, r1
 80050d2:	b09d      	sub	sp, #116	@ 0x74
 80050d4:	4614      	mov	r4, r2
 80050d6:	4698      	mov	r8, r3
 80050d8:	4606      	mov	r6, r0
 80050da:	b118      	cbz	r0, 80050e4 <_vfiprintf_r+0x18>
 80050dc:	6a03      	ldr	r3, [r0, #32]
 80050de:	b90b      	cbnz	r3, 80050e4 <_vfiprintf_r+0x18>
 80050e0:	f7ff fbdc 	bl	800489c <__sinit>
 80050e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	d405      	bmi.n	80050f6 <_vfiprintf_r+0x2a>
 80050ea:	89ab      	ldrh	r3, [r5, #12]
 80050ec:	059a      	lsls	r2, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_vfiprintf_r+0x2a>
 80050f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050f2:	f7ff feb8 	bl	8004e66 <__retarget_lock_acquire_recursive>
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	071b      	lsls	r3, r3, #28
 80050fa:	d501      	bpl.n	8005100 <_vfiprintf_r+0x34>
 80050fc:	692b      	ldr	r3, [r5, #16]
 80050fe:	b99b      	cbnz	r3, 8005128 <_vfiprintf_r+0x5c>
 8005100:	4629      	mov	r1, r5
 8005102:	4630      	mov	r0, r6
 8005104:	f7ff fd70 	bl	8004be8 <__swsetup_r>
 8005108:	b170      	cbz	r0, 8005128 <_vfiprintf_r+0x5c>
 800510a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800510c:	07dc      	lsls	r4, r3, #31
 800510e:	d504      	bpl.n	800511a <_vfiprintf_r+0x4e>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	b01d      	add	sp, #116	@ 0x74
 8005116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	0598      	lsls	r0, r3, #22
 800511e:	d4f7      	bmi.n	8005110 <_vfiprintf_r+0x44>
 8005120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005122:	f7ff fea1 	bl	8004e68 <__retarget_lock_release_recursive>
 8005126:	e7f3      	b.n	8005110 <_vfiprintf_r+0x44>
 8005128:	2300      	movs	r3, #0
 800512a:	9309      	str	r3, [sp, #36]	@ 0x24
 800512c:	2320      	movs	r3, #32
 800512e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005132:	f8cd 800c 	str.w	r8, [sp, #12]
 8005136:	2330      	movs	r3, #48	@ 0x30
 8005138:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80052e8 <_vfiprintf_r+0x21c>
 800513c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005140:	f04f 0901 	mov.w	r9, #1
 8005144:	4623      	mov	r3, r4
 8005146:	469a      	mov	sl, r3
 8005148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514c:	b10a      	cbz	r2, 8005152 <_vfiprintf_r+0x86>
 800514e:	2a25      	cmp	r2, #37	@ 0x25
 8005150:	d1f9      	bne.n	8005146 <_vfiprintf_r+0x7a>
 8005152:	ebba 0b04 	subs.w	fp, sl, r4
 8005156:	d00b      	beq.n	8005170 <_vfiprintf_r+0xa4>
 8005158:	465b      	mov	r3, fp
 800515a:	4622      	mov	r2, r4
 800515c:	4629      	mov	r1, r5
 800515e:	4630      	mov	r0, r6
 8005160:	f7ff ffa1 	bl	80050a6 <__sfputs_r>
 8005164:	3001      	adds	r0, #1
 8005166:	f000 80a7 	beq.w	80052b8 <_vfiprintf_r+0x1ec>
 800516a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800516c:	445a      	add	r2, fp
 800516e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005170:	f89a 3000 	ldrb.w	r3, [sl]
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 809f 	beq.w	80052b8 <_vfiprintf_r+0x1ec>
 800517a:	2300      	movs	r3, #0
 800517c:	f04f 32ff 	mov.w	r2, #4294967295
 8005180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005184:	f10a 0a01 	add.w	sl, sl, #1
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005190:	931a      	str	r3, [sp, #104]	@ 0x68
 8005192:	4654      	mov	r4, sl
 8005194:	2205      	movs	r2, #5
 8005196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519a:	4853      	ldr	r0, [pc, #332]	@ (80052e8 <_vfiprintf_r+0x21c>)
 800519c:	f7fb f818 	bl	80001d0 <memchr>
 80051a0:	9a04      	ldr	r2, [sp, #16]
 80051a2:	b9d8      	cbnz	r0, 80051dc <_vfiprintf_r+0x110>
 80051a4:	06d1      	lsls	r1, r2, #27
 80051a6:	bf44      	itt	mi
 80051a8:	2320      	movmi	r3, #32
 80051aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051ae:	0713      	lsls	r3, r2, #28
 80051b0:	bf44      	itt	mi
 80051b2:	232b      	movmi	r3, #43	@ 0x2b
 80051b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051b8:	f89a 3000 	ldrb.w	r3, [sl]
 80051bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051be:	d015      	beq.n	80051ec <_vfiprintf_r+0x120>
 80051c0:	9a07      	ldr	r2, [sp, #28]
 80051c2:	4654      	mov	r4, sl
 80051c4:	2000      	movs	r0, #0
 80051c6:	f04f 0c0a 	mov.w	ip, #10
 80051ca:	4621      	mov	r1, r4
 80051cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d0:	3b30      	subs	r3, #48	@ 0x30
 80051d2:	2b09      	cmp	r3, #9
 80051d4:	d94b      	bls.n	800526e <_vfiprintf_r+0x1a2>
 80051d6:	b1b0      	cbz	r0, 8005206 <_vfiprintf_r+0x13a>
 80051d8:	9207      	str	r2, [sp, #28]
 80051da:	e014      	b.n	8005206 <_vfiprintf_r+0x13a>
 80051dc:	eba0 0308 	sub.w	r3, r0, r8
 80051e0:	fa09 f303 	lsl.w	r3, r9, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	46a2      	mov	sl, r4
 80051ea:	e7d2      	b.n	8005192 <_vfiprintf_r+0xc6>
 80051ec:	9b03      	ldr	r3, [sp, #12]
 80051ee:	1d19      	adds	r1, r3, #4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	9103      	str	r1, [sp, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bfbb      	ittet	lt
 80051f8:	425b      	neglt	r3, r3
 80051fa:	f042 0202 	orrlt.w	r2, r2, #2
 80051fe:	9307      	strge	r3, [sp, #28]
 8005200:	9307      	strlt	r3, [sp, #28]
 8005202:	bfb8      	it	lt
 8005204:	9204      	strlt	r2, [sp, #16]
 8005206:	7823      	ldrb	r3, [r4, #0]
 8005208:	2b2e      	cmp	r3, #46	@ 0x2e
 800520a:	d10a      	bne.n	8005222 <_vfiprintf_r+0x156>
 800520c:	7863      	ldrb	r3, [r4, #1]
 800520e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005210:	d132      	bne.n	8005278 <_vfiprintf_r+0x1ac>
 8005212:	9b03      	ldr	r3, [sp, #12]
 8005214:	1d1a      	adds	r2, r3, #4
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	9203      	str	r2, [sp, #12]
 800521a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800521e:	3402      	adds	r4, #2
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80052f8 <_vfiprintf_r+0x22c>
 8005226:	7821      	ldrb	r1, [r4, #0]
 8005228:	2203      	movs	r2, #3
 800522a:	4650      	mov	r0, sl
 800522c:	f7fa ffd0 	bl	80001d0 <memchr>
 8005230:	b138      	cbz	r0, 8005242 <_vfiprintf_r+0x176>
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	eba0 000a 	sub.w	r0, r0, sl
 8005238:	2240      	movs	r2, #64	@ 0x40
 800523a:	4082      	lsls	r2, r0
 800523c:	4313      	orrs	r3, r2
 800523e:	3401      	adds	r4, #1
 8005240:	9304      	str	r3, [sp, #16]
 8005242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005246:	4829      	ldr	r0, [pc, #164]	@ (80052ec <_vfiprintf_r+0x220>)
 8005248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800524c:	2206      	movs	r2, #6
 800524e:	f7fa ffbf 	bl	80001d0 <memchr>
 8005252:	2800      	cmp	r0, #0
 8005254:	d03f      	beq.n	80052d6 <_vfiprintf_r+0x20a>
 8005256:	4b26      	ldr	r3, [pc, #152]	@ (80052f0 <_vfiprintf_r+0x224>)
 8005258:	bb1b      	cbnz	r3, 80052a2 <_vfiprintf_r+0x1d6>
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	3307      	adds	r3, #7
 800525e:	f023 0307 	bic.w	r3, r3, #7
 8005262:	3308      	adds	r3, #8
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005268:	443b      	add	r3, r7
 800526a:	9309      	str	r3, [sp, #36]	@ 0x24
 800526c:	e76a      	b.n	8005144 <_vfiprintf_r+0x78>
 800526e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005272:	460c      	mov	r4, r1
 8005274:	2001      	movs	r0, #1
 8005276:	e7a8      	b.n	80051ca <_vfiprintf_r+0xfe>
 8005278:	2300      	movs	r3, #0
 800527a:	3401      	adds	r4, #1
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4620      	mov	r0, r4
 8005286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528a:	3a30      	subs	r2, #48	@ 0x30
 800528c:	2a09      	cmp	r2, #9
 800528e:	d903      	bls.n	8005298 <_vfiprintf_r+0x1cc>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0c6      	beq.n	8005222 <_vfiprintf_r+0x156>
 8005294:	9105      	str	r1, [sp, #20]
 8005296:	e7c4      	b.n	8005222 <_vfiprintf_r+0x156>
 8005298:	fb0c 2101 	mla	r1, ip, r1, r2
 800529c:	4604      	mov	r4, r0
 800529e:	2301      	movs	r3, #1
 80052a0:	e7f0      	b.n	8005284 <_vfiprintf_r+0x1b8>
 80052a2:	ab03      	add	r3, sp, #12
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	462a      	mov	r2, r5
 80052a8:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <_vfiprintf_r+0x228>)
 80052aa:	a904      	add	r1, sp, #16
 80052ac:	4630      	mov	r0, r6
 80052ae:	f3af 8000 	nop.w
 80052b2:	4607      	mov	r7, r0
 80052b4:	1c78      	adds	r0, r7, #1
 80052b6:	d1d6      	bne.n	8005266 <_vfiprintf_r+0x19a>
 80052b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052ba:	07d9      	lsls	r1, r3, #31
 80052bc:	d405      	bmi.n	80052ca <_vfiprintf_r+0x1fe>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	059a      	lsls	r2, r3, #22
 80052c2:	d402      	bmi.n	80052ca <_vfiprintf_r+0x1fe>
 80052c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052c6:	f7ff fdcf 	bl	8004e68 <__retarget_lock_release_recursive>
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	065b      	lsls	r3, r3, #25
 80052ce:	f53f af1f 	bmi.w	8005110 <_vfiprintf_r+0x44>
 80052d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052d4:	e71e      	b.n	8005114 <_vfiprintf_r+0x48>
 80052d6:	ab03      	add	r3, sp, #12
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	462a      	mov	r2, r5
 80052dc:	4b05      	ldr	r3, [pc, #20]	@ (80052f4 <_vfiprintf_r+0x228>)
 80052de:	a904      	add	r1, sp, #16
 80052e0:	4630      	mov	r0, r6
 80052e2:	f000 f879 	bl	80053d8 <_printf_i>
 80052e6:	e7e4      	b.n	80052b2 <_vfiprintf_r+0x1e6>
 80052e8:	08005978 	.word	0x08005978
 80052ec:	08005982 	.word	0x08005982
 80052f0:	00000000 	.word	0x00000000
 80052f4:	080050a7 	.word	0x080050a7
 80052f8:	0800597e 	.word	0x0800597e

080052fc <_printf_common>:
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	4616      	mov	r6, r2
 8005302:	4698      	mov	r8, r3
 8005304:	688a      	ldr	r2, [r1, #8]
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800530c:	4293      	cmp	r3, r2
 800530e:	bfb8      	it	lt
 8005310:	4613      	movlt	r3, r2
 8005312:	6033      	str	r3, [r6, #0]
 8005314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005318:	4607      	mov	r7, r0
 800531a:	460c      	mov	r4, r1
 800531c:	b10a      	cbz	r2, 8005322 <_printf_common+0x26>
 800531e:	3301      	adds	r3, #1
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	0699      	lsls	r1, r3, #26
 8005326:	bf42      	ittt	mi
 8005328:	6833      	ldrmi	r3, [r6, #0]
 800532a:	3302      	addmi	r3, #2
 800532c:	6033      	strmi	r3, [r6, #0]
 800532e:	6825      	ldr	r5, [r4, #0]
 8005330:	f015 0506 	ands.w	r5, r5, #6
 8005334:	d106      	bne.n	8005344 <_printf_common+0x48>
 8005336:	f104 0a19 	add.w	sl, r4, #25
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	6832      	ldr	r2, [r6, #0]
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	42ab      	cmp	r3, r5
 8005342:	dc26      	bgt.n	8005392 <_printf_common+0x96>
 8005344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	3b00      	subs	r3, #0
 800534c:	bf18      	it	ne
 800534e:	2301      	movne	r3, #1
 8005350:	0692      	lsls	r2, r2, #26
 8005352:	d42b      	bmi.n	80053ac <_printf_common+0xb0>
 8005354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005358:	4641      	mov	r1, r8
 800535a:	4638      	mov	r0, r7
 800535c:	47c8      	blx	r9
 800535e:	3001      	adds	r0, #1
 8005360:	d01e      	beq.n	80053a0 <_printf_common+0xa4>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	6922      	ldr	r2, [r4, #16]
 8005366:	f003 0306 	and.w	r3, r3, #6
 800536a:	2b04      	cmp	r3, #4
 800536c:	bf02      	ittt	eq
 800536e:	68e5      	ldreq	r5, [r4, #12]
 8005370:	6833      	ldreq	r3, [r6, #0]
 8005372:	1aed      	subeq	r5, r5, r3
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	bf0c      	ite	eq
 8005378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800537c:	2500      	movne	r5, #0
 800537e:	4293      	cmp	r3, r2
 8005380:	bfc4      	itt	gt
 8005382:	1a9b      	subgt	r3, r3, r2
 8005384:	18ed      	addgt	r5, r5, r3
 8005386:	2600      	movs	r6, #0
 8005388:	341a      	adds	r4, #26
 800538a:	42b5      	cmp	r5, r6
 800538c:	d11a      	bne.n	80053c4 <_printf_common+0xc8>
 800538e:	2000      	movs	r0, #0
 8005390:	e008      	b.n	80053a4 <_printf_common+0xa8>
 8005392:	2301      	movs	r3, #1
 8005394:	4652      	mov	r2, sl
 8005396:	4641      	mov	r1, r8
 8005398:	4638      	mov	r0, r7
 800539a:	47c8      	blx	r9
 800539c:	3001      	adds	r0, #1
 800539e:	d103      	bne.n	80053a8 <_printf_common+0xac>
 80053a0:	f04f 30ff 	mov.w	r0, #4294967295
 80053a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a8:	3501      	adds	r5, #1
 80053aa:	e7c6      	b.n	800533a <_printf_common+0x3e>
 80053ac:	18e1      	adds	r1, r4, r3
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	2030      	movs	r0, #48	@ 0x30
 80053b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053b6:	4422      	add	r2, r4
 80053b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053c0:	3302      	adds	r3, #2
 80053c2:	e7c7      	b.n	8005354 <_printf_common+0x58>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4622      	mov	r2, r4
 80053c8:	4641      	mov	r1, r8
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c8      	blx	r9
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0e6      	beq.n	80053a0 <_printf_common+0xa4>
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7d9      	b.n	800538a <_printf_common+0x8e>
	...

080053d8 <_printf_i>:
 80053d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	7e0f      	ldrb	r7, [r1, #24]
 80053de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053e0:	2f78      	cmp	r7, #120	@ 0x78
 80053e2:	4691      	mov	r9, r2
 80053e4:	4680      	mov	r8, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	469a      	mov	sl, r3
 80053ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053ee:	d807      	bhi.n	8005400 <_printf_i+0x28>
 80053f0:	2f62      	cmp	r7, #98	@ 0x62
 80053f2:	d80a      	bhi.n	800540a <_printf_i+0x32>
 80053f4:	2f00      	cmp	r7, #0
 80053f6:	f000 80d1 	beq.w	800559c <_printf_i+0x1c4>
 80053fa:	2f58      	cmp	r7, #88	@ 0x58
 80053fc:	f000 80b8 	beq.w	8005570 <_printf_i+0x198>
 8005400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005408:	e03a      	b.n	8005480 <_printf_i+0xa8>
 800540a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800540e:	2b15      	cmp	r3, #21
 8005410:	d8f6      	bhi.n	8005400 <_printf_i+0x28>
 8005412:	a101      	add	r1, pc, #4	@ (adr r1, 8005418 <_printf_i+0x40>)
 8005414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005418:	08005471 	.word	0x08005471
 800541c:	08005485 	.word	0x08005485
 8005420:	08005401 	.word	0x08005401
 8005424:	08005401 	.word	0x08005401
 8005428:	08005401 	.word	0x08005401
 800542c:	08005401 	.word	0x08005401
 8005430:	08005485 	.word	0x08005485
 8005434:	08005401 	.word	0x08005401
 8005438:	08005401 	.word	0x08005401
 800543c:	08005401 	.word	0x08005401
 8005440:	08005401 	.word	0x08005401
 8005444:	08005583 	.word	0x08005583
 8005448:	080054af 	.word	0x080054af
 800544c:	0800553d 	.word	0x0800553d
 8005450:	08005401 	.word	0x08005401
 8005454:	08005401 	.word	0x08005401
 8005458:	080055a5 	.word	0x080055a5
 800545c:	08005401 	.word	0x08005401
 8005460:	080054af 	.word	0x080054af
 8005464:	08005401 	.word	0x08005401
 8005468:	08005401 	.word	0x08005401
 800546c:	08005545 	.word	0x08005545
 8005470:	6833      	ldr	r3, [r6, #0]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6032      	str	r2, [r6, #0]
 8005478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800547c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005480:	2301      	movs	r3, #1
 8005482:	e09c      	b.n	80055be <_printf_i+0x1e6>
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	6031      	str	r1, [r6, #0]
 800548c:	0606      	lsls	r6, r0, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xbc>
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	e003      	b.n	800549c <_printf_i+0xc4>
 8005494:	0645      	lsls	r5, r0, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xb8>
 8005498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800549c:	2d00      	cmp	r5, #0
 800549e:	da03      	bge.n	80054a8 <_printf_i+0xd0>
 80054a0:	232d      	movs	r3, #45	@ 0x2d
 80054a2:	426d      	negs	r5, r5
 80054a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a8:	4858      	ldr	r0, [pc, #352]	@ (800560c <_printf_i+0x234>)
 80054aa:	230a      	movs	r3, #10
 80054ac:	e011      	b.n	80054d2 <_printf_i+0xfa>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	0608      	lsls	r0, r1, #24
 80054b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054b8:	d402      	bmi.n	80054c0 <_printf_i+0xe8>
 80054ba:	0649      	lsls	r1, r1, #25
 80054bc:	bf48      	it	mi
 80054be:	b2ad      	uxthmi	r5, r5
 80054c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054c2:	4852      	ldr	r0, [pc, #328]	@ (800560c <_printf_i+0x234>)
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	bf14      	ite	ne
 80054c8:	230a      	movne	r3, #10
 80054ca:	2308      	moveq	r3, #8
 80054cc:	2100      	movs	r1, #0
 80054ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054d2:	6866      	ldr	r6, [r4, #4]
 80054d4:	60a6      	str	r6, [r4, #8]
 80054d6:	2e00      	cmp	r6, #0
 80054d8:	db05      	blt.n	80054e6 <_printf_i+0x10e>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	432e      	orrs	r6, r5
 80054de:	f021 0104 	bic.w	r1, r1, #4
 80054e2:	6021      	str	r1, [r4, #0]
 80054e4:	d04b      	beq.n	800557e <_printf_i+0x1a6>
 80054e6:	4616      	mov	r6, r2
 80054e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054ec:	fb03 5711 	mls	r7, r3, r1, r5
 80054f0:	5dc7      	ldrb	r7, [r0, r7]
 80054f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054f6:	462f      	mov	r7, r5
 80054f8:	42bb      	cmp	r3, r7
 80054fa:	460d      	mov	r5, r1
 80054fc:	d9f4      	bls.n	80054e8 <_printf_i+0x110>
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d10b      	bne.n	800551a <_printf_i+0x142>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	07df      	lsls	r7, r3, #31
 8005506:	d508      	bpl.n	800551a <_printf_i+0x142>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	6861      	ldr	r1, [r4, #4]
 800550c:	4299      	cmp	r1, r3
 800550e:	bfde      	ittt	le
 8005510:	2330      	movle	r3, #48	@ 0x30
 8005512:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005516:	f106 36ff 	addle.w	r6, r6, #4294967295
 800551a:	1b92      	subs	r2, r2, r6
 800551c:	6122      	str	r2, [r4, #16]
 800551e:	f8cd a000 	str.w	sl, [sp]
 8005522:	464b      	mov	r3, r9
 8005524:	aa03      	add	r2, sp, #12
 8005526:	4621      	mov	r1, r4
 8005528:	4640      	mov	r0, r8
 800552a:	f7ff fee7 	bl	80052fc <_printf_common>
 800552e:	3001      	adds	r0, #1
 8005530:	d14a      	bne.n	80055c8 <_printf_i+0x1f0>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295
 8005536:	b004      	add	sp, #16
 8005538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	f043 0320 	orr.w	r3, r3, #32
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	4832      	ldr	r0, [pc, #200]	@ (8005610 <_printf_i+0x238>)
 8005546:	2778      	movs	r7, #120	@ 0x78
 8005548:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	6831      	ldr	r1, [r6, #0]
 8005550:	061f      	lsls	r7, r3, #24
 8005552:	f851 5b04 	ldr.w	r5, [r1], #4
 8005556:	d402      	bmi.n	800555e <_printf_i+0x186>
 8005558:	065f      	lsls	r7, r3, #25
 800555a:	bf48      	it	mi
 800555c:	b2ad      	uxthmi	r5, r5
 800555e:	6031      	str	r1, [r6, #0]
 8005560:	07d9      	lsls	r1, r3, #31
 8005562:	bf44      	itt	mi
 8005564:	f043 0320 	orrmi.w	r3, r3, #32
 8005568:	6023      	strmi	r3, [r4, #0]
 800556a:	b11d      	cbz	r5, 8005574 <_printf_i+0x19c>
 800556c:	2310      	movs	r3, #16
 800556e:	e7ad      	b.n	80054cc <_printf_i+0xf4>
 8005570:	4826      	ldr	r0, [pc, #152]	@ (800560c <_printf_i+0x234>)
 8005572:	e7e9      	b.n	8005548 <_printf_i+0x170>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	f023 0320 	bic.w	r3, r3, #32
 800557a:	6023      	str	r3, [r4, #0]
 800557c:	e7f6      	b.n	800556c <_printf_i+0x194>
 800557e:	4616      	mov	r6, r2
 8005580:	e7bd      	b.n	80054fe <_printf_i+0x126>
 8005582:	6833      	ldr	r3, [r6, #0]
 8005584:	6825      	ldr	r5, [r4, #0]
 8005586:	6961      	ldr	r1, [r4, #20]
 8005588:	1d18      	adds	r0, r3, #4
 800558a:	6030      	str	r0, [r6, #0]
 800558c:	062e      	lsls	r6, r5, #24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	d501      	bpl.n	8005596 <_printf_i+0x1be>
 8005592:	6019      	str	r1, [r3, #0]
 8005594:	e002      	b.n	800559c <_printf_i+0x1c4>
 8005596:	0668      	lsls	r0, r5, #25
 8005598:	d5fb      	bpl.n	8005592 <_printf_i+0x1ba>
 800559a:	8019      	strh	r1, [r3, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	4616      	mov	r6, r2
 80055a2:	e7bc      	b.n	800551e <_printf_i+0x146>
 80055a4:	6833      	ldr	r3, [r6, #0]
 80055a6:	1d1a      	adds	r2, r3, #4
 80055a8:	6032      	str	r2, [r6, #0]
 80055aa:	681e      	ldr	r6, [r3, #0]
 80055ac:	6862      	ldr	r2, [r4, #4]
 80055ae:	2100      	movs	r1, #0
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7fa fe0d 	bl	80001d0 <memchr>
 80055b6:	b108      	cbz	r0, 80055bc <_printf_i+0x1e4>
 80055b8:	1b80      	subs	r0, r0, r6
 80055ba:	6060      	str	r0, [r4, #4]
 80055bc:	6863      	ldr	r3, [r4, #4]
 80055be:	6123      	str	r3, [r4, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055c6:	e7aa      	b.n	800551e <_printf_i+0x146>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	4632      	mov	r2, r6
 80055cc:	4649      	mov	r1, r9
 80055ce:	4640      	mov	r0, r8
 80055d0:	47d0      	blx	sl
 80055d2:	3001      	adds	r0, #1
 80055d4:	d0ad      	beq.n	8005532 <_printf_i+0x15a>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	079b      	lsls	r3, r3, #30
 80055da:	d413      	bmi.n	8005604 <_printf_i+0x22c>
 80055dc:	68e0      	ldr	r0, [r4, #12]
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	4298      	cmp	r0, r3
 80055e2:	bfb8      	it	lt
 80055e4:	4618      	movlt	r0, r3
 80055e6:	e7a6      	b.n	8005536 <_printf_i+0x15e>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4632      	mov	r2, r6
 80055ec:	4649      	mov	r1, r9
 80055ee:	4640      	mov	r0, r8
 80055f0:	47d0      	blx	sl
 80055f2:	3001      	adds	r0, #1
 80055f4:	d09d      	beq.n	8005532 <_printf_i+0x15a>
 80055f6:	3501      	adds	r5, #1
 80055f8:	68e3      	ldr	r3, [r4, #12]
 80055fa:	9903      	ldr	r1, [sp, #12]
 80055fc:	1a5b      	subs	r3, r3, r1
 80055fe:	42ab      	cmp	r3, r5
 8005600:	dcf2      	bgt.n	80055e8 <_printf_i+0x210>
 8005602:	e7eb      	b.n	80055dc <_printf_i+0x204>
 8005604:	2500      	movs	r5, #0
 8005606:	f104 0619 	add.w	r6, r4, #25
 800560a:	e7f5      	b.n	80055f8 <_printf_i+0x220>
 800560c:	08005989 	.word	0x08005989
 8005610:	0800599a 	.word	0x0800599a

08005614 <__sflush_r>:
 8005614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561c:	0716      	lsls	r6, r2, #28
 800561e:	4605      	mov	r5, r0
 8005620:	460c      	mov	r4, r1
 8005622:	d454      	bmi.n	80056ce <__sflush_r+0xba>
 8005624:	684b      	ldr	r3, [r1, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	dc02      	bgt.n	8005630 <__sflush_r+0x1c>
 800562a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	dd48      	ble.n	80056c2 <__sflush_r+0xae>
 8005630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005632:	2e00      	cmp	r6, #0
 8005634:	d045      	beq.n	80056c2 <__sflush_r+0xae>
 8005636:	2300      	movs	r3, #0
 8005638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800563c:	682f      	ldr	r7, [r5, #0]
 800563e:	6a21      	ldr	r1, [r4, #32]
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	d030      	beq.n	80056a6 <__sflush_r+0x92>
 8005644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	0759      	lsls	r1, r3, #29
 800564a:	d505      	bpl.n	8005658 <__sflush_r+0x44>
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005652:	b10b      	cbz	r3, 8005658 <__sflush_r+0x44>
 8005654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	2300      	movs	r3, #0
 800565a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800565c:	6a21      	ldr	r1, [r4, #32]
 800565e:	4628      	mov	r0, r5
 8005660:	47b0      	blx	r6
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	d106      	bne.n	8005676 <__sflush_r+0x62>
 8005668:	6829      	ldr	r1, [r5, #0]
 800566a:	291d      	cmp	r1, #29
 800566c:	d82b      	bhi.n	80056c6 <__sflush_r+0xb2>
 800566e:	4a2a      	ldr	r2, [pc, #168]	@ (8005718 <__sflush_r+0x104>)
 8005670:	40ca      	lsrs	r2, r1
 8005672:	07d6      	lsls	r6, r2, #31
 8005674:	d527      	bpl.n	80056c6 <__sflush_r+0xb2>
 8005676:	2200      	movs	r2, #0
 8005678:	6062      	str	r2, [r4, #4]
 800567a:	04d9      	lsls	r1, r3, #19
 800567c:	6922      	ldr	r2, [r4, #16]
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	d504      	bpl.n	800568c <__sflush_r+0x78>
 8005682:	1c42      	adds	r2, r0, #1
 8005684:	d101      	bne.n	800568a <__sflush_r+0x76>
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	b903      	cbnz	r3, 800568c <__sflush_r+0x78>
 800568a:	6560      	str	r0, [r4, #84]	@ 0x54
 800568c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800568e:	602f      	str	r7, [r5, #0]
 8005690:	b1b9      	cbz	r1, 80056c2 <__sflush_r+0xae>
 8005692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005696:	4299      	cmp	r1, r3
 8005698:	d002      	beq.n	80056a0 <__sflush_r+0x8c>
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff fbf4 	bl	8004e88 <_free_r>
 80056a0:	2300      	movs	r3, #0
 80056a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056a4:	e00d      	b.n	80056c2 <__sflush_r+0xae>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b0      	blx	r6
 80056ac:	4602      	mov	r2, r0
 80056ae:	1c50      	adds	r0, r2, #1
 80056b0:	d1c9      	bne.n	8005646 <__sflush_r+0x32>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0c6      	beq.n	8005646 <__sflush_r+0x32>
 80056b8:	2b1d      	cmp	r3, #29
 80056ba:	d001      	beq.n	80056c0 <__sflush_r+0xac>
 80056bc:	2b16      	cmp	r3, #22
 80056be:	d11e      	bne.n	80056fe <__sflush_r+0xea>
 80056c0:	602f      	str	r7, [r5, #0]
 80056c2:	2000      	movs	r0, #0
 80056c4:	e022      	b.n	800570c <__sflush_r+0xf8>
 80056c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	e01b      	b.n	8005706 <__sflush_r+0xf2>
 80056ce:	690f      	ldr	r7, [r1, #16]
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	d0f6      	beq.n	80056c2 <__sflush_r+0xae>
 80056d4:	0793      	lsls	r3, r2, #30
 80056d6:	680e      	ldr	r6, [r1, #0]
 80056d8:	bf08      	it	eq
 80056da:	694b      	ldreq	r3, [r1, #20]
 80056dc:	600f      	str	r7, [r1, #0]
 80056de:	bf18      	it	ne
 80056e0:	2300      	movne	r3, #0
 80056e2:	eba6 0807 	sub.w	r8, r6, r7
 80056e6:	608b      	str	r3, [r1, #8]
 80056e8:	f1b8 0f00 	cmp.w	r8, #0
 80056ec:	dde9      	ble.n	80056c2 <__sflush_r+0xae>
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056f2:	4643      	mov	r3, r8
 80056f4:	463a      	mov	r2, r7
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b0      	blx	r6
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dc08      	bgt.n	8005710 <__sflush_r+0xfc>
 80056fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	f04f 30ff 	mov.w	r0, #4294967295
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005710:	4407      	add	r7, r0
 8005712:	eba8 0800 	sub.w	r8, r8, r0
 8005716:	e7e7      	b.n	80056e8 <__sflush_r+0xd4>
 8005718:	20400001 	.word	0x20400001

0800571c <_fflush_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	4605      	mov	r5, r0
 8005722:	460c      	mov	r4, r1
 8005724:	b913      	cbnz	r3, 800572c <_fflush_r+0x10>
 8005726:	2500      	movs	r5, #0
 8005728:	4628      	mov	r0, r5
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	b118      	cbz	r0, 8005736 <_fflush_r+0x1a>
 800572e:	6a03      	ldr	r3, [r0, #32]
 8005730:	b90b      	cbnz	r3, 8005736 <_fflush_r+0x1a>
 8005732:	f7ff f8b3 	bl	800489c <__sinit>
 8005736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f3      	beq.n	8005726 <_fflush_r+0xa>
 800573e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005740:	07d0      	lsls	r0, r2, #31
 8005742:	d404      	bmi.n	800574e <_fflush_r+0x32>
 8005744:	0599      	lsls	r1, r3, #22
 8005746:	d402      	bmi.n	800574e <_fflush_r+0x32>
 8005748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574a:	f7ff fb8c 	bl	8004e66 <__retarget_lock_acquire_recursive>
 800574e:	4628      	mov	r0, r5
 8005750:	4621      	mov	r1, r4
 8005752:	f7ff ff5f 	bl	8005614 <__sflush_r>
 8005756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005758:	07da      	lsls	r2, r3, #31
 800575a:	4605      	mov	r5, r0
 800575c:	d4e4      	bmi.n	8005728 <_fflush_r+0xc>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	059b      	lsls	r3, r3, #22
 8005762:	d4e1      	bmi.n	8005728 <_fflush_r+0xc>
 8005764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005766:	f7ff fb7f 	bl	8004e68 <__retarget_lock_release_recursive>
 800576a:	e7dd      	b.n	8005728 <_fflush_r+0xc>

0800576c <__swhatbuf_r>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	460c      	mov	r4, r1
 8005770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005774:	2900      	cmp	r1, #0
 8005776:	b096      	sub	sp, #88	@ 0x58
 8005778:	4615      	mov	r5, r2
 800577a:	461e      	mov	r6, r3
 800577c:	da0d      	bge.n	800579a <__swhatbuf_r+0x2e>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	bf14      	ite	ne
 800578a:	2340      	movne	r3, #64	@ 0x40
 800578c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005790:	2000      	movs	r0, #0
 8005792:	6031      	str	r1, [r6, #0]
 8005794:	602b      	str	r3, [r5, #0]
 8005796:	b016      	add	sp, #88	@ 0x58
 8005798:	bd70      	pop	{r4, r5, r6, pc}
 800579a:	466a      	mov	r2, sp
 800579c:	f000 f848 	bl	8005830 <_fstat_r>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	dbec      	blt.n	800577e <__swhatbuf_r+0x12>
 80057a4:	9901      	ldr	r1, [sp, #4]
 80057a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80057aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80057ae:	4259      	negs	r1, r3
 80057b0:	4159      	adcs	r1, r3
 80057b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057b6:	e7eb      	b.n	8005790 <__swhatbuf_r+0x24>

080057b8 <__smakebuf_r>:
 80057b8:	898b      	ldrh	r3, [r1, #12]
 80057ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057bc:	079d      	lsls	r5, r3, #30
 80057be:	4606      	mov	r6, r0
 80057c0:	460c      	mov	r4, r1
 80057c2:	d507      	bpl.n	80057d4 <__smakebuf_r+0x1c>
 80057c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	2301      	movs	r3, #1
 80057ce:	6163      	str	r3, [r4, #20]
 80057d0:	b003      	add	sp, #12
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d4:	ab01      	add	r3, sp, #4
 80057d6:	466a      	mov	r2, sp
 80057d8:	f7ff ffc8 	bl	800576c <__swhatbuf_r>
 80057dc:	9f00      	ldr	r7, [sp, #0]
 80057de:	4605      	mov	r5, r0
 80057e0:	4639      	mov	r1, r7
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff fbbc 	bl	8004f60 <_malloc_r>
 80057e8:	b948      	cbnz	r0, 80057fe <__smakebuf_r+0x46>
 80057ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ee:	059a      	lsls	r2, r3, #22
 80057f0:	d4ee      	bmi.n	80057d0 <__smakebuf_r+0x18>
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	e7e2      	b.n	80057c4 <__smakebuf_r+0xc>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	6020      	str	r0, [r4, #0]
 8005802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800580e:	b15b      	cbz	r3, 8005828 <__smakebuf_r+0x70>
 8005810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005814:	4630      	mov	r0, r6
 8005816:	f000 f81d 	bl	8005854 <_isatty_r>
 800581a:	b128      	cbz	r0, 8005828 <__smakebuf_r+0x70>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	431d      	orrs	r5, r3
 800582c:	81a5      	strh	r5, [r4, #12]
 800582e:	e7cf      	b.n	80057d0 <__smakebuf_r+0x18>

08005830 <_fstat_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d07      	ldr	r5, [pc, #28]	@ (8005850 <_fstat_r+0x20>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f7fb f9cf 	bl	8000be0 <_fstat>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d102      	bne.n	800584c <_fstat_r+0x1c>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	b103      	cbz	r3, 800584c <_fstat_r+0x1c>
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	bf00      	nop
 8005850:	2000426c 	.word	0x2000426c

08005854 <_isatty_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d06      	ldr	r5, [pc, #24]	@ (8005870 <_isatty_r+0x1c>)
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	f7fb f9ce 	bl	8000c00 <_isatty>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_isatty_r+0x1a>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_isatty_r+0x1a>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	2000426c 	.word	0x2000426c

08005874 <_sbrk_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d06      	ldr	r5, [pc, #24]	@ (8005890 <_sbrk_r+0x1c>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fb f9d6 	bl	8000c30 <_sbrk>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_sbrk_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_sbrk_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	2000426c 	.word	0x2000426c

08005894 <_init>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr

080058a0 <_fini>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr
