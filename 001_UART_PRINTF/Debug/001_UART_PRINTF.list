
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004650  08004650  00005650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          000041fc  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004268  20004268  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132cb  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c93  00000000  00000000  00019367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  0001c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d55  00000000  00000000  0001d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002399e  00000000  00000000  0001de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013147  00000000  00000000  0004182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5a6e  00000000  00000000  00054972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a3e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc0  00000000  00000000  0012a424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004638 	.word	0x08004638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004638 	.word	0x08004638

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000088 	.word	0x20000088
 800052c:	20000128 	.word	0x20000128

08000530 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	b29a      	uxth	r2, r3
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	68b9      	ldr	r1, [r7, #8]
 8000546:	4804      	ldr	r0, [pc, #16]	@ (8000558 <_write+0x28>)
 8000548:	f001 fd24 	bl	8001f94 <HAL_UART_Transmit>
	return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000328 	.word	0x20000328

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b08e      	sub	sp, #56	@ 0x38
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fae1 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f835 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8bb 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056e:	f000 f88f 	bl	8000690 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <main+0x68>)
 8000574:	f107 041c 	add.w	r4, r7, #28
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f8dc 	bl	800274a <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <main+0x6c>)
 8000596:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <main+0x70>)
 800059a:	463c      	mov	r4, r7
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80005aa:	463b      	mov	r3, r7
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f8cb 	bl	800274a <osThreadCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <main+0x74>)
 80005b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ba:	f002 f8bf 	bl	800273c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005be:	bf00      	nop
 80005c0:	e7fd      	b.n	80005be <main+0x62>
 80005c2:	bf00      	nop
 80005c4:	08004658 	.word	0x08004658
 80005c8:	20000370 	.word	0x20000370
 80005cc:	0800467c 	.word	0x0800467c
 80005d0:	20000374 	.word	0x20000374

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fd16 	bl	8004014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <SystemClock_Config+0xb4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a21      	ldr	r2, [pc, #132]	@ (8000688 <SystemClock_Config+0xb4>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <SystemClock_Config+0xb4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <SystemClock_Config+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <SystemClock_Config+0xb8>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <SystemClock_Config+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd2f 	bl	80010a8 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000650:	f000 f894 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ff92 	bl	8001598 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800067a:	f000 f87f 	bl	800077c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 fc14 	bl	8001ef4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f853 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000328 	.word	0x20000328
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

	 /* uint8_t txt1[] = "Text from Task 01\r\n";
	  HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 500);
	    osDelay(500);*/

	  printf("erdem\r\n");
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <gorev2+0x1c>)
 8000722:	f003 fb97 	bl	8003e54 <puts>
	  osDelay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072a:	f002 f85a 	bl	80027e2 <osDelay>
	  printf("erdem\r\n");
 800072e:	bf00      	nop
 8000730:	e7f6      	b.n	8000720 <gorev2+0x8>
 8000732:	bf00      	nop
 8000734:	08004698 	.word	0x08004698

08000738 <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /*uint8_t txt1[] = "Text from Task 02\r\n";
	  	  HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 500);
	  	    osDelay(500);*/
	  printf("yasin\r\n");
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <gorev1+0x1c>)
 8000742:	f003 fb87 	bl	8003e54 <puts>
	  osDelay(500);
 8000746:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074a:	f002 f84a 	bl	80027e2 <osDelay>
	  printf("yasin\r\n");
 800074e:	bf00      	nop
 8000750:	e7f6      	b.n	8000740 <gorev1+0x8>
 8000752:	bf00      	nop
 8000754:	080046a0 	.word	0x080046a0

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f9ff 	bl	8000b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010000 	.word	0x40010000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <HAL_MspInit+0x54>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079c:	6453      	str	r3, [r2, #68]	@ 0x44
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x54>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <HAL_MspInit+0x54>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_MspInit+0x54>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 faa5 	bl	8000d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	@ 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <HAL_UART_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12b      	bne.n	800085a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <HAL_UART_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a17      	ldr	r2, [pc, #92]	@ (8000868 <HAL_UART_MspInit+0x88>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <HAL_UART_MspInit+0x88>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_UART_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_UART_MspInit+0x88>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_UART_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083a:	230c      	movs	r3, #12
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <HAL_UART_MspInit+0x8c>)
 8000856:	f000 fa8b 	bl	8000d70 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	@ 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_InitTick+0xd0>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	4a2d      	ldr	r2, [pc, #180]	@ (8000940 <HAL_InitTick+0xd0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_InitTick+0xd0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f856 	bl	8001958 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008ac:	f001 f840 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 80008b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b4:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <HAL_InitTick+0xd4>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	3b01      	subs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <HAL_InitTick+0xd8>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	@ (800094c <HAL_InitTick+0xdc>)
 80008c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_InitTick+0xd8>)
 80008c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_InitTick+0xd8>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <HAL_InitTick+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_InitTick+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <HAL_InitTick+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008e6:	4818      	ldr	r0, [pc, #96]	@ (8000948 <HAL_InitTick+0xd8>)
 80008e8:	f001 f868 	bl	80019bc <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11b      	bne.n	8000932 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <HAL_InitTick+0xd8>)
 80008fc:	f001 f8b8 	bl	8001a70 <HAL_TIM_Base_Start_IT>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d111      	bne.n	8000932 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800090e:	2019      	movs	r0, #25
 8000910:	f000 fa20 	bl	8000d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d808      	bhi.n	800092c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2019      	movs	r0, #25
 8000920:	f000 f9fc 	bl	8000d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0xe0>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e002      	b.n	8000932 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000936:	4618      	mov	r0, r3
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	431bde83 	.word	0x431bde83
 8000948:	20000378 	.word	0x20000378
 800094c:	40010000 	.word	0x40010000
 8000950:	20000004 	.word	0x20000004

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000992:	f001 f8dd 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000378 	.word	0x20000378

080009a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
  }

  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:
  }
  return len;
}

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a02:	605a      	str	r2, [r3, #4]
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f003 fb7a 	bl	800416c <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20020000 	.word	0x20020000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	200003c0 	.word	0x200003c0
 8000aac:	20004268 	.word	0x20004268

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f003 fb39 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fd29 	bl	800055c <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b18:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 8000b1c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b20:	20004268 	.word	0x20004268

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <HAL_Init+0x40>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_Init+0x40>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_Init+0x40>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f8d8 	bl	8000d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fe8a 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe14 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	200003c4 	.word	0x200003c4

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200003c4 	.word	0x200003c4

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff4c 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2e:	f7ff ff61 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f7ff ffb1 	bl	8000ca0 <NVIC_EncodePriority>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff80 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff54 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	@ (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	@ (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	@ (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	@ (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	@ (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	@ (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	@ (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e267      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d075      	beq.n	80011b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010c6:	4b88      	ldr	r3, [pc, #544]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d00c      	beq.n	80010ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d2:	4b85      	ldr	r3, [pc, #532]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d112      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010de:	4b82      	ldr	r3, [pc, #520]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ea:	d10b      	bne.n	8001104 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b7e      	ldr	r3, [pc, #504]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d05b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x108>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d157      	bne.n	80011b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e242      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800110c:	d106      	bne.n	800111c <HAL_RCC_OscConfig+0x74>
 800110e:	4b76      	ldr	r3, [pc, #472]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a75      	ldr	r2, [pc, #468]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b70      	ldr	r3, [pc, #448]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a6f      	ldr	r2, [pc, #444]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6d      	ldr	r3, [pc, #436]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6c      	ldr	r2, [pc, #432]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xb0>
 8001140:	4b69      	ldr	r3, [pc, #420]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a68      	ldr	r2, [pc, #416]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b66      	ldr	r3, [pc, #408]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a65      	ldr	r2, [pc, #404]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fd18 	bl	8000b94 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fd14 	bl	8000b94 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	@ 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e207      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5b      	ldr	r3, [pc, #364]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xc0>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fd04 	bl	8000b94 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fd00 	bl	8000b94 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	@ 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1f3      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0xe8>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011be:	4b4a      	ldr	r3, [pc, #296]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ca:	4b47      	ldr	r3, [pc, #284]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d6:	4b44      	ldr	r3, [pc, #272]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1c7      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <HAL_RCC_OscConfig+0x244>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fcb9 	bl	8000b94 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fcb5 	bl	8000b94 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e1a8      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4925      	ldr	r1, [pc, #148]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <HAL_RCC_OscConfig+0x244>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff fc98 	bl	8000b94 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fc94 	bl	8000b94 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e187      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d036      	beq.n	8001300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d016      	beq.n	80012c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_RCC_OscConfig+0x248>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a0:	f7ff fc78 	bl	8000b94 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fc74 	bl	8000b94 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e167      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_RCC_OscConfig+0x240>)
 80012bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x200>
 80012c6:	e01b      	b.n	8001300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_RCC_OscConfig+0x248>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fc61 	bl	8000b94 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	e00e      	b.n	80012f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc5d 	bl	8000b94 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d907      	bls.n	80012f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e150      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000
 80012f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	4b88      	ldr	r3, [pc, #544]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80012f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ea      	bne.n	80012d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8097 	beq.w	800143c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001312:	4b81      	ldr	r3, [pc, #516]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10f      	bne.n	800133e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b7d      	ldr	r3, [pc, #500]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a7c      	ldr	r2, [pc, #496]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b7a      	ldr	r3, [pc, #488]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b77      	ldr	r3, [pc, #476]	@ (800151c <HAL_RCC_OscConfig+0x474>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b74      	ldr	r3, [pc, #464]	@ (800151c <HAL_RCC_OscConfig+0x474>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a73      	ldr	r2, [pc, #460]	@ (800151c <HAL_RCC_OscConfig+0x474>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fc1d 	bl	8000b94 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff fc19 	bl	8000b94 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e10c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b6a      	ldr	r3, [pc, #424]	@ (800151c <HAL_RCC_OscConfig+0x474>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x2ea>
 8001384:	4b64      	ldr	r3, [pc, #400]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001388:	4a63      	ldr	r2, [pc, #396]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001390:	e01c      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b05      	cmp	r3, #5
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x30c>
 800139a:	4b5f      	ldr	r3, [pc, #380]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139e:	4a5e      	ldr	r2, [pc, #376]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b2:	e00b      	b.n	80013cc <HAL_RCC_OscConfig+0x324>
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b8:	4a57      	ldr	r2, [pc, #348]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c0:	4b55      	ldr	r3, [pc, #340]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c4:	4a54      	ldr	r2, [pc, #336]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013c6:	f023 0304 	bic.w	r3, r3, #4
 80013ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d015      	beq.n	8001400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fbde 	bl	8000b94 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fbda 	bl	8000b94 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0cb      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	4b49      	ldr	r3, [pc, #292]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ee      	beq.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fbc8 	bl	8000b94 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001406:	e00a      	b.n	800141e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001408:	f7ff fbc4 	bl	8000b94 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e0b5      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ee      	bne.n	8001408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001430:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001434:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800143a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a1 	beq.w	8001588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001446:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b08      	cmp	r3, #8
 8001450:	d05c      	beq.n	800150c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d141      	bne.n	80014de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <HAL_RCC_OscConfig+0x478>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fb98 	bl	8000b94 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff fb94 	bl	8000b94 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e087      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147a:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	3b01      	subs	r3, #1
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	491b      	ldr	r1, [pc, #108]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x478>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb6d 	bl	8000b94 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014be:	f7ff fb69 	bl	8000b94 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e05c      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d0:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x416>
 80014dc:	e054      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_RCC_OscConfig+0x478>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb56 	bl	8000b94 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fb52 	bl	8000b94 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e045      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_RCC_OscConfig+0x470>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
 800150a:	e03d      	b.n	8001588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d107      	bne.n	8001524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e038      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000
 8001520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <HAL_RCC_OscConfig+0x4ec>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d028      	beq.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d121      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800155a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	4293      	cmp	r3, r2
 800155e:	d111      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	3b01      	subs	r3, #1
 800156e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0cc      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b68      	ldr	r3, [pc, #416]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d90c      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b65      	ldr	r3, [pc, #404]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b63      	ldr	r3, [pc, #396]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0b8      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ec:	4b59      	ldr	r3, [pc, #356]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a52      	ldr	r2, [pc, #328]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800160e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b50      	ldr	r3, [pc, #320]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	494d      	ldr	r1, [pc, #308]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d044      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d119      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e07f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d003      	beq.n	8001656 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	2b03      	cmp	r3, #3
 8001654:	d107      	bne.n	8001666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e06f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001666:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e067      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001676:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f023 0203 	bic.w	r2, r3, #3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4934      	ldr	r1, [pc, #208]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001688:	f7ff fa84 	bl	8000b94 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001690:	f7ff fa80 	bl	8000b94 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04f      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 020c 	and.w	r2, r3, #12
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1eb      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016b8:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e032      	b.n	8001746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4916      	ldr	r1, [pc, #88]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170a:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	490e      	ldr	r1, [pc, #56]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800171e:	f000 f821 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001722:	4602      	mov	r2, r0
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	490a      	ldr	r1, [pc, #40]	@ (8001758 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	fa22 f303 	lsr.w	r3, r2, r3
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_RCC_ClockConfig+0x1c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f896 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00
 8001754:	40023800 	.word	0x40023800
 8001758:	080046b0 	.word	0x080046b0
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001768:	b090      	sub	sp, #64	@ 0x40
 800176a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800177c:	4b59      	ldr	r3, [pc, #356]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d00d      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001788:	2b08      	cmp	r3, #8
 800178a:	f200 80a1 	bhi.w	80018d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x34>
 8001792:	2b04      	cmp	r3, #4
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x3a>
 8001796:	e09b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800179c:	e09b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179e:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017a2:	e098      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a4:	4b4f      	ldr	r3, [pc, #316]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ae:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d028      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	099b      	lsrs	r3, r3, #6
 80017c0:	2200      	movs	r2, #0
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017cc:	2100      	movs	r1, #0
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017d0:	fb03 f201 	mul.w	r2, r3, r1
 80017d4:	2300      	movs	r3, #0
 80017d6:	fb00 f303 	mul.w	r3, r0, r3
 80017da:	4413      	add	r3, r2
 80017dc:	4a43      	ldr	r2, [pc, #268]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x188>)
 80017de:	fba0 1202 	umull	r1, r2, r0, r2
 80017e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017e4:	460a      	mov	r2, r1
 80017e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ea:	4413      	add	r3, r2
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f0:	2200      	movs	r2, #0
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	61fa      	str	r2, [r7, #28]
 80017f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017fe:	f7fe fce7 	bl	80001d0 <__aeabi_uldivmod>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4613      	mov	r3, r2
 8001808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800180a:	e053      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180c:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	2200      	movs	r2, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	617a      	str	r2, [r7, #20]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800181e:	f04f 0b00 	mov.w	fp, #0
 8001822:	4652      	mov	r2, sl
 8001824:	465b      	mov	r3, fp
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0159      	lsls	r1, r3, #5
 8001830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001834:	0150      	lsls	r0, r2, #5
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	ebb2 080a 	subs.w	r8, r2, sl
 800183e:	eb63 090b 	sbc.w	r9, r3, fp
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800184e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001856:	ebb2 0408 	subs.w	r4, r2, r8
 800185a:	eb63 0509 	sbc.w	r5, r3, r9
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	00eb      	lsls	r3, r5, #3
 8001868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800186c:	00e2      	lsls	r2, r4, #3
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	eb14 030a 	adds.w	r3, r4, sl
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	eb45 030b 	adc.w	r3, r5, fp
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800188a:	4629      	mov	r1, r5
 800188c:	028b      	lsls	r3, r1, #10
 800188e:	4621      	mov	r1, r4
 8001890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001894:	4621      	mov	r1, r4
 8001896:	028a      	lsls	r2, r1, #10
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	2200      	movs	r2, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018a8:	f7fe fc92 	bl	80001d0 <__aeabi_uldivmod>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4613      	mov	r3, r2
 80018b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	3301      	adds	r3, #1
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3740      	adds	r7, #64	@ 0x40
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	00f42400 	.word	0x00f42400
 80018ec:	017d7840 	.word	0x017d7840

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <HAL_RCC_GetHCLKFreq+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff0 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	0a9b      	lsrs	r3, r3, #10
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	@ (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	080046c0 	.word	0x080046c0

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffdc 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	@ (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	080046c0 	.word	0x080046c0

08001958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800198c:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_RCC_GetClockConfig+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e041      	b.n	8001a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d106      	bne.n	80019e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f839 	bl	8001a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 f9c0 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e04e      	b.n	8001b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ab2:	d01d      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d111      	bne.n	8001b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d010      	beq.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b12:	e007      	b.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40000c00 	.word	0x40000c00
 8001b44:	40010400 	.word	0x40010400
 8001b48:	40014000 	.word	0x40014000
 8001b4c:	40001800 	.word	0x40001800

08001b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d020      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0202 	mvn.w	r2, #2
 8001b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8d2 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001ba0:	e005      	b.n	8001bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8c4 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8d5 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0204 	mvn.w	r2, #4
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f8ac 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f89e 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8af 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d020      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0208 	mvn.w	r2, #8
 8001c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f886 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c38:	e005      	b.n	8001c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f878 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f889 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0210 	mvn.w	r2, #16
 8001c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f860 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f852 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f863 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0201 	mvn.w	r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fd4e 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f900 	bl	8001ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f834 	bl	8001d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8d2 	bl	8001ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a43      	ldr	r2, [pc, #268]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9e:	d00f      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a40      	ldr	r2, [pc, #256]	@ (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00b      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea8 <TIM_Base_SetConfig+0x128>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d007      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3e      	ldr	r2, [pc, #248]	@ (8001eac <TIM_Base_SetConfig+0x12c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <TIM_Base_SetConfig+0x40>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de0:	d027      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <TIM_Base_SetConfig+0x124>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d023      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea8 <TIM_Base_SetConfig+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <TIM_Base_SetConfig+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <TIM_Base_SetConfig+0x134>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <TIM_Base_SetConfig+0x138>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00f      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <TIM_Base_SetConfig+0x13c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00b      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <TIM_Base_SetConfig+0x140>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <TIM_Base_SetConfig+0x144>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <TIM_Base_SetConfig+0x148>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d108      	bne.n	8001e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ea0 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_Base_SetConfig+0xf2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <TIM_Base_SetConfig+0x130>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d103      	bne.n	8001e7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800
 8001eac:	40000c00 	.word	0x40000c00
 8001eb0:	40010400 	.word	0x40010400
 8001eb4:	40014000 	.word	0x40014000
 8001eb8:	40014400 	.word	0x40014400
 8001ebc:	40014800 	.word	0x40014800
 8001ec0:	40001800 	.word	0x40001800
 8001ec4:	40001c00 	.word	0x40001c00
 8001ec8:	40002000 	.word	0x40002000

08001ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e042      	b.n	8001f8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fc60 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f973 	bl	8002224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	@ 0x28
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d175      	bne.n	80020a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_UART_Transmit+0x2c>
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e06e      	b.n	80020a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2221      	movs	r2, #33	@ 0x21
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fd2:	f7fe fddf 	bl	8000b94 <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	88fa      	ldrh	r2, [r7, #6]
 8001fe2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fec:	d108      	bne.n	8002000 <HAL_UART_Transmit+0x6c>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e003      	b.n	8002008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002008:	e02e      	b.n	8002068 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f848 	bl	80020aa <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e03a      	b.n	80020a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10b      	bne.n	800204a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	3302      	adds	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	e007      	b.n	800205a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1cb      	bne.n	800200a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f000 f814 	bl	80020aa <UART_WaitOnFlagUntilTimeout>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e006      	b.n	80020a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e000      	b.n	80020a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4613      	mov	r3, r2
 80020b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ba:	e03b      	b.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c2:	d037      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7fe fd66 	bl	8000b94 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	6a3a      	ldr	r2, [r7, #32]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <UART_WaitOnFlagUntilTimeout+0x30>
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e03a      	b.n	8002154 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b80      	cmp	r3, #128	@ 0x80
 80020f0:	d020      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b40      	cmp	r3, #64	@ 0x40
 80020f6:	d01d      	beq.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d116      	bne.n	8002134 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f81d 	bl	800215c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2208      	movs	r2, #8
 8002126:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00f      	b.n	8002154 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d0b4      	beq.n	80020bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800215c:	b480      	push	{r7}
 800215e:	b095      	sub	sp, #84	@ 0x54
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	330c      	adds	r3, #12
 800216a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800216e:	e853 3f00 	ldrex	r3, [r3]
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800217a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002184:	643a      	str	r2, [r7, #64]	@ 0x40
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800218a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800218c:	e841 2300 	strex	r3, r2, [r1]
 8002190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e5      	bne.n	8002164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	e853 3f00 	ldrex	r3, [r3]
 80021a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3314      	adds	r3, #20
 80021b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d119      	bne.n	8002208 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f023 0310 	bic.w	r3, r3, #16
 80021ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021f4:	61ba      	str	r2, [r7, #24]
 80021f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	e841 2300 	strex	r3, r2, [r1]
 8002200:	613b      	str	r3, [r7, #16]
   return(result);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002216:	bf00      	nop
 8002218:	3754      	adds	r7, #84	@ 0x54
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002228:	b0c0      	sub	sp, #256	@ 0x100
 800222a:	af00      	add	r7, sp, #0
 800222c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	ea40 0301 	orr.w	r3, r0, r1
 800224c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	431a      	orrs	r2, r3
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	431a      	orrs	r2, r3
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800227c:	f021 010c 	bic.w	r1, r1, #12
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800228a:	430b      	orrs	r3, r1
 800228c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229e:	6999      	ldr	r1, [r3, #24]
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	ea40 0301 	orr.w	r3, r0, r1
 80022aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <UART_SetConfig+0x2cc>)
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d005      	beq.n	80022c4 <UART_SetConfig+0xa0>
 80022b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b8d      	ldr	r3, [pc, #564]	@ (80024f4 <UART_SetConfig+0x2d0>)
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d104      	bne.n	80022ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022c4:	f7ff fb34 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 80022c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80022cc:	e003      	b.n	80022d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ce:	f7ff fb1b 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 80022d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022e0:	f040 810c 	bne.w	80024fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022e8:	2200      	movs	r2, #0
 80022ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	1891      	adds	r1, r2, r2
 80022fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022fe:	415b      	adcs	r3, r3
 8002300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002306:	4621      	mov	r1, r4
 8002308:	eb12 0801 	adds.w	r8, r2, r1
 800230c:	4629      	mov	r1, r5
 800230e:	eb43 0901 	adc.w	r9, r3, r1
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800231e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002326:	4690      	mov	r8, r2
 8002328:	4699      	mov	r9, r3
 800232a:	4623      	mov	r3, r4
 800232c:	eb18 0303 	adds.w	r3, r8, r3
 8002330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002334:	462b      	mov	r3, r5
 8002336:	eb49 0303 	adc.w	r3, r9, r3
 800233a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800233e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800234a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800234e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002352:	460b      	mov	r3, r1
 8002354:	18db      	adds	r3, r3, r3
 8002356:	653b      	str	r3, [r7, #80]	@ 0x50
 8002358:	4613      	mov	r3, r2
 800235a:	eb42 0303 	adc.w	r3, r2, r3
 800235e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002368:	f7fd ff32 	bl	80001d0 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4b61      	ldr	r3, [pc, #388]	@ (80024f8 <UART_SetConfig+0x2d4>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	011c      	lsls	r4, r3, #4
 800237a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800237e:	2200      	movs	r2, #0
 8002380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002384:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	1891      	adds	r1, r2, r2
 8002392:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002394:	415b      	adcs	r3, r3
 8002396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800239c:	4641      	mov	r1, r8
 800239e:	eb12 0a01 	adds.w	sl, r2, r1
 80023a2:	4649      	mov	r1, r9
 80023a4:	eb43 0b01 	adc.w	fp, r3, r1
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023bc:	4692      	mov	sl, r2
 80023be:	469b      	mov	fp, r3
 80023c0:	4643      	mov	r3, r8
 80023c2:	eb1a 0303 	adds.w	r3, sl, r3
 80023c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023ca:	464b      	mov	r3, r9
 80023cc:	eb4b 0303 	adc.w	r3, fp, r3
 80023d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023e8:	460b      	mov	r3, r1
 80023ea:	18db      	adds	r3, r3, r3
 80023ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ee:	4613      	mov	r3, r2
 80023f0:	eb42 0303 	adc.w	r3, r2, r3
 80023f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80023f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023fe:	f7fd fee7 	bl	80001d0 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4611      	mov	r1, r2
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <UART_SetConfig+0x2d4>)
 800240a:	fba3 2301 	umull	r2, r3, r3, r1
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2264      	movs	r2, #100	@ 0x64
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	1acb      	subs	r3, r1, r3
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800241e:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <UART_SetConfig+0x2d4>)
 8002420:	fba3 2302 	umull	r2, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800242c:	441c      	add	r4, r3
 800242e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002432:	2200      	movs	r2, #0
 8002434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002438:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800243c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	1891      	adds	r1, r2, r2
 8002446:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002448:	415b      	adcs	r3, r3
 800244a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800244c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002450:	4641      	mov	r1, r8
 8002452:	1851      	adds	r1, r2, r1
 8002454:	6339      	str	r1, [r7, #48]	@ 0x30
 8002456:	4649      	mov	r1, r9
 8002458:	414b      	adcs	r3, r1
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002468:	4659      	mov	r1, fp
 800246a:	00cb      	lsls	r3, r1, #3
 800246c:	4651      	mov	r1, sl
 800246e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002472:	4651      	mov	r1, sl
 8002474:	00ca      	lsls	r2, r1, #3
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	4603      	mov	r3, r0
 800247c:	4642      	mov	r2, r8
 800247e:	189b      	adds	r3, r3, r2
 8002480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002484:	464b      	mov	r3, r9
 8002486:	460a      	mov	r2, r1
 8002488:	eb42 0303 	adc.w	r3, r2, r3
 800248c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800249c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024a4:	460b      	mov	r3, r1
 80024a6:	18db      	adds	r3, r3, r3
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	4613      	mov	r3, r2
 80024ac:	eb42 0303 	adc.w	r3, r2, r3
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024ba:	f7fd fe89 	bl	80001d0 <__aeabi_uldivmod>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <UART_SetConfig+0x2d4>)
 80024c4:	fba3 1302 	umull	r1, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	2164      	movs	r1, #100	@ 0x64
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	3332      	adds	r3, #50	@ 0x32
 80024d6:	4a08      	ldr	r2, [pc, #32]	@ (80024f8 <UART_SetConfig+0x2d4>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	f003 0207 	and.w	r2, r3, #7
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4422      	add	r2, r4
 80024ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024ec:	e106      	b.n	80026fc <UART_SetConfig+0x4d8>
 80024ee:	bf00      	nop
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002500:	2200      	movs	r2, #0
 8002502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002506:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800250a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800250e:	4642      	mov	r2, r8
 8002510:	464b      	mov	r3, r9
 8002512:	1891      	adds	r1, r2, r2
 8002514:	6239      	str	r1, [r7, #32]
 8002516:	415b      	adcs	r3, r3
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
 800251a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800251e:	4641      	mov	r1, r8
 8002520:	1854      	adds	r4, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb43 0501 	adc.w	r5, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	00eb      	lsls	r3, r5, #3
 8002532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002536:	00e2      	lsls	r2, r4, #3
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
 800253c:	4643      	mov	r3, r8
 800253e:	18e3      	adds	r3, r4, r3
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002544:	464b      	mov	r3, r9
 8002546:	eb45 0303 	adc.w	r3, r5, r3
 800254a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800255a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800256a:	4629      	mov	r1, r5
 800256c:	008b      	lsls	r3, r1, #2
 800256e:	4621      	mov	r1, r4
 8002570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002574:	4621      	mov	r1, r4
 8002576:	008a      	lsls	r2, r1, #2
 8002578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800257c:	f7fd fe28 	bl	80001d0 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4b60      	ldr	r3, [pc, #384]	@ (8002708 <UART_SetConfig+0x4e4>)
 8002586:	fba3 2302 	umull	r2, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	011c      	lsls	r4, r3, #4
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002598:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800259c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	61b9      	str	r1, [r7, #24]
 80025a8:	415b      	adcs	r3, r3
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b0:	4641      	mov	r1, r8
 80025b2:	1851      	adds	r1, r2, r1
 80025b4:	6139      	str	r1, [r7, #16]
 80025b6:	4649      	mov	r1, r9
 80025b8:	414b      	adcs	r3, r1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025c8:	4659      	mov	r1, fp
 80025ca:	00cb      	lsls	r3, r1, #3
 80025cc:	4651      	mov	r1, sl
 80025ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d2:	4651      	mov	r1, sl
 80025d4:	00ca      	lsls	r2, r1, #3
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	4642      	mov	r2, r8
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025e4:	464b      	mov	r3, r9
 80025e6:	460a      	mov	r2, r1
 80025e8:	eb42 0303 	adc.w	r3, r2, r3
 80025ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002608:	4649      	mov	r1, r9
 800260a:	008b      	lsls	r3, r1, #2
 800260c:	4641      	mov	r1, r8
 800260e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002612:	4641      	mov	r1, r8
 8002614:	008a      	lsls	r2, r1, #2
 8002616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800261a:	f7fd fdd9 	bl	80001d0 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4611      	mov	r1, r2
 8002624:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <UART_SetConfig+0x4e4>)
 8002626:	fba3 2301 	umull	r2, r3, r3, r1
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2264      	movs	r2, #100	@ 0x64
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	1acb      	subs	r3, r1, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	@ 0x32
 8002638:	4a33      	ldr	r2, [pc, #204]	@ (8002708 <UART_SetConfig+0x4e4>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002644:	441c      	add	r4, r3
 8002646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800264a:	2200      	movs	r2, #0
 800264c:	673b      	str	r3, [r7, #112]	@ 0x70
 800264e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002650:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	1891      	adds	r1, r2, r2
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	415b      	adcs	r3, r3
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002664:	4641      	mov	r1, r8
 8002666:	1851      	adds	r1, r2, r1
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	4649      	mov	r1, r9
 800266c:	414b      	adcs	r3, r1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800267c:	4659      	mov	r1, fp
 800267e:	00cb      	lsls	r3, r1, #3
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002686:	4651      	mov	r1, sl
 8002688:	00ca      	lsls	r2, r1, #3
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	4603      	mov	r3, r0
 8002690:	4642      	mov	r2, r8
 8002692:	189b      	adds	r3, r3, r2
 8002694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002696:	464b      	mov	r3, r9
 8002698:	460a      	mov	r2, r1
 800269a:	eb42 0303 	adc.w	r3, r2, r3
 800269e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80026aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026b8:	4649      	mov	r1, r9
 80026ba:	008b      	lsls	r3, r1, #2
 80026bc:	4641      	mov	r1, r8
 80026be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026c2:	4641      	mov	r1, r8
 80026c4:	008a      	lsls	r2, r1, #2
 80026c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80026ca:	f7fd fd81 	bl	80001d0 <__aeabi_uldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <UART_SetConfig+0x4e4>)
 80026d4:	fba3 1302 	umull	r1, r3, r3, r2
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	2164      	movs	r1, #100	@ 0x64
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	3332      	adds	r3, #50	@ 0x32
 80026e6:	4a08      	ldr	r2, [pc, #32]	@ (8002708 <UART_SetConfig+0x4e4>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4422      	add	r2, r4
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002702:	46bd      	mov	sp, r7
 8002704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002708:	51eb851f 	.word	0x51eb851f

0800270c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800271a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271e:	2b84      	cmp	r3, #132	@ 0x84
 8002720:	d005      	beq.n	800272e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	3303      	adds	r3, #3
 800272c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002740:	f000 fafc 	bl	8002d3c <vTaskStartScheduler>
  
  return osOK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}

0800274a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800274a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800274c:	b089      	sub	sp, #36	@ 0x24
 800274e:	af04      	add	r7, sp, #16
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <osThreadCreate+0x54>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685c      	ldr	r4, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691e      	ldr	r6, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffc8 	bl	800270c <makeFreeRtosPriority>
 800277c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002786:	9202      	str	r2, [sp, #8]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	9100      	str	r1, [sp, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	4632      	mov	r2, r6
 8002790:	4629      	mov	r1, r5
 8002792:	4620      	mov	r0, r4
 8002794:	f000 f8ed 	bl	8002972 <xTaskCreateStatic>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e01c      	b.n	80027d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685c      	ldr	r4, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ffaa 	bl	800270c <makeFreeRtosPriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	4632      	mov	r2, r6
 80027c6:	4629      	mov	r1, r5
 80027c8:	4620      	mov	r0, r4
 80027ca:	f000 f932 	bl	8002a32 <xTaskCreate>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80027d8:	68fb      	ldr	r3, [r7, #12]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <osDelay+0x16>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	e000      	b.n	80027fa <osDelay+0x18>
 80027f8:	2301      	movs	r3, #1
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa68 	bl	8002cd0 <vTaskDelay>
  
  return osOK;
 8002800:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0208 	add.w	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f04f 32ff 	mov.w	r2, #4294967295
 8002822:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f103 0208 	add.w	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f103 0208 	add.w	r2, r3, #8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e00c      	b.n	80028e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3308      	adds	r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e002      	b.n	80028da <vListInsert+0x2e>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d2f6      	bcs.n	80028d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6852      	ldr	r2, [r2, #4]
 800293e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d103      	bne.n	8002952 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002972:	b580      	push	{r7, lr}
 8002974:	b08e      	sub	sp, #56	@ 0x38
 8002976:	af04      	add	r7, sp, #16
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800299e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <xTaskCreateStatic+0x4a>
	__asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	61fb      	str	r3, [r7, #28]
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029bc:	23a0      	movs	r3, #160	@ 0xa0
 80029be:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80029c4:	d00b      	beq.n	80029de <xTaskCreateStatic+0x6c>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	61bb      	str	r3, [r7, #24]
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	e7fd      	b.n	80029da <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01e      	beq.n	8002a24 <xTaskCreateStatic+0xb2>
 80029e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029f4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029fe:	2300      	movs	r3, #0
 8002a00:	9303      	str	r3, [sp, #12]
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f850 	bl	8002abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a1e:	f000 f8ed 	bl	8002bfc <prvAddNewTaskToReadyList>
 8002a22:	e001      	b.n	8002a28 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a28:	697b      	ldr	r3, [r7, #20]
	}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3728      	adds	r7, #40	@ 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b08c      	sub	sp, #48	@ 0x30
 8002a36:	af04      	add	r7, sp, #16
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fefe 	bl	8003848 <pvPortMalloc>
 8002a4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a54:	20a0      	movs	r0, #160	@ 0xa0
 8002a56:	f000 fef7 	bl	8003848 <pvPortMalloc>
 8002a5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a68:	e005      	b.n	8002a76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f000 ffba 	bl	80039e4 <vPortFree>
 8002a70:	e001      	b.n	8002a76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d017      	beq.n	8002aac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9303      	str	r3, [sp, #12]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f80e 	bl	8002abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002aa0:	69f8      	ldr	r0, [r7, #28]
 8002aa2:	f000 f8ab 	bl	8002bfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e002      	b.n	8002ab2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
	}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	617b      	str	r3, [r7, #20]
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	e7fd      	b.n	8002b02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01f      	beq.n	8002b4c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	e012      	b.n	8002b38 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	7819      	ldrb	r1, [r3, #0]
 8002b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3334      	adds	r3, #52	@ 0x34
 8002b22:	460a      	mov	r2, r1
 8002b24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	d9e9      	bls.n	8002b12 <prvInitialiseNewTask+0x56>
 8002b3e:	e000      	b.n	8002b42 <prvInitialiseNewTask+0x86>
			{
				break;
 8002b40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b4a:	e003      	b.n	8002b54 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d901      	bls.n	8002b5e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	3304      	adds	r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe68 	bl	800284a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fe63 	bl	800284a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8c:	f1c3 0207 	rsb	r2, r3, #7
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	334c      	adds	r3, #76	@ 0x4c
 8002bae:	224c      	movs	r2, #76	@ 0x4c
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fa2e 	bl	8004014 <memset>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf0 <prvInitialiseNewTask+0x134>)
 8002bbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <prvInitialiseNewTask+0x138>)
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <prvInitialiseNewTask+0x13c>)
 8002bc8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	69b8      	ldr	r0, [r7, #24]
 8002bd0:	f000 fc2a 	bl	8003428 <pxPortInitialiseStack>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000411c 	.word	0x2000411c
 8002bf4:	20004184 	.word	0x20004184
 8002bf8:	200041ec 	.word	0x200041ec

08002bfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c04:	f000 fd40 	bl	8003688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <prvAddNewTaskToReadyList+0xb8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a29      	ldr	r2, [pc, #164]	@ (8002cb4 <prvAddNewTaskToReadyList+0xb8>)
 8002c10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c12:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <prvAddNewTaskToReadyList+0xbc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c1a:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <prvAddNewTaskToReadyList+0xbc>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c20:	4b24      	ldr	r3, [pc, #144]	@ (8002cb4 <prvAddNewTaskToReadyList+0xb8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d110      	bne.n	8002c4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c28:	f000 fad4 	bl	80031d4 <prvInitialiseTaskLists>
 8002c2c:	e00d      	b.n	8002c4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c2e:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <prvAddNewTaskToReadyList+0xc0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <prvAddNewTaskToReadyList+0xbc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d802      	bhi.n	8002c4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c44:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <prvAddNewTaskToReadyList+0xbc>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <prvAddNewTaskToReadyList+0xc4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <prvAddNewTaskToReadyList+0xc4>)
 8002c52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	2201      	movs	r2, #1
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <prvAddNewTaskToReadyList+0xc8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	4a18      	ldr	r2, [pc, #96]	@ (8002cc4 <prvAddNewTaskToReadyList+0xc8>)
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4a15      	ldr	r2, [pc, #84]	@ (8002cc8 <prvAddNewTaskToReadyList+0xcc>)
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7ff fdf1 	bl	8002864 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c82:	f000 fd33 	bl	80036ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <prvAddNewTaskToReadyList+0xc0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00e      	beq.n	8002cac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <prvAddNewTaskToReadyList+0xbc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <prvAddNewTaskToReadyList+0xd0>)
 8002c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200004c8 	.word	0x200004c8
 8002cb8:	200003c8 	.word	0x200003c8
 8002cbc:	200004d4 	.word	0x200004d4
 8002cc0:	200004e4 	.word	0x200004e4
 8002cc4:	200004d0 	.word	0x200004d0
 8002cc8:	200003cc 	.word	0x200003cc
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ce2:	4b14      	ldr	r3, [pc, #80]	@ (8002d34 <vTaskDelay+0x64>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <vTaskDelay+0x32>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60bb      	str	r3, [r7, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d02:	f000 f885 	bl	8002e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fb27 	bl	800335c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d0e:	f000 f88d 	bl	8002e2c <xTaskResumeAll>
 8002d12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002d1a:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <vTaskDelay+0x68>)
 8002d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200004f0 	.word	0x200004f0
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	@ 0x28
 8002d40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d4a:	463a      	mov	r2, r7
 8002d4c:	1d39      	adds	r1, r7, #4
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fbd2 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	9202      	str	r2, [sp, #8]
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	460a      	mov	r2, r1
 8002d6a:	4921      	ldr	r1, [pc, #132]	@ (8002df0 <vTaskStartScheduler+0xb4>)
 8002d6c:	4821      	ldr	r0, [pc, #132]	@ (8002df4 <vTaskStartScheduler+0xb8>)
 8002d6e:	f7ff fe00 	bl	8002972 <xTaskCreateStatic>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <vTaskStartScheduler+0xbc>)
 8002d76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d78:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <vTaskStartScheduler+0xbc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e001      	b.n	8002d8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d11b      	bne.n	8002dc8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	613b      	str	r3, [r7, #16]
}
 8002da2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002da4:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <vTaskStartScheduler+0xc0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	334c      	adds	r3, #76	@ 0x4c
 8002daa:	4a15      	ldr	r2, [pc, #84]	@ (8002e00 <vTaskStartScheduler+0xc4>)
 8002dac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <vTaskStartScheduler+0xc8>)
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002db6:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <vTaskStartScheduler+0xcc>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <vTaskStartScheduler+0xd0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002dc2:	f000 fbbd 	bl	8003540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dc6:	e00f      	b.n	8002de8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d10b      	bne.n	8002de8 <vTaskStartScheduler+0xac>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <vTaskStartScheduler+0xa8>
}
 8002de8:	bf00      	nop
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	080046a8 	.word	0x080046a8
 8002df4:	080031a5 	.word	0x080031a5
 8002df8:	200004ec 	.word	0x200004ec
 8002dfc:	200003c8 	.word	0x200003c8
 8002e00:	2000001c 	.word	0x2000001c
 8002e04:	200004e8 	.word	0x200004e8
 8002e08:	200004d4 	.word	0x200004d4
 8002e0c:	200004cc 	.word	0x200004cc

08002e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a03      	ldr	r2, [pc, #12]	@ (8002e28 <vTaskSuspendAll+0x18>)
 8002e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	200004f0 	.word	0x200004f0

08002e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e3a:	4b42      	ldr	r3, [pc, #264]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <xTaskResumeAll+0x2e>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	603b      	str	r3, [r7, #0]
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e5a:	f000 fc15 	bl	8003688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e5e:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	4a37      	ldr	r2, [pc, #220]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e68:	4b36      	ldr	r3, [pc, #216]	@ (8002f44 <xTaskResumeAll+0x118>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d161      	bne.n	8002f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e70:	4b35      	ldr	r3, [pc, #212]	@ (8002f48 <xTaskResumeAll+0x11c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05d      	beq.n	8002f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e78:	e02e      	b.n	8002ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7a:	4b34      	ldr	r3, [pc, #208]	@ (8002f4c <xTaskResumeAll+0x120>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3318      	adds	r3, #24
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fd49 	bl	800291e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fd44 	bl	800291e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <xTaskResumeAll+0x124>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <xTaskResumeAll+0x124>)
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <xTaskResumeAll+0x128>)
 8002eb6:	441a      	add	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f7ff fcd0 	bl	8002864 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <xTaskResumeAll+0x12c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ed2:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <xTaskResumeAll+0x120>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1cc      	bne.n	8002e7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ee6:	f000 fa19 	bl	800331c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <xTaskResumeAll+0x134>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ef6:	f000 f837 	bl	8002f68 <xTaskIncrementTick>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f1      	bne.n	8002ef6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <xTaskResumeAll+0x134>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f18:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <xTaskResumeAll+0x130>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <xTaskResumeAll+0x138>)
 8002f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f34:	f000 fbda 	bl	80036ec <vPortExitCritical>

	return xAlreadyYielded;
 8002f38:	68bb      	ldr	r3, [r7, #8]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200004f0 	.word	0x200004f0
 8002f48:	200004c8 	.word	0x200004c8
 8002f4c:	20000488 	.word	0x20000488
 8002f50:	200004d0 	.word	0x200004d0
 8002f54:	200003cc 	.word	0x200003cc
 8002f58:	200003c8 	.word	0x200003c8
 8002f5c:	200004dc 	.word	0x200004dc
 8002f60:	200004d8 	.word	0x200004d8
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f72:	4b4f      	ldr	r3, [pc, #316]	@ (80030b0 <xTaskIncrementTick+0x148>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 808f 	bne.w	800309a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80030b4 <xTaskIncrementTick+0x14c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f84:	4a4b      	ldr	r2, [pc, #300]	@ (80030b4 <xTaskIncrementTick+0x14c>)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d121      	bne.n	8002fd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f90:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <xTaskIncrementTick+0x46>
 8002fb2:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4b40      	ldr	r3, [pc, #256]	@ (80030bc <xTaskIncrementTick+0x154>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80030bc <xTaskIncrementTick+0x154>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80030c0 <xTaskIncrementTick+0x158>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	f000 f9a4 	bl	800331c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80030c4 <xTaskIncrementTick+0x15c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d348      	bcc.n	8003070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fde:	4b36      	ldr	r3, [pc, #216]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <xTaskIncrementTick+0x15c>)
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	601a      	str	r2, [r3, #0]
					break;
 8002ff0:	e03e      	b.n	8003070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <xTaskIncrementTick+0x150>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d203      	bcs.n	8003012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800300a:	4a2e      	ldr	r2, [pc, #184]	@ (80030c4 <xTaskIncrementTick+0x15c>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003010:	e02e      	b.n	8003070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc81 	bl	800291e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3318      	adds	r3, #24
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fc78 	bl	800291e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <xTaskIncrementTick+0x160>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <xTaskIncrementTick+0x160>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <xTaskIncrementTick+0x164>)
 800304e:	441a      	add	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7ff fc04 	bl	8002864 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003060:	4b1b      	ldr	r3, [pc, #108]	@ (80030d0 <xTaskIncrementTick+0x168>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	429a      	cmp	r2, r3
 8003068:	d3b9      	bcc.n	8002fde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306e:	e7b6      	b.n	8002fde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003070:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <xTaskIncrementTick+0x168>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003076:	4915      	ldr	r1, [pc, #84]	@ (80030cc <xTaskIncrementTick+0x164>)
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d901      	bls.n	800308c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <xTaskIncrementTick+0x16c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e004      	b.n	80030a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800309a:	4b0f      	ldr	r3, [pc, #60]	@ (80030d8 <xTaskIncrementTick+0x170>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <xTaskIncrementTick+0x170>)
 80030a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80030a4:	697b      	ldr	r3, [r7, #20]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200004f0 	.word	0x200004f0
 80030b4:	200004cc 	.word	0x200004cc
 80030b8:	20000480 	.word	0x20000480
 80030bc:	20000484 	.word	0x20000484
 80030c0:	200004e0 	.word	0x200004e0
 80030c4:	200004e8 	.word	0x200004e8
 80030c8:	200004d0 	.word	0x200004d0
 80030cc:	200003cc 	.word	0x200003cc
 80030d0:	200003c8 	.word	0x200003c8
 80030d4:	200004dc 	.word	0x200004dc
 80030d8:	200004d8 	.word	0x200004d8

080030dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <vTaskSwitchContext+0xb0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ea:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <vTaskSwitchContext+0xb4>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030f0:	e045      	b.n	800317e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <vTaskSwitchContext+0xb4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <vTaskSwitchContext+0xb8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f1c3 031f 	rsb	r3, r3, #31
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	4922      	ldr	r1, [pc, #136]	@ (8003198 <vTaskSwitchContext+0xbc>)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	607b      	str	r3, [r7, #4]
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <vTaskSwitchContext+0x5a>
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <vTaskSwitchContext+0xbc>)
 8003146:	4413      	add	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3308      	adds	r3, #8
 800315c:	429a      	cmp	r2, r3
 800315e:	d104      	bne.n	800316a <vTaskSwitchContext+0x8e>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <vTaskSwitchContext+0xc0>)
 8003172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003174:	4b09      	ldr	r3, [pc, #36]	@ (800319c <vTaskSwitchContext+0xc0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	334c      	adds	r3, #76	@ 0x4c
 800317a:	4a09      	ldr	r2, [pc, #36]	@ (80031a0 <vTaskSwitchContext+0xc4>)
 800317c:	6013      	str	r3, [r2, #0]
}
 800317e:	bf00      	nop
 8003180:	371c      	adds	r7, #28
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	200004f0 	.word	0x200004f0
 8003190:	200004dc 	.word	0x200004dc
 8003194:	200004d0 	.word	0x200004d0
 8003198:	200003cc 	.word	0x200003cc
 800319c:	200003c8 	.word	0x200003c8
 80031a0:	2000001c 	.word	0x2000001c

080031a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031ac:	f000 f852 	bl	8003254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <prvIdleTask+0x28>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d9f9      	bls.n	80031ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <prvIdleTask+0x2c>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031c8:	e7f0      	b.n	80031ac <prvIdleTask+0x8>
 80031ca:	bf00      	nop
 80031cc:	200003cc 	.word	0x200003cc
 80031d0:	e000ed04 	.word	0xe000ed04

080031d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	e00c      	b.n	80031fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <prvInitialiseTaskLists+0x60>)
 80031ec:	4413      	add	r3, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fb0b 	bl	800280a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3301      	adds	r3, #1
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d9ef      	bls.n	80031e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003200:	480d      	ldr	r0, [pc, #52]	@ (8003238 <prvInitialiseTaskLists+0x64>)
 8003202:	f7ff fb02 	bl	800280a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003206:	480d      	ldr	r0, [pc, #52]	@ (800323c <prvInitialiseTaskLists+0x68>)
 8003208:	f7ff faff 	bl	800280a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800320c:	480c      	ldr	r0, [pc, #48]	@ (8003240 <prvInitialiseTaskLists+0x6c>)
 800320e:	f7ff fafc 	bl	800280a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003212:	480c      	ldr	r0, [pc, #48]	@ (8003244 <prvInitialiseTaskLists+0x70>)
 8003214:	f7ff faf9 	bl	800280a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003218:	480b      	ldr	r0, [pc, #44]	@ (8003248 <prvInitialiseTaskLists+0x74>)
 800321a:	f7ff faf6 	bl	800280a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <prvInitialiseTaskLists+0x78>)
 8003220:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <prvInitialiseTaskLists+0x64>)
 8003222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003224:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <prvInitialiseTaskLists+0x7c>)
 8003226:	4a05      	ldr	r2, [pc, #20]	@ (800323c <prvInitialiseTaskLists+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200003cc 	.word	0x200003cc
 8003238:	20000458 	.word	0x20000458
 800323c:	2000046c 	.word	0x2000046c
 8003240:	20000488 	.word	0x20000488
 8003244:	2000049c 	.word	0x2000049c
 8003248:	200004b4 	.word	0x200004b4
 800324c:	20000480 	.word	0x20000480
 8003250:	20000484 	.word	0x20000484

08003254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800325a:	e019      	b.n	8003290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800325c:	f000 fa14 	bl	8003688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003260:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <prvCheckTasksWaitingTermination+0x50>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fb56 	bl	800291e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003272:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <prvCheckTasksWaitingTermination+0x54>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <prvCheckTasksWaitingTermination+0x54>)
 800327a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3b01      	subs	r3, #1
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 8003284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003286:	f000 fa31 	bl	80036ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f810 	bl	80032b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <prvCheckTasksWaitingTermination+0x58>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e1      	bne.n	800325c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000049c 	.word	0x2000049c
 80032a8:	200004c8 	.word	0x200004c8
 80032ac:	200004b0 	.word	0x200004b0

080032b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	334c      	adds	r3, #76	@ 0x4c
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fec1 	bl	8004044 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fb87 	bl	80039e4 <vPortFree>
				vPortFree( pxTCB );
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fb84 	bl	80039e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032dc:	e019      	b.n	8003312 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d103      	bne.n	80032f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fb7b 	bl	80039e4 <vPortFree>
	}
 80032ee:	e010      	b.n	8003312 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d00b      	beq.n	8003312 <prvDeleteTCB+0x62>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60fb      	str	r3, [r7, #12]
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	e7fd      	b.n	800330e <prvDeleteTCB+0x5e>
	}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003322:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <prvResetNextTaskUnblockTime+0x38>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800332c:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <prvResetNextTaskUnblockTime+0x3c>)
 800332e:	f04f 32ff 	mov.w	r2, #4294967295
 8003332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003334:	e008      	b.n	8003348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003336:	4b07      	ldr	r3, [pc, #28]	@ (8003354 <prvResetNextTaskUnblockTime+0x38>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <prvResetNextTaskUnblockTime+0x3c>)
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	20000480 	.word	0x20000480
 8003358:	200004e8 	.word	0x200004e8

0800335c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003366:	4b29      	ldr	r3, [pc, #164]	@ (800340c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800336c:	4b28      	ldr	r3, [pc, #160]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fad3 	bl	800291e <uxListRemove>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800337e:	4b24      	ldr	r3, [pc, #144]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	2201      	movs	r2, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <prvAddCurrentTaskToDelayedList+0xb8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4013      	ands	r3, r2
 8003392:	4a20      	ldr	r2, [pc, #128]	@ (8003414 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003394:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d10a      	bne.n	80033b4 <prvAddCurrentTaskToDelayedList+0x58>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	481a      	ldr	r0, [pc, #104]	@ (8003418 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033ae:	f7ff fa59 	bl	8002864 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b2:	e026      	b.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033bc:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d209      	bcs.n	80033e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033cc:	4b13      	ldr	r3, [pc, #76]	@ (800341c <prvAddCurrentTaskToDelayedList+0xc0>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f7ff fa67 	bl	80028ac <vListInsert>
}
 80033de:	e010      	b.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7ff fa5d 	bl	80028ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d202      	bcs.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033fc:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200004cc 	.word	0x200004cc
 8003410:	200003c8 	.word	0x200003c8
 8003414:	200004d0 	.word	0x200004d0
 8003418:	200004b4 	.word	0x200004b4
 800341c:	20000484 	.word	0x20000484
 8003420:	20000480 	.word	0x20000480
 8003424:	200004e8 	.word	0x200004e8

08003428 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3b04      	subs	r3, #4
 8003438:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b04      	subs	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b04      	subs	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003458:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <pxPortInitialiseStack+0x64>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b14      	subs	r3, #20
 8003462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3b04      	subs	r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f06f 0202 	mvn.w	r2, #2
 8003476:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b20      	subs	r3, #32
 800347c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	08003491 	.word	0x08003491

08003490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800349a:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <prvTaskExitError+0x58>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d00b      	beq.n	80034bc <prvTaskExitError+0x2c>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <prvTaskExitError+0x28>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	60bb      	str	r3, [r7, #8]
}
 80034ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034d0:	bf00      	nop
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0fc      	beq.n	80034d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000000c 	.word	0x2000000c
 80034ec:	00000000 	.word	0x00000000

080034f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034f0:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <pxCurrentTCBConst2>)
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	6808      	ldr	r0, [r1, #0]
 80034f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fa:	f380 8809 	msr	PSP, r0
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f380 8811 	msr	BASEPRI, r0
 800350a:	4770      	bx	lr
 800350c:	f3af 8000 	nop.w

08003510 <pxCurrentTCBConst2>:
 8003510:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop

08003518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003518:	4808      	ldr	r0, [pc, #32]	@ (800353c <prvPortStartFirstTask+0x24>)
 800351a:	6800      	ldr	r0, [r0, #0]
 800351c:	6800      	ldr	r0, [r0, #0]
 800351e:	f380 8808 	msr	MSP, r0
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f380 8814 	msr	CONTROL, r0
 800352a:	b662      	cpsie	i
 800352c:	b661      	cpsie	f
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	df00      	svc	0
 8003538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800353a:	bf00      	nop
 800353c:	e000ed08 	.word	0xe000ed08

08003540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003546:	4b47      	ldr	r3, [pc, #284]	@ (8003664 <xPortStartScheduler+0x124>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a47      	ldr	r2, [pc, #284]	@ (8003668 <xPortStartScheduler+0x128>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10b      	bne.n	8003568 <xPortStartScheduler+0x28>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003568:	4b3e      	ldr	r3, [pc, #248]	@ (8003664 <xPortStartScheduler+0x124>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a3f      	ldr	r2, [pc, #252]	@ (800366c <xPortStartScheduler+0x12c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10b      	bne.n	800358a <xPortStartScheduler+0x4a>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	613b      	str	r3, [r7, #16]
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800358a:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <xPortStartScheduler+0x130>)
 800358c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	22ff      	movs	r2, #255	@ 0xff
 800359a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4b31      	ldr	r3, [pc, #196]	@ (8003674 <xPortStartScheduler+0x134>)
 80035b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035b2:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <xPortStartScheduler+0x138>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035b8:	e009      	b.n	80035ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80035ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <xPortStartScheduler+0x138>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003678 <xPortStartScheduler+0x138>)
 80035c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	d0ef      	beq.n	80035ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035da:	4b27      	ldr	r3, [pc, #156]	@ (8003678 <xPortStartScheduler+0x138>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1c3 0307 	rsb	r3, r3, #7
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d00b      	beq.n	80035fe <xPortStartScheduler+0xbe>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60bb      	str	r3, [r7, #8]
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	e7fd      	b.n	80035fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <xPortStartScheduler+0x138>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <xPortStartScheduler+0x138>)
 8003606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003608:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <xPortStartScheduler+0x138>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <xPortStartScheduler+0x138>)
 8003612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800361c:	4b17      	ldr	r3, [pc, #92]	@ (800367c <xPortStartScheduler+0x13c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a16      	ldr	r2, [pc, #88]	@ (800367c <xPortStartScheduler+0x13c>)
 8003622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003628:	4b14      	ldr	r3, [pc, #80]	@ (800367c <xPortStartScheduler+0x13c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a13      	ldr	r2, [pc, #76]	@ (800367c <xPortStartScheduler+0x13c>)
 800362e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003634:	f000 f8da 	bl	80037ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <xPortStartScheduler+0x140>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800363e:	f000 f8f9 	bl	8003834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <xPortStartScheduler+0x144>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0f      	ldr	r2, [pc, #60]	@ (8003684 <xPortStartScheduler+0x144>)
 8003648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800364c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800364e:	f7ff ff63 	bl	8003518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003652:	f7ff fd43 	bl	80030dc <vTaskSwitchContext>
	prvTaskExitError();
 8003656:	f7ff ff1b 	bl	8003490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	e000ed00 	.word	0xe000ed00
 8003668:	410fc271 	.word	0x410fc271
 800366c:	410fc270 	.word	0x410fc270
 8003670:	e000e400 	.word	0xe000e400
 8003674:	200004f4 	.word	0x200004f4
 8003678:	200004f8 	.word	0x200004f8
 800367c:	e000ed20 	.word	0xe000ed20
 8003680:	2000000c 	.word	0x2000000c
 8003684:	e000ef34 	.word	0xe000ef34

08003688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	607b      	str	r3, [r7, #4]
}
 80036a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <vPortEnterCritical+0x5c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a0e      	ldr	r2, [pc, #56]	@ (80036e4 <vPortEnterCritical+0x5c>)
 80036aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036ac:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <vPortEnterCritical+0x5c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d110      	bne.n	80036d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036b4:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <vPortEnterCritical+0x60>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <vPortEnterCritical+0x4a>
	}
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <vPortExitCritical+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <vPortExitCritical+0x26>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	607b      	str	r3, [r7, #4]
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003712:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <vPortExitCritical+0x50>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a08      	ldr	r2, [pc, #32]	@ (800373c <vPortExitCritical+0x50>)
 800371a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800371c:	4b07      	ldr	r3, [pc, #28]	@ (800373c <vPortExitCritical+0x50>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <vPortExitCritical+0x44>
 8003724:	2300      	movs	r3, #0
 8003726:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800372e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	2000000c 	.word	0x2000000c

08003740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003740:	f3ef 8009 	mrs	r0, PSP
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <pxCurrentTCBConst>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f01e 0f10 	tst.w	lr, #16
 8003750:	bf08      	it	eq
 8003752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375a:	6010      	str	r0, [r2, #0]
 800375c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003764:	f380 8811 	msr	BASEPRI, r0
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f7ff fcb4 	bl	80030dc <vTaskSwitchContext>
 8003774:	f04f 0000 	mov.w	r0, #0
 8003778:	f380 8811 	msr	BASEPRI, r0
 800377c:	bc09      	pop	{r0, r3}
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	6808      	ldr	r0, [r1, #0]
 8003782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003786:	f01e 0f10 	tst.w	lr, #16
 800378a:	bf08      	it	eq
 800378c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003790:	f380 8809 	msr	PSP, r0
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w

080037a0 <pxCurrentTCBConst>:
 80037a0:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop

080037a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	607b      	str	r3, [r7, #4]
}
 80037c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037c2:	f7ff fbd1 	bl	8002f68 <xTaskIncrementTick>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <SysTick_Handler+0x40>)
 80037ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f383 8811 	msr	BASEPRI, r3
}
 80037de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <vPortSetupTimerInterrupt+0x34>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <vPortSetupTimerInterrupt+0x38>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <vPortSetupTimerInterrupt+0x3c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <vPortSetupTimerInterrupt+0x40>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <vPortSetupTimerInterrupt+0x44>)
 800380a:	3b01      	subs	r3, #1
 800380c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800380e:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <vPortSetupTimerInterrupt+0x34>)
 8003810:	2207      	movs	r2, #7
 8003812:	601a      	str	r2, [r3, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e010 	.word	0xe000e010
 8003824:	e000e018 	.word	0xe000e018
 8003828:	20000000 	.word	0x20000000
 800382c:	10624dd3 	.word	0x10624dd3
 8003830:	e000e014 	.word	0xe000e014

08003834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003844 <vPortEnableVFP+0x10>
 8003838:	6801      	ldr	r1, [r0, #0]
 800383a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800383e:	6001      	str	r1, [r0, #0]
 8003840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003842:	bf00      	nop
 8003844:	e000ed88 	.word	0xe000ed88

08003848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003854:	f7ff fadc 	bl	8002e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003858:	4b5c      	ldr	r3, [pc, #368]	@ (80039cc <pvPortMalloc+0x184>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003860:	f000 f924 	bl	8003aac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003864:	4b5a      	ldr	r3, [pc, #360]	@ (80039d0 <pvPortMalloc+0x188>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8095 	bne.w	800399c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01e      	beq.n	80038b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003878:	2208      	movs	r2, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	2b00      	cmp	r3, #0
 8003888:	d015      	beq.n	80038b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f023 0307 	bic.w	r3, r3, #7
 8003890:	3308      	adds	r3, #8
 8003892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <pvPortMalloc+0x6e>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	617b      	str	r3, [r7, #20]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d06f      	beq.n	800399c <pvPortMalloc+0x154>
 80038bc:	4b45      	ldr	r3, [pc, #276]	@ (80039d4 <pvPortMalloc+0x18c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d86a      	bhi.n	800399c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038c6:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <pvPortMalloc+0x190>)
 80038c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038ca:	4b43      	ldr	r3, [pc, #268]	@ (80039d8 <pvPortMalloc+0x190>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d0:	e004      	b.n	80038dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d903      	bls.n	80038ee <pvPortMalloc+0xa6>
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f1      	bne.n	80038d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038ee:	4b37      	ldr	r3, [pc, #220]	@ (80039cc <pvPortMalloc+0x184>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d051      	beq.n	800399c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2208      	movs	r2, #8
 80038fe:	4413      	add	r3, r2
 8003900:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	1ad2      	subs	r2, r2, r3
 8003912:	2308      	movs	r3, #8
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	429a      	cmp	r2, r3
 8003918:	d920      	bls.n	800395c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800391a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <pvPortMalloc+0xfc>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	613b      	str	r3, [r7, #16]
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003956:	69b8      	ldr	r0, [r7, #24]
 8003958:	f000 f90a 	bl	8003b70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800395c:	4b1d      	ldr	r3, [pc, #116]	@ (80039d4 <pvPortMalloc+0x18c>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <pvPortMalloc+0x18c>)
 8003968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800396a:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <pvPortMalloc+0x18c>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <pvPortMalloc+0x194>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d203      	bcs.n	800397e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003976:	4b17      	ldr	r3, [pc, #92]	@ (80039d4 <pvPortMalloc+0x18c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a18      	ldr	r2, [pc, #96]	@ (80039dc <pvPortMalloc+0x194>)
 800397c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <pvPortMalloc+0x188>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	431a      	orrs	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003992:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <pvPortMalloc+0x198>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <pvPortMalloc+0x198>)
 800399a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800399c:	f7ff fa46 	bl	8002e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <pvPortMalloc+0x17a>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60fb      	str	r3, [r7, #12]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <pvPortMalloc+0x176>
	return pvReturn;
 80039c2:	69fb      	ldr	r3, [r7, #28]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	@ 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20004104 	.word	0x20004104
 80039d0:	20004118 	.word	0x20004118
 80039d4:	20004108 	.word	0x20004108
 80039d8:	200040fc 	.word	0x200040fc
 80039dc:	2000410c 	.word	0x2000410c
 80039e0:	20004110 	.word	0x20004110

080039e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04f      	beq.n	8003a96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039f6:	2308      	movs	r3, #8
 80039f8:	425b      	negs	r3, r3
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <vPortFree+0xbc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10b      	bne.n	8003a2a <vPortFree+0x46>
	__asm volatile
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60fb      	str	r3, [r7, #12]
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	e7fd      	b.n	8003a26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <vPortFree+0x66>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	60bb      	str	r3, [r7, #8]
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <vPortFree+0xbc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01e      	beq.n	8003a96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11a      	bne.n	8003a96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <vPortFree+0xbc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a70:	f7ff f9ce 	bl	8002e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <vPortFree+0xc0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <vPortFree+0xc0>)
 8003a80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a82:	6938      	ldr	r0, [r7, #16]
 8003a84:	f000 f874 	bl	8003b70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a88:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <vPortFree+0xc4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	4a06      	ldr	r2, [pc, #24]	@ (8003aa8 <vPortFree+0xc4>)
 8003a90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a92:	f7ff f9cb 	bl	8002e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20004118 	.word	0x20004118
 8003aa4:	20004108 	.word	0x20004108
 8003aa8:	20004114 	.word	0x20004114

08003aac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ab2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003ab6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <prvHeapInit+0xac>)
 8003aba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3307      	adds	r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <prvHeapInit+0xac>)
 8003adc:	4413      	add	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <prvHeapInit+0xb0>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aea:	4b1c      	ldr	r3, [pc, #112]	@ (8003b5c <prvHeapInit+0xb0>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4413      	add	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003af8:	2208      	movs	r2, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <prvHeapInit+0xb4>)
 8003b0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b0e:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <prvHeapInit+0xb4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b16:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <prvHeapInit+0xb4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	1ad2      	subs	r2, r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <prvHeapInit+0xb4>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <prvHeapInit+0xb8>)
 8003b3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <prvHeapInit+0xbc>)
 8003b42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <prvHeapInit+0xc0>)
 8003b46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b4a:	601a      	str	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	200004fc 	.word	0x200004fc
 8003b5c:	200040fc 	.word	0x200040fc
 8003b60:	20004104 	.word	0x20004104
 8003b64:	2000410c 	.word	0x2000410c
 8003b68:	20004108 	.word	0x20004108
 8003b6c:	20004118 	.word	0x20004118

08003b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b78:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <prvInsertBlockIntoFreeList+0xac>)
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e002      	b.n	8003b84 <prvInsertBlockIntoFreeList+0x14>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d8f7      	bhi.n	8003b7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d108      	bne.n	8003bb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d118      	bne.n	8003bf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <prvInsertBlockIntoFreeList+0xb0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d00d      	beq.n	8003bee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e008      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <prvInsertBlockIntoFreeList+0xb0>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d002      	beq.n	8003c0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	200040fc 	.word	0x200040fc
 8003c20:	20004104 	.word	0x20004104

08003c24 <std>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c32:	6083      	str	r3, [r0, #8]
 8003c34:	8181      	strh	r1, [r0, #12]
 8003c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c38:	81c2      	strh	r2, [r0, #14]
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	305c      	adds	r0, #92	@ 0x5c
 8003c42:	f000 f9e7 	bl	8004014 <memset>
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <std+0x58>)
 8003c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x5c>)
 8003c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x60>)
 8003c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <std+0x64>)
 8003c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <std+0x68>)
 8003c58:	6224      	str	r4, [r4, #32]
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d006      	beq.n	8003c6c <std+0x48>
 8003c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c62:	4294      	cmp	r4, r2
 8003c64:	d002      	beq.n	8003c6c <std+0x48>
 8003c66:	33d0      	adds	r3, #208	@ 0xd0
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d105      	bne.n	8003c78 <std+0x54>
 8003c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f000 baa4 	b.w	80041c0 <__retarget_lock_init_recursive>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08003e65 	.word	0x08003e65
 8003c80:	08003e87 	.word	0x08003e87
 8003c84:	08003ebf 	.word	0x08003ebf
 8003c88:	08003ee3 	.word	0x08003ee3
 8003c8c:	2000411c 	.word	0x2000411c

08003c90 <stdio_exit_handler>:
 8003c90:	4a02      	ldr	r2, [pc, #8]	@ (8003c9c <stdio_exit_handler+0xc>)
 8003c92:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <stdio_exit_handler+0x10>)
 8003c94:	4803      	ldr	r0, [pc, #12]	@ (8003ca4 <stdio_exit_handler+0x14>)
 8003c96:	f000 b869 	b.w	8003d6c <_fwalk_sglue>
 8003c9a:	bf00      	nop
 8003c9c:	20000010 	.word	0x20000010
 8003ca0:	080044c1 	.word	0x080044c1
 8003ca4:	20000020 	.word	0x20000020

08003ca8 <cleanup_stdio>:
 8003ca8:	6841      	ldr	r1, [r0, #4]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <cleanup_stdio+0x34>)
 8003cac:	4299      	cmp	r1, r3
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	d001      	beq.n	8003cb8 <cleanup_stdio+0x10>
 8003cb4:	f000 fc04 	bl	80044c0 <_fflush_r>
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <cleanup_stdio+0x38>)
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <cleanup_stdio+0x1e>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 fbfd 	bl	80044c0 <_fflush_r>
 8003cc6:	68e1      	ldr	r1, [r4, #12]
 8003cc8:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <cleanup_stdio+0x3c>)
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d004      	beq.n	8003cd8 <cleanup_stdio+0x30>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd4:	f000 bbf4 	b.w	80044c0 <_fflush_r>
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000411c 	.word	0x2000411c
 8003ce0:	20004184 	.word	0x20004184
 8003ce4:	200041ec 	.word	0x200041ec

08003ce8 <global_stdio_init.part.0>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <global_stdio_init.part.0+0x30>)
 8003cec:	4c0b      	ldr	r4, [pc, #44]	@ (8003d1c <global_stdio_init.part.0+0x34>)
 8003cee:	4a0c      	ldr	r2, [pc, #48]	@ (8003d20 <global_stdio_init.part.0+0x38>)
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	f7ff ff94 	bl	8003c24 <std>
 8003cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d00:	2201      	movs	r2, #1
 8003d02:	2109      	movs	r1, #9
 8003d04:	f7ff ff8e 	bl	8003c24 <std>
 8003d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d12:	2112      	movs	r1, #18
 8003d14:	f7ff bf86 	b.w	8003c24 <std>
 8003d18:	20004254 	.word	0x20004254
 8003d1c:	2000411c 	.word	0x2000411c
 8003d20:	08003c91 	.word	0x08003c91

08003d24 <__sfp_lock_acquire>:
 8003d24:	4801      	ldr	r0, [pc, #4]	@ (8003d2c <__sfp_lock_acquire+0x8>)
 8003d26:	f000 ba4c 	b.w	80041c2 <__retarget_lock_acquire_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	2000425d 	.word	0x2000425d

08003d30 <__sfp_lock_release>:
 8003d30:	4801      	ldr	r0, [pc, #4]	@ (8003d38 <__sfp_lock_release+0x8>)
 8003d32:	f000 ba47 	b.w	80041c4 <__retarget_lock_release_recursive>
 8003d36:	bf00      	nop
 8003d38:	2000425d 	.word	0x2000425d

08003d3c <__sinit>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	f7ff fff0 	bl	8003d24 <__sfp_lock_acquire>
 8003d44:	6a23      	ldr	r3, [r4, #32]
 8003d46:	b11b      	cbz	r3, 8003d50 <__sinit+0x14>
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f7ff bff0 	b.w	8003d30 <__sfp_lock_release>
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__sinit+0x28>)
 8003d52:	6223      	str	r3, [r4, #32]
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__sinit+0x2c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f5      	bne.n	8003d48 <__sinit+0xc>
 8003d5c:	f7ff ffc4 	bl	8003ce8 <global_stdio_init.part.0>
 8003d60:	e7f2      	b.n	8003d48 <__sinit+0xc>
 8003d62:	bf00      	nop
 8003d64:	08003ca9 	.word	0x08003ca9
 8003d68:	20004254 	.word	0x20004254

08003d6c <_fwalk_sglue>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4607      	mov	r7, r0
 8003d72:	4688      	mov	r8, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	2600      	movs	r6, #0
 8003d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d80:	d505      	bpl.n	8003d8e <_fwalk_sglue+0x22>
 8003d82:	6824      	ldr	r4, [r4, #0]
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d1f7      	bne.n	8003d78 <_fwalk_sglue+0xc>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d907      	bls.n	8003da4 <_fwalk_sglue+0x38>
 8003d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d003      	beq.n	8003da4 <_fwalk_sglue+0x38>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	4306      	orrs	r6, r0
 8003da4:	3568      	adds	r5, #104	@ 0x68
 8003da6:	e7e9      	b.n	8003d7c <_fwalk_sglue+0x10>

08003da8 <_puts_r>:
 8003da8:	6a03      	ldr	r3, [r0, #32]
 8003daa:	b570      	push	{r4, r5, r6, lr}
 8003dac:	6884      	ldr	r4, [r0, #8]
 8003dae:	4605      	mov	r5, r0
 8003db0:	460e      	mov	r6, r1
 8003db2:	b90b      	cbnz	r3, 8003db8 <_puts_r+0x10>
 8003db4:	f7ff ffc2 	bl	8003d3c <__sinit>
 8003db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dba:	07db      	lsls	r3, r3, #31
 8003dbc:	d405      	bmi.n	8003dca <_puts_r+0x22>
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	0598      	lsls	r0, r3, #22
 8003dc2:	d402      	bmi.n	8003dca <_puts_r+0x22>
 8003dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dc6:	f000 f9fc 	bl	80041c2 <__retarget_lock_acquire_recursive>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	0719      	lsls	r1, r3, #28
 8003dce:	d502      	bpl.n	8003dd6 <_puts_r+0x2e>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d135      	bne.n	8003e42 <_puts_r+0x9a>
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f8c5 	bl	8003f68 <__swsetup_r>
 8003dde:	b380      	cbz	r0, 8003e42 <_puts_r+0x9a>
 8003de0:	f04f 35ff 	mov.w	r5, #4294967295
 8003de4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003de6:	07da      	lsls	r2, r3, #31
 8003de8:	d405      	bmi.n	8003df6 <_puts_r+0x4e>
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	059b      	lsls	r3, r3, #22
 8003dee:	d402      	bmi.n	8003df6 <_puts_r+0x4e>
 8003df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003df2:	f000 f9e7 	bl	80041c4 <__retarget_lock_release_recursive>
 8003df6:	4628      	mov	r0, r5
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da04      	bge.n	8003e08 <_puts_r+0x60>
 8003dfe:	69a2      	ldr	r2, [r4, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dc17      	bgt.n	8003e34 <_puts_r+0x8c>
 8003e04:	290a      	cmp	r1, #10
 8003e06:	d015      	beq.n	8003e34 <_puts_r+0x8c>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	7019      	strb	r1, [r3, #0]
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60a3      	str	r3, [r4, #8]
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d1ed      	bne.n	8003dfa <_puts_r+0x52>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	da11      	bge.n	8003e46 <_puts_r+0x9e>
 8003e22:	4622      	mov	r2, r4
 8003e24:	210a      	movs	r1, #10
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 f85f 	bl	8003eea <__swbuf_r>
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d0d7      	beq.n	8003de0 <_puts_r+0x38>
 8003e30:	250a      	movs	r5, #10
 8003e32:	e7d7      	b.n	8003de4 <_puts_r+0x3c>
 8003e34:	4622      	mov	r2, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	f000 f857 	bl	8003eea <__swbuf_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1e7      	bne.n	8003e10 <_puts_r+0x68>
 8003e40:	e7ce      	b.n	8003de0 <_puts_r+0x38>
 8003e42:	3e01      	subs	r6, #1
 8003e44:	e7e4      	b.n	8003e10 <_puts_r+0x68>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	220a      	movs	r2, #10
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e7ee      	b.n	8003e30 <_puts_r+0x88>
	...

08003e54 <puts>:
 8003e54:	4b02      	ldr	r3, [pc, #8]	@ (8003e60 <puts+0xc>)
 8003e56:	4601      	mov	r1, r0
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	f7ff bfa5 	b.w	8003da8 <_puts_r>
 8003e5e:	bf00      	nop
 8003e60:	2000001c 	.word	0x2000001c

08003e64 <__sread>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	460c      	mov	r4, r1
 8003e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6c:	f000 f95a 	bl	8004124 <_read_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	bfab      	itete	ge
 8003e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e76:	89a3      	ldrhlt	r3, [r4, #12]
 8003e78:	181b      	addge	r3, r3, r0
 8003e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e7e:	bfac      	ite	ge
 8003e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e82:	81a3      	strhlt	r3, [r4, #12]
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__swrite>:
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	4605      	mov	r5, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	4616      	mov	r6, r2
 8003e96:	d505      	bpl.n	8003ea4 <__swrite+0x1e>
 8003e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f000 f92e 	bl	8004100 <_lseek_r>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eba:	f000 b945 	b.w	8004148 <_write_r>

08003ebe <__sseek>:
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec6:	f000 f91b 	bl	8004100 <_lseek_r>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	bf15      	itete	ne
 8003ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003eda:	81a3      	strheq	r3, [r4, #12]
 8003edc:	bf18      	it	ne
 8003ede:	81a3      	strhne	r3, [r4, #12]
 8003ee0:	bd10      	pop	{r4, pc}

08003ee2 <__sclose>:
 8003ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee6:	f000 b89d 	b.w	8004024 <_close_r>

08003eea <__swbuf_r>:
 8003eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eec:	460e      	mov	r6, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	b118      	cbz	r0, 8003efc <__swbuf_r+0x12>
 8003ef4:	6a03      	ldr	r3, [r0, #32]
 8003ef6:	b90b      	cbnz	r3, 8003efc <__swbuf_r+0x12>
 8003ef8:	f7ff ff20 	bl	8003d3c <__sinit>
 8003efc:	69a3      	ldr	r3, [r4, #24]
 8003efe:	60a3      	str	r3, [r4, #8]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	071a      	lsls	r2, r3, #28
 8003f04:	d501      	bpl.n	8003f0a <__swbuf_r+0x20>
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	b943      	cbnz	r3, 8003f1c <__swbuf_r+0x32>
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	f000 f82b 	bl	8003f68 <__swsetup_r>
 8003f12:	b118      	cbz	r0, 8003f1c <__swbuf_r+0x32>
 8003f14:	f04f 37ff 	mov.w	r7, #4294967295
 8003f18:	4638      	mov	r0, r7
 8003f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	6922      	ldr	r2, [r4, #16]
 8003f20:	1a98      	subs	r0, r3, r2
 8003f22:	6963      	ldr	r3, [r4, #20]
 8003f24:	b2f6      	uxtb	r6, r6
 8003f26:	4283      	cmp	r3, r0
 8003f28:	4637      	mov	r7, r6
 8003f2a:	dc05      	bgt.n	8003f38 <__swbuf_r+0x4e>
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 fac6 	bl	80044c0 <_fflush_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d1ed      	bne.n	8003f14 <__swbuf_r+0x2a>
 8003f38:	68a3      	ldr	r3, [r4, #8]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60a3      	str	r3, [r4, #8]
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	701e      	strb	r6, [r3, #0]
 8003f46:	6962      	ldr	r2, [r4, #20]
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d004      	beq.n	8003f58 <__swbuf_r+0x6e>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	07db      	lsls	r3, r3, #31
 8003f52:	d5e1      	bpl.n	8003f18 <__swbuf_r+0x2e>
 8003f54:	2e0a      	cmp	r6, #10
 8003f56:	d1df      	bne.n	8003f18 <__swbuf_r+0x2e>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 fab0 	bl	80044c0 <_fflush_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0d9      	beq.n	8003f18 <__swbuf_r+0x2e>
 8003f64:	e7d6      	b.n	8003f14 <__swbuf_r+0x2a>
	...

08003f68 <__swsetup_r>:
 8003f68:	b538      	push	{r3, r4, r5, lr}
 8003f6a:	4b29      	ldr	r3, [pc, #164]	@ (8004010 <__swsetup_r+0xa8>)
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	460c      	mov	r4, r1
 8003f72:	b118      	cbz	r0, 8003f7c <__swsetup_r+0x14>
 8003f74:	6a03      	ldr	r3, [r0, #32]
 8003f76:	b90b      	cbnz	r3, 8003f7c <__swsetup_r+0x14>
 8003f78:	f7ff fee0 	bl	8003d3c <__sinit>
 8003f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f80:	0719      	lsls	r1, r3, #28
 8003f82:	d422      	bmi.n	8003fca <__swsetup_r+0x62>
 8003f84:	06da      	lsls	r2, r3, #27
 8003f86:	d407      	bmi.n	8003f98 <__swsetup_r+0x30>
 8003f88:	2209      	movs	r2, #9
 8003f8a:	602a      	str	r2, [r5, #0]
 8003f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	e033      	b.n	8004000 <__swsetup_r+0x98>
 8003f98:	0758      	lsls	r0, r3, #29
 8003f9a:	d512      	bpl.n	8003fc2 <__swsetup_r+0x5a>
 8003f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f9e:	b141      	cbz	r1, 8003fb2 <__swsetup_r+0x4a>
 8003fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <__swsetup_r+0x46>
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f90d 	bl	80041c8 <_free_r>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	6063      	str	r3, [r4, #4]
 8003fbe:	6923      	ldr	r3, [r4, #16]
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	b94b      	cbnz	r3, 8003fe2 <__swsetup_r+0x7a>
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd8:	d003      	beq.n	8003fe2 <__swsetup_r+0x7a>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 fabd 	bl	800455c <__smakebuf_r>
 8003fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe6:	f013 0201 	ands.w	r2, r3, #1
 8003fea:	d00a      	beq.n	8004002 <__swsetup_r+0x9a>
 8003fec:	2200      	movs	r2, #0
 8003fee:	60a2      	str	r2, [r4, #8]
 8003ff0:	6962      	ldr	r2, [r4, #20]
 8003ff2:	4252      	negs	r2, r2
 8003ff4:	61a2      	str	r2, [r4, #24]
 8003ff6:	6922      	ldr	r2, [r4, #16]
 8003ff8:	b942      	cbnz	r2, 800400c <__swsetup_r+0xa4>
 8003ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ffe:	d1c5      	bne.n	8003f8c <__swsetup_r+0x24>
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	0799      	lsls	r1, r3, #30
 8004004:	bf58      	it	pl
 8004006:	6962      	ldrpl	r2, [r4, #20]
 8004008:	60a2      	str	r2, [r4, #8]
 800400a:	e7f4      	b.n	8003ff6 <__swsetup_r+0x8e>
 800400c:	2000      	movs	r0, #0
 800400e:	e7f7      	b.n	8004000 <__swsetup_r+0x98>
 8004010:	2000001c 	.word	0x2000001c

08004014 <memset>:
 8004014:	4402      	add	r2, r0
 8004016:	4603      	mov	r3, r0
 8004018:	4293      	cmp	r3, r2
 800401a:	d100      	bne.n	800401e <memset+0xa>
 800401c:	4770      	bx	lr
 800401e:	f803 1b01 	strb.w	r1, [r3], #1
 8004022:	e7f9      	b.n	8004018 <memset+0x4>

08004024 <_close_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d06      	ldr	r5, [pc, #24]	@ (8004040 <_close_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fc fcd3 	bl	80009da <_close>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_close_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_close_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20004258 	.word	0x20004258

08004044 <_reclaim_reent>:
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <_reclaim_reent+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4283      	cmp	r3, r0
 800404a:	b570      	push	{r4, r5, r6, lr}
 800404c:	4604      	mov	r4, r0
 800404e:	d053      	beq.n	80040f8 <_reclaim_reent+0xb4>
 8004050:	69c3      	ldr	r3, [r0, #28]
 8004052:	b31b      	cbz	r3, 800409c <_reclaim_reent+0x58>
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	b163      	cbz	r3, 8004072 <_reclaim_reent+0x2e>
 8004058:	2500      	movs	r5, #0
 800405a:	69e3      	ldr	r3, [r4, #28]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	5959      	ldr	r1, [r3, r5]
 8004060:	b9b1      	cbnz	r1, 8004090 <_reclaim_reent+0x4c>
 8004062:	3504      	adds	r5, #4
 8004064:	2d80      	cmp	r5, #128	@ 0x80
 8004066:	d1f8      	bne.n	800405a <_reclaim_reent+0x16>
 8004068:	69e3      	ldr	r3, [r4, #28]
 800406a:	4620      	mov	r0, r4
 800406c:	68d9      	ldr	r1, [r3, #12]
 800406e:	f000 f8ab 	bl	80041c8 <_free_r>
 8004072:	69e3      	ldr	r3, [r4, #28]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	b111      	cbz	r1, 800407e <_reclaim_reent+0x3a>
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f8a5 	bl	80041c8 <_free_r>
 800407e:	69e3      	ldr	r3, [r4, #28]
 8004080:	689d      	ldr	r5, [r3, #8]
 8004082:	b15d      	cbz	r5, 800409c <_reclaim_reent+0x58>
 8004084:	4629      	mov	r1, r5
 8004086:	4620      	mov	r0, r4
 8004088:	682d      	ldr	r5, [r5, #0]
 800408a:	f000 f89d 	bl	80041c8 <_free_r>
 800408e:	e7f8      	b.n	8004082 <_reclaim_reent+0x3e>
 8004090:	680e      	ldr	r6, [r1, #0]
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f898 	bl	80041c8 <_free_r>
 8004098:	4631      	mov	r1, r6
 800409a:	e7e1      	b.n	8004060 <_reclaim_reent+0x1c>
 800409c:	6961      	ldr	r1, [r4, #20]
 800409e:	b111      	cbz	r1, 80040a6 <_reclaim_reent+0x62>
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f891 	bl	80041c8 <_free_r>
 80040a6:	69e1      	ldr	r1, [r4, #28]
 80040a8:	b111      	cbz	r1, 80040b0 <_reclaim_reent+0x6c>
 80040aa:	4620      	mov	r0, r4
 80040ac:	f000 f88c 	bl	80041c8 <_free_r>
 80040b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80040b2:	b111      	cbz	r1, 80040ba <_reclaim_reent+0x76>
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 f887 	bl	80041c8 <_free_r>
 80040ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040bc:	b111      	cbz	r1, 80040c4 <_reclaim_reent+0x80>
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 f882 	bl	80041c8 <_free_r>
 80040c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80040c6:	b111      	cbz	r1, 80040ce <_reclaim_reent+0x8a>
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f87d 	bl	80041c8 <_free_r>
 80040ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80040d0:	b111      	cbz	r1, 80040d8 <_reclaim_reent+0x94>
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f878 	bl	80041c8 <_free_r>
 80040d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80040da:	b111      	cbz	r1, 80040e2 <_reclaim_reent+0x9e>
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 f873 	bl	80041c8 <_free_r>
 80040e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040e4:	b111      	cbz	r1, 80040ec <_reclaim_reent+0xa8>
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 f86e 	bl	80041c8 <_free_r>
 80040ec:	6a23      	ldr	r3, [r4, #32]
 80040ee:	b11b      	cbz	r3, 80040f8 <_reclaim_reent+0xb4>
 80040f0:	4620      	mov	r0, r4
 80040f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040f6:	4718      	bx	r3
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	bf00      	nop
 80040fc:	2000001c 	.word	0x2000001c

08004100 <_lseek_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_lseek_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fc fc8a 	bl	8000a28 <_lseek>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_lseek_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_lseek_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20004258 	.word	0x20004258

08004124 <_read_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_read_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fc fc34 	bl	80009a0 <_read>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_read_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_read_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20004258 	.word	0x20004258

08004148 <_write_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	@ (8004168 <_write_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc f9ea 	bl	8000530 <_write>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_write_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_write_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20004258 	.word	0x20004258

0800416c <__errno>:
 800416c:	4b01      	ldr	r3, [pc, #4]	@ (8004174 <__errno+0x8>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000001c 	.word	0x2000001c

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4d0d      	ldr	r5, [pc, #52]	@ (80041b0 <__libc_init_array+0x38>)
 800417c:	4c0d      	ldr	r4, [pc, #52]	@ (80041b4 <__libc_init_array+0x3c>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	2600      	movs	r6, #0
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	4d0b      	ldr	r5, [pc, #44]	@ (80041b8 <__libc_init_array+0x40>)
 800418a:	4c0c      	ldr	r4, [pc, #48]	@ (80041bc <__libc_init_array+0x44>)
 800418c:	f000 fa54 	bl	8004638 <_init>
 8004190:	1b64      	subs	r4, r4, r5
 8004192:	10a4      	asrs	r4, r4, #2
 8004194:	2600      	movs	r6, #0
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	080046d0 	.word	0x080046d0
 80041b4:	080046d0 	.word	0x080046d0
 80041b8:	080046d0 	.word	0x080046d0
 80041bc:	080046d4 	.word	0x080046d4

080041c0 <__retarget_lock_init_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_acquire_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <__retarget_lock_release_recursive>:
 80041c4:	4770      	bx	lr
	...

080041c8 <_free_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4605      	mov	r5, r0
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d041      	beq.n	8004254 <_free_r+0x8c>
 80041d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041d4:	1f0c      	subs	r4, r1, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfb8      	it	lt
 80041da:	18e4      	addlt	r4, r4, r3
 80041dc:	f000 f8e0 	bl	80043a0 <__malloc_lock>
 80041e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <_free_r+0x90>)
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	b933      	cbnz	r3, 80041f4 <_free_r+0x2c>
 80041e6:	6063      	str	r3, [r4, #4]
 80041e8:	6014      	str	r4, [r2, #0]
 80041ea:	4628      	mov	r0, r5
 80041ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f0:	f000 b8dc 	b.w	80043ac <__malloc_unlock>
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	d908      	bls.n	800420a <_free_r+0x42>
 80041f8:	6820      	ldr	r0, [r4, #0]
 80041fa:	1821      	adds	r1, r4, r0
 80041fc:	428b      	cmp	r3, r1
 80041fe:	bf01      	itttt	eq
 8004200:	6819      	ldreq	r1, [r3, #0]
 8004202:	685b      	ldreq	r3, [r3, #4]
 8004204:	1809      	addeq	r1, r1, r0
 8004206:	6021      	streq	r1, [r4, #0]
 8004208:	e7ed      	b.n	80041e6 <_free_r+0x1e>
 800420a:	461a      	mov	r2, r3
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b10b      	cbz	r3, 8004214 <_free_r+0x4c>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x42>
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	1850      	adds	r0, r2, r1
 8004218:	42a0      	cmp	r0, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x6c>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	4401      	add	r1, r0
 8004220:	1850      	adds	r0, r2, r1
 8004222:	4283      	cmp	r3, r0
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	d1e0      	bne.n	80041ea <_free_r+0x22>
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	4408      	add	r0, r1
 8004230:	6010      	str	r0, [r2, #0]
 8004232:	e7da      	b.n	80041ea <_free_r+0x22>
 8004234:	d902      	bls.n	800423c <_free_r+0x74>
 8004236:	230c      	movs	r3, #12
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	e7d6      	b.n	80041ea <_free_r+0x22>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	1821      	adds	r1, r4, r0
 8004240:	428b      	cmp	r3, r1
 8004242:	bf04      	itt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6054      	str	r4, [r2, #4]
 8004252:	e7ca      	b.n	80041ea <_free_r+0x22>
 8004254:	bd38      	pop	{r3, r4, r5, pc}
 8004256:	bf00      	nop
 8004258:	20004264 	.word	0x20004264

0800425c <sbrk_aligned>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4e0f      	ldr	r6, [pc, #60]	@ (800429c <sbrk_aligned+0x40>)
 8004260:	460c      	mov	r4, r1
 8004262:	6831      	ldr	r1, [r6, #0]
 8004264:	4605      	mov	r5, r0
 8004266:	b911      	cbnz	r1, 800426e <sbrk_aligned+0x12>
 8004268:	f000 f9d6 	bl	8004618 <_sbrk_r>
 800426c:	6030      	str	r0, [r6, #0]
 800426e:	4621      	mov	r1, r4
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f9d1 	bl	8004618 <_sbrk_r>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d103      	bne.n	8004282 <sbrk_aligned+0x26>
 800427a:	f04f 34ff 	mov.w	r4, #4294967295
 800427e:	4620      	mov	r0, r4
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	1cc4      	adds	r4, r0, #3
 8004284:	f024 0403 	bic.w	r4, r4, #3
 8004288:	42a0      	cmp	r0, r4
 800428a:	d0f8      	beq.n	800427e <sbrk_aligned+0x22>
 800428c:	1a21      	subs	r1, r4, r0
 800428e:	4628      	mov	r0, r5
 8004290:	f000 f9c2 	bl	8004618 <_sbrk_r>
 8004294:	3001      	adds	r0, #1
 8004296:	d1f2      	bne.n	800427e <sbrk_aligned+0x22>
 8004298:	e7ef      	b.n	800427a <sbrk_aligned+0x1e>
 800429a:	bf00      	nop
 800429c:	20004260 	.word	0x20004260

080042a0 <_malloc_r>:
 80042a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042a4:	1ccd      	adds	r5, r1, #3
 80042a6:	f025 0503 	bic.w	r5, r5, #3
 80042aa:	3508      	adds	r5, #8
 80042ac:	2d0c      	cmp	r5, #12
 80042ae:	bf38      	it	cc
 80042b0:	250c      	movcc	r5, #12
 80042b2:	2d00      	cmp	r5, #0
 80042b4:	4606      	mov	r6, r0
 80042b6:	db01      	blt.n	80042bc <_malloc_r+0x1c>
 80042b8:	42a9      	cmp	r1, r5
 80042ba:	d904      	bls.n	80042c6 <_malloc_r+0x26>
 80042bc:	230c      	movs	r3, #12
 80042be:	6033      	str	r3, [r6, #0]
 80042c0:	2000      	movs	r0, #0
 80042c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800439c <_malloc_r+0xfc>
 80042ca:	f000 f869 	bl	80043a0 <__malloc_lock>
 80042ce:	f8d8 3000 	ldr.w	r3, [r8]
 80042d2:	461c      	mov	r4, r3
 80042d4:	bb44      	cbnz	r4, 8004328 <_malloc_r+0x88>
 80042d6:	4629      	mov	r1, r5
 80042d8:	4630      	mov	r0, r6
 80042da:	f7ff ffbf 	bl	800425c <sbrk_aligned>
 80042de:	1c43      	adds	r3, r0, #1
 80042e0:	4604      	mov	r4, r0
 80042e2:	d158      	bne.n	8004396 <_malloc_r+0xf6>
 80042e4:	f8d8 4000 	ldr.w	r4, [r8]
 80042e8:	4627      	mov	r7, r4
 80042ea:	2f00      	cmp	r7, #0
 80042ec:	d143      	bne.n	8004376 <_malloc_r+0xd6>
 80042ee:	2c00      	cmp	r4, #0
 80042f0:	d04b      	beq.n	800438a <_malloc_r+0xea>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	4639      	mov	r1, r7
 80042f6:	4630      	mov	r0, r6
 80042f8:	eb04 0903 	add.w	r9, r4, r3
 80042fc:	f000 f98c 	bl	8004618 <_sbrk_r>
 8004300:	4581      	cmp	r9, r0
 8004302:	d142      	bne.n	800438a <_malloc_r+0xea>
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	1a6d      	subs	r5, r5, r1
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff ffa6 	bl	800425c <sbrk_aligned>
 8004310:	3001      	adds	r0, #1
 8004312:	d03a      	beq.n	800438a <_malloc_r+0xea>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	442b      	add	r3, r5
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	f8d8 3000 	ldr.w	r3, [r8]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	bb62      	cbnz	r2, 800437c <_malloc_r+0xdc>
 8004322:	f8c8 7000 	str.w	r7, [r8]
 8004326:	e00f      	b.n	8004348 <_malloc_r+0xa8>
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	1b52      	subs	r2, r2, r5
 800432c:	d420      	bmi.n	8004370 <_malloc_r+0xd0>
 800432e:	2a0b      	cmp	r2, #11
 8004330:	d917      	bls.n	8004362 <_malloc_r+0xc2>
 8004332:	1961      	adds	r1, r4, r5
 8004334:	42a3      	cmp	r3, r4
 8004336:	6025      	str	r5, [r4, #0]
 8004338:	bf18      	it	ne
 800433a:	6059      	strne	r1, [r3, #4]
 800433c:	6863      	ldr	r3, [r4, #4]
 800433e:	bf08      	it	eq
 8004340:	f8c8 1000 	streq.w	r1, [r8]
 8004344:	5162      	str	r2, [r4, r5]
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	4630      	mov	r0, r6
 800434a:	f000 f82f 	bl	80043ac <__malloc_unlock>
 800434e:	f104 000b 	add.w	r0, r4, #11
 8004352:	1d23      	adds	r3, r4, #4
 8004354:	f020 0007 	bic.w	r0, r0, #7
 8004358:	1ac2      	subs	r2, r0, r3
 800435a:	bf1c      	itt	ne
 800435c:	1a1b      	subne	r3, r3, r0
 800435e:	50a3      	strne	r3, [r4, r2]
 8004360:	e7af      	b.n	80042c2 <_malloc_r+0x22>
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	42a3      	cmp	r3, r4
 8004366:	bf0c      	ite	eq
 8004368:	f8c8 2000 	streq.w	r2, [r8]
 800436c:	605a      	strne	r2, [r3, #4]
 800436e:	e7eb      	b.n	8004348 <_malloc_r+0xa8>
 8004370:	4623      	mov	r3, r4
 8004372:	6864      	ldr	r4, [r4, #4]
 8004374:	e7ae      	b.n	80042d4 <_malloc_r+0x34>
 8004376:	463c      	mov	r4, r7
 8004378:	687f      	ldr	r7, [r7, #4]
 800437a:	e7b6      	b.n	80042ea <_malloc_r+0x4a>
 800437c:	461a      	mov	r2, r3
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	42a3      	cmp	r3, r4
 8004382:	d1fb      	bne.n	800437c <_malloc_r+0xdc>
 8004384:	2300      	movs	r3, #0
 8004386:	6053      	str	r3, [r2, #4]
 8004388:	e7de      	b.n	8004348 <_malloc_r+0xa8>
 800438a:	230c      	movs	r3, #12
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	4630      	mov	r0, r6
 8004390:	f000 f80c 	bl	80043ac <__malloc_unlock>
 8004394:	e794      	b.n	80042c0 <_malloc_r+0x20>
 8004396:	6005      	str	r5, [r0, #0]
 8004398:	e7d6      	b.n	8004348 <_malloc_r+0xa8>
 800439a:	bf00      	nop
 800439c:	20004264 	.word	0x20004264

080043a0 <__malloc_lock>:
 80043a0:	4801      	ldr	r0, [pc, #4]	@ (80043a8 <__malloc_lock+0x8>)
 80043a2:	f7ff bf0e 	b.w	80041c2 <__retarget_lock_acquire_recursive>
 80043a6:	bf00      	nop
 80043a8:	2000425c 	.word	0x2000425c

080043ac <__malloc_unlock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	@ (80043b4 <__malloc_unlock+0x8>)
 80043ae:	f7ff bf09 	b.w	80041c4 <__retarget_lock_release_recursive>
 80043b2:	bf00      	nop
 80043b4:	2000425c 	.word	0x2000425c

080043b8 <__sflush_r>:
 80043b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	0716      	lsls	r6, r2, #28
 80043c2:	4605      	mov	r5, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	d454      	bmi.n	8004472 <__sflush_r+0xba>
 80043c8:	684b      	ldr	r3, [r1, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	dc02      	bgt.n	80043d4 <__sflush_r+0x1c>
 80043ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dd48      	ble.n	8004466 <__sflush_r+0xae>
 80043d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	d045      	beq.n	8004466 <__sflush_r+0xae>
 80043da:	2300      	movs	r3, #0
 80043dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043e0:	682f      	ldr	r7, [r5, #0]
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	d030      	beq.n	800444a <__sflush_r+0x92>
 80043e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	0759      	lsls	r1, r3, #29
 80043ee:	d505      	bpl.n	80043fc <__sflush_r+0x44>
 80043f0:	6863      	ldr	r3, [r4, #4]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043f6:	b10b      	cbz	r3, 80043fc <__sflush_r+0x44>
 80043f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043fa:	1ad2      	subs	r2, r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004400:	6a21      	ldr	r1, [r4, #32]
 8004402:	4628      	mov	r0, r5
 8004404:	47b0      	blx	r6
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	d106      	bne.n	800441a <__sflush_r+0x62>
 800440c:	6829      	ldr	r1, [r5, #0]
 800440e:	291d      	cmp	r1, #29
 8004410:	d82b      	bhi.n	800446a <__sflush_r+0xb2>
 8004412:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <__sflush_r+0x104>)
 8004414:	40ca      	lsrs	r2, r1
 8004416:	07d6      	lsls	r6, r2, #31
 8004418:	d527      	bpl.n	800446a <__sflush_r+0xb2>
 800441a:	2200      	movs	r2, #0
 800441c:	6062      	str	r2, [r4, #4]
 800441e:	04d9      	lsls	r1, r3, #19
 8004420:	6922      	ldr	r2, [r4, #16]
 8004422:	6022      	str	r2, [r4, #0]
 8004424:	d504      	bpl.n	8004430 <__sflush_r+0x78>
 8004426:	1c42      	adds	r2, r0, #1
 8004428:	d101      	bne.n	800442e <__sflush_r+0x76>
 800442a:	682b      	ldr	r3, [r5, #0]
 800442c:	b903      	cbnz	r3, 8004430 <__sflush_r+0x78>
 800442e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004432:	602f      	str	r7, [r5, #0]
 8004434:	b1b9      	cbz	r1, 8004466 <__sflush_r+0xae>
 8004436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800443a:	4299      	cmp	r1, r3
 800443c:	d002      	beq.n	8004444 <__sflush_r+0x8c>
 800443e:	4628      	mov	r0, r5
 8004440:	f7ff fec2 	bl	80041c8 <_free_r>
 8004444:	2300      	movs	r3, #0
 8004446:	6363      	str	r3, [r4, #52]	@ 0x34
 8004448:	e00d      	b.n	8004466 <__sflush_r+0xae>
 800444a:	2301      	movs	r3, #1
 800444c:	4628      	mov	r0, r5
 800444e:	47b0      	blx	r6
 8004450:	4602      	mov	r2, r0
 8004452:	1c50      	adds	r0, r2, #1
 8004454:	d1c9      	bne.n	80043ea <__sflush_r+0x32>
 8004456:	682b      	ldr	r3, [r5, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0c6      	beq.n	80043ea <__sflush_r+0x32>
 800445c:	2b1d      	cmp	r3, #29
 800445e:	d001      	beq.n	8004464 <__sflush_r+0xac>
 8004460:	2b16      	cmp	r3, #22
 8004462:	d11e      	bne.n	80044a2 <__sflush_r+0xea>
 8004464:	602f      	str	r7, [r5, #0]
 8004466:	2000      	movs	r0, #0
 8004468:	e022      	b.n	80044b0 <__sflush_r+0xf8>
 800446a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800446e:	b21b      	sxth	r3, r3
 8004470:	e01b      	b.n	80044aa <__sflush_r+0xf2>
 8004472:	690f      	ldr	r7, [r1, #16]
 8004474:	2f00      	cmp	r7, #0
 8004476:	d0f6      	beq.n	8004466 <__sflush_r+0xae>
 8004478:	0793      	lsls	r3, r2, #30
 800447a:	680e      	ldr	r6, [r1, #0]
 800447c:	bf08      	it	eq
 800447e:	694b      	ldreq	r3, [r1, #20]
 8004480:	600f      	str	r7, [r1, #0]
 8004482:	bf18      	it	ne
 8004484:	2300      	movne	r3, #0
 8004486:	eba6 0807 	sub.w	r8, r6, r7
 800448a:	608b      	str	r3, [r1, #8]
 800448c:	f1b8 0f00 	cmp.w	r8, #0
 8004490:	dde9      	ble.n	8004466 <__sflush_r+0xae>
 8004492:	6a21      	ldr	r1, [r4, #32]
 8004494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004496:	4643      	mov	r3, r8
 8004498:	463a      	mov	r2, r7
 800449a:	4628      	mov	r0, r5
 800449c:	47b0      	blx	r6
 800449e:	2800      	cmp	r0, #0
 80044a0:	dc08      	bgt.n	80044b4 <__sflush_r+0xfc>
 80044a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	4407      	add	r7, r0
 80044b6:	eba8 0800 	sub.w	r8, r8, r0
 80044ba:	e7e7      	b.n	800448c <__sflush_r+0xd4>
 80044bc:	20400001 	.word	0x20400001

080044c0 <_fflush_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	690b      	ldr	r3, [r1, #16]
 80044c4:	4605      	mov	r5, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	b913      	cbnz	r3, 80044d0 <_fflush_r+0x10>
 80044ca:	2500      	movs	r5, #0
 80044cc:	4628      	mov	r0, r5
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	b118      	cbz	r0, 80044da <_fflush_r+0x1a>
 80044d2:	6a03      	ldr	r3, [r0, #32]
 80044d4:	b90b      	cbnz	r3, 80044da <_fflush_r+0x1a>
 80044d6:	f7ff fc31 	bl	8003d3c <__sinit>
 80044da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f3      	beq.n	80044ca <_fflush_r+0xa>
 80044e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044e4:	07d0      	lsls	r0, r2, #31
 80044e6:	d404      	bmi.n	80044f2 <_fflush_r+0x32>
 80044e8:	0599      	lsls	r1, r3, #22
 80044ea:	d402      	bmi.n	80044f2 <_fflush_r+0x32>
 80044ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ee:	f7ff fe68 	bl	80041c2 <__retarget_lock_acquire_recursive>
 80044f2:	4628      	mov	r0, r5
 80044f4:	4621      	mov	r1, r4
 80044f6:	f7ff ff5f 	bl	80043b8 <__sflush_r>
 80044fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044fc:	07da      	lsls	r2, r3, #31
 80044fe:	4605      	mov	r5, r0
 8004500:	d4e4      	bmi.n	80044cc <_fflush_r+0xc>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	059b      	lsls	r3, r3, #22
 8004506:	d4e1      	bmi.n	80044cc <_fflush_r+0xc>
 8004508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450a:	f7ff fe5b 	bl	80041c4 <__retarget_lock_release_recursive>
 800450e:	e7dd      	b.n	80044cc <_fflush_r+0xc>

08004510 <__swhatbuf_r>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	460c      	mov	r4, r1
 8004514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004518:	2900      	cmp	r1, #0
 800451a:	b096      	sub	sp, #88	@ 0x58
 800451c:	4615      	mov	r5, r2
 800451e:	461e      	mov	r6, r3
 8004520:	da0d      	bge.n	800453e <__swhatbuf_r+0x2e>
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	bf14      	ite	ne
 800452e:	2340      	movne	r3, #64	@ 0x40
 8004530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004534:	2000      	movs	r0, #0
 8004536:	6031      	str	r1, [r6, #0]
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	b016      	add	sp, #88	@ 0x58
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	466a      	mov	r2, sp
 8004540:	f000 f848 	bl	80045d4 <_fstat_r>
 8004544:	2800      	cmp	r0, #0
 8004546:	dbec      	blt.n	8004522 <__swhatbuf_r+0x12>
 8004548:	9901      	ldr	r1, [sp, #4]
 800454a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800454e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004552:	4259      	negs	r1, r3
 8004554:	4159      	adcs	r1, r3
 8004556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800455a:	e7eb      	b.n	8004534 <__swhatbuf_r+0x24>

0800455c <__smakebuf_r>:
 800455c:	898b      	ldrh	r3, [r1, #12]
 800455e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004560:	079d      	lsls	r5, r3, #30
 8004562:	4606      	mov	r6, r0
 8004564:	460c      	mov	r4, r1
 8004566:	d507      	bpl.n	8004578 <__smakebuf_r+0x1c>
 8004568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	2301      	movs	r3, #1
 8004572:	6163      	str	r3, [r4, #20]
 8004574:	b003      	add	sp, #12
 8004576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004578:	ab01      	add	r3, sp, #4
 800457a:	466a      	mov	r2, sp
 800457c:	f7ff ffc8 	bl	8004510 <__swhatbuf_r>
 8004580:	9f00      	ldr	r7, [sp, #0]
 8004582:	4605      	mov	r5, r0
 8004584:	4639      	mov	r1, r7
 8004586:	4630      	mov	r0, r6
 8004588:	f7ff fe8a 	bl	80042a0 <_malloc_r>
 800458c:	b948      	cbnz	r0, 80045a2 <__smakebuf_r+0x46>
 800458e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004592:	059a      	lsls	r2, r3, #22
 8004594:	d4ee      	bmi.n	8004574 <__smakebuf_r+0x18>
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	e7e2      	b.n	8004568 <__smakebuf_r+0xc>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	6020      	str	r0, [r4, #0]
 80045a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045b2:	b15b      	cbz	r3, 80045cc <__smakebuf_r+0x70>
 80045b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b8:	4630      	mov	r0, r6
 80045ba:	f000 f81d 	bl	80045f8 <_isatty_r>
 80045be:	b128      	cbz	r0, 80045cc <__smakebuf_r+0x70>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	431d      	orrs	r5, r3
 80045d0:	81a5      	strh	r5, [r4, #12]
 80045d2:	e7cf      	b.n	8004574 <__smakebuf_r+0x18>

080045d4 <_fstat_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4d07      	ldr	r5, [pc, #28]	@ (80045f4 <_fstat_r+0x20>)
 80045d8:	2300      	movs	r3, #0
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	602b      	str	r3, [r5, #0]
 80045e2:	f7fc fa06 	bl	80009f2 <_fstat>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	d102      	bne.n	80045f0 <_fstat_r+0x1c>
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	b103      	cbz	r3, 80045f0 <_fstat_r+0x1c>
 80045ee:	6023      	str	r3, [r4, #0]
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
 80045f2:	bf00      	nop
 80045f4:	20004258 	.word	0x20004258

080045f8 <_isatty_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d06      	ldr	r5, [pc, #24]	@ (8004614 <_isatty_r+0x1c>)
 80045fc:	2300      	movs	r3, #0
 80045fe:	4604      	mov	r4, r0
 8004600:	4608      	mov	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fc fa05 	bl	8000a12 <_isatty>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_isatty_r+0x1a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_isatty_r+0x1a>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	20004258 	.word	0x20004258

08004618 <_sbrk_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4d06      	ldr	r5, [pc, #24]	@ (8004634 <_sbrk_r+0x1c>)
 800461c:	2300      	movs	r3, #0
 800461e:	4604      	mov	r4, r0
 8004620:	4608      	mov	r0, r1
 8004622:	602b      	str	r3, [r5, #0]
 8004624:	f7fc fa0e 	bl	8000a44 <_sbrk>
 8004628:	1c43      	adds	r3, r0, #1
 800462a:	d102      	bne.n	8004632 <_sbrk_r+0x1a>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	b103      	cbz	r3, 8004632 <_sbrk_r+0x1a>
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	bd38      	pop	{r3, r4, r5, pc}
 8004634:	20004258 	.word	0x20004258

08004638 <_init>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr

08004644 <_fini>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr
