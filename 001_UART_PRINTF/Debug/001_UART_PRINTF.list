
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009eb0  08009eb0  0000aeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3ec  0800a3ec  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3ec  0800a3ec  0000b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f4  0800a3f4  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f4  0800a3f4  0000b3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3f8  0800a3f8  0000b3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a3fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          00004208  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200043e0  200043e0  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013fe9  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f64  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  00023158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcd  00000000  00000000  00024328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b8a  00000000  00000000  000250f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014161  00000000  00000000  00048c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5da2  00000000  00000000  0005cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132b82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006058  00000000  00000000  00132bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00138c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e98 	.word	0x08009e98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009e98 	.word	0x08009e98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200001f4 	.word	0x200001f4
 8001070:	20000294 	.word	0x20000294

08001074 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	if(file==STDERR_FILENO)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d116      	bne.n	80010b4 <_write+0x40>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RED, strlen(RED) , HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	2205      	movs	r2, #5
 800108c:	491d      	ldr	r1, [pc, #116]	@ (8001104 <_write+0x90>)
 800108e:	481e      	ldr	r0, [pc, #120]	@ (8001108 <_write+0x94>)
 8001090:	f001 fe98 	bl	8002dc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29a      	uxth	r2, r3
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	481a      	ldr	r0, [pc, #104]	@ (8001108 <_write+0x94>)
 80010a0:	f001 fe90 	bl	8002dc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(RST) , HAL_MAX_DELAY);
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2204      	movs	r2, #4
 80010aa:	4918      	ldr	r1, [pc, #96]	@ (800110c <_write+0x98>)
 80010ac:	4816      	ldr	r0, [pc, #88]	@ (8001108 <_write+0x94>)
 80010ae:	f001 fe89 	bl	8002dc4 <HAL_UART_Transmit>
 80010b2:	e021      	b.n	80010f8 <_write+0x84>
	}

	else if(file==STDOUT_FILENO)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d116      	bne.n	80010e8 <_write+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)GRN, strlen(GRN) , HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	2205      	movs	r2, #5
 80010c0:	4913      	ldr	r1, [pc, #76]	@ (8001110 <_write+0x9c>)
 80010c2:	4811      	ldr	r0, [pc, #68]	@ (8001108 <_write+0x94>)
 80010c4:	f001 fe7e 	bl	8002dc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <_write+0x94>)
 80010d4:	f001 fe76 	bl	8002dc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(GRN) , HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	2205      	movs	r2, #5
 80010de:	490b      	ldr	r1, [pc, #44]	@ (800110c <_write+0x98>)
 80010e0:	4809      	ldr	r0, [pc, #36]	@ (8001108 <_write+0x94>)
 80010e2:	f001 fe6f 	bl	8002dc4 <HAL_UART_Transmit>
 80010e6:	e007      	b.n	80010f8 <_write+0x84>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <_write+0x94>)
 80010f4:	f001 fe66 	bl	8002dc4 <HAL_UART_Transmit>

	}
	return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08009eb0 	.word	0x08009eb0
 8001108:	20000494 	.word	0x20000494
 800110c:	08009eb8 	.word	0x08009eb8
 8001110:	08009ec0 	.word	0x08009ec0

08001114 <_read>:

int _read(int file, char *ptr, int len)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
    if (file == STDIN_FILENO)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d123      	bne.n	800116e <_read+0x5a>
    {
        int i = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
        char ch;
        while (i < len - 1)
 800112a:	e012      	b.n	8001152 <_read+0x3e>
        {
            HAL_UART_Receive(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800112c:	f107 0113 	add.w	r1, r7, #19
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	2201      	movs	r2, #1
 8001136:	4810      	ldr	r0, [pc, #64]	@ (8001178 <_read+0x64>)
 8001138:	f001 fecf 	bl	8002eda <HAL_UART_Receive>
            ptr[i++] = ch;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	617a      	str	r2, [r7, #20]
 8001142:	461a      	mov	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	7cfa      	ldrb	r2, [r7, #19]
 800114a:	701a      	strb	r2, [r3, #0]
            if (ch == '\n') break;
 800114c:	7cfb      	ldrb	r3, [r7, #19]
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d005      	beq.n	800115e <_read+0x4a>
        while (i < len - 1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3b01      	subs	r3, #1
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbe7      	blt.n	800112c <_read+0x18>
 800115c:	e000      	b.n	8001160 <_read+0x4c>
            if (ch == '\n') break;
 800115e:	bf00      	nop
        }
        ptr[i] = '\0'; // Null-terminate
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4413      	add	r3, r2
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
        return i;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	e000      	b.n	8001170 <_read+0x5c>
    }
    return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000494 	.word	0x20000494

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08e      	sub	sp, #56	@ 0x38
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fb57 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f835 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 f8bb 	bl	8001304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800118e:	f000 f88f 	bl	80012b0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <main+0x68>)
 8001194:	f107 041c 	add.w	r4, r7, #28
 8001198:	461d      	mov	r5, r3
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fe86 	bl	8003ebe <osThreadCreate>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <main+0x6c>)
 80011b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <main+0x70>)
 80011ba:	463c      	mov	r4, r7
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fe75 	bl	8003ebe <osThreadCreate>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <main+0x74>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f002 fe69 	bl	8003eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	bf00      	nop
 80011e0:	e7fd      	b.n	80011de <main+0x62>
 80011e2:	bf00      	nop
 80011e4:	08009ed0 	.word	0x08009ed0
 80011e8:	200004dc 	.word	0x200004dc
 80011ec:	08009ef4 	.word	0x08009ef4
 80011f0:	200004e0 	.word	0x200004e0

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	@ 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f005 faa2 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <SystemClock_Config+0xb4>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <SystemClock_Config+0xb4>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <SystemClock_Config+0xb4>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <SystemClock_Config+0xb8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ac <SystemClock_Config+0xb8>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <SystemClock_Config+0xb8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f000 fe37 	bl	8001ed8 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001270:	f000 f8f2 	bl	8001458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f89a 	bl	80023c8 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800129a:	f000 f8dd 	bl	8001458 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	@ 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <MX_USART2_UART_Init+0x50>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_USART2_UART_Init+0x4c>)
 80012e8:	f001 fd1c 	bl	8002d24 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f2:	f000 f8b1 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000494 	.word	0x20000494
 8001300:	40004400 	.word	0x40004400

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_GPIO_Init+0x30>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <MX_GPIO_Init+0x30>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_GPIO_Init+0x30>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	fprintf(stdout,"system initialized\r\n");
 8001340:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <gorev2+0xb4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2214      	movs	r2, #20
 8001348:	2101      	movs	r1, #1
 800134a:	4829      	ldr	r0, [pc, #164]	@ (80013f0 <gorev2+0xb8>)
 800134c:	f005 f816 	bl	800637c <fwrite>

	fprintf(stderr, "error\r\n");
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <gorev2+0xb4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2207      	movs	r2, #7
 8001358:	2101      	movs	r1, #1
 800135a:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <gorev2+0xbc>)
 800135c:	f005 f80e 	bl	800637c <fwrite>
	     }

	osDelay(500);

	  {*/
	      fprintf(stdout, "UART fgets testi başladı\r\n");
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <gorev2+0xb4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	221c      	movs	r2, #28
 8001368:	2101      	movs	r1, #1
 800136a:	4823      	ldr	r0, [pc, #140]	@ (80013f8 <gorev2+0xc0>)
 800136c:	f005 f806 	bl	800637c <fwrite>

	      for (;;)
	      {
	          memset(input, 0, sizeof(input)); // diziyi sıfırla
 8001370:	220a      	movs	r2, #10
 8001372:	2100      	movs	r1, #0
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <gorev2+0xc4>)
 8001376:	f005 f9e9 	bl	800674c <memset>

	          if (fgets(input, sizeof(input), stdin) != NULL)
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <gorev2+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	210a      	movs	r1, #10
 8001384:	481d      	ldr	r0, [pc, #116]	@ (80013fc <gorev2+0xc4>)
 8001386:	f004 fecf 	bl	8006128 <fgets>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <gorev2+0x9a>
	          {
	              input[strcspn(input, "\r\n")] = '\0'; // Satır sonunu temizle
 8001390:	491b      	ldr	r1, [pc, #108]	@ (8001400 <gorev2+0xc8>)
 8001392:	481a      	ldr	r0, [pc, #104]	@ (80013fc <gorev2+0xc4>)
 8001394:	f005 f9e2 	bl	800675c <strcspn>
 8001398:	4603      	mov	r3, r0
 800139a:	4a18      	ldr	r2, [pc, #96]	@ (80013fc <gorev2+0xc4>)
 800139c:	2100      	movs	r1, #0
 800139e:	54d1      	strb	r1, [r2, r3]

	              if (strcmp(input, "s") == 0)
 80013a0:	4918      	ldr	r1, [pc, #96]	@ (8001404 <gorev2+0xcc>)
 80013a2:	4816      	ldr	r0, [pc, #88]	@ (80013fc <gorev2+0xc4>)
 80013a4:	f7fe ff14 	bl	80001d0 <strcmp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <gorev2+0x88>
	              {
	                  fprintf(stdout, "s alındı\r\n");
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <gorev2+0xb4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	220c      	movs	r2, #12
 80013b6:	2101      	movs	r1, #1
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <gorev2+0xd0>)
 80013ba:	f004 ffdf 	bl	800637c <fwrite>
 80013be:	e010      	b.n	80013e2 <gorev2+0xaa>
	              }
	              else
	              {
	                  fprintf(stderr, "geçersiz karakter: %s\r\n", input);
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <gorev2+0xb4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <gorev2+0xc4>)
 80013c8:	4910      	ldr	r1, [pc, #64]	@ (800140c <gorev2+0xd4>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 ff5a 	bl	8006284 <fiprintf>
 80013d0:	e007      	b.n	80013e2 <gorev2+0xaa>
	              }
	          }
	          else
	          {
	              fprintf(stderr, "Veri alınamadı\r\n");
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <gorev2+0xb4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2212      	movs	r2, #18
 80013da:	2101      	movs	r1, #1
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <gorev2+0xd8>)
 80013de:	f004 ffcd 	bl	800637c <fwrite>
	          }

	          osDelay(500);
 80013e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013e6:	f002 fdb6 	bl	8003f56 <osDelay>
	          memset(input, 0, sizeof(input)); // diziyi sıfırla
 80013ea:	e7c1      	b.n	8001370 <gorev2+0x38>
 80013ec:	2000001c 	.word	0x2000001c
 80013f0:	08009f10 	.word	0x08009f10
 80013f4:	08009f28 	.word	0x08009f28
 80013f8:	08009f30 	.word	0x08009f30
 80013fc:	200004e4 	.word	0x200004e4
 8001400:	08009f50 	.word	0x08009f50
 8001404:	08009f54 	.word	0x08009f54
 8001408:	08009f58 	.word	0x08009f58
 800140c:	08009f68 	.word	0x08009f68
 8001410:	08009f84 	.word	0x08009f84

08001414 <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gorev1 */
  /* Infinite loop */
  for(;;)
  {

	  printf("yasin\r\n");
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <gorev1+0x1c>)
 800141e:	f005 f811 	bl	8006444 <puts>
	  osDelay(500);
 8001422:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001426:	f002 fd96 	bl	8003f56 <osDelay>
	  printf("yasin\r\n");
 800142a:	bf00      	nop
 800142c:	e7f6      	b.n	800141c <gorev1+0x8>
 800142e:	bf00      	nop
 8001430:	08009f98 	.word	0x08009f98

08001434 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001446:	f000 fa17 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010000 	.word	0x40010000

08001458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <Error_Handler+0x8>

08001464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_MspInit+0x54>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <HAL_MspInit+0x54>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_MspInit+0x54>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <HAL_MspInit+0x54>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	@ 0x40
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210f      	movs	r1, #15
 80014a6:	f06f 0001 	mvn.w	r0, #1
 80014aa:	f000 fabd 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_UART_MspInit+0x94>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d133      	bne.n	8001546 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_UART_MspInit+0x98>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <HAL_UART_MspInit+0x98>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <HAL_UART_MspInit+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_UART_MspInit+0x98>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <HAL_UART_MspInit+0x98>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_UART_MspInit+0x98>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001516:	230c      	movs	r3, #12
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001526:	2307      	movs	r3, #7
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4809      	ldr	r0, [pc, #36]	@ (8001558 <HAL_UART_MspInit+0x9c>)
 8001532:	f000 fb35 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	2026      	movs	r0, #38	@ 0x26
 800153c:	f000 fa74 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001540:	2026      	movs	r0, #38	@ 0x26
 8001542:	f000 fa8d 	bl	8001a60 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40004400 	.word	0x40004400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_InitTick+0xd0>)
 8001572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001574:	4a2d      	ldr	r2, [pc, #180]	@ (800162c <HAL_InitTick+0xd0>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6453      	str	r3, [r2, #68]	@ 0x44
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_InitTick+0xd0>)
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001588:	f107 020c 	add.w	r2, r7, #12
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f001 f8f8 	bl	8002788 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001598:	f001 f8e2 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 800159c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a0:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_InitTick+0xd4>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9b      	lsrs	r3, r3, #18
 80015a8:	3b01      	subs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015ac:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_InitTick+0xd8>)
 80015ae:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <HAL_InitTick+0xdc>)
 80015b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_InitTick+0xd8>)
 80015b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_InitTick+0xd8>)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_InitTick+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_InitTick+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_InitTick+0xd8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015d2:	4818      	ldr	r0, [pc, #96]	@ (8001634 <HAL_InitTick+0xd8>)
 80015d4:	f001 f90a 	bl	80027ec <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d11b      	bne.n	800161e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015e6:	4813      	ldr	r0, [pc, #76]	@ (8001634 <HAL_InitTick+0xd8>)
 80015e8:	f001 f95a 	bl	80028a0 <HAL_TIM_Base_Start_IT>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d111      	bne.n	800161e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015fa:	2019      	movs	r0, #25
 80015fc:	f000 fa30 	bl	8001a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	d808      	bhi.n	8001618 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001606:	2200      	movs	r2, #0
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	2019      	movs	r0, #25
 800160c:	f000 fa0c 	bl	8001a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001610:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_InitTick+0xe0>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e002      	b.n	800161e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800161e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001622:	4618      	mov	r0, r3
 8001624:	3730      	adds	r7, #48	@ 0x30
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	431bde83 	.word	0x431bde83
 8001634:	200004f0 	.word	0x200004f0
 8001638:	40010000 	.word	0x40010000
 800163c:	20000004 	.word	0x20000004

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800167e:	f001 f97f 	bl	8002980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200004f0 	.word	0x200004f0

0800168c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <USART2_IRQHandler+0x10>)
 8001692:	f001 fcb9 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000494 	.word	0x20000494

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	f005 f909 	bl	80068d0 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <_exit+0x12>

080016e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800170e:	605a      	str	r2, [r3, #4]
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_isatty>:

int _isatty(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
 8001780:	f005 f8a6 	bl	80068d0 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020000 	.word	0x20020000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000538 	.word	0x20000538
 80017b8:	200043e0 	.word	0x200043e0

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017e4:	f7ff ffea 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180e:	f005 f865 	bl	80068dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7ff fcb3 	bl	800117c <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001824:	0800a3fc 	.word	0x0800a3fc
  ldr r2, =_sbss
 8001828:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800182c:	200043e0 	.word	0x200043e0

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f8d8 	bl	8001a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f7ff fe7a 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fdfc 	bl	8001464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	2000053c 	.word	0x2000053c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000053c 	.word	0x2000053c

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4c 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff61 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb1 	bl	80019ac <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff80 	bl	8001958 <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff54 	bl	800191c <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8a:	f7ff ff09 	bl	80018a0 <HAL_GetTick>
 8001a8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d008      	beq.n	8001aae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e052      	b.n	8001b54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0216 	bic.w	r2, r2, #22
 8001abc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001acc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d103      	bne.n	8001ade <HAL_DMA_Abort+0x62>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0208 	bic.w	r2, r2, #8
 8001aec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afe:	e013      	b.n	8001b28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b00:	f7ff fece 	bl	80018a0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d90c      	bls.n	8001b28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2203      	movs	r2, #3
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e015      	b.n	8001b54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1e4      	bne.n	8001b00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	223f      	movs	r2, #63	@ 0x3f
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d004      	beq.n	8001b7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00c      	b.n	8001b94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	@ 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e16b      	b.n	8001e94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 815a 	bne.w	8001e8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80b4 	beq.w	8001e8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b60      	ldr	r3, [pc, #384]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <HAL_GPIO_Init+0x30c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d42:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <HAL_GPIO_Init+0x314>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_GPIO_Init+0x226>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a51      	ldr	r2, [pc, #324]	@ (8001eb8 <HAL_GPIO_Init+0x318>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x222>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a50      	ldr	r2, [pc, #320]	@ (8001ebc <HAL_GPIO_Init+0x31c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x21e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec0 <HAL_GPIO_Init+0x320>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec4 <HAL_GPIO_Init+0x324>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x216>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_GPIO_Init+0x328>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x212>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <HAL_GPIO_Init+0x32c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed0 <HAL_GPIO_Init+0x330>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x20a>
 8001da6:	2307      	movs	r3, #7
 8001da8:	e00e      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001daa:	2308      	movs	r3, #8
 8001dac:	e00c      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00a      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x228>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd8:	4935      	ldr	r1, [pc, #212]	@ (8001eb0 <HAL_GPIO_Init+0x310>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a32      	ldr	r2, [pc, #200]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a27      	ldr	r2, [pc, #156]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e88:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <HAL_GPIO_Init+0x334>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f ae90 	bls.w	8001bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e267      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d075      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ef6:	4b88      	ldr	r3, [pc, #544]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d00c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b85      	ldr	r3, [pc, #532]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d112      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0e:	4b82      	ldr	r3, [pc, #520]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f1a:	d10b      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d05b      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d157      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e242      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x74>
 8001f3e:	4b76      	ldr	r3, [pc, #472]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a75      	ldr	r2, [pc, #468]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e01d      	b.n	8001f88 <HAL_RCC_OscConfig+0xb0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x98>
 8001f56:	4b70      	ldr	r3, [pc, #448]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a6c      	ldr	r2, [pc, #432]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0xb0>
 8001f70:	4b69      	ldr	r3, [pc, #420]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a68      	ldr	r2, [pc, #416]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b66      	ldr	r3, [pc, #408]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc86 	bl	80018a0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fc82 	bl	80018a0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	@ 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e207      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b5b      	ldr	r3, [pc, #364]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc72 	bl	80018a0 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fc6e 	bl	80018a0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e1f3      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	4b51      	ldr	r3, [pc, #324]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d063      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fee:	4b4a      	ldr	r3, [pc, #296]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b47      	ldr	r3, [pc, #284]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002002:	2b08      	cmp	r3, #8
 8002004:	d11c      	bne.n	8002040 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b44      	ldr	r3, [pc, #272]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	4b41      	ldr	r3, [pc, #260]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x152>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1c7      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b3b      	ldr	r3, [pc, #236]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4937      	ldr	r1, [pc, #220]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	e03a      	b.n	80020b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d020      	beq.n	800208a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b34      	ldr	r3, [pc, #208]	@ (800211c <HAL_RCC_OscConfig+0x244>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff fc27 	bl	80018a0 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fc23 	bl	80018a0 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1a8      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4925      	ldr	r1, [pc, #148]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <HAL_RCC_OscConfig+0x244>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff fc06 	bl	80018a0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fc02 	bl	80018a0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e187      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d036      	beq.n	8002130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <HAL_RCC_OscConfig+0x248>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7ff fbe6 	bl	80018a0 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d8:	f7ff fbe2 	bl	80018a0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e167      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_RCC_OscConfig+0x240>)
 80020ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x200>
 80020f6:	e01b      	b.n	8002130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f8:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_RCC_OscConfig+0x248>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fbcf 	bl	80018a0 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002104:	e00e      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002106:	f7ff fbcb 	bl	80018a0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d907      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e150      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
 8002118:	40023800 	.word	0x40023800
 800211c:	42470000 	.word	0x42470000
 8002120:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	4b88      	ldr	r3, [pc, #544]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ea      	bne.n	8002106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8097 	beq.w	800226c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002142:	4b81      	ldr	r3, [pc, #516]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b7d      	ldr	r3, [pc, #500]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a7c      	ldr	r2, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b7a      	ldr	r3, [pc, #488]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b77      	ldr	r3, [pc, #476]	@ (800234c <HAL_RCC_OscConfig+0x474>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b74      	ldr	r3, [pc, #464]	@ (800234c <HAL_RCC_OscConfig+0x474>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a73      	ldr	r2, [pc, #460]	@ (800234c <HAL_RCC_OscConfig+0x474>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb8b 	bl	80018a0 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff fb87 	bl	80018a0 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e10c      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b6a      	ldr	r3, [pc, #424]	@ (800234c <HAL_RCC_OscConfig+0x474>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2ea>
 80021b4:	4b64      	ldr	r3, [pc, #400]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b8:	4a63      	ldr	r2, [pc, #396]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c0:	e01c      	b.n	80021fc <HAL_RCC_OscConfig+0x324>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x30c>
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a5b      	ldr	r2, [pc, #364]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x324>
 80021e4:	4b58      	ldr	r3, [pc, #352]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a57      	ldr	r2, [pc, #348]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a54      	ldr	r2, [pc, #336]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002204:	f7ff fb4c 	bl	80018a0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7ff fb48 	bl	80018a0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0cb      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002222:	4b49      	ldr	r3, [pc, #292]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0ee      	beq.n	800220c <HAL_RCC_OscConfig+0x334>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fb36 	bl	80018a0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7ff fb32 	bl	80018a0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0b5      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224e:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ee      	bne.n	8002238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	4a38      	ldr	r2, [pc, #224]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800226a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a1 	beq.w	80023b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002276:	4b34      	ldr	r3, [pc, #208]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b08      	cmp	r3, #8
 8002280:	d05c      	beq.n	800233c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d141      	bne.n	800230e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_RCC_OscConfig+0x478>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fb06 	bl	80018a0 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff fb02 	bl	80018a0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e087      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	491b      	ldr	r1, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <HAL_RCC_OscConfig+0x478>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7ff fadb 	bl	80018a0 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7ff fad7 	bl	80018a0 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e05c      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x416>
 800230c:	e054      	b.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <HAL_RCC_OscConfig+0x478>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fac4 	bl	80018a0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7ff fac0 	bl	80018a0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e045      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_OscConfig+0x470>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x444>
 800233a:	e03d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e038      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	40007000 	.word	0x40007000
 8002350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x4ec>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d028      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d121      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d11a      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800238a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800238c:	4293      	cmp	r3, r2
 800238e:	d111      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0cc      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b68      	ldr	r3, [pc, #416]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d90c      	bls.n	8002404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b65      	ldr	r3, [pc, #404]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b63      	ldr	r3, [pc, #396]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a58      	ldr	r2, [pc, #352]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800243e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002440:	4b50      	ldr	r3, [pc, #320]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	494d      	ldr	r1, [pc, #308]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d044      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e07f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d003      	beq.n	8002486 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b3f      	ldr	r3, [pc, #252]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e067      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4934      	ldr	r1, [pc, #208]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7ff f9f2 	bl	80018a0 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7ff f9ee 	bl	80018a0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e04f      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e032      	b.n	8002576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4916      	ldr	r1, [pc, #88]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	490e      	ldr	r1, [pc, #56]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254e:	f000 f821 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8002552:	4602      	mov	r2, r0
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	490a      	ldr	r1, [pc, #40]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	5ccb      	ldrb	r3, [r1, r3]
 8002562:	fa22 f303 	lsr.w	r3, r2, r3
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fff4 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023c00 	.word	0x40023c00
 8002584:	40023800 	.word	0x40023800
 8002588:	08009fa8 	.word	0x08009fa8
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002598:	b090      	sub	sp, #64	@ 0x40
 800259a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ac:	4b59      	ldr	r3, [pc, #356]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d00d      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x40>
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	f200 80a1 	bhi.w	8002700 <HAL_RCC_GetSysClockFreq+0x16c>
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x3a>
 80025c6:	e09b      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b53      	ldr	r3, [pc, #332]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025cc:	e09b      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ce:	4b53      	ldr	r3, [pc, #332]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 80025d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d2:	e098      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025de:	4b4d      	ldr	r3, [pc, #308]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025fc:	2100      	movs	r1, #0
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 8002600:	fb03 f201 	mul.w	r2, r3, r1
 8002604:	2300      	movs	r3, #0
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	4413      	add	r3, r2
 800260c:	4a43      	ldr	r2, [pc, #268]	@ (800271c <HAL_RCC_GetSysClockFreq+0x188>)
 800260e:	fba0 1202 	umull	r1, r2, r0, r2
 8002612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002614:	460a      	mov	r2, r1
 8002616:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800261a:	4413      	add	r3, r2
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	2200      	movs	r2, #0
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	61fa      	str	r2, [r7, #28]
 8002626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800262a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800262e:	f7fe fb3b 	bl	8000ca8 <__aeabi_uldivmod>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4613      	mov	r3, r2
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800263a:	e053      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	2200      	movs	r2, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	617a      	str	r2, [r7, #20]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	4652      	mov	r2, sl
 8002654:	465b      	mov	r3, fp
 8002656:	f04f 0000 	mov.w	r0, #0
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002664:	0150      	lsls	r0, r2, #5
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	ebb2 080a 	subs.w	r8, r2, sl
 800266e:	eb63 090b 	sbc.w	r9, r3, fp
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800267e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002686:	ebb2 0408 	subs.w	r4, r2, r8
 800268a:	eb63 0509 	sbc.w	r5, r3, r9
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	00eb      	lsls	r3, r5, #3
 8002698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269c:	00e2      	lsls	r2, r4, #3
 800269e:	4614      	mov	r4, r2
 80026a0:	461d      	mov	r5, r3
 80026a2:	eb14 030a 	adds.w	r3, r4, sl
 80026a6:	603b      	str	r3, [r7, #0]
 80026a8:	eb45 030b 	adc.w	r3, r5, fp
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4629      	mov	r1, r5
 80026bc:	028b      	lsls	r3, r1, #10
 80026be:	4621      	mov	r1, r4
 80026c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c4:	4621      	mov	r1, r4
 80026c6:	028a      	lsls	r2, r1, #10
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ce:	2200      	movs	r2, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	60fa      	str	r2, [r7, #12]
 80026d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d8:	f7fe fae6 	bl	8000ca8 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80026f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x184>)
 8002702:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002708:	4618      	mov	r0, r3
 800270a:	3740      	adds	r7, #64	@ 0x40
 800270c:	46bd      	mov	sp, r7
 800270e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	00f42400 	.word	0x00f42400
 800271c:	017d7840 	.word	0x017d7840

08002720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a9b      	lsrs	r3, r3, #10
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08009fb8 	.word	0x08009fb8

08002760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002764:	f7ff ffdc 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	08009fb8 	.word	0x08009fb8

08002788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	220f      	movs	r2, #15
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a4:	4b0f      	ldr	r3, [pc, #60]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <HAL_RCC_GetClockConfig+0x5c>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_RCC_GetClockConfig+0x60>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e041      	b.n	8002882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f839 	bl	800288a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 f9c0 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d001      	beq.n	80028b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e04e      	b.n	8002956 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a23      	ldr	r2, [pc, #140]	@ (8002964 <HAL_TIM_Base_Start_IT+0xc4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d022      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e2:	d01d      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_TIM_Base_Start_IT+0xc8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <HAL_TIM_Base_Start_IT+0xcc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_TIM_Base_Start_IT+0xd0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00e      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <HAL_TIM_Base_Start_IT+0xd4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_TIM_Base_Start_IT+0xd8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_TIM_Base_Start_IT+0xdc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d010      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	e007      	b.n	8002954 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40010000 	.word	0x40010000
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40010400 	.word	0x40010400
 8002978:	40014000 	.word	0x40014000
 800297c:	40001800 	.word	0x40001800

08002980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d020      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0202 	mvn.w	r2, #2
 80029b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8d2 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8c4 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f8d5 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d020      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0204 	mvn.w	r2, #4
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8ac 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f89e 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f8af 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0208 	mvn.w	r2, #8
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f886 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f878 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f889 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0210 	mvn.w	r2, #16
 8002a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f860 	bl	8002b74 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f852 	bl	8002b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f863 	bl	8002b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fca4 	bl	8001434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f900 	bl	8002d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f834 	bl	8002b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0220 	mvn.w	r2, #32
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8d2 	bl	8002cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a43      	ldr	r2, [pc, #268]	@ (8002cd0 <TIM_Base_SetConfig+0x120>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d00f      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	@ (8002cd4 <TIM_Base_SetConfig+0x124>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3f      	ldr	r2, [pc, #252]	@ (8002cd8 <TIM_Base_SetConfig+0x128>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a32      	ldr	r2, [pc, #200]	@ (8002cd0 <TIM_Base_SetConfig+0x120>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d02b      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d027      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd4 <TIM_Base_SetConfig+0x124>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d023      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd8 <TIM_Base_SetConfig+0x128>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <TIM_Base_SetConfig+0x12c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01b      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d017      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce4 <TIM_Base_SetConfig+0x134>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce8 <TIM_Base_SetConfig+0x138>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00f      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a29      	ldr	r2, [pc, #164]	@ (8002cec <TIM_Base_SetConfig+0x13c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	@ (8002cf0 <TIM_Base_SetConfig+0x140>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a27      	ldr	r2, [pc, #156]	@ (8002cf4 <TIM_Base_SetConfig+0x144>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	@ (8002cf8 <TIM_Base_SetConfig+0x148>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd0 <TIM_Base_SetConfig+0x120>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0xf2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a10      	ldr	r2, [pc, #64]	@ (8002ce0 <TIM_Base_SetConfig+0x130>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d103      	bne.n	8002caa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	40010400 	.word	0x40010400
 8002ce4:	40014000 	.word	0x40014000
 8002ce8:	40014400 	.word	0x40014400
 8002cec:	40014800 	.word	0x40014800
 8002cf0:	40001800 	.word	0x40001800
 8002cf4:	40001c00 	.word	0x40001c00
 8002cf8:	40002000 	.word	0x40002000

08002cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e042      	b.n	8002dbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fbb6 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	@ 0x24
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fe15 	bl	8003998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d175      	bne.n	8002ed0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Transmit+0x2c>
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e06e      	b.n	8002ed2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2221      	movs	r2, #33	@ 0x21
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e02:	f7fe fd4d 	bl	80018a0 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Transmit+0x6c>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e38:	e02e      	b.n	8002e98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2180      	movs	r1, #128	@ 0x80
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbb3 	bl	80035b0 <UART_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e03a      	b.n	8002ed2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3302      	adds	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e007      	b.n	8002e8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1cb      	bne.n	8002e3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2140      	movs	r1, #64	@ 0x40
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fb7f 	bl	80035b0 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e006      	b.n	8002ed2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b08a      	sub	sp, #40	@ 0x28
 8002ede:	af02      	add	r7, sp, #8
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	603b      	str	r3, [r7, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	f040 8081 	bne.w	8002ffe <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_UART_Receive+0x2e>
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e079      	b.n	8003000 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2222      	movs	r2, #34	@ 0x22
 8002f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fcbe 	bl	80018a0 <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3a:	d108      	bne.n	8002f4e <HAL_UART_Receive+0x74>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e003      	b.n	8002f56 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f56:	e047      	b.n	8002fe8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2120      	movs	r1, #32
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb24 	bl	80035b0 <UART_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e042      	b.n	8003000 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10c      	bne.n	8002f9a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	3302      	adds	r3, #2
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e01f      	b.n	8002fda <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa2:	d007      	beq.n	8002fb4 <HAL_UART_Receive+0xda>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_UART_Receive+0xe8>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e008      	b.n	8002fd4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1b2      	bne.n	8002f58 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ba      	sub	sp, #232	@ 0xe8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fbd7 	bl	800381a <UART_Receive_IT>
      return;
 800306c:	e273      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800306e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80de 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80d1 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
 80030c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
 80030e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 820a 	beq.w	800354c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb62 	bl	800381a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_UART_IRQHandler+0x17a>
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04f      	beq.n	8003222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa6d 	bl	8003662 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d141      	bne.n	800321a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1d9      	bne.n	8003196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	4a8a      	ldr	r2, [pc, #552]	@ (8003418 <HAL_UART_IRQHandler+0x410>)
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fcb0 	bl	8001b5c <HAL_DMA_Abort_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	e00e      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9b6 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	e00a      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9b2 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e006      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9ae 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800322e:	e18d      	b.n	800354c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	bf00      	nop
    return;
 8003232:	e18b      	b.n	800354c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8167 	bne.w	800350c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8160 	beq.w	800350c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8159 	beq.w	800350c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	f040 80ce 	bne.w	800341c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800328c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a9 	beq.w	80033e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800329a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800329e:	429a      	cmp	r2, r3
 80032a0:	f080 80a2 	bcs.w	80033e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b6:	f000 8088 	beq.w	80033ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1d9      	bne.n	80032ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800332a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800332e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800333c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e1      	bne.n	8003306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800336c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e3      	bne.n	8003342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e3      	bne.n	8003388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fb59 	bl	8001a7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8d9 	bl	8003598 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80033e6:	e0b3      	b.n	8003550 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 80ad 	bne.w	8003550 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003400:	f040 80a6 	bne.w	8003550 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8c1 	bl	8003598 <HAL_UARTEx_RxEventCallback>
      return;
 8003416:	e09b      	b.n	8003550 <HAL_UART_IRQHandler+0x548>
 8003418:	08003729 	.word	0x08003729
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 808e 	beq.w	8003554 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8089 	beq.w	8003554 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003466:	647a      	str	r2, [r7, #68]	@ 0x44
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800346c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	623b      	str	r3, [r7, #32]
   return(result);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349e:	633a      	str	r2, [r7, #48]	@ 0x30
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e3      	bne.n	800347a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034e4:	61fa      	str	r2, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	617b      	str	r3, [r7, #20]
   return(result);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e3      	bne.n	80034c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f847 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350a:	e023      	b.n	8003554 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_UART_IRQHandler+0x524>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f910 	bl	800374a <UART_Transmit_IT>
    return;
 800352a:	e014      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <HAL_UART_IRQHandler+0x54e>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f950 	bl	80037ea <UART_EndTransmit_IT>
    return;
 800354a:	e004      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
    return;
 800354c:	bf00      	nop
 800354e:	e002      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
      return;
 8003550:	bf00      	nop
 8003552:	e000      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
      return;
 8003554:	bf00      	nop
  }
}
 8003556:	37e8      	adds	r7, #232	@ 0xe8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	e03b      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d037      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fe f969 	bl	80018a0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03a      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d023      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b80      	cmp	r3, #128	@ 0x80
 80035f6:	d020      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d01d      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d116      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f81d 	bl	8003662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2208      	movs	r2, #8
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e00f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d0b4      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b095      	sub	sp, #84	@ 0x54
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800368a:	643a      	str	r2, [r7, #64]	@ 0x40
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d119      	bne.n	800370e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036fa:	61ba      	str	r2, [r7, #24]
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6979      	ldr	r1, [r7, #20]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	613b      	str	r3, [r7, #16]
   return(result);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800371c:	bf00      	nop
 800371e:	3754      	adds	r7, #84	@ 0x54
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff21 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b21      	cmp	r3, #33	@ 0x21
 800375c:	d13e      	bne.n	80037dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003766:	d114      	bne.n	8003792 <UART_Transmit_IT+0x48>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d110      	bne.n	8003792 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	e008      	b.n	80037a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6211      	str	r1, [r2, #32]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4619      	mov	r1, r3
 80037b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fea6 	bl	800355c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08c      	sub	sp, #48	@ 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b22      	cmp	r3, #34	@ 0x22
 8003834:	f040 80aa 	bne.w	800398c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d115      	bne.n	800386e <UART_Receive_IT+0x54>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	b29a      	uxth	r2, r3
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
 800386c:	e024      	b.n	80038b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387c:	d007      	beq.n	800388e <UART_Receive_IT+0x74>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <UART_Receive_IT+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e008      	b.n	80038ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d15d      	bne.n	8003988 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0220 	bic.w	r2, r2, #32
 80038da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	2b01      	cmp	r3, #1
 8003910:	d135      	bne.n	800397e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	613b      	str	r3, [r7, #16]
   return(result);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003938:	623a      	str	r2, [r7, #32]
 800393a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	69f9      	ldr	r1, [r7, #28]
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	61bb      	str	r3, [r7, #24]
   return(result);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b10      	cmp	r3, #16
 8003958:	d10a      	bne.n	8003970 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe0e 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 800397c:	e002      	b.n	8003984 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fdf6 	bl	8003570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e002      	b.n	800398e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3730      	adds	r7, #48	@ 0x30
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b0c0      	sub	sp, #256	@ 0x100
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	ea40 0301 	orr.w	r3, r0, r1
 80039c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039f0:	f021 010c 	bic.w	r1, r1, #12
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039fe:	430b      	orrs	r3, r1
 8003a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	6999      	ldr	r1, [r3, #24]
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	ea40 0301 	orr.w	r3, r0, r1
 8003a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b8f      	ldr	r3, [pc, #572]	@ (8003c64 <UART_SetConfig+0x2cc>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d005      	beq.n	8003a38 <UART_SetConfig+0xa0>
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b8d      	ldr	r3, [pc, #564]	@ (8003c68 <UART_SetConfig+0x2d0>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d104      	bne.n	8003a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fe92 	bl	8002760 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a40:	e003      	b.n	8003a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7fe fe79 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	f040 810c 	bne.w	8003c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a72:	415b      	adcs	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	eb12 0801 	adds.w	r8, r2, r1
 8003a80:	4629      	mov	r1, r5
 8003a82:	eb43 0901 	adc.w	r9, r3, r1
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	eb18 0303 	adds.w	r3, r8, r3
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	eb49 0303 	adc.w	r3, r9, r3
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	18db      	adds	r3, r3, r3
 8003aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003acc:	4613      	mov	r3, r2
 8003ace:	eb42 0303 	adc.w	r3, r2, r3
 8003ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003adc:	f7fd f8e4 	bl	8000ca8 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b61      	ldr	r3, [pc, #388]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	011c      	lsls	r4, r3, #4
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b10:	4641      	mov	r1, r8
 8003b12:	eb12 0a01 	adds.w	sl, r2, r1
 8003b16:	4649      	mov	r1, r9
 8003b18:	eb43 0b01 	adc.w	fp, r3, r1
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b30:	4692      	mov	sl, r2
 8003b32:	469b      	mov	fp, r3
 8003b34:	4643      	mov	r3, r8
 8003b36:	eb1a 0303 	adds.w	r3, sl, r3
 8003b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	eb4b 0303 	adc.w	r3, fp, r3
 8003b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	18db      	adds	r3, r3, r3
 8003b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b62:	4613      	mov	r3, r2
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b72:	f7fd f899 	bl	8000ca8 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2264      	movs	r2, #100	@ 0x64
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b92:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003b94:	fba3 2302 	umull	r2, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ba0:	441c      	add	r4, r3
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c18:	460b      	mov	r3, r1
 8003c1a:	18db      	adds	r3, r3, r3
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1e:	4613      	mov	r3, r2
 8003c20:	eb42 0303 	adc.w	r3, r2, r3
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c2e:	f7fd f83b 	bl	8000ca8 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	@ 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	3332      	adds	r3, #50	@ 0x32
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4422      	add	r2, r4
 8003c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c60:	e106      	b.n	8003e70 <UART_SetConfig+0x4d8>
 8003c62:	bf00      	nop
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40011400 	.word	0x40011400
 8003c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c82:	4642      	mov	r2, r8
 8003c84:	464b      	mov	r3, r9
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	6239      	str	r1, [r7, #32]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c92:	4641      	mov	r1, r8
 8003c94:	1854      	adds	r4, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0501 	adc.w	r5, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cb8:	464b      	mov	r3, r9
 8003cba:	eb45 0303 	adc.w	r3, r5, r3
 8003cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cde:	4629      	mov	r1, r5
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce8:	4621      	mov	r1, r4
 8003cea:	008a      	lsls	r2, r1, #2
 8003cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cf0:	f7fc ffda 	bl	8000ca8 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b60      	ldr	r3, [pc, #384]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	61b9      	str	r1, [r7, #24]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6139      	str	r1, [r7, #16]
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4641      	mov	r1, r8
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d8e:	f7fc ff8b 	bl	8000ca8 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2264      	movs	r2, #100	@ 0x64
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	1acb      	subs	r3, r1, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	@ 0x32
 8003dac:	4a33      	ldr	r2, [pc, #204]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db8:	441c      	add	r4, r3
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	008b      	lsls	r3, r1, #2
 8003e30:	4641      	mov	r1, r8
 8003e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e36:	4641      	mov	r1, r8
 8003e38:	008a      	lsls	r2, r1, #2
 8003e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e3e:	f7fc ff33 	bl	8000ca8 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	@ 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	3332      	adds	r3, #50	@ 0x32
 8003e5a:	4a08      	ldr	r2, [pc, #32]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e76:	46bd      	mov	sp, r7
 8003e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7c:	51eb851f 	.word	0x51eb851f

08003e80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e92:	2b84      	cmp	r3, #132	@ 0x84
 8003e94:	d005      	beq.n	8003ea2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3303      	adds	r3, #3
 8003ea0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003eb4:	f000 fafc 	bl	80044b0 <vTaskStartScheduler>
  
  return osOK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec0:	b089      	sub	sp, #36	@ 0x24
 8003ec2:	af04      	add	r7, sp, #16
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <osThreadCreate+0x54>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01c      	beq.n	8003f12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685c      	ldr	r4, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691e      	ldr	r6, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ffc8 	bl	8003e80 <makeFreeRtosPriority>
 8003ef0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efa:	9202      	str	r2, [sp, #8]
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	9100      	str	r1, [sp, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4632      	mov	r2, r6
 8003f04:	4629      	mov	r1, r5
 8003f06:	4620      	mov	r0, r4
 8003f08:	f000 f8ed 	bl	80040e6 <xTaskCreateStatic>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e01c      	b.n	8003f4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685c      	ldr	r4, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ffaa 	bl	8003e80 <makeFreeRtosPriority>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	9200      	str	r2, [sp, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f000 f932 	bl	80041a6 <xTaskCreate>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e000      	b.n	8003f4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <osDelay+0x16>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	e000      	b.n	8003f6e <osDelay+0x18>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fa68 	bl	8004444 <vTaskDelay>
  
  return osOK;
 8003f74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f103 0208 	add.w	r2, r3, #8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295
 8003f96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0208 	add.w	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0208 	add.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d103      	bne.n	8004040 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e00c      	b.n	800405a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3308      	adds	r3, #8
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e002      	b.n	800404e <vListInsert+0x2e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d2f6      	bcs.n	8004048 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004092:	b480      	push	{r7}
 8004094:	b085      	sub	sp, #20
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6892      	ldr	r2, [r2, #8]
 80040a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6852      	ldr	r2, [r2, #4]
 80040b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d103      	bne.n	80040c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b08e      	sub	sp, #56	@ 0x38
 80040ea:	af04      	add	r7, sp, #16
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	e7fd      	b.n	800410e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	61fb      	str	r3, [r7, #28]
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004130:	23a0      	movs	r3, #160	@ 0xa0
 8004132:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2ba0      	cmp	r3, #160	@ 0xa0
 8004138:	d00b      	beq.n	8004152 <xTaskCreateStatic+0x6c>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	61bb      	str	r3, [r7, #24]
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	e7fd      	b.n	800414e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004152:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01e      	beq.n	8004198 <xTaskCreateStatic+0xb2>
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01b      	beq.n	8004198 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004168:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	2202      	movs	r2, #2
 800416e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004172:	2300      	movs	r3, #0
 8004174:	9303      	str	r3, [sp, #12]
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	9302      	str	r3, [sp, #8]
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f850 	bl	8004230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004190:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004192:	f000 f8ed 	bl	8004370 <prvAddNewTaskToReadyList>
 8004196:	e001      	b.n	800419c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800419c:	697b      	ldr	r3, [r7, #20]
	}
 800419e:	4618      	mov	r0, r3
 80041a0:	3728      	adds	r7, #40	@ 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b08c      	sub	sp, #48	@ 0x30
 80041aa:	af04      	add	r7, sp, #16
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fefc 	bl	8004fb8 <pvPortMalloc>
 80041c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00e      	beq.n	80041e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041c8:	20a0      	movs	r0, #160	@ 0xa0
 80041ca:	f000 fef5 	bl	8004fb8 <pvPortMalloc>
 80041ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
 80041dc:	e005      	b.n	80041ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041de:	6978      	ldr	r0, [r7, #20]
 80041e0:	f000 ffb8 	bl	8005154 <vPortFree>
 80041e4:	e001      	b.n	80041ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d017      	beq.n	8004220 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041f8:	88fa      	ldrh	r2, [r7, #6]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9303      	str	r3, [sp, #12]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	9302      	str	r3, [sp, #8]
 8004202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f80e 	bl	8004230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004214:	69f8      	ldr	r0, [r7, #28]
 8004216:	f000 f8ab 	bl	8004370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800421a:	2301      	movs	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e002      	b.n	8004226 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004226:	69bb      	ldr	r3, [r7, #24]
	}
 8004228:	4618      	mov	r0, r3
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004248:	3b01      	subs	r3, #1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f023 0307 	bic.w	r3, r3, #7
 8004256:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	617b      	str	r3, [r7, #20]
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01f      	beq.n	80042c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e012      	b.n	80042ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	4413      	add	r3, r2
 800428c:	7819      	ldrb	r1, [r3, #0]
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	3334      	adds	r3, #52	@ 0x34
 8004296:	460a      	mov	r2, r1
 8004298:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d9e9      	bls.n	8004286 <prvInitialiseNewTask+0x56>
 80042b2:	e000      	b.n	80042b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80042b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042be:	e003      	b.n	80042c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d901      	bls.n	80042d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ce:	2306      	movs	r3, #6
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	3304      	adds	r3, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fe68 	bl	8003fbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	3318      	adds	r3, #24
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff fe63 	bl	8003fbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	f1c3 0207 	rsb	r2, r3, #7
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004318:	2200      	movs	r2, #0
 800431a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	334c      	adds	r3, #76	@ 0x4c
 8004322:	224c      	movs	r2, #76	@ 0x4c
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f002 fa10 	bl	800674c <memset>
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <prvInitialiseNewTask+0x134>)
 8004330:	651a      	str	r2, [r3, #80]	@ 0x50
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <prvInitialiseNewTask+0x138>)
 8004336:	655a      	str	r2, [r3, #84]	@ 0x54
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <prvInitialiseNewTask+0x13c>)
 800433c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	69b8      	ldr	r0, [r7, #24]
 8004344:	f000 fc2a 	bl	8004b9c <pxPortInitialiseStack>
 8004348:	4602      	mov	r2, r0
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800435a:	bf00      	nop
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20004294 	.word	0x20004294
 8004368:	200042fc 	.word	0x200042fc
 800436c:	20004364 	.word	0x20004364

08004370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004378:	f000 fd3e 	bl	8004df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800437c:	4b2a      	ldr	r3, [pc, #168]	@ (8004428 <prvAddNewTaskToReadyList+0xb8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	4a29      	ldr	r2, [pc, #164]	@ (8004428 <prvAddNewTaskToReadyList+0xb8>)
 8004384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004386:	4b29      	ldr	r3, [pc, #164]	@ (800442c <prvAddNewTaskToReadyList+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800438e:	4a27      	ldr	r2, [pc, #156]	@ (800442c <prvAddNewTaskToReadyList+0xbc>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <prvAddNewTaskToReadyList+0xb8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d110      	bne.n	80043be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800439c:	f000 fad4 	bl	8004948 <prvInitialiseTaskLists>
 80043a0:	e00d      	b.n	80043be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043a2:	4b23      	ldr	r3, [pc, #140]	@ (8004430 <prvAddNewTaskToReadyList+0xc0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <prvAddNewTaskToReadyList+0xbc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d802      	bhi.n	80043be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043b8:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <prvAddNewTaskToReadyList+0xbc>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043be:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <prvAddNewTaskToReadyList+0xc4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004434 <prvAddNewTaskToReadyList+0xc4>)
 80043c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <prvAddNewTaskToReadyList+0xc8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <prvAddNewTaskToReadyList+0xc8>)
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4a15      	ldr	r2, [pc, #84]	@ (800443c <prvAddNewTaskToReadyList+0xcc>)
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	4610      	mov	r0, r2
 80043f2:	f7ff fdf1 	bl	8003fd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043f6:	f000 fd31 	bl	8004e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <prvAddNewTaskToReadyList+0xc0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004402:	4b0a      	ldr	r3, [pc, #40]	@ (800442c <prvAddNewTaskToReadyList+0xbc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	429a      	cmp	r2, r3
 800440e:	d207      	bcs.n	8004420 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <prvAddNewTaskToReadyList+0xd0>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000640 	.word	0x20000640
 800442c:	20000540 	.word	0x20000540
 8004430:	2000064c 	.word	0x2000064c
 8004434:	2000065c 	.word	0x2000065c
 8004438:	20000648 	.word	0x20000648
 800443c:	20000544 	.word	0x20000544
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d018      	beq.n	8004488 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <vTaskDelay+0x64>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <vTaskDelay+0x32>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60bb      	str	r3, [r7, #8]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004476:	f000 f885 	bl	8004584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800447a:	2100      	movs	r1, #0
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb27 	bl	8004ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004482:	f000 f88d 	bl	80045a0 <xTaskResumeAll>
 8004486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d107      	bne.n	800449e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800448e:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <vTaskDelay+0x68>)
 8004490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000668 	.word	0x20000668
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044be:	463a      	mov	r2, r7
 80044c0:	1d39      	adds	r1, r7, #4
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fc fdba 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	9202      	str	r2, [sp, #8]
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2300      	movs	r3, #0
 80044dc:	460a      	mov	r2, r1
 80044de:	4921      	ldr	r1, [pc, #132]	@ (8004564 <vTaskStartScheduler+0xb4>)
 80044e0:	4821      	ldr	r0, [pc, #132]	@ (8004568 <vTaskStartScheduler+0xb8>)
 80044e2:	f7ff fe00 	bl	80040e6 <xTaskCreateStatic>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4a20      	ldr	r2, [pc, #128]	@ (800456c <vTaskStartScheduler+0xbc>)
 80044ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044ec:	4b1f      	ldr	r3, [pc, #124]	@ (800456c <vTaskStartScheduler+0xbc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e001      	b.n	80044fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11b      	bne.n	800453c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <vTaskStartScheduler+0xc0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	334c      	adds	r3, #76	@ 0x4c
 800451e:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <vTaskStartScheduler+0xc4>)
 8004520:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <vTaskStartScheduler+0xc8>)
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <vTaskStartScheduler+0xcc>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004530:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <vTaskStartScheduler+0xd0>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004536:	f000 fbbb 	bl	8004cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800453a:	e00f      	b.n	800455c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d10b      	bne.n	800455c <vTaskStartScheduler+0xac>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <vTaskStartScheduler+0xa8>
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08009fa0 	.word	0x08009fa0
 8004568:	08004919 	.word	0x08004919
 800456c:	20000664 	.word	0x20000664
 8004570:	20000540 	.word	0x20000540
 8004574:	2000001c 	.word	0x2000001c
 8004578:	20000660 	.word	0x20000660
 800457c:	2000064c 	.word	0x2000064c
 8004580:	20000644 	.word	0x20000644

08004584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <vTaskSuspendAll+0x18>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a03      	ldr	r2, [pc, #12]	@ (800459c <vTaskSuspendAll+0x18>)
 8004590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000668 	.word	0x20000668

080045a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ae:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xTaskResumeAll+0x2e>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	603b      	str	r3, [r7, #0]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ce:	f000 fc13 	bl	8004df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d2:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4a37      	ldr	r2, [pc, #220]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d161      	bne.n	80046a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e4:	4b35      	ldr	r3, [pc, #212]	@ (80046bc <xTaskResumeAll+0x11c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d05d      	beq.n	80046a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ec:	e02e      	b.n	800464c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ee:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <xTaskResumeAll+0x120>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fd49 	bl	8004092 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fd44 	bl	8004092 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <xTaskResumeAll+0x124>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <xTaskResumeAll+0x124>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <xTaskResumeAll+0x128>)
 800462a:	441a      	add	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3304      	adds	r3, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f7ff fcd0 	bl	8003fd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <xTaskResumeAll+0x12c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d302      	bcc.n	800464c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004646:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800464c:	4b1c      	ldr	r3, [pc, #112]	@ (80046c0 <xTaskResumeAll+0x120>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1cc      	bne.n	80045ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465a:	f000 fa19 	bl	8004a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800465e:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <xTaskResumeAll+0x134>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d010      	beq.n	800468c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466a:	f000 f837 	bl	80046dc <xTaskIncrementTick>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004674:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3b01      	subs	r3, #1
 800467e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f1      	bne.n	800466a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004686:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <xTaskResumeAll+0x134>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800468c:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <xTaskResumeAll+0x130>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004698:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <xTaskResumeAll+0x138>)
 800469a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046a8:	f000 fbd8 	bl	8004e5c <vPortExitCritical>

	return xAlreadyYielded;
 80046ac:	68bb      	ldr	r3, [r7, #8]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000668 	.word	0x20000668
 80046bc:	20000640 	.word	0x20000640
 80046c0:	20000600 	.word	0x20000600
 80046c4:	20000648 	.word	0x20000648
 80046c8:	20000544 	.word	0x20000544
 80046cc:	20000540 	.word	0x20000540
 80046d0:	20000654 	.word	0x20000654
 80046d4:	20000650 	.word	0x20000650
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004824 <xTaskIncrementTick+0x148>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 808f 	bne.w	800480e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <xTaskIncrementTick+0x14c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004828 <xTaskIncrementTick+0x14c>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d121      	bne.n	8004748 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004704:	4b49      	ldr	r3, [pc, #292]	@ (800482c <xTaskIncrementTick+0x150>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <xTaskIncrementTick+0x4a>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	603b      	str	r3, [r7, #0]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <xTaskIncrementTick+0x46>
 8004726:	4b41      	ldr	r3, [pc, #260]	@ (800482c <xTaskIncrementTick+0x150>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	4b40      	ldr	r3, [pc, #256]	@ (8004830 <xTaskIncrementTick+0x154>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3e      	ldr	r2, [pc, #248]	@ (800482c <xTaskIncrementTick+0x150>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4a3e      	ldr	r2, [pc, #248]	@ (8004830 <xTaskIncrementTick+0x154>)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b3e      	ldr	r3, [pc, #248]	@ (8004834 <xTaskIncrementTick+0x158>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a3c      	ldr	r2, [pc, #240]	@ (8004834 <xTaskIncrementTick+0x158>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	f000 f9a4 	bl	8004a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004748:	4b3b      	ldr	r3, [pc, #236]	@ (8004838 <xTaskIncrementTick+0x15c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	d348      	bcc.n	80047e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004752:	4b36      	ldr	r3, [pc, #216]	@ (800482c <xTaskIncrementTick+0x150>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800475c:	4b36      	ldr	r3, [pc, #216]	@ (8004838 <xTaskIncrementTick+0x15c>)
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	601a      	str	r2, [r3, #0]
					break;
 8004764:	e03e      	b.n	80047e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004766:	4b31      	ldr	r3, [pc, #196]	@ (800482c <xTaskIncrementTick+0x150>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d203      	bcs.n	8004786 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800477e:	4a2e      	ldr	r2, [pc, #184]	@ (8004838 <xTaskIncrementTick+0x15c>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004784:	e02e      	b.n	80047e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fc81 	bl	8004092 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	3318      	adds	r3, #24
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fc78 	bl	8004092 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	2201      	movs	r2, #1
 80047a8:	409a      	lsls	r2, r3
 80047aa:	4b24      	ldr	r3, [pc, #144]	@ (800483c <xTaskIncrementTick+0x160>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	4a22      	ldr	r2, [pc, #136]	@ (800483c <xTaskIncrementTick+0x160>)
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004840 <xTaskIncrementTick+0x164>)
 80047c2:	441a      	add	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7ff fc04 	bl	8003fd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <xTaskIncrementTick+0x168>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3b9      	bcc.n	8004752 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e2:	e7b6      	b.n	8004752 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047e4:	4b17      	ldr	r3, [pc, #92]	@ (8004844 <xTaskIncrementTick+0x168>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ea:	4915      	ldr	r1, [pc, #84]	@ (8004840 <xTaskIncrementTick+0x164>)
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d901      	bls.n	8004800 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004800:	4b11      	ldr	r3, [pc, #68]	@ (8004848 <xTaskIncrementTick+0x16c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e004      	b.n	8004818 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800480e:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <xTaskIncrementTick+0x170>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <xTaskIncrementTick+0x170>)
 8004816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004818:	697b      	ldr	r3, [r7, #20]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000668 	.word	0x20000668
 8004828:	20000644 	.word	0x20000644
 800482c:	200005f8 	.word	0x200005f8
 8004830:	200005fc 	.word	0x200005fc
 8004834:	20000658 	.word	0x20000658
 8004838:	20000660 	.word	0x20000660
 800483c:	20000648 	.word	0x20000648
 8004840:	20000544 	.word	0x20000544
 8004844:	20000540 	.word	0x20000540
 8004848:	20000654 	.word	0x20000654
 800484c:	20000650 	.word	0x20000650

08004850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004856:	4b2a      	ldr	r3, [pc, #168]	@ (8004900 <vTaskSwitchContext+0xb0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800485e:	4b29      	ldr	r3, [pc, #164]	@ (8004904 <vTaskSwitchContext+0xb4>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004864:	e045      	b.n	80048f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004866:	4b27      	ldr	r3, [pc, #156]	@ (8004904 <vTaskSwitchContext+0xb4>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486c:	4b26      	ldr	r3, [pc, #152]	@ (8004908 <vTaskSwitchContext+0xb8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	fab3 f383 	clz	r3, r3
 8004878:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f1c3 031f 	rsb	r3, r3, #31
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	4922      	ldr	r1, [pc, #136]	@ (800490c <vTaskSwitchContext+0xbc>)
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	607b      	str	r3, [r7, #4]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <vTaskSwitchContext+0x5a>
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a14      	ldr	r2, [pc, #80]	@ (800490c <vTaskSwitchContext+0xbc>)
 80048ba:	4413      	add	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	605a      	str	r2, [r3, #4]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3308      	adds	r3, #8
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d104      	bne.n	80048de <vTaskSwitchContext+0x8e>
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <vTaskSwitchContext+0xc0>)
 80048e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048e8:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <vTaskSwitchContext+0xc0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	334c      	adds	r3, #76	@ 0x4c
 80048ee:	4a09      	ldr	r2, [pc, #36]	@ (8004914 <vTaskSwitchContext+0xc4>)
 80048f0:	6013      	str	r3, [r2, #0]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000668 	.word	0x20000668
 8004904:	20000654 	.word	0x20000654
 8004908:	20000648 	.word	0x20000648
 800490c:	20000544 	.word	0x20000544
 8004910:	20000540 	.word	0x20000540
 8004914:	2000001c 	.word	0x2000001c

08004918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004920:	f000 f852 	bl	80049c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <prvIdleTask+0x28>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d9f9      	bls.n	8004920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800492c:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <prvIdleTask+0x2c>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800493c:	e7f0      	b.n	8004920 <prvIdleTask+0x8>
 800493e:	bf00      	nop
 8004940:	20000544 	.word	0x20000544
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	e00c      	b.n	800496e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <prvInitialiseTaskLists+0x60>)
 8004960:	4413      	add	r3, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fb0b 	bl	8003f7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3301      	adds	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b06      	cmp	r3, #6
 8004972:	d9ef      	bls.n	8004954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004974:	480d      	ldr	r0, [pc, #52]	@ (80049ac <prvInitialiseTaskLists+0x64>)
 8004976:	f7ff fb02 	bl	8003f7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800497a:	480d      	ldr	r0, [pc, #52]	@ (80049b0 <prvInitialiseTaskLists+0x68>)
 800497c:	f7ff faff 	bl	8003f7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004980:	480c      	ldr	r0, [pc, #48]	@ (80049b4 <prvInitialiseTaskLists+0x6c>)
 8004982:	f7ff fafc 	bl	8003f7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004986:	480c      	ldr	r0, [pc, #48]	@ (80049b8 <prvInitialiseTaskLists+0x70>)
 8004988:	f7ff faf9 	bl	8003f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800498c:	480b      	ldr	r0, [pc, #44]	@ (80049bc <prvInitialiseTaskLists+0x74>)
 800498e:	f7ff faf6 	bl	8003f7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004992:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <prvInitialiseTaskLists+0x78>)
 8004994:	4a05      	ldr	r2, [pc, #20]	@ (80049ac <prvInitialiseTaskLists+0x64>)
 8004996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004998:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <prvInitialiseTaskLists+0x7c>)
 800499a:	4a05      	ldr	r2, [pc, #20]	@ (80049b0 <prvInitialiseTaskLists+0x68>)
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000544 	.word	0x20000544
 80049ac:	200005d0 	.word	0x200005d0
 80049b0:	200005e4 	.word	0x200005e4
 80049b4:	20000600 	.word	0x20000600
 80049b8:	20000614 	.word	0x20000614
 80049bc:	2000062c 	.word	0x2000062c
 80049c0:	200005f8 	.word	0x200005f8
 80049c4:	200005fc 	.word	0x200005fc

080049c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ce:	e019      	b.n	8004a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049d0:	f000 fa12 	bl	8004df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d4:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <prvCheckTasksWaitingTermination+0x50>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fb56 	bl	8004092 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <prvCheckTasksWaitingTermination+0x54>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	4a0b      	ldr	r2, [pc, #44]	@ (8004a1c <prvCheckTasksWaitingTermination+0x54>)
 80049ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <prvCheckTasksWaitingTermination+0x58>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a20 <prvCheckTasksWaitingTermination+0x58>)
 80049f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049fa:	f000 fa2f 	bl	8004e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f810 	bl	8004a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a04:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <prvCheckTasksWaitingTermination+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e1      	bne.n	80049d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000614 	.word	0x20000614
 8004a1c:	20000640 	.word	0x20000640
 8004a20:	20000628 	.word	0x20000628

08004a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	334c      	adds	r3, #76	@ 0x4c
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 feb9 	bl	80067a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fb85 	bl	8005154 <vPortFree>
				vPortFree( pxTCB );
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fb82 	bl	8005154 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a50:	e019      	b.n	8004a86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d103      	bne.n	8004a64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fb79 	bl	8005154 <vPortFree>
	}
 8004a62:	e010      	b.n	8004a86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d00b      	beq.n	8004a86 <prvDeleteTCB+0x62>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	60fb      	str	r3, [r7, #12]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <prvDeleteTCB+0x5e>
	}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <prvResetNextTaskUnblockTime+0x38>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <prvResetNextTaskUnblockTime+0x3c>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aa8:	e008      	b.n	8004abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <prvResetNextTaskUnblockTime+0x38>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	@ (8004acc <prvResetNextTaskUnblockTime+0x3c>)
 8004aba:	6013      	str	r3, [r2, #0]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	200005f8 	.word	0x200005f8
 8004acc:	20000660 	.word	0x20000660

08004ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ada:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ae0:	4b28      	ldr	r3, [pc, #160]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fad3 	bl	8004092 <uxListRemove>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004af2:	4b24      	ldr	r3, [pc, #144]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	2201      	movs	r2, #1
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	4b21      	ldr	r3, [pc, #132]	@ (8004b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4013      	ands	r3, r2
 8004b06:	4a20      	ldr	r2, [pc, #128]	@ (8004b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d10a      	bne.n	8004b28 <prvAddCurrentTaskToDelayedList+0x58>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d007      	beq.n	8004b28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b18:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	481a      	ldr	r0, [pc, #104]	@ (8004b8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b22:	f7ff fa59 	bl	8003fd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b26:	e026      	b.n	8004b76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d209      	bcs.n	8004b54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b40:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7ff fa67 	bl	8004020 <vListInsert>
}
 8004b52:	e010      	b.n	8004b76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b54:	4b0f      	ldr	r3, [pc, #60]	@ (8004b94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7ff fa5d 	bl	8004020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b66:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d202      	bcs.n	8004b76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b70:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6013      	str	r3, [r2, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000644 	.word	0x20000644
 8004b84:	20000540 	.word	0x20000540
 8004b88:	20000648 	.word	0x20000648
 8004b8c:	2000062c 	.word	0x2000062c
 8004b90:	200005fc 	.word	0x200005fc
 8004b94:	200005f8 	.word	0x200005f8
 8004b98:	20000660 	.word	0x20000660

08004b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3b04      	subs	r3, #4
 8004bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3b04      	subs	r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f023 0201 	bic.w	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8004c00 <pxPortInitialiseStack+0x64>)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3b14      	subs	r3, #20
 8004bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3b04      	subs	r3, #4
 8004be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f06f 0202 	mvn.w	r2, #2
 8004bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b20      	subs	r3, #32
 8004bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	08004c05 	.word	0x08004c05

08004c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <prvTaskExitError+0x58>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d00b      	beq.n	8004c30 <prvTaskExitError+0x2c>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
}
 8004c2a:	bf00      	nop
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <prvTaskExitError+0x28>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60bb      	str	r3, [r7, #8]
}
 8004c42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c44:	bf00      	nop
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0fc      	beq.n	8004c46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <pxCurrentTCBConst2>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	f380 8809 	msr	PSP, r0
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8811 	msr	BASEPRI, r0
 8004c7a:	4770      	bx	lr
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst2>:
 8004c80:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c88:	4808      	ldr	r0, [pc, #32]	@ (8004cac <prvPortStartFirstTask+0x24>)
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f380 8808 	msr	MSP, r0
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8814 	msr	CONTROL, r0
 8004c9a:	b662      	cpsie	i
 8004c9c:	b661      	cpsie	f
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	df00      	svc	0
 8004ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004caa:	bf00      	nop
 8004cac:	e000ed08 	.word	0xe000ed08

08004cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <xPortStartScheduler+0x124>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a47      	ldr	r2, [pc, #284]	@ (8004dd8 <xPortStartScheduler+0x128>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10b      	bne.n	8004cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd4 <xPortStartScheduler+0x124>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ddc <xPortStartScheduler+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10b      	bne.n	8004cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	613b      	str	r3, [r7, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cfa:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <xPortStartScheduler+0x130>)
 8004cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	22ff      	movs	r2, #255	@ 0xff
 8004d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b31      	ldr	r3, [pc, #196]	@ (8004de4 <xPortStartScheduler+0x134>)
 8004d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d24:	2207      	movs	r2, #7
 8004d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d28:	e009      	b.n	8004d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d0ef      	beq.n	8004d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1c3 0307 	rsb	r3, r3, #7
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d00b      	beq.n	8004d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d98:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004da4:	f000 f8da 	bl	8004f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <xPortStartScheduler+0x140>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dae:	f000 f8f9 	bl	8004fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <xPortStartScheduler+0x144>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a0f      	ldr	r2, [pc, #60]	@ (8004df4 <xPortStartScheduler+0x144>)
 8004db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dbe:	f7ff ff63 	bl	8004c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dc2:	f7ff fd45 	bl	8004850 <vTaskSwitchContext>
	prvTaskExitError();
 8004dc6:	f7ff ff1d 	bl	8004c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	e000ed00 	.word	0xe000ed00
 8004dd8:	410fc271 	.word	0x410fc271
 8004ddc:	410fc270 	.word	0x410fc270
 8004de0:	e000e400 	.word	0xe000e400
 8004de4:	2000066c 	.word	0x2000066c
 8004de8:	20000670 	.word	0x20000670
 8004dec:	e000ed20 	.word	0xe000ed20
 8004df0:	2000000c 	.word	0x2000000c
 8004df4:	e000ef34 	.word	0xe000ef34

08004df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a0e      	ldr	r2, [pc, #56]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e24:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <vPortEnterCritical+0x60>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	603b      	str	r3, [r7, #0]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <vPortEnterCritical+0x4a>
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000000c 	.word	0x2000000c
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <vPortExitCritical+0x26>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	607b      	str	r3, [r7, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <vPortExitCritical+0x50>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <vPortExitCritical+0x50>)
 8004e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <vPortExitCritical+0x50>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <vPortExitCritical+0x44>
 8004e94:	2300      	movs	r3, #0
 8004e96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	2000000c 	.word	0x2000000c

08004eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004eb0:	f3ef 8009 	mrs	r0, PSP
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <pxCurrentTCBConst>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f01e 0f10 	tst.w	lr, #16
 8004ec0:	bf08      	it	eq
 8004ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ed4:	f380 8811 	msr	BASEPRI, r0
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f7ff fcb6 	bl	8004850 <vTaskSwitchContext>
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f380 8811 	msr	BASEPRI, r0
 8004eec:	bc09      	pop	{r0, r3}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	f01e 0f10 	tst.w	lr, #16
 8004efa:	bf08      	it	eq
 8004efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f00:	f380 8809 	msr	PSP, r0
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst>:
 8004f10:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f32:	f7ff fbd3 	bl	80046dc <xTaskIncrementTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <SysTick_Handler+0x40>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <vPortSetupTimerInterrupt+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <vPortSetupTimerInterrupt+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <vPortSetupTimerInterrupt+0x40>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <vPortSetupTimerInterrupt+0x44>)
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7e:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010
 8004f94:	e000e018 	.word	0xe000e018
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	10624dd3 	.word	0x10624dd3
 8004fa0:	e000e014 	.word	0xe000e014

08004fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004fb4 <vPortEnableVFP+0x10>
 8004fa8:	6801      	ldr	r1, [r0, #0]
 8004faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fae:	6001      	str	r1, [r0, #0]
 8004fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fb2:	bf00      	nop
 8004fb4:	e000ed88 	.word	0xe000ed88

08004fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	@ 0x28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fc4:	f7ff fade 	bl	8004584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800513c <pvPortMalloc+0x184>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fd0:	f000 f924 	bl	800521c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fd4:	4b5a      	ldr	r3, [pc, #360]	@ (8005140 <pvPortMalloc+0x188>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8095 	bne.w	800510c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01e      	beq.n	8005026 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fe8:	2208      	movs	r2, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d015      	beq.n	8005026 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <pvPortMalloc+0x6e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	617b      	str	r3, [r7, #20]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d06f      	beq.n	800510c <pvPortMalloc+0x154>
 800502c:	4b45      	ldr	r3, [pc, #276]	@ (8005144 <pvPortMalloc+0x18c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d86a      	bhi.n	800510c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005036:	4b44      	ldr	r3, [pc, #272]	@ (8005148 <pvPortMalloc+0x190>)
 8005038:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800503a:	4b43      	ldr	r3, [pc, #268]	@ (8005148 <pvPortMalloc+0x190>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005040:	e004      	b.n	800504c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d903      	bls.n	800505e <pvPortMalloc+0xa6>
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f1      	bne.n	8005042 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <pvPortMalloc+0x184>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	429a      	cmp	r2, r3
 8005066:	d051      	beq.n	800510c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	4413      	add	r3, r2
 8005070:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	2308      	movs	r3, #8
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	429a      	cmp	r2, r3
 8005088:	d920      	bls.n	80050cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4413      	add	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00b      	beq.n	80050b4 <pvPortMalloc+0xfc>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	613b      	str	r3, [r7, #16]
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050c6:	69b8      	ldr	r0, [r7, #24]
 80050c8:	f000 f90a 	bl	80052e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005144 <pvPortMalloc+0x18c>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005144 <pvPortMalloc+0x18c>)
 80050d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050da:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <pvPortMalloc+0x18c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <pvPortMalloc+0x194>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d203      	bcs.n	80050ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050e6:	4b17      	ldr	r3, [pc, #92]	@ (8005144 <pvPortMalloc+0x18c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a18      	ldr	r2, [pc, #96]	@ (800514c <pvPortMalloc+0x194>)
 80050ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <pvPortMalloc+0x188>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <pvPortMalloc+0x198>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	4a11      	ldr	r2, [pc, #68]	@ (8005150 <pvPortMalloc+0x198>)
 800510a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800510c:	f7ff fa48 	bl	80045a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <pvPortMalloc+0x17a>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	60fb      	str	r3, [r7, #12]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <pvPortMalloc+0x176>
	return pvReturn;
 8005132:	69fb      	ldr	r3, [r7, #28]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3728      	adds	r7, #40	@ 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2000427c 	.word	0x2000427c
 8005140:	20004290 	.word	0x20004290
 8005144:	20004280 	.word	0x20004280
 8005148:	20004274 	.word	0x20004274
 800514c:	20004284 	.word	0x20004284
 8005150:	20004288 	.word	0x20004288

08005154 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04f      	beq.n	8005206 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005166:	2308      	movs	r3, #8
 8005168:	425b      	negs	r3, r3
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4413      	add	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b25      	ldr	r3, [pc, #148]	@ (8005210 <vPortFree+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4013      	ands	r3, r2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <vPortFree+0x46>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60fb      	str	r3, [r7, #12]
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop
 8005198:	e7fd      	b.n	8005196 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <vPortFree+0x66>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	e7fd      	b.n	80051b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <vPortFree+0xbc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01e      	beq.n	8005206 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11a      	bne.n	8005206 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <vPortFree+0xbc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051e0:	f7ff f9d0 	bl	8004584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <vPortFree+0xc0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <vPortFree+0xc0>)
 80051f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051f2:	6938      	ldr	r0, [r7, #16]
 80051f4:	f000 f874 	bl	80052e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <vPortFree+0xc4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	4a06      	ldr	r2, [pc, #24]	@ (8005218 <vPortFree+0xc4>)
 8005200:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005202:	f7ff f9cd 	bl	80045a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20004290 	.word	0x20004290
 8005214:	20004280 	.word	0x20004280
 8005218:	2000428c 	.word	0x2000428c

0800521c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005222:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005226:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005228:	4b27      	ldr	r3, [pc, #156]	@ (80052c8 <prvHeapInit+0xac>)
 800522a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3307      	adds	r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0307 	bic.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	4a1f      	ldr	r2, [pc, #124]	@ (80052c8 <prvHeapInit+0xac>)
 800524c:	4413      	add	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <prvHeapInit+0xb0>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800525a:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <prvHeapInit+0xb0>)
 800525c:	2200      	movs	r2, #0
 800525e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4413      	add	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005268:	2208      	movs	r2, #8
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a15      	ldr	r2, [pc, #84]	@ (80052d0 <prvHeapInit+0xb4>)
 800527c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800527e:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <prvHeapInit+0xb4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005286:	4b12      	ldr	r3, [pc, #72]	@ (80052d0 <prvHeapInit+0xb4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800529c:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <prvHeapInit+0xb4>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <prvHeapInit+0xb8>)
 80052aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a09      	ldr	r2, [pc, #36]	@ (80052d8 <prvHeapInit+0xbc>)
 80052b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052b4:	4b09      	ldr	r3, [pc, #36]	@ (80052dc <prvHeapInit+0xc0>)
 80052b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000674 	.word	0x20000674
 80052cc:	20004274 	.word	0x20004274
 80052d0:	2000427c 	.word	0x2000427c
 80052d4:	20004284 	.word	0x20004284
 80052d8:	20004280 	.word	0x20004280
 80052dc:	20004290 	.word	0x20004290

080052e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e8:	4b28      	ldr	r3, [pc, #160]	@ (800538c <prvInsertBlockIntoFreeList+0xac>)
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <prvInsertBlockIntoFreeList+0x14>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d8f7      	bhi.n	80052ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	4413      	add	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d108      	bne.n	8005322 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	441a      	add	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d118      	bne.n	8005368 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <prvInsertBlockIntoFreeList+0xb0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d00d      	beq.n	800535e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e008      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800535e:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <prvInsertBlockIntoFreeList+0xb0>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e003      	b.n	8005370 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d002      	beq.n	800537e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20004274 	.word	0x20004274
 8005390:	2000427c 	.word	0x2000427c

08005394 <__cvt>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	ec57 6b10 	vmov	r6, r7, d0
 800539c:	2f00      	cmp	r7, #0
 800539e:	460c      	mov	r4, r1
 80053a0:	4619      	mov	r1, r3
 80053a2:	463b      	mov	r3, r7
 80053a4:	bfbb      	ittet	lt
 80053a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80053aa:	461f      	movlt	r7, r3
 80053ac:	2300      	movge	r3, #0
 80053ae:	232d      	movlt	r3, #45	@ 0x2d
 80053b0:	700b      	strb	r3, [r1, #0]
 80053b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80053b8:	4691      	mov	r9, r2
 80053ba:	f023 0820 	bic.w	r8, r3, #32
 80053be:	bfbc      	itt	lt
 80053c0:	4632      	movlt	r2, r6
 80053c2:	4616      	movlt	r6, r2
 80053c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053c8:	d005      	beq.n	80053d6 <__cvt+0x42>
 80053ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053ce:	d100      	bne.n	80053d2 <__cvt+0x3e>
 80053d0:	3401      	adds	r4, #1
 80053d2:	2102      	movs	r1, #2
 80053d4:	e000      	b.n	80053d8 <__cvt+0x44>
 80053d6:	2103      	movs	r1, #3
 80053d8:	ab03      	add	r3, sp, #12
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	ab02      	add	r3, sp, #8
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	ec47 6b10 	vmov	d0, r6, r7
 80053e4:	4653      	mov	r3, sl
 80053e6:	4622      	mov	r2, r4
 80053e8:	f001 fb3e 	bl	8006a68 <_dtoa_r>
 80053ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80053f0:	4605      	mov	r5, r0
 80053f2:	d119      	bne.n	8005428 <__cvt+0x94>
 80053f4:	f019 0f01 	tst.w	r9, #1
 80053f8:	d00e      	beq.n	8005418 <__cvt+0x84>
 80053fa:	eb00 0904 	add.w	r9, r0, r4
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fb fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800540a:	b108      	cbz	r0, 8005410 <__cvt+0x7c>
 800540c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005410:	2230      	movs	r2, #48	@ 0x30
 8005412:	9b03      	ldr	r3, [sp, #12]
 8005414:	454b      	cmp	r3, r9
 8005416:	d31e      	bcc.n	8005456 <__cvt+0xc2>
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800541c:	1b5b      	subs	r3, r3, r5
 800541e:	4628      	mov	r0, r5
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	b004      	add	sp, #16
 8005424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005428:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800542c:	eb00 0904 	add.w	r9, r0, r4
 8005430:	d1e5      	bne.n	80053fe <__cvt+0x6a>
 8005432:	7803      	ldrb	r3, [r0, #0]
 8005434:	2b30      	cmp	r3, #48	@ 0x30
 8005436:	d10a      	bne.n	800544e <__cvt+0xba>
 8005438:	2200      	movs	r2, #0
 800543a:	2300      	movs	r3, #0
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fb fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 8005444:	b918      	cbnz	r0, 800544e <__cvt+0xba>
 8005446:	f1c4 0401 	rsb	r4, r4, #1
 800544a:	f8ca 4000 	str.w	r4, [sl]
 800544e:	f8da 3000 	ldr.w	r3, [sl]
 8005452:	4499      	add	r9, r3
 8005454:	e7d3      	b.n	80053fe <__cvt+0x6a>
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	9103      	str	r1, [sp, #12]
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e7d9      	b.n	8005412 <__cvt+0x7e>

0800545e <__exponent>:
 800545e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005460:	2900      	cmp	r1, #0
 8005462:	bfba      	itte	lt
 8005464:	4249      	neglt	r1, r1
 8005466:	232d      	movlt	r3, #45	@ 0x2d
 8005468:	232b      	movge	r3, #43	@ 0x2b
 800546a:	2909      	cmp	r1, #9
 800546c:	7002      	strb	r2, [r0, #0]
 800546e:	7043      	strb	r3, [r0, #1]
 8005470:	dd29      	ble.n	80054c6 <__exponent+0x68>
 8005472:	f10d 0307 	add.w	r3, sp, #7
 8005476:	461d      	mov	r5, r3
 8005478:	270a      	movs	r7, #10
 800547a:	461a      	mov	r2, r3
 800547c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005480:	fb07 1416 	mls	r4, r7, r6, r1
 8005484:	3430      	adds	r4, #48	@ 0x30
 8005486:	f802 4c01 	strb.w	r4, [r2, #-1]
 800548a:	460c      	mov	r4, r1
 800548c:	2c63      	cmp	r4, #99	@ 0x63
 800548e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005492:	4631      	mov	r1, r6
 8005494:	dcf1      	bgt.n	800547a <__exponent+0x1c>
 8005496:	3130      	adds	r1, #48	@ 0x30
 8005498:	1e94      	subs	r4, r2, #2
 800549a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800549e:	1c41      	adds	r1, r0, #1
 80054a0:	4623      	mov	r3, r4
 80054a2:	42ab      	cmp	r3, r5
 80054a4:	d30a      	bcc.n	80054bc <__exponent+0x5e>
 80054a6:	f10d 0309 	add.w	r3, sp, #9
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	42ac      	cmp	r4, r5
 80054ae:	bf88      	it	hi
 80054b0:	2300      	movhi	r3, #0
 80054b2:	3302      	adds	r3, #2
 80054b4:	4403      	add	r3, r0
 80054b6:	1a18      	subs	r0, r3, r0
 80054b8:	b003      	add	sp, #12
 80054ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054c4:	e7ed      	b.n	80054a2 <__exponent+0x44>
 80054c6:	2330      	movs	r3, #48	@ 0x30
 80054c8:	3130      	adds	r1, #48	@ 0x30
 80054ca:	7083      	strb	r3, [r0, #2]
 80054cc:	70c1      	strb	r1, [r0, #3]
 80054ce:	1d03      	adds	r3, r0, #4
 80054d0:	e7f1      	b.n	80054b6 <__exponent+0x58>
	...

080054d4 <_printf_float>:
 80054d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d8:	b08d      	sub	sp, #52	@ 0x34
 80054da:	460c      	mov	r4, r1
 80054dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80054e0:	4616      	mov	r6, r2
 80054e2:	461f      	mov	r7, r3
 80054e4:	4605      	mov	r5, r0
 80054e6:	f001 f94b 	bl	8006780 <_localeconv_r>
 80054ea:	6803      	ldr	r3, [r0, #0]
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fa fece 	bl	8000290 <strlen>
 80054f4:	2300      	movs	r3, #0
 80054f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80054f8:	f8d8 3000 	ldr.w	r3, [r8]
 80054fc:	9005      	str	r0, [sp, #20]
 80054fe:	3307      	adds	r3, #7
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	f103 0208 	add.w	r2, r3, #8
 8005508:	f894 a018 	ldrb.w	sl, [r4, #24]
 800550c:	f8d4 b000 	ldr.w	fp, [r4]
 8005510:	f8c8 2000 	str.w	r2, [r8]
 8005514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005518:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800551c:	9307      	str	r3, [sp, #28]
 800551e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005522:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552a:	4b9c      	ldr	r3, [pc, #624]	@ (800579c <_printf_float+0x2c8>)
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	f7fb fb0c 	bl	8000b4c <__aeabi_dcmpun>
 8005534:	bb70      	cbnz	r0, 8005594 <_printf_float+0xc0>
 8005536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800553a:	4b98      	ldr	r3, [pc, #608]	@ (800579c <_printf_float+0x2c8>)
 800553c:	f04f 32ff 	mov.w	r2, #4294967295
 8005540:	f7fb fae6 	bl	8000b10 <__aeabi_dcmple>
 8005544:	bb30      	cbnz	r0, 8005594 <_printf_float+0xc0>
 8005546:	2200      	movs	r2, #0
 8005548:	2300      	movs	r3, #0
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fb fad5 	bl	8000afc <__aeabi_dcmplt>
 8005552:	b110      	cbz	r0, 800555a <_printf_float+0x86>
 8005554:	232d      	movs	r3, #45	@ 0x2d
 8005556:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800555a:	4a91      	ldr	r2, [pc, #580]	@ (80057a0 <_printf_float+0x2cc>)
 800555c:	4b91      	ldr	r3, [pc, #580]	@ (80057a4 <_printf_float+0x2d0>)
 800555e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005562:	bf8c      	ite	hi
 8005564:	4690      	movhi	r8, r2
 8005566:	4698      	movls	r8, r3
 8005568:	2303      	movs	r3, #3
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	f02b 0304 	bic.w	r3, fp, #4
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	9700      	str	r7, [sp, #0]
 8005578:	4633      	mov	r3, r6
 800557a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800557c:	4621      	mov	r1, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f9d2 	bl	8005928 <_printf_common>
 8005584:	3001      	adds	r0, #1
 8005586:	f040 808d 	bne.w	80056a4 <_printf_float+0x1d0>
 800558a:	f04f 30ff 	mov.w	r0, #4294967295
 800558e:	b00d      	add	sp, #52	@ 0x34
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	4640      	mov	r0, r8
 800559a:	4649      	mov	r1, r9
 800559c:	f7fb fad6 	bl	8000b4c <__aeabi_dcmpun>
 80055a0:	b140      	cbz	r0, 80055b4 <_printf_float+0xe0>
 80055a2:	464b      	mov	r3, r9
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bfbc      	itt	lt
 80055a8:	232d      	movlt	r3, #45	@ 0x2d
 80055aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055ae:	4a7e      	ldr	r2, [pc, #504]	@ (80057a8 <_printf_float+0x2d4>)
 80055b0:	4b7e      	ldr	r3, [pc, #504]	@ (80057ac <_printf_float+0x2d8>)
 80055b2:	e7d4      	b.n	800555e <_printf_float+0x8a>
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80055ba:	9206      	str	r2, [sp, #24]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	d13b      	bne.n	8005638 <_printf_float+0x164>
 80055c0:	2306      	movs	r3, #6
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80055c8:	2300      	movs	r3, #0
 80055ca:	6022      	str	r2, [r4, #0]
 80055cc:	9303      	str	r3, [sp, #12]
 80055ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80055d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80055d4:	ab09      	add	r3, sp, #36	@ 0x24
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	6861      	ldr	r1, [r4, #4]
 80055da:	ec49 8b10 	vmov	d0, r8, r9
 80055de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80055e2:	4628      	mov	r0, r5
 80055e4:	f7ff fed6 	bl	8005394 <__cvt>
 80055e8:	9b06      	ldr	r3, [sp, #24]
 80055ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80055ec:	2b47      	cmp	r3, #71	@ 0x47
 80055ee:	4680      	mov	r8, r0
 80055f0:	d129      	bne.n	8005646 <_printf_float+0x172>
 80055f2:	1cc8      	adds	r0, r1, #3
 80055f4:	db02      	blt.n	80055fc <_printf_float+0x128>
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	4299      	cmp	r1, r3
 80055fa:	dd41      	ble.n	8005680 <_printf_float+0x1ac>
 80055fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005600:	fa5f fa8a 	uxtb.w	sl, sl
 8005604:	3901      	subs	r1, #1
 8005606:	4652      	mov	r2, sl
 8005608:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800560c:	9109      	str	r1, [sp, #36]	@ 0x24
 800560e:	f7ff ff26 	bl	800545e <__exponent>
 8005612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005614:	1813      	adds	r3, r2, r0
 8005616:	2a01      	cmp	r2, #1
 8005618:	4681      	mov	r9, r0
 800561a:	6123      	str	r3, [r4, #16]
 800561c:	dc02      	bgt.n	8005624 <_printf_float+0x150>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	07d2      	lsls	r2, r2, #31
 8005622:	d501      	bpl.n	8005628 <_printf_float+0x154>
 8005624:	3301      	adds	r3, #1
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0a2      	beq.n	8005576 <_printf_float+0xa2>
 8005630:	232d      	movs	r3, #45	@ 0x2d
 8005632:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005636:	e79e      	b.n	8005576 <_printf_float+0xa2>
 8005638:	9a06      	ldr	r2, [sp, #24]
 800563a:	2a47      	cmp	r2, #71	@ 0x47
 800563c:	d1c2      	bne.n	80055c4 <_printf_float+0xf0>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1c0      	bne.n	80055c4 <_printf_float+0xf0>
 8005642:	2301      	movs	r3, #1
 8005644:	e7bd      	b.n	80055c2 <_printf_float+0xee>
 8005646:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800564a:	d9db      	bls.n	8005604 <_printf_float+0x130>
 800564c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005650:	d118      	bne.n	8005684 <_printf_float+0x1b0>
 8005652:	2900      	cmp	r1, #0
 8005654:	6863      	ldr	r3, [r4, #4]
 8005656:	dd0b      	ble.n	8005670 <_printf_float+0x19c>
 8005658:	6121      	str	r1, [r4, #16]
 800565a:	b913      	cbnz	r3, 8005662 <_printf_float+0x18e>
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	07d0      	lsls	r0, r2, #31
 8005660:	d502      	bpl.n	8005668 <_printf_float+0x194>
 8005662:	3301      	adds	r3, #1
 8005664:	440b      	add	r3, r1
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	65a1      	str	r1, [r4, #88]	@ 0x58
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	e7db      	b.n	8005628 <_printf_float+0x154>
 8005670:	b913      	cbnz	r3, 8005678 <_printf_float+0x1a4>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	07d2      	lsls	r2, r2, #31
 8005676:	d501      	bpl.n	800567c <_printf_float+0x1a8>
 8005678:	3302      	adds	r3, #2
 800567a:	e7f4      	b.n	8005666 <_printf_float+0x192>
 800567c:	2301      	movs	r3, #1
 800567e:	e7f2      	b.n	8005666 <_printf_float+0x192>
 8005680:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005686:	4299      	cmp	r1, r3
 8005688:	db05      	blt.n	8005696 <_printf_float+0x1c2>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6121      	str	r1, [r4, #16]
 800568e:	07d8      	lsls	r0, r3, #31
 8005690:	d5ea      	bpl.n	8005668 <_printf_float+0x194>
 8005692:	1c4b      	adds	r3, r1, #1
 8005694:	e7e7      	b.n	8005666 <_printf_float+0x192>
 8005696:	2900      	cmp	r1, #0
 8005698:	bfd4      	ite	le
 800569a:	f1c1 0202 	rsble	r2, r1, #2
 800569e:	2201      	movgt	r2, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	e7e0      	b.n	8005666 <_printf_float+0x192>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	055a      	lsls	r2, r3, #21
 80056a8:	d407      	bmi.n	80056ba <_printf_float+0x1e6>
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	4642      	mov	r2, r8
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	d12b      	bne.n	8005710 <_printf_float+0x23c>
 80056b8:	e767      	b.n	800558a <_printf_float+0xb6>
 80056ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056be:	f240 80dd 	bls.w	800587c <_printf_float+0x3a8>
 80056c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056c6:	2200      	movs	r2, #0
 80056c8:	2300      	movs	r3, #0
 80056ca:	f7fb fa0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d033      	beq.n	800573a <_printf_float+0x266>
 80056d2:	4a37      	ldr	r2, [pc, #220]	@ (80057b0 <_printf_float+0x2dc>)
 80056d4:	2301      	movs	r3, #1
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f af54 	beq.w	800558a <_printf_float+0xb6>
 80056e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80056e6:	4543      	cmp	r3, r8
 80056e8:	db02      	blt.n	80056f0 <_printf_float+0x21c>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	07d8      	lsls	r0, r3, #31
 80056ee:	d50f      	bpl.n	8005710 <_printf_float+0x23c>
 80056f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f af45 	beq.w	800558a <_printf_float+0xb6>
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	f108 38ff 	add.w	r8, r8, #4294967295
 8005708:	f104 0a1a 	add.w	sl, r4, #26
 800570c:	45c8      	cmp	r8, r9
 800570e:	dc09      	bgt.n	8005724 <_printf_float+0x250>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	079b      	lsls	r3, r3, #30
 8005714:	f100 8103 	bmi.w	800591e <_printf_float+0x44a>
 8005718:	68e0      	ldr	r0, [r4, #12]
 800571a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800571c:	4298      	cmp	r0, r3
 800571e:	bfb8      	it	lt
 8005720:	4618      	movlt	r0, r3
 8005722:	e734      	b.n	800558e <_printf_float+0xba>
 8005724:	2301      	movs	r3, #1
 8005726:	4652      	mov	r2, sl
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af2b 	beq.w	800558a <_printf_float+0xb6>
 8005734:	f109 0901 	add.w	r9, r9, #1
 8005738:	e7e8      	b.n	800570c <_printf_float+0x238>
 800573a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	dc39      	bgt.n	80057b4 <_printf_float+0x2e0>
 8005740:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <_printf_float+0x2dc>)
 8005742:	2301      	movs	r3, #1
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	f43f af1d 	beq.w	800558a <_printf_float+0xb6>
 8005750:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005754:	ea59 0303 	orrs.w	r3, r9, r3
 8005758:	d102      	bne.n	8005760 <_printf_float+0x28c>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	d5d7      	bpl.n	8005710 <_printf_float+0x23c>
 8005760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af0d 	beq.w	800558a <_printf_float+0xb6>
 8005770:	f04f 0a00 	mov.w	sl, #0
 8005774:	f104 0b1a 	add.w	fp, r4, #26
 8005778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577a:	425b      	negs	r3, r3
 800577c:	4553      	cmp	r3, sl
 800577e:	dc01      	bgt.n	8005784 <_printf_float+0x2b0>
 8005780:	464b      	mov	r3, r9
 8005782:	e793      	b.n	80056ac <_printf_float+0x1d8>
 8005784:	2301      	movs	r3, #1
 8005786:	465a      	mov	r2, fp
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	f43f aefb 	beq.w	800558a <_printf_float+0xb6>
 8005794:	f10a 0a01 	add.w	sl, sl, #1
 8005798:	e7ee      	b.n	8005778 <_printf_float+0x2a4>
 800579a:	bf00      	nop
 800579c:	7fefffff 	.word	0x7fefffff
 80057a0:	08009fc4 	.word	0x08009fc4
 80057a4:	08009fc0 	.word	0x08009fc0
 80057a8:	08009fcc 	.word	0x08009fcc
 80057ac:	08009fc8 	.word	0x08009fc8
 80057b0:	08009fd0 	.word	0x08009fd0
 80057b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80057ba:	4553      	cmp	r3, sl
 80057bc:	bfa8      	it	ge
 80057be:	4653      	movge	r3, sl
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	4699      	mov	r9, r3
 80057c4:	dc36      	bgt.n	8005834 <_printf_float+0x360>
 80057c6:	f04f 0b00 	mov.w	fp, #0
 80057ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ce:	f104 021a 	add.w	r2, r4, #26
 80057d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057d4:	9306      	str	r3, [sp, #24]
 80057d6:	eba3 0309 	sub.w	r3, r3, r9
 80057da:	455b      	cmp	r3, fp
 80057dc:	dc31      	bgt.n	8005842 <_printf_float+0x36e>
 80057de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e0:	459a      	cmp	sl, r3
 80057e2:	dc3a      	bgt.n	800585a <_printf_float+0x386>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	07da      	lsls	r2, r3, #31
 80057e8:	d437      	bmi.n	800585a <_printf_float+0x386>
 80057ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ec:	ebaa 0903 	sub.w	r9, sl, r3
 80057f0:	9b06      	ldr	r3, [sp, #24]
 80057f2:	ebaa 0303 	sub.w	r3, sl, r3
 80057f6:	4599      	cmp	r9, r3
 80057f8:	bfa8      	it	ge
 80057fa:	4699      	movge	r9, r3
 80057fc:	f1b9 0f00 	cmp.w	r9, #0
 8005800:	dc33      	bgt.n	800586a <_printf_float+0x396>
 8005802:	f04f 0800 	mov.w	r8, #0
 8005806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800580a:	f104 0b1a 	add.w	fp, r4, #26
 800580e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005810:	ebaa 0303 	sub.w	r3, sl, r3
 8005814:	eba3 0309 	sub.w	r3, r3, r9
 8005818:	4543      	cmp	r3, r8
 800581a:	f77f af79 	ble.w	8005710 <_printf_float+0x23c>
 800581e:	2301      	movs	r3, #1
 8005820:	465a      	mov	r2, fp
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	f43f aeae 	beq.w	800558a <_printf_float+0xb6>
 800582e:	f108 0801 	add.w	r8, r8, #1
 8005832:	e7ec      	b.n	800580e <_printf_float+0x33a>
 8005834:	4642      	mov	r2, r8
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	d1c2      	bne.n	80057c6 <_printf_float+0x2f2>
 8005840:	e6a3      	b.n	800558a <_printf_float+0xb6>
 8005842:	2301      	movs	r3, #1
 8005844:	4631      	mov	r1, r6
 8005846:	4628      	mov	r0, r5
 8005848:	9206      	str	r2, [sp, #24]
 800584a:	47b8      	blx	r7
 800584c:	3001      	adds	r0, #1
 800584e:	f43f ae9c 	beq.w	800558a <_printf_float+0xb6>
 8005852:	9a06      	ldr	r2, [sp, #24]
 8005854:	f10b 0b01 	add.w	fp, fp, #1
 8005858:	e7bb      	b.n	80057d2 <_printf_float+0x2fe>
 800585a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	47b8      	blx	r7
 8005864:	3001      	adds	r0, #1
 8005866:	d1c0      	bne.n	80057ea <_printf_float+0x316>
 8005868:	e68f      	b.n	800558a <_printf_float+0xb6>
 800586a:	9a06      	ldr	r2, [sp, #24]
 800586c:	464b      	mov	r3, r9
 800586e:	4442      	add	r2, r8
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	d1c3      	bne.n	8005802 <_printf_float+0x32e>
 800587a:	e686      	b.n	800558a <_printf_float+0xb6>
 800587c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005880:	f1ba 0f01 	cmp.w	sl, #1
 8005884:	dc01      	bgt.n	800588a <_printf_float+0x3b6>
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d536      	bpl.n	80058f8 <_printf_float+0x424>
 800588a:	2301      	movs	r3, #1
 800588c:	4642      	mov	r2, r8
 800588e:	4631      	mov	r1, r6
 8005890:	4628      	mov	r0, r5
 8005892:	47b8      	blx	r7
 8005894:	3001      	adds	r0, #1
 8005896:	f43f ae78 	beq.w	800558a <_printf_float+0xb6>
 800589a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800589e:	4631      	mov	r1, r6
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	f43f ae70 	beq.w	800558a <_printf_float+0xb6>
 80058aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058ae:	2200      	movs	r2, #0
 80058b0:	2300      	movs	r3, #0
 80058b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058b6:	f7fb f917 	bl	8000ae8 <__aeabi_dcmpeq>
 80058ba:	b9c0      	cbnz	r0, 80058ee <_printf_float+0x41a>
 80058bc:	4653      	mov	r3, sl
 80058be:	f108 0201 	add.w	r2, r8, #1
 80058c2:	4631      	mov	r1, r6
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b8      	blx	r7
 80058c8:	3001      	adds	r0, #1
 80058ca:	d10c      	bne.n	80058e6 <_printf_float+0x412>
 80058cc:	e65d      	b.n	800558a <_printf_float+0xb6>
 80058ce:	2301      	movs	r3, #1
 80058d0:	465a      	mov	r2, fp
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f ae56 	beq.w	800558a <_printf_float+0xb6>
 80058de:	f108 0801 	add.w	r8, r8, #1
 80058e2:	45d0      	cmp	r8, sl
 80058e4:	dbf3      	blt.n	80058ce <_printf_float+0x3fa>
 80058e6:	464b      	mov	r3, r9
 80058e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80058ec:	e6df      	b.n	80056ae <_printf_float+0x1da>
 80058ee:	f04f 0800 	mov.w	r8, #0
 80058f2:	f104 0b1a 	add.w	fp, r4, #26
 80058f6:	e7f4      	b.n	80058e2 <_printf_float+0x40e>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4642      	mov	r2, r8
 80058fc:	e7e1      	b.n	80058c2 <_printf_float+0x3ee>
 80058fe:	2301      	movs	r3, #1
 8005900:	464a      	mov	r2, r9
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	f43f ae3e 	beq.w	800558a <_printf_float+0xb6>
 800590e:	f108 0801 	add.w	r8, r8, #1
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005916:	1a5b      	subs	r3, r3, r1
 8005918:	4543      	cmp	r3, r8
 800591a:	dcf0      	bgt.n	80058fe <_printf_float+0x42a>
 800591c:	e6fc      	b.n	8005718 <_printf_float+0x244>
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	f104 0919 	add.w	r9, r4, #25
 8005926:	e7f4      	b.n	8005912 <_printf_float+0x43e>

08005928 <_printf_common>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	4616      	mov	r6, r2
 800592e:	4698      	mov	r8, r3
 8005930:	688a      	ldr	r2, [r1, #8]
 8005932:	690b      	ldr	r3, [r1, #16]
 8005934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005938:	4293      	cmp	r3, r2
 800593a:	bfb8      	it	lt
 800593c:	4613      	movlt	r3, r2
 800593e:	6033      	str	r3, [r6, #0]
 8005940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005944:	4607      	mov	r7, r0
 8005946:	460c      	mov	r4, r1
 8005948:	b10a      	cbz	r2, 800594e <_printf_common+0x26>
 800594a:	3301      	adds	r3, #1
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	0699      	lsls	r1, r3, #26
 8005952:	bf42      	ittt	mi
 8005954:	6833      	ldrmi	r3, [r6, #0]
 8005956:	3302      	addmi	r3, #2
 8005958:	6033      	strmi	r3, [r6, #0]
 800595a:	6825      	ldr	r5, [r4, #0]
 800595c:	f015 0506 	ands.w	r5, r5, #6
 8005960:	d106      	bne.n	8005970 <_printf_common+0x48>
 8005962:	f104 0a19 	add.w	sl, r4, #25
 8005966:	68e3      	ldr	r3, [r4, #12]
 8005968:	6832      	ldr	r2, [r6, #0]
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	42ab      	cmp	r3, r5
 800596e:	dc26      	bgt.n	80059be <_printf_common+0x96>
 8005970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	3b00      	subs	r3, #0
 8005978:	bf18      	it	ne
 800597a:	2301      	movne	r3, #1
 800597c:	0692      	lsls	r2, r2, #26
 800597e:	d42b      	bmi.n	80059d8 <_printf_common+0xb0>
 8005980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005984:	4641      	mov	r1, r8
 8005986:	4638      	mov	r0, r7
 8005988:	47c8      	blx	r9
 800598a:	3001      	adds	r0, #1
 800598c:	d01e      	beq.n	80059cc <_printf_common+0xa4>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	6922      	ldr	r2, [r4, #16]
 8005992:	f003 0306 	and.w	r3, r3, #6
 8005996:	2b04      	cmp	r3, #4
 8005998:	bf02      	ittt	eq
 800599a:	68e5      	ldreq	r5, [r4, #12]
 800599c:	6833      	ldreq	r3, [r6, #0]
 800599e:	1aed      	subeq	r5, r5, r3
 80059a0:	68a3      	ldr	r3, [r4, #8]
 80059a2:	bf0c      	ite	eq
 80059a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a8:	2500      	movne	r5, #0
 80059aa:	4293      	cmp	r3, r2
 80059ac:	bfc4      	itt	gt
 80059ae:	1a9b      	subgt	r3, r3, r2
 80059b0:	18ed      	addgt	r5, r5, r3
 80059b2:	2600      	movs	r6, #0
 80059b4:	341a      	adds	r4, #26
 80059b6:	42b5      	cmp	r5, r6
 80059b8:	d11a      	bne.n	80059f0 <_printf_common+0xc8>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e008      	b.n	80059d0 <_printf_common+0xa8>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4641      	mov	r1, r8
 80059c4:	4638      	mov	r0, r7
 80059c6:	47c8      	blx	r9
 80059c8:	3001      	adds	r0, #1
 80059ca:	d103      	bne.n	80059d4 <_printf_common+0xac>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d4:	3501      	adds	r5, #1
 80059d6:	e7c6      	b.n	8005966 <_printf_common+0x3e>
 80059d8:	18e1      	adds	r1, r4, r3
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	2030      	movs	r0, #48	@ 0x30
 80059de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059e2:	4422      	add	r2, r4
 80059e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059ec:	3302      	adds	r3, #2
 80059ee:	e7c7      	b.n	8005980 <_printf_common+0x58>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4622      	mov	r2, r4
 80059f4:	4641      	mov	r1, r8
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c8      	blx	r9
 80059fa:	3001      	adds	r0, #1
 80059fc:	d0e6      	beq.n	80059cc <_printf_common+0xa4>
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7d9      	b.n	80059b6 <_printf_common+0x8e>
	...

08005a04 <_printf_i>:
 8005a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	7e0f      	ldrb	r7, [r1, #24]
 8005a0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a0c:	2f78      	cmp	r7, #120	@ 0x78
 8005a0e:	4691      	mov	r9, r2
 8005a10:	4680      	mov	r8, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	469a      	mov	sl, r3
 8005a16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a1a:	d807      	bhi.n	8005a2c <_printf_i+0x28>
 8005a1c:	2f62      	cmp	r7, #98	@ 0x62
 8005a1e:	d80a      	bhi.n	8005a36 <_printf_i+0x32>
 8005a20:	2f00      	cmp	r7, #0
 8005a22:	f000 80d1 	beq.w	8005bc8 <_printf_i+0x1c4>
 8005a26:	2f58      	cmp	r7, #88	@ 0x58
 8005a28:	f000 80b8 	beq.w	8005b9c <_printf_i+0x198>
 8005a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a34:	e03a      	b.n	8005aac <_printf_i+0xa8>
 8005a36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a3a:	2b15      	cmp	r3, #21
 8005a3c:	d8f6      	bhi.n	8005a2c <_printf_i+0x28>
 8005a3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a44 <_printf_i+0x40>)
 8005a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005ab1 	.word	0x08005ab1
 8005a4c:	08005a2d 	.word	0x08005a2d
 8005a50:	08005a2d 	.word	0x08005a2d
 8005a54:	08005a2d 	.word	0x08005a2d
 8005a58:	08005a2d 	.word	0x08005a2d
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005a2d 	.word	0x08005a2d
 8005a64:	08005a2d 	.word	0x08005a2d
 8005a68:	08005a2d 	.word	0x08005a2d
 8005a6c:	08005a2d 	.word	0x08005a2d
 8005a70:	08005baf 	.word	0x08005baf
 8005a74:	08005adb 	.word	0x08005adb
 8005a78:	08005b69 	.word	0x08005b69
 8005a7c:	08005a2d 	.word	0x08005a2d
 8005a80:	08005a2d 	.word	0x08005a2d
 8005a84:	08005bd1 	.word	0x08005bd1
 8005a88:	08005a2d 	.word	0x08005a2d
 8005a8c:	08005adb 	.word	0x08005adb
 8005a90:	08005a2d 	.word	0x08005a2d
 8005a94:	08005a2d 	.word	0x08005a2d
 8005a98:	08005b71 	.word	0x08005b71
 8005a9c:	6833      	ldr	r3, [r6, #0]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6032      	str	r2, [r6, #0]
 8005aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aac:	2301      	movs	r3, #1
 8005aae:	e09c      	b.n	8005bea <_printf_i+0x1e6>
 8005ab0:	6833      	ldr	r3, [r6, #0]
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	1d19      	adds	r1, r3, #4
 8005ab6:	6031      	str	r1, [r6, #0]
 8005ab8:	0606      	lsls	r6, r0, #24
 8005aba:	d501      	bpl.n	8005ac0 <_printf_i+0xbc>
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	e003      	b.n	8005ac8 <_printf_i+0xc4>
 8005ac0:	0645      	lsls	r5, r0, #25
 8005ac2:	d5fb      	bpl.n	8005abc <_printf_i+0xb8>
 8005ac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	da03      	bge.n	8005ad4 <_printf_i+0xd0>
 8005acc:	232d      	movs	r3, #45	@ 0x2d
 8005ace:	426d      	negs	r5, r5
 8005ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad4:	4858      	ldr	r0, [pc, #352]	@ (8005c38 <_printf_i+0x234>)
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	e011      	b.n	8005afe <_printf_i+0xfa>
 8005ada:	6821      	ldr	r1, [r4, #0]
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	0608      	lsls	r0, r1, #24
 8005ae0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ae4:	d402      	bmi.n	8005aec <_printf_i+0xe8>
 8005ae6:	0649      	lsls	r1, r1, #25
 8005ae8:	bf48      	it	mi
 8005aea:	b2ad      	uxthmi	r5, r5
 8005aec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005aee:	4852      	ldr	r0, [pc, #328]	@ (8005c38 <_printf_i+0x234>)
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	bf14      	ite	ne
 8005af4:	230a      	movne	r3, #10
 8005af6:	2308      	moveq	r3, #8
 8005af8:	2100      	movs	r1, #0
 8005afa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005afe:	6866      	ldr	r6, [r4, #4]
 8005b00:	60a6      	str	r6, [r4, #8]
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	db05      	blt.n	8005b12 <_printf_i+0x10e>
 8005b06:	6821      	ldr	r1, [r4, #0]
 8005b08:	432e      	orrs	r6, r5
 8005b0a:	f021 0104 	bic.w	r1, r1, #4
 8005b0e:	6021      	str	r1, [r4, #0]
 8005b10:	d04b      	beq.n	8005baa <_printf_i+0x1a6>
 8005b12:	4616      	mov	r6, r2
 8005b14:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b18:	fb03 5711 	mls	r7, r3, r1, r5
 8005b1c:	5dc7      	ldrb	r7, [r0, r7]
 8005b1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b22:	462f      	mov	r7, r5
 8005b24:	42bb      	cmp	r3, r7
 8005b26:	460d      	mov	r5, r1
 8005b28:	d9f4      	bls.n	8005b14 <_printf_i+0x110>
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d10b      	bne.n	8005b46 <_printf_i+0x142>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	07df      	lsls	r7, r3, #31
 8005b32:	d508      	bpl.n	8005b46 <_printf_i+0x142>
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	6861      	ldr	r1, [r4, #4]
 8005b38:	4299      	cmp	r1, r3
 8005b3a:	bfde      	ittt	le
 8005b3c:	2330      	movle	r3, #48	@ 0x30
 8005b3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b46:	1b92      	subs	r2, r2, r6
 8005b48:	6122      	str	r2, [r4, #16]
 8005b4a:	f8cd a000 	str.w	sl, [sp]
 8005b4e:	464b      	mov	r3, r9
 8005b50:	aa03      	add	r2, sp, #12
 8005b52:	4621      	mov	r1, r4
 8005b54:	4640      	mov	r0, r8
 8005b56:	f7ff fee7 	bl	8005928 <_printf_common>
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d14a      	bne.n	8005bf4 <_printf_i+0x1f0>
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	b004      	add	sp, #16
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	f043 0320 	orr.w	r3, r3, #32
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	4832      	ldr	r0, [pc, #200]	@ (8005c3c <_printf_i+0x238>)
 8005b72:	2778      	movs	r7, #120	@ 0x78
 8005b74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	6831      	ldr	r1, [r6, #0]
 8005b7c:	061f      	lsls	r7, r3, #24
 8005b7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b82:	d402      	bmi.n	8005b8a <_printf_i+0x186>
 8005b84:	065f      	lsls	r7, r3, #25
 8005b86:	bf48      	it	mi
 8005b88:	b2ad      	uxthmi	r5, r5
 8005b8a:	6031      	str	r1, [r6, #0]
 8005b8c:	07d9      	lsls	r1, r3, #31
 8005b8e:	bf44      	itt	mi
 8005b90:	f043 0320 	orrmi.w	r3, r3, #32
 8005b94:	6023      	strmi	r3, [r4, #0]
 8005b96:	b11d      	cbz	r5, 8005ba0 <_printf_i+0x19c>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	e7ad      	b.n	8005af8 <_printf_i+0xf4>
 8005b9c:	4826      	ldr	r0, [pc, #152]	@ (8005c38 <_printf_i+0x234>)
 8005b9e:	e7e9      	b.n	8005b74 <_printf_i+0x170>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	f023 0320 	bic.w	r3, r3, #32
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	e7f6      	b.n	8005b98 <_printf_i+0x194>
 8005baa:	4616      	mov	r6, r2
 8005bac:	e7bd      	b.n	8005b2a <_printf_i+0x126>
 8005bae:	6833      	ldr	r3, [r6, #0]
 8005bb0:	6825      	ldr	r5, [r4, #0]
 8005bb2:	6961      	ldr	r1, [r4, #20]
 8005bb4:	1d18      	adds	r0, r3, #4
 8005bb6:	6030      	str	r0, [r6, #0]
 8005bb8:	062e      	lsls	r6, r5, #24
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	d501      	bpl.n	8005bc2 <_printf_i+0x1be>
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	e002      	b.n	8005bc8 <_printf_i+0x1c4>
 8005bc2:	0668      	lsls	r0, r5, #25
 8005bc4:	d5fb      	bpl.n	8005bbe <_printf_i+0x1ba>
 8005bc6:	8019      	strh	r1, [r3, #0]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	4616      	mov	r6, r2
 8005bce:	e7bc      	b.n	8005b4a <_printf_i+0x146>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	6032      	str	r2, [r6, #0]
 8005bd6:	681e      	ldr	r6, [r3, #0]
 8005bd8:	6862      	ldr	r2, [r4, #4]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7fa fb07 	bl	80001f0 <memchr>
 8005be2:	b108      	cbz	r0, 8005be8 <_printf_i+0x1e4>
 8005be4:	1b80      	subs	r0, r0, r6
 8005be6:	6060      	str	r0, [r4, #4]
 8005be8:	6863      	ldr	r3, [r4, #4]
 8005bea:	6123      	str	r3, [r4, #16]
 8005bec:	2300      	movs	r3, #0
 8005bee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf2:	e7aa      	b.n	8005b4a <_printf_i+0x146>
 8005bf4:	6923      	ldr	r3, [r4, #16]
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	47d0      	blx	sl
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d0ad      	beq.n	8005b5e <_printf_i+0x15a>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	079b      	lsls	r3, r3, #30
 8005c06:	d413      	bmi.n	8005c30 <_printf_i+0x22c>
 8005c08:	68e0      	ldr	r0, [r4, #12]
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	4298      	cmp	r0, r3
 8005c0e:	bfb8      	it	lt
 8005c10:	4618      	movlt	r0, r3
 8005c12:	e7a6      	b.n	8005b62 <_printf_i+0x15e>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4632      	mov	r2, r6
 8005c18:	4649      	mov	r1, r9
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	47d0      	blx	sl
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d09d      	beq.n	8005b5e <_printf_i+0x15a>
 8005c22:	3501      	adds	r5, #1
 8005c24:	68e3      	ldr	r3, [r4, #12]
 8005c26:	9903      	ldr	r1, [sp, #12]
 8005c28:	1a5b      	subs	r3, r3, r1
 8005c2a:	42ab      	cmp	r3, r5
 8005c2c:	dcf2      	bgt.n	8005c14 <_printf_i+0x210>
 8005c2e:	e7eb      	b.n	8005c08 <_printf_i+0x204>
 8005c30:	2500      	movs	r5, #0
 8005c32:	f104 0619 	add.w	r6, r4, #25
 8005c36:	e7f5      	b.n	8005c24 <_printf_i+0x220>
 8005c38:	08009fd2 	.word	0x08009fd2
 8005c3c:	08009fe3 	.word	0x08009fe3

08005c40 <_scanf_float>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	b087      	sub	sp, #28
 8005c46:	4691      	mov	r9, r2
 8005c48:	9303      	str	r3, [sp, #12]
 8005c4a:	688b      	ldr	r3, [r1, #8]
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005c52:	bf81      	itttt	hi
 8005c54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005c58:	eb03 0b05 	addhi.w	fp, r3, r5
 8005c5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005c60:	608b      	strhi	r3, [r1, #8]
 8005c62:	680b      	ldr	r3, [r1, #0]
 8005c64:	460a      	mov	r2, r1
 8005c66:	f04f 0500 	mov.w	r5, #0
 8005c6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005c6e:	f842 3b1c 	str.w	r3, [r2], #28
 8005c72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005c76:	4680      	mov	r8, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	bf98      	it	ls
 8005c7c:	f04f 0b00 	movls.w	fp, #0
 8005c80:	9201      	str	r2, [sp, #4]
 8005c82:	4616      	mov	r6, r2
 8005c84:	46aa      	mov	sl, r5
 8005c86:	462f      	mov	r7, r5
 8005c88:	9502      	str	r5, [sp, #8]
 8005c8a:	68a2      	ldr	r2, [r4, #8]
 8005c8c:	b15a      	cbz	r2, 8005ca6 <_scanf_float+0x66>
 8005c8e:	f8d9 3000 	ldr.w	r3, [r9]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c96:	d863      	bhi.n	8005d60 <_scanf_float+0x120>
 8005c98:	2b40      	cmp	r3, #64	@ 0x40
 8005c9a:	d83b      	bhi.n	8005d14 <_scanf_float+0xd4>
 8005c9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005ca0:	b2c8      	uxtb	r0, r1
 8005ca2:	280e      	cmp	r0, #14
 8005ca4:	d939      	bls.n	8005d1a <_scanf_float+0xda>
 8005ca6:	b11f      	cbz	r7, 8005cb0 <_scanf_float+0x70>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cb4:	f1ba 0f01 	cmp.w	sl, #1
 8005cb8:	f200 8114 	bhi.w	8005ee4 <_scanf_float+0x2a4>
 8005cbc:	9b01      	ldr	r3, [sp, #4]
 8005cbe:	429e      	cmp	r6, r3
 8005cc0:	f200 8105 	bhi.w	8005ece <_scanf_float+0x28e>
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	b007      	add	sp, #28
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005cd0:	2a0d      	cmp	r2, #13
 8005cd2:	d8e8      	bhi.n	8005ca6 <_scanf_float+0x66>
 8005cd4:	a101      	add	r1, pc, #4	@ (adr r1, 8005cdc <_scanf_float+0x9c>)
 8005cd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005e25 	.word	0x08005e25
 8005ce0:	08005ca7 	.word	0x08005ca7
 8005ce4:	08005ca7 	.word	0x08005ca7
 8005ce8:	08005ca7 	.word	0x08005ca7
 8005cec:	08005e81 	.word	0x08005e81
 8005cf0:	08005e5b 	.word	0x08005e5b
 8005cf4:	08005ca7 	.word	0x08005ca7
 8005cf8:	08005ca7 	.word	0x08005ca7
 8005cfc:	08005e33 	.word	0x08005e33
 8005d00:	08005ca7 	.word	0x08005ca7
 8005d04:	08005ca7 	.word	0x08005ca7
 8005d08:	08005ca7 	.word	0x08005ca7
 8005d0c:	08005ca7 	.word	0x08005ca7
 8005d10:	08005def 	.word	0x08005def
 8005d14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005d18:	e7da      	b.n	8005cd0 <_scanf_float+0x90>
 8005d1a:	290e      	cmp	r1, #14
 8005d1c:	d8c3      	bhi.n	8005ca6 <_scanf_float+0x66>
 8005d1e:	a001      	add	r0, pc, #4	@ (adr r0, 8005d24 <_scanf_float+0xe4>)
 8005d20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d24:	08005ddf 	.word	0x08005ddf
 8005d28:	08005ca7 	.word	0x08005ca7
 8005d2c:	08005ddf 	.word	0x08005ddf
 8005d30:	08005e6f 	.word	0x08005e6f
 8005d34:	08005ca7 	.word	0x08005ca7
 8005d38:	08005d81 	.word	0x08005d81
 8005d3c:	08005dc5 	.word	0x08005dc5
 8005d40:	08005dc5 	.word	0x08005dc5
 8005d44:	08005dc5 	.word	0x08005dc5
 8005d48:	08005dc5 	.word	0x08005dc5
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005dc5 	.word	0x08005dc5
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	2b6e      	cmp	r3, #110	@ 0x6e
 8005d62:	d809      	bhi.n	8005d78 <_scanf_float+0x138>
 8005d64:	2b60      	cmp	r3, #96	@ 0x60
 8005d66:	d8b1      	bhi.n	8005ccc <_scanf_float+0x8c>
 8005d68:	2b54      	cmp	r3, #84	@ 0x54
 8005d6a:	d07b      	beq.n	8005e64 <_scanf_float+0x224>
 8005d6c:	2b59      	cmp	r3, #89	@ 0x59
 8005d6e:	d19a      	bne.n	8005ca6 <_scanf_float+0x66>
 8005d70:	2d07      	cmp	r5, #7
 8005d72:	d198      	bne.n	8005ca6 <_scanf_float+0x66>
 8005d74:	2508      	movs	r5, #8
 8005d76:	e02f      	b.n	8005dd8 <_scanf_float+0x198>
 8005d78:	2b74      	cmp	r3, #116	@ 0x74
 8005d7a:	d073      	beq.n	8005e64 <_scanf_float+0x224>
 8005d7c:	2b79      	cmp	r3, #121	@ 0x79
 8005d7e:	e7f6      	b.n	8005d6e <_scanf_float+0x12e>
 8005d80:	6821      	ldr	r1, [r4, #0]
 8005d82:	05c8      	lsls	r0, r1, #23
 8005d84:	d51e      	bpl.n	8005dc4 <_scanf_float+0x184>
 8005d86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d8a:	6021      	str	r1, [r4, #0]
 8005d8c:	3701      	adds	r7, #1
 8005d8e:	f1bb 0f00 	cmp.w	fp, #0
 8005d92:	d003      	beq.n	8005d9c <_scanf_float+0x15c>
 8005d94:	3201      	adds	r2, #1
 8005d96:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d9a:	60a2      	str	r2, [r4, #8]
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6923      	ldr	r3, [r4, #16]
 8005da4:	3301      	adds	r3, #1
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f8c9 3004 	str.w	r3, [r9, #4]
 8005db4:	f340 8082 	ble.w	8005ebc <_scanf_float+0x27c>
 8005db8:	f8d9 3000 	ldr.w	r3, [r9]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c9 3000 	str.w	r3, [r9]
 8005dc2:	e762      	b.n	8005c8a <_scanf_float+0x4a>
 8005dc4:	eb1a 0105 	adds.w	r1, sl, r5
 8005dc8:	f47f af6d 	bne.w	8005ca6 <_scanf_float+0x66>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	468a      	mov	sl, r1
 8005dd8:	f806 3b01 	strb.w	r3, [r6], #1
 8005ddc:	e7de      	b.n	8005d9c <_scanf_float+0x15c>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	0610      	lsls	r0, r2, #24
 8005de2:	f57f af60 	bpl.w	8005ca6 <_scanf_float+0x66>
 8005de6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	e7f4      	b.n	8005dd8 <_scanf_float+0x198>
 8005dee:	f1ba 0f00 	cmp.w	sl, #0
 8005df2:	d10c      	bne.n	8005e0e <_scanf_float+0x1ce>
 8005df4:	b977      	cbnz	r7, 8005e14 <_scanf_float+0x1d4>
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005dfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e00:	d108      	bne.n	8005e14 <_scanf_float+0x1d4>
 8005e02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e06:	6022      	str	r2, [r4, #0]
 8005e08:	f04f 0a01 	mov.w	sl, #1
 8005e0c:	e7e4      	b.n	8005dd8 <_scanf_float+0x198>
 8005e0e:	f1ba 0f02 	cmp.w	sl, #2
 8005e12:	d050      	beq.n	8005eb6 <_scanf_float+0x276>
 8005e14:	2d01      	cmp	r5, #1
 8005e16:	d002      	beq.n	8005e1e <_scanf_float+0x1de>
 8005e18:	2d04      	cmp	r5, #4
 8005e1a:	f47f af44 	bne.w	8005ca6 <_scanf_float+0x66>
 8005e1e:	3501      	adds	r5, #1
 8005e20:	b2ed      	uxtb	r5, r5
 8005e22:	e7d9      	b.n	8005dd8 <_scanf_float+0x198>
 8005e24:	f1ba 0f01 	cmp.w	sl, #1
 8005e28:	f47f af3d 	bne.w	8005ca6 <_scanf_float+0x66>
 8005e2c:	f04f 0a02 	mov.w	sl, #2
 8005e30:	e7d2      	b.n	8005dd8 <_scanf_float+0x198>
 8005e32:	b975      	cbnz	r5, 8005e52 <_scanf_float+0x212>
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	f47f af37 	bne.w	8005ca8 <_scanf_float+0x68>
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005e40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005e44:	f040 8103 	bne.w	800604e <_scanf_float+0x40e>
 8005e48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e4c:	6022      	str	r2, [r4, #0]
 8005e4e:	2501      	movs	r5, #1
 8005e50:	e7c2      	b.n	8005dd8 <_scanf_float+0x198>
 8005e52:	2d03      	cmp	r5, #3
 8005e54:	d0e3      	beq.n	8005e1e <_scanf_float+0x1de>
 8005e56:	2d05      	cmp	r5, #5
 8005e58:	e7df      	b.n	8005e1a <_scanf_float+0x1da>
 8005e5a:	2d02      	cmp	r5, #2
 8005e5c:	f47f af23 	bne.w	8005ca6 <_scanf_float+0x66>
 8005e60:	2503      	movs	r5, #3
 8005e62:	e7b9      	b.n	8005dd8 <_scanf_float+0x198>
 8005e64:	2d06      	cmp	r5, #6
 8005e66:	f47f af1e 	bne.w	8005ca6 <_scanf_float+0x66>
 8005e6a:	2507      	movs	r5, #7
 8005e6c:	e7b4      	b.n	8005dd8 <_scanf_float+0x198>
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	0591      	lsls	r1, r2, #22
 8005e72:	f57f af18 	bpl.w	8005ca6 <_scanf_float+0x66>
 8005e76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	9702      	str	r7, [sp, #8]
 8005e7e:	e7ab      	b.n	8005dd8 <_scanf_float+0x198>
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005e86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005e8a:	d005      	beq.n	8005e98 <_scanf_float+0x258>
 8005e8c:	0550      	lsls	r0, r2, #21
 8005e8e:	f57f af0a 	bpl.w	8005ca6 <_scanf_float+0x66>
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	f000 80db 	beq.w	800604e <_scanf_float+0x40e>
 8005e98:	0591      	lsls	r1, r2, #22
 8005e9a:	bf58      	it	pl
 8005e9c:	9902      	ldrpl	r1, [sp, #8]
 8005e9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ea2:	bf58      	it	pl
 8005ea4:	1a79      	subpl	r1, r7, r1
 8005ea6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005eaa:	bf58      	it	pl
 8005eac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005eb0:	6022      	str	r2, [r4, #0]
 8005eb2:	2700      	movs	r7, #0
 8005eb4:	e790      	b.n	8005dd8 <_scanf_float+0x198>
 8005eb6:	f04f 0a03 	mov.w	sl, #3
 8005eba:	e78d      	b.n	8005dd8 <_scanf_float+0x198>
 8005ebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4798      	blx	r3
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f43f aedf 	beq.w	8005c8a <_scanf_float+0x4a>
 8005ecc:	e6eb      	b.n	8005ca6 <_scanf_float+0x66>
 8005ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ed2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ed6:	464a      	mov	r2, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4798      	blx	r3
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e6eb      	b.n	8005cbc <_scanf_float+0x7c>
 8005ee4:	1e6b      	subs	r3, r5, #1
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d824      	bhi.n	8005f34 <_scanf_float+0x2f4>
 8005eea:	2d02      	cmp	r5, #2
 8005eec:	d836      	bhi.n	8005f5c <_scanf_float+0x31c>
 8005eee:	9b01      	ldr	r3, [sp, #4]
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	f67f aee7 	bls.w	8005cc4 <_scanf_float+0x84>
 8005ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005efe:	464a      	mov	r2, r9
 8005f00:	4640      	mov	r0, r8
 8005f02:	4798      	blx	r3
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	e7f0      	b.n	8005eee <_scanf_float+0x2ae>
 8005f0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005f14:	464a      	mov	r2, r9
 8005f16:	4640      	mov	r0, r8
 8005f18:	4798      	blx	r3
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f24:	fa5f fa8a 	uxtb.w	sl, sl
 8005f28:	f1ba 0f02 	cmp.w	sl, #2
 8005f2c:	d1ee      	bne.n	8005f0c <_scanf_float+0x2cc>
 8005f2e:	3d03      	subs	r5, #3
 8005f30:	b2ed      	uxtb	r5, r5
 8005f32:	1b76      	subs	r6, r6, r5
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	05da      	lsls	r2, r3, #23
 8005f38:	d530      	bpl.n	8005f9c <_scanf_float+0x35c>
 8005f3a:	055b      	lsls	r3, r3, #21
 8005f3c:	d511      	bpl.n	8005f62 <_scanf_float+0x322>
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	429e      	cmp	r6, r3
 8005f42:	f67f aebf 	bls.w	8005cc4 <_scanf_float+0x84>
 8005f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f4e:	464a      	mov	r2, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	4798      	blx	r3
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	e7f0      	b.n	8005f3e <_scanf_float+0x2fe>
 8005f5c:	46aa      	mov	sl, r5
 8005f5e:	46b3      	mov	fp, r6
 8005f60:	e7de      	b.n	8005f20 <_scanf_float+0x2e0>
 8005f62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	2965      	cmp	r1, #101	@ 0x65
 8005f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	d00c      	beq.n	8005f90 <_scanf_float+0x350>
 8005f76:	2945      	cmp	r1, #69	@ 0x45
 8005f78:	d00a      	beq.n	8005f90 <_scanf_float+0x350>
 8005f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f7e:	464a      	mov	r2, r9
 8005f80:	4640      	mov	r0, r8
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	1eb5      	subs	r5, r6, #2
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f94:	464a      	mov	r2, r9
 8005f96:	4640      	mov	r0, r8
 8005f98:	4798      	blx	r3
 8005f9a:	462e      	mov	r6, r5
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	f012 0210 	ands.w	r2, r2, #16
 8005fa2:	d001      	beq.n	8005fa8 <_scanf_float+0x368>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e68e      	b.n	8005cc6 <_scanf_float+0x86>
 8005fa8:	7032      	strb	r2, [r6, #0]
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb4:	d125      	bne.n	8006002 <_scanf_float+0x3c2>
 8005fb6:	9b02      	ldr	r3, [sp, #8]
 8005fb8:	429f      	cmp	r7, r3
 8005fba:	d00a      	beq.n	8005fd2 <_scanf_float+0x392>
 8005fbc:	1bda      	subs	r2, r3, r7
 8005fbe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005fc2:	429e      	cmp	r6, r3
 8005fc4:	bf28      	it	cs
 8005fc6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005fca:	4922      	ldr	r1, [pc, #136]	@ (8006054 <_scanf_float+0x414>)
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 fac3 	bl	8006558 <siprintf>
 8005fd2:	9901      	ldr	r1, [sp, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f002 fec2 	bl	8008d60 <_strtod_r>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f011 0f02 	tst.w	r1, #2
 8005fe6:	ec57 6b10 	vmov	r6, r7, d0
 8005fea:	f103 0204 	add.w	r2, r3, #4
 8005fee:	d015      	beq.n	800601c <_scanf_float+0x3dc>
 8005ff0:	9903      	ldr	r1, [sp, #12]
 8005ff2:	600a      	str	r2, [r1, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	e9c3 6700 	strd	r6, r7, [r3]
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60e3      	str	r3, [r4, #12]
 8006000:	e7d0      	b.n	8005fa4 <_scanf_float+0x364>
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0e4      	beq.n	8005fd2 <_scanf_float+0x392>
 8006008:	9905      	ldr	r1, [sp, #20]
 800600a:	230a      	movs	r3, #10
 800600c:	3101      	adds	r1, #1
 800600e:	4640      	mov	r0, r8
 8006010:	f002 ff26 	bl	8008e60 <_strtol_r>
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	9e05      	ldr	r6, [sp, #20]
 8006018:	1ac2      	subs	r2, r0, r3
 800601a:	e7d0      	b.n	8005fbe <_scanf_float+0x37e>
 800601c:	f011 0f04 	tst.w	r1, #4
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	600a      	str	r2, [r1, #0]
 8006024:	d1e6      	bne.n	8005ff4 <_scanf_float+0x3b4>
 8006026:	681d      	ldr	r5, [r3, #0]
 8006028:	4632      	mov	r2, r6
 800602a:	463b      	mov	r3, r7
 800602c:	4630      	mov	r0, r6
 800602e:	4639      	mov	r1, r7
 8006030:	f7fa fd8c 	bl	8000b4c <__aeabi_dcmpun>
 8006034:	b128      	cbz	r0, 8006042 <_scanf_float+0x402>
 8006036:	4808      	ldr	r0, [pc, #32]	@ (8006058 <_scanf_float+0x418>)
 8006038:	f000 fc86 	bl	8006948 <nanf>
 800603c:	ed85 0a00 	vstr	s0, [r5]
 8006040:	e7db      	b.n	8005ffa <_scanf_float+0x3ba>
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa fddf 	bl	8000c08 <__aeabi_d2f>
 800604a:	6028      	str	r0, [r5, #0]
 800604c:	e7d5      	b.n	8005ffa <_scanf_float+0x3ba>
 800604e:	2700      	movs	r7, #0
 8006050:	e62e      	b.n	8005cb0 <_scanf_float+0x70>
 8006052:	bf00      	nop
 8006054:	08009ff4 	.word	0x08009ff4
 8006058:	0800a135 	.word	0x0800a135

0800605c <_fgets_r>:
 800605c:	2a01      	cmp	r2, #1
 800605e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006062:	4681      	mov	r9, r0
 8006064:	460e      	mov	r6, r1
 8006066:	4615      	mov	r5, r2
 8006068:	461c      	mov	r4, r3
 800606a:	dd21      	ble.n	80060b0 <_fgets_r+0x54>
 800606c:	b118      	cbz	r0, 8006076 <_fgets_r+0x1a>
 800606e:	6a03      	ldr	r3, [r0, #32]
 8006070:	b90b      	cbnz	r3, 8006076 <_fgets_r+0x1a>
 8006072:	f000 f8ef 	bl	8006254 <__sinit>
 8006076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006078:	07db      	lsls	r3, r3, #31
 800607a:	d405      	bmi.n	8006088 <_fgets_r+0x2c>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	059f      	lsls	r7, r3, #22
 8006080:	d402      	bmi.n	8006088 <_fgets_r+0x2c>
 8006082:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006084:	f000 fc4f 	bl	8006926 <__retarget_lock_acquire_recursive>
 8006088:	3d01      	subs	r5, #1
 800608a:	4637      	mov	r7, r6
 800608c:	6863      	ldr	r3, [r4, #4]
 800608e:	b99b      	cbnz	r3, 80060b8 <_fgets_r+0x5c>
 8006090:	4621      	mov	r1, r4
 8006092:	4648      	mov	r0, r9
 8006094:	f000 f9ec 	bl	8006470 <__srefill_r>
 8006098:	b168      	cbz	r0, 80060b6 <_fgets_r+0x5a>
 800609a:	42b7      	cmp	r7, r6
 800609c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800609e:	d139      	bne.n	8006114 <_fgets_r+0xb8>
 80060a0:	07d8      	lsls	r0, r3, #31
 80060a2:	d405      	bmi.n	80060b0 <_fgets_r+0x54>
 80060a4:	89a3      	ldrh	r3, [r4, #12]
 80060a6:	0599      	lsls	r1, r3, #22
 80060a8:	d402      	bmi.n	80060b0 <_fgets_r+0x54>
 80060aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ac:	f000 fc3c 	bl	8006928 <__retarget_lock_release_recursive>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b6:	6863      	ldr	r3, [r4, #4]
 80060b8:	f8d4 a000 	ldr.w	sl, [r4]
 80060bc:	42ab      	cmp	r3, r5
 80060be:	bf28      	it	cs
 80060c0:	462b      	movcs	r3, r5
 80060c2:	461a      	mov	r2, r3
 80060c4:	210a      	movs	r1, #10
 80060c6:	4650      	mov	r0, sl
 80060c8:	4698      	mov	r8, r3
 80060ca:	f7fa f891 	bl	80001f0 <memchr>
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	b188      	cbz	r0, 80060f6 <_fgets_r+0x9a>
 80060d2:	3001      	adds	r0, #1
 80060d4:	eba0 050a 	sub.w	r5, r0, sl
 80060d8:	1b5b      	subs	r3, r3, r5
 80060da:	e9c4 0300 	strd	r0, r3, [r4]
 80060de:	462a      	mov	r2, r5
 80060e0:	4651      	mov	r1, sl
 80060e2:	4638      	mov	r0, r7
 80060e4:	f000 fc21 	bl	800692a <memcpy>
 80060e8:	2300      	movs	r3, #0
 80060ea:	557b      	strb	r3, [r7, r5]
 80060ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	d513      	bpl.n	800611a <_fgets_r+0xbe>
 80060f2:	4630      	mov	r0, r6
 80060f4:	e7dd      	b.n	80060b2 <_fgets_r+0x56>
 80060f6:	eba3 0308 	sub.w	r3, r3, r8
 80060fa:	6063      	str	r3, [r4, #4]
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	4443      	add	r3, r8
 8006100:	4638      	mov	r0, r7
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	4642      	mov	r2, r8
 8006106:	4651      	mov	r1, sl
 8006108:	f000 fc0f 	bl	800692a <memcpy>
 800610c:	ebb5 0508 	subs.w	r5, r5, r8
 8006110:	4447      	add	r7, r8
 8006112:	d1bb      	bne.n	800608c <_fgets_r+0x30>
 8006114:	2300      	movs	r3, #0
 8006116:	703b      	strb	r3, [r7, #0]
 8006118:	e7e8      	b.n	80060ec <_fgets_r+0x90>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	059b      	lsls	r3, r3, #22
 800611e:	d4e8      	bmi.n	80060f2 <_fgets_r+0x96>
 8006120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006122:	f000 fc01 	bl	8006928 <__retarget_lock_release_recursive>
 8006126:	e7e4      	b.n	80060f2 <_fgets_r+0x96>

08006128 <fgets>:
 8006128:	4613      	mov	r3, r2
 800612a:	460a      	mov	r2, r1
 800612c:	4601      	mov	r1, r0
 800612e:	4802      	ldr	r0, [pc, #8]	@ (8006138 <fgets+0x10>)
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f7ff bf93 	b.w	800605c <_fgets_r>
 8006136:	bf00      	nop
 8006138:	2000001c 	.word	0x2000001c

0800613c <std>:
 800613c:	2300      	movs	r3, #0
 800613e:	b510      	push	{r4, lr}
 8006140:	4604      	mov	r4, r0
 8006142:	e9c0 3300 	strd	r3, r3, [r0]
 8006146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800614a:	6083      	str	r3, [r0, #8]
 800614c:	8181      	strh	r1, [r0, #12]
 800614e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006150:	81c2      	strh	r2, [r0, #14]
 8006152:	6183      	str	r3, [r0, #24]
 8006154:	4619      	mov	r1, r3
 8006156:	2208      	movs	r2, #8
 8006158:	305c      	adds	r0, #92	@ 0x5c
 800615a:	f000 faf7 	bl	800674c <memset>
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <std+0x58>)
 8006160:	6263      	str	r3, [r4, #36]	@ 0x24
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <std+0x5c>)
 8006164:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <std+0x60>)
 8006168:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <std+0x64>)
 800616c:	6323      	str	r3, [r4, #48]	@ 0x30
 800616e:	4b0d      	ldr	r3, [pc, #52]	@ (80061a4 <std+0x68>)
 8006170:	6224      	str	r4, [r4, #32]
 8006172:	429c      	cmp	r4, r3
 8006174:	d006      	beq.n	8006184 <std+0x48>
 8006176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800617a:	4294      	cmp	r4, r2
 800617c:	d002      	beq.n	8006184 <std+0x48>
 800617e:	33d0      	adds	r3, #208	@ 0xd0
 8006180:	429c      	cmp	r4, r3
 8006182:	d105      	bne.n	8006190 <std+0x54>
 8006184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800618c:	f000 bbca 	b.w	8006924 <__retarget_lock_init_recursive>
 8006190:	bd10      	pop	{r4, pc}
 8006192:	bf00      	nop
 8006194:	0800659d 	.word	0x0800659d
 8006198:	080065bf 	.word	0x080065bf
 800619c:	080065f7 	.word	0x080065f7
 80061a0:	0800661b 	.word	0x0800661b
 80061a4:	20004294 	.word	0x20004294

080061a8 <stdio_exit_handler>:
 80061a8:	4a02      	ldr	r2, [pc, #8]	@ (80061b4 <stdio_exit_handler+0xc>)
 80061aa:	4903      	ldr	r1, [pc, #12]	@ (80061b8 <stdio_exit_handler+0x10>)
 80061ac:	4803      	ldr	r0, [pc, #12]	@ (80061bc <stdio_exit_handler+0x14>)
 80061ae:	f000 b87b 	b.w	80062a8 <_fwalk_sglue>
 80061b2:	bf00      	nop
 80061b4:	20000010 	.word	0x20000010
 80061b8:	080094a1 	.word	0x080094a1
 80061bc:	20000020 	.word	0x20000020

080061c0 <cleanup_stdio>:
 80061c0:	6841      	ldr	r1, [r0, #4]
 80061c2:	4b0c      	ldr	r3, [pc, #48]	@ (80061f4 <cleanup_stdio+0x34>)
 80061c4:	4299      	cmp	r1, r3
 80061c6:	b510      	push	{r4, lr}
 80061c8:	4604      	mov	r4, r0
 80061ca:	d001      	beq.n	80061d0 <cleanup_stdio+0x10>
 80061cc:	f003 f968 	bl	80094a0 <_fflush_r>
 80061d0:	68a1      	ldr	r1, [r4, #8]
 80061d2:	4b09      	ldr	r3, [pc, #36]	@ (80061f8 <cleanup_stdio+0x38>)
 80061d4:	4299      	cmp	r1, r3
 80061d6:	d002      	beq.n	80061de <cleanup_stdio+0x1e>
 80061d8:	4620      	mov	r0, r4
 80061da:	f003 f961 	bl	80094a0 <_fflush_r>
 80061de:	68e1      	ldr	r1, [r4, #12]
 80061e0:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <cleanup_stdio+0x3c>)
 80061e2:	4299      	cmp	r1, r3
 80061e4:	d004      	beq.n	80061f0 <cleanup_stdio+0x30>
 80061e6:	4620      	mov	r0, r4
 80061e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ec:	f003 b958 	b.w	80094a0 <_fflush_r>
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	bf00      	nop
 80061f4:	20004294 	.word	0x20004294
 80061f8:	200042fc 	.word	0x200042fc
 80061fc:	20004364 	.word	0x20004364

08006200 <global_stdio_init.part.0>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <global_stdio_init.part.0+0x30>)
 8006204:	4c0b      	ldr	r4, [pc, #44]	@ (8006234 <global_stdio_init.part.0+0x34>)
 8006206:	4a0c      	ldr	r2, [pc, #48]	@ (8006238 <global_stdio_init.part.0+0x38>)
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	4620      	mov	r0, r4
 800620c:	2200      	movs	r2, #0
 800620e:	2104      	movs	r1, #4
 8006210:	f7ff ff94 	bl	800613c <std>
 8006214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006218:	2201      	movs	r2, #1
 800621a:	2109      	movs	r1, #9
 800621c:	f7ff ff8e 	bl	800613c <std>
 8006220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006224:	2202      	movs	r2, #2
 8006226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800622a:	2112      	movs	r1, #18
 800622c:	f7ff bf86 	b.w	800613c <std>
 8006230:	200043cc 	.word	0x200043cc
 8006234:	20004294 	.word	0x20004294
 8006238:	080061a9 	.word	0x080061a9

0800623c <__sfp_lock_acquire>:
 800623c:	4801      	ldr	r0, [pc, #4]	@ (8006244 <__sfp_lock_acquire+0x8>)
 800623e:	f000 bb72 	b.w	8006926 <__retarget_lock_acquire_recursive>
 8006242:	bf00      	nop
 8006244:	200043d5 	.word	0x200043d5

08006248 <__sfp_lock_release>:
 8006248:	4801      	ldr	r0, [pc, #4]	@ (8006250 <__sfp_lock_release+0x8>)
 800624a:	f000 bb6d 	b.w	8006928 <__retarget_lock_release_recursive>
 800624e:	bf00      	nop
 8006250:	200043d5 	.word	0x200043d5

08006254 <__sinit>:
 8006254:	b510      	push	{r4, lr}
 8006256:	4604      	mov	r4, r0
 8006258:	f7ff fff0 	bl	800623c <__sfp_lock_acquire>
 800625c:	6a23      	ldr	r3, [r4, #32]
 800625e:	b11b      	cbz	r3, 8006268 <__sinit+0x14>
 8006260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006264:	f7ff bff0 	b.w	8006248 <__sfp_lock_release>
 8006268:	4b04      	ldr	r3, [pc, #16]	@ (800627c <__sinit+0x28>)
 800626a:	6223      	str	r3, [r4, #32]
 800626c:	4b04      	ldr	r3, [pc, #16]	@ (8006280 <__sinit+0x2c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f5      	bne.n	8006260 <__sinit+0xc>
 8006274:	f7ff ffc4 	bl	8006200 <global_stdio_init.part.0>
 8006278:	e7f2      	b.n	8006260 <__sinit+0xc>
 800627a:	bf00      	nop
 800627c:	080061c1 	.word	0x080061c1
 8006280:	200043cc 	.word	0x200043cc

08006284 <fiprintf>:
 8006284:	b40e      	push	{r1, r2, r3}
 8006286:	b503      	push	{r0, r1, lr}
 8006288:	4601      	mov	r1, r0
 800628a:	ab03      	add	r3, sp, #12
 800628c:	4805      	ldr	r0, [pc, #20]	@ (80062a4 <fiprintf+0x20>)
 800628e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006292:	6800      	ldr	r0, [r0, #0]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	f002 ff67 	bl	8009168 <_vfiprintf_r>
 800629a:	b002      	add	sp, #8
 800629c:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a0:	b003      	add	sp, #12
 80062a2:	4770      	bx	lr
 80062a4:	2000001c 	.word	0x2000001c

080062a8 <_fwalk_sglue>:
 80062a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ac:	4607      	mov	r7, r0
 80062ae:	4688      	mov	r8, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	2600      	movs	r6, #0
 80062b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062b8:	f1b9 0901 	subs.w	r9, r9, #1
 80062bc:	d505      	bpl.n	80062ca <_fwalk_sglue+0x22>
 80062be:	6824      	ldr	r4, [r4, #0]
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	d1f7      	bne.n	80062b4 <_fwalk_sglue+0xc>
 80062c4:	4630      	mov	r0, r6
 80062c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d907      	bls.n	80062e0 <_fwalk_sglue+0x38>
 80062d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062d4:	3301      	adds	r3, #1
 80062d6:	d003      	beq.n	80062e0 <_fwalk_sglue+0x38>
 80062d8:	4629      	mov	r1, r5
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	4306      	orrs	r6, r0
 80062e0:	3568      	adds	r5, #104	@ 0x68
 80062e2:	e7e9      	b.n	80062b8 <_fwalk_sglue+0x10>

080062e4 <_fwrite_r>:
 80062e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	9c08      	ldr	r4, [sp, #32]
 80062ea:	468a      	mov	sl, r1
 80062ec:	4690      	mov	r8, r2
 80062ee:	fb02 f903 	mul.w	r9, r2, r3
 80062f2:	4606      	mov	r6, r0
 80062f4:	b118      	cbz	r0, 80062fe <_fwrite_r+0x1a>
 80062f6:	6a03      	ldr	r3, [r0, #32]
 80062f8:	b90b      	cbnz	r3, 80062fe <_fwrite_r+0x1a>
 80062fa:	f7ff ffab 	bl	8006254 <__sinit>
 80062fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006300:	07dd      	lsls	r5, r3, #31
 8006302:	d405      	bmi.n	8006310 <_fwrite_r+0x2c>
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	0598      	lsls	r0, r3, #22
 8006308:	d402      	bmi.n	8006310 <_fwrite_r+0x2c>
 800630a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800630c:	f000 fb0b 	bl	8006926 <__retarget_lock_acquire_recursive>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	0719      	lsls	r1, r3, #28
 8006314:	d516      	bpl.n	8006344 <_fwrite_r+0x60>
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	b1a3      	cbz	r3, 8006344 <_fwrite_r+0x60>
 800631a:	2500      	movs	r5, #0
 800631c:	454d      	cmp	r5, r9
 800631e:	d01f      	beq.n	8006360 <_fwrite_r+0x7c>
 8006320:	68a7      	ldr	r7, [r4, #8]
 8006322:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8006326:	3f01      	subs	r7, #1
 8006328:	2f00      	cmp	r7, #0
 800632a:	60a7      	str	r7, [r4, #8]
 800632c:	da04      	bge.n	8006338 <_fwrite_r+0x54>
 800632e:	69a3      	ldr	r3, [r4, #24]
 8006330:	429f      	cmp	r7, r3
 8006332:	db0f      	blt.n	8006354 <_fwrite_r+0x70>
 8006334:	290a      	cmp	r1, #10
 8006336:	d00d      	beq.n	8006354 <_fwrite_r+0x70>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	6022      	str	r2, [r4, #0]
 800633e:	7019      	strb	r1, [r3, #0]
 8006340:	3501      	adds	r5, #1
 8006342:	e7eb      	b.n	800631c <_fwrite_r+0x38>
 8006344:	4621      	mov	r1, r4
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f9aa 	bl	80066a0 <__swsetup_r>
 800634c:	2800      	cmp	r0, #0
 800634e:	d0e4      	beq.n	800631a <_fwrite_r+0x36>
 8006350:	2500      	movs	r5, #0
 8006352:	e005      	b.n	8006360 <_fwrite_r+0x7c>
 8006354:	4622      	mov	r2, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f963 	bl	8006622 <__swbuf_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d1ef      	bne.n	8006340 <_fwrite_r+0x5c>
 8006360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006362:	07da      	lsls	r2, r3, #31
 8006364:	d405      	bmi.n	8006372 <_fwrite_r+0x8e>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	059b      	lsls	r3, r3, #22
 800636a:	d402      	bmi.n	8006372 <_fwrite_r+0x8e>
 800636c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636e:	f000 fadb 	bl	8006928 <__retarget_lock_release_recursive>
 8006372:	fbb5 f0f8 	udiv	r0, r5, r8
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800637c <fwrite>:
 800637c:	b507      	push	{r0, r1, r2, lr}
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	460a      	mov	r2, r1
 8006384:	4601      	mov	r1, r0
 8006386:	4803      	ldr	r0, [pc, #12]	@ (8006394 <fwrite+0x18>)
 8006388:	6800      	ldr	r0, [r0, #0]
 800638a:	f7ff ffab 	bl	80062e4 <_fwrite_r>
 800638e:	b003      	add	sp, #12
 8006390:	f85d fb04 	ldr.w	pc, [sp], #4
 8006394:	2000001c 	.word	0x2000001c

08006398 <_puts_r>:
 8006398:	6a03      	ldr	r3, [r0, #32]
 800639a:	b570      	push	{r4, r5, r6, lr}
 800639c:	6884      	ldr	r4, [r0, #8]
 800639e:	4605      	mov	r5, r0
 80063a0:	460e      	mov	r6, r1
 80063a2:	b90b      	cbnz	r3, 80063a8 <_puts_r+0x10>
 80063a4:	f7ff ff56 	bl	8006254 <__sinit>
 80063a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d405      	bmi.n	80063ba <_puts_r+0x22>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	0598      	lsls	r0, r3, #22
 80063b2:	d402      	bmi.n	80063ba <_puts_r+0x22>
 80063b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063b6:	f000 fab6 	bl	8006926 <__retarget_lock_acquire_recursive>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	0719      	lsls	r1, r3, #28
 80063be:	d502      	bpl.n	80063c6 <_puts_r+0x2e>
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d135      	bne.n	8006432 <_puts_r+0x9a>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f969 	bl	80066a0 <__swsetup_r>
 80063ce:	b380      	cbz	r0, 8006432 <_puts_r+0x9a>
 80063d0:	f04f 35ff 	mov.w	r5, #4294967295
 80063d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d6:	07da      	lsls	r2, r3, #31
 80063d8:	d405      	bmi.n	80063e6 <_puts_r+0x4e>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	059b      	lsls	r3, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_puts_r+0x4e>
 80063e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e2:	f000 faa1 	bl	8006928 <__retarget_lock_release_recursive>
 80063e6:	4628      	mov	r0, r5
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da04      	bge.n	80063f8 <_puts_r+0x60>
 80063ee:	69a2      	ldr	r2, [r4, #24]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	dc17      	bgt.n	8006424 <_puts_r+0x8c>
 80063f4:	290a      	cmp	r1, #10
 80063f6:	d015      	beq.n	8006424 <_puts_r+0x8c>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	7019      	strb	r1, [r3, #0]
 8006400:	68a3      	ldr	r3, [r4, #8]
 8006402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006406:	3b01      	subs	r3, #1
 8006408:	60a3      	str	r3, [r4, #8]
 800640a:	2900      	cmp	r1, #0
 800640c:	d1ed      	bne.n	80063ea <_puts_r+0x52>
 800640e:	2b00      	cmp	r3, #0
 8006410:	da11      	bge.n	8006436 <_puts_r+0x9e>
 8006412:	4622      	mov	r2, r4
 8006414:	210a      	movs	r1, #10
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f903 	bl	8006622 <__swbuf_r>
 800641c:	3001      	adds	r0, #1
 800641e:	d0d7      	beq.n	80063d0 <_puts_r+0x38>
 8006420:	250a      	movs	r5, #10
 8006422:	e7d7      	b.n	80063d4 <_puts_r+0x3c>
 8006424:	4622      	mov	r2, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f8fb 	bl	8006622 <__swbuf_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d1e7      	bne.n	8006400 <_puts_r+0x68>
 8006430:	e7ce      	b.n	80063d0 <_puts_r+0x38>
 8006432:	3e01      	subs	r6, #1
 8006434:	e7e4      	b.n	8006400 <_puts_r+0x68>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	220a      	movs	r2, #10
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	e7ee      	b.n	8006420 <_puts_r+0x88>
	...

08006444 <puts>:
 8006444:	4b02      	ldr	r3, [pc, #8]	@ (8006450 <puts+0xc>)
 8006446:	4601      	mov	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f7ff bfa5 	b.w	8006398 <_puts_r>
 800644e:	bf00      	nop
 8006450:	2000001c 	.word	0x2000001c

08006454 <lflush>:
 8006454:	898b      	ldrh	r3, [r1, #12]
 8006456:	f003 0309 	and.w	r3, r3, #9
 800645a:	2b09      	cmp	r3, #9
 800645c:	d103      	bne.n	8006466 <lflush+0x12>
 800645e:	4b03      	ldr	r3, [pc, #12]	@ (800646c <lflush+0x18>)
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f003 b81d 	b.w	80094a0 <_fflush_r>
 8006466:	2000      	movs	r0, #0
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	2000001c 	.word	0x2000001c

08006470 <__srefill_r>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	4605      	mov	r5, r0
 8006476:	b118      	cbz	r0, 8006480 <__srefill_r+0x10>
 8006478:	6a03      	ldr	r3, [r0, #32]
 800647a:	b90b      	cbnz	r3, 8006480 <__srefill_r+0x10>
 800647c:	f7ff feea 	bl	8006254 <__sinit>
 8006480:	2300      	movs	r3, #0
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006488:	069e      	lsls	r6, r3, #26
 800648a:	d408      	bmi.n	800649e <__srefill_r+0x2e>
 800648c:	0758      	lsls	r0, r3, #29
 800648e:	d445      	bmi.n	800651c <__srefill_r+0xac>
 8006490:	06d9      	lsls	r1, r3, #27
 8006492:	d407      	bmi.n	80064a4 <__srefill_r+0x34>
 8006494:	2209      	movs	r2, #9
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	071a      	lsls	r2, r3, #28
 80064a6:	d50b      	bpl.n	80064c0 <__srefill_r+0x50>
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f002 fff8 	bl	80094a0 <_fflush_r>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1f4      	bne.n	800649e <__srefill_r+0x2e>
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	60a0      	str	r0, [r4, #8]
 80064b8:	f023 0308 	bic.w	r3, r3, #8
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	61a0      	str	r0, [r4, #24]
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	b91b      	cbnz	r3, 80064d4 <__srefill_r+0x64>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f003 f834 	bl	800953c <__smakebuf_r>
 80064d4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80064d8:	07b3      	lsls	r3, r6, #30
 80064da:	d00f      	beq.n	80064fc <__srefill_r+0x8c>
 80064dc:	2301      	movs	r3, #1
 80064de:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <__srefill_r+0xdc>)
 80064e0:	491b      	ldr	r1, [pc, #108]	@ (8006550 <__srefill_r+0xe0>)
 80064e2:	481c      	ldr	r0, [pc, #112]	@ (8006554 <__srefill_r+0xe4>)
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	f7ff fedf 	bl	80062a8 <_fwalk_sglue>
 80064ea:	81a6      	strh	r6, [r4, #12]
 80064ec:	f006 0609 	and.w	r6, r6, #9
 80064f0:	2e09      	cmp	r6, #9
 80064f2:	d103      	bne.n	80064fc <__srefill_r+0x8c>
 80064f4:	4621      	mov	r1, r4
 80064f6:	4628      	mov	r0, r5
 80064f8:	f002 ff4e 	bl	8009398 <__sflush_r>
 80064fc:	6922      	ldr	r2, [r4, #16]
 80064fe:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006500:	6963      	ldr	r3, [r4, #20]
 8006502:	6a21      	ldr	r1, [r4, #32]
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	4628      	mov	r0, r5
 8006508:	47b0      	blx	r6
 800650a:	2800      	cmp	r0, #0
 800650c:	6060      	str	r0, [r4, #4]
 800650e:	dc17      	bgt.n	8006540 <__srefill_r+0xd0>
 8006510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006514:	d116      	bne.n	8006544 <__srefill_r+0xd4>
 8006516:	f043 0320 	orr.w	r3, r3, #32
 800651a:	e7bf      	b.n	800649c <__srefill_r+0x2c>
 800651c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800651e:	2900      	cmp	r1, #0
 8006520:	d0d2      	beq.n	80064c8 <__srefill_r+0x58>
 8006522:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006526:	4299      	cmp	r1, r3
 8006528:	d002      	beq.n	8006530 <__srefill_r+0xc0>
 800652a:	4628      	mov	r0, r5
 800652c:	f001 f86c 	bl	8007608 <_free_r>
 8006530:	2300      	movs	r3, #0
 8006532:	6363      	str	r3, [r4, #52]	@ 0x34
 8006534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0c5      	beq.n	80064c8 <__srefill_r+0x58>
 800653c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	2000      	movs	r0, #0
 8006542:	e7ae      	b.n	80064a2 <__srefill_r+0x32>
 8006544:	2200      	movs	r2, #0
 8006546:	6062      	str	r2, [r4, #4]
 8006548:	e7a6      	b.n	8006498 <__srefill_r+0x28>
 800654a:	bf00      	nop
 800654c:	20000010 	.word	0x20000010
 8006550:	08006455 	.word	0x08006455
 8006554:	20000020 	.word	0x20000020

08006558 <siprintf>:
 8006558:	b40e      	push	{r1, r2, r3}
 800655a:	b510      	push	{r4, lr}
 800655c:	b09d      	sub	sp, #116	@ 0x74
 800655e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006560:	9002      	str	r0, [sp, #8]
 8006562:	9006      	str	r0, [sp, #24]
 8006564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006568:	480a      	ldr	r0, [pc, #40]	@ (8006594 <siprintf+0x3c>)
 800656a:	9107      	str	r1, [sp, #28]
 800656c:	9104      	str	r1, [sp, #16]
 800656e:	490a      	ldr	r1, [pc, #40]	@ (8006598 <siprintf+0x40>)
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	9105      	str	r1, [sp, #20]
 8006576:	2400      	movs	r4, #0
 8006578:	a902      	add	r1, sp, #8
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006580:	f002 fccc 	bl	8008f1c <_svfiprintf_r>
 8006584:	9b02      	ldr	r3, [sp, #8]
 8006586:	701c      	strb	r4, [r3, #0]
 8006588:	b01d      	add	sp, #116	@ 0x74
 800658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658e:	b003      	add	sp, #12
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000001c 	.word	0x2000001c
 8006598:	ffff0208 	.word	0xffff0208

0800659c <__sread>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a4:	f000 f970 	bl	8006888 <_read_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	bfab      	itete	ge
 80065ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ae:	89a3      	ldrhlt	r3, [r4, #12]
 80065b0:	181b      	addge	r3, r3, r0
 80065b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065b6:	bfac      	ite	ge
 80065b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065ba:	81a3      	strhlt	r3, [r4, #12]
 80065bc:	bd10      	pop	{r4, pc}

080065be <__swrite>:
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	461f      	mov	r7, r3
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	05db      	lsls	r3, r3, #23
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4616      	mov	r6, r2
 80065ce:	d505      	bpl.n	80065dc <__swrite+0x1e>
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	2302      	movs	r3, #2
 80065d6:	2200      	movs	r2, #0
 80065d8:	f000 f944 	bl	8006864 <_lseek_r>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	4628      	mov	r0, r5
 80065ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	f000 b95b 	b.w	80068ac <_write_r>

080065f6 <__sseek>:
 80065f6:	b510      	push	{r4, lr}
 80065f8:	460c      	mov	r4, r1
 80065fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fe:	f000 f931 	bl	8006864 <_lseek_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	bf15      	itete	ne
 8006608:	6560      	strne	r0, [r4, #84]	@ 0x54
 800660a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800660e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006612:	81a3      	strheq	r3, [r4, #12]
 8006614:	bf18      	it	ne
 8006616:	81a3      	strhne	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__sclose>:
 800661a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661e:	f000 b8b3 	b.w	8006788 <_close_r>

08006622 <__swbuf_r>:
 8006622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006624:	460e      	mov	r6, r1
 8006626:	4614      	mov	r4, r2
 8006628:	4605      	mov	r5, r0
 800662a:	b118      	cbz	r0, 8006634 <__swbuf_r+0x12>
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	b90b      	cbnz	r3, 8006634 <__swbuf_r+0x12>
 8006630:	f7ff fe10 	bl	8006254 <__sinit>
 8006634:	69a3      	ldr	r3, [r4, #24]
 8006636:	60a3      	str	r3, [r4, #8]
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	071a      	lsls	r2, r3, #28
 800663c:	d501      	bpl.n	8006642 <__swbuf_r+0x20>
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	b943      	cbnz	r3, 8006654 <__swbuf_r+0x32>
 8006642:	4621      	mov	r1, r4
 8006644:	4628      	mov	r0, r5
 8006646:	f000 f82b 	bl	80066a0 <__swsetup_r>
 800664a:	b118      	cbz	r0, 8006654 <__swbuf_r+0x32>
 800664c:	f04f 37ff 	mov.w	r7, #4294967295
 8006650:	4638      	mov	r0, r7
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6922      	ldr	r2, [r4, #16]
 8006658:	1a98      	subs	r0, r3, r2
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc05      	bgt.n	8006670 <__swbuf_r+0x4e>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f002 ff1a 	bl	80094a0 <_fflush_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	d1ed      	bne.n	800664c <__swbuf_r+0x2a>
 8006670:	68a3      	ldr	r3, [r4, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	701e      	strb	r6, [r3, #0]
 800667e:	6962      	ldr	r2, [r4, #20]
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	d004      	beq.n	8006690 <__swbuf_r+0x6e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	07db      	lsls	r3, r3, #31
 800668a:	d5e1      	bpl.n	8006650 <__swbuf_r+0x2e>
 800668c:	2e0a      	cmp	r6, #10
 800668e:	d1df      	bne.n	8006650 <__swbuf_r+0x2e>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f002 ff04 	bl	80094a0 <_fflush_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0d9      	beq.n	8006650 <__swbuf_r+0x2e>
 800669c:	e7d6      	b.n	800664c <__swbuf_r+0x2a>
	...

080066a0 <__swsetup_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <__swsetup_r+0xa8>)
 80066a4:	4605      	mov	r5, r0
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	460c      	mov	r4, r1
 80066aa:	b118      	cbz	r0, 80066b4 <__swsetup_r+0x14>
 80066ac:	6a03      	ldr	r3, [r0, #32]
 80066ae:	b90b      	cbnz	r3, 80066b4 <__swsetup_r+0x14>
 80066b0:	f7ff fdd0 	bl	8006254 <__sinit>
 80066b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b8:	0719      	lsls	r1, r3, #28
 80066ba:	d422      	bmi.n	8006702 <__swsetup_r+0x62>
 80066bc:	06da      	lsls	r2, r3, #27
 80066be:	d407      	bmi.n	80066d0 <__swsetup_r+0x30>
 80066c0:	2209      	movs	r2, #9
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	f04f 30ff 	mov.w	r0, #4294967295
 80066ce:	e033      	b.n	8006738 <__swsetup_r+0x98>
 80066d0:	0758      	lsls	r0, r3, #29
 80066d2:	d512      	bpl.n	80066fa <__swsetup_r+0x5a>
 80066d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d6:	b141      	cbz	r1, 80066ea <__swsetup_r+0x4a>
 80066d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__swsetup_r+0x46>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 ff91 	bl	8007608 <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	2300      	movs	r3, #0
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	b94b      	cbnz	r3, 800671a <__swsetup_r+0x7a>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d003      	beq.n	800671a <__swsetup_r+0x7a>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f002 ff11 	bl	800953c <__smakebuf_r>
 800671a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671e:	f013 0201 	ands.w	r2, r3, #1
 8006722:	d00a      	beq.n	800673a <__swsetup_r+0x9a>
 8006724:	2200      	movs	r2, #0
 8006726:	60a2      	str	r2, [r4, #8]
 8006728:	6962      	ldr	r2, [r4, #20]
 800672a:	4252      	negs	r2, r2
 800672c:	61a2      	str	r2, [r4, #24]
 800672e:	6922      	ldr	r2, [r4, #16]
 8006730:	b942      	cbnz	r2, 8006744 <__swsetup_r+0xa4>
 8006732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006736:	d1c5      	bne.n	80066c4 <__swsetup_r+0x24>
 8006738:	bd38      	pop	{r3, r4, r5, pc}
 800673a:	0799      	lsls	r1, r3, #30
 800673c:	bf58      	it	pl
 800673e:	6962      	ldrpl	r2, [r4, #20]
 8006740:	60a2      	str	r2, [r4, #8]
 8006742:	e7f4      	b.n	800672e <__swsetup_r+0x8e>
 8006744:	2000      	movs	r0, #0
 8006746:	e7f7      	b.n	8006738 <__swsetup_r+0x98>
 8006748:	2000001c 	.word	0x2000001c

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <strcspn>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4603      	mov	r3, r0
 8006760:	461e      	mov	r6, r3
 8006762:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006766:	b144      	cbz	r4, 800677a <strcspn+0x1e>
 8006768:	1e4a      	subs	r2, r1, #1
 800676a:	e001      	b.n	8006770 <strcspn+0x14>
 800676c:	42a5      	cmp	r5, r4
 800676e:	d004      	beq.n	800677a <strcspn+0x1e>
 8006770:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006774:	2d00      	cmp	r5, #0
 8006776:	d1f9      	bne.n	800676c <strcspn+0x10>
 8006778:	e7f2      	b.n	8006760 <strcspn+0x4>
 800677a:	1a30      	subs	r0, r6, r0
 800677c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006780 <_localeconv_r>:
 8006780:	4800      	ldr	r0, [pc, #0]	@ (8006784 <_localeconv_r+0x4>)
 8006782:	4770      	bx	lr
 8006784:	2000015c 	.word	0x2000015c

08006788 <_close_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d06      	ldr	r5, [pc, #24]	@ (80067a4 <_close_r+0x1c>)
 800678c:	2300      	movs	r3, #0
 800678e:	4604      	mov	r4, r0
 8006790:	4608      	mov	r0, r1
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	f7fa ffa7 	bl	80016e6 <_close>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_close_r+0x1a>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_close_r+0x1a>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	200043d0 	.word	0x200043d0

080067a8 <_reclaim_reent>:
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <_reclaim_reent+0xb8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4283      	cmp	r3, r0
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	4604      	mov	r4, r0
 80067b2:	d053      	beq.n	800685c <_reclaim_reent+0xb4>
 80067b4:	69c3      	ldr	r3, [r0, #28]
 80067b6:	b31b      	cbz	r3, 8006800 <_reclaim_reent+0x58>
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	b163      	cbz	r3, 80067d6 <_reclaim_reent+0x2e>
 80067bc:	2500      	movs	r5, #0
 80067be:	69e3      	ldr	r3, [r4, #28]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	5959      	ldr	r1, [r3, r5]
 80067c4:	b9b1      	cbnz	r1, 80067f4 <_reclaim_reent+0x4c>
 80067c6:	3504      	adds	r5, #4
 80067c8:	2d80      	cmp	r5, #128	@ 0x80
 80067ca:	d1f8      	bne.n	80067be <_reclaim_reent+0x16>
 80067cc:	69e3      	ldr	r3, [r4, #28]
 80067ce:	4620      	mov	r0, r4
 80067d0:	68d9      	ldr	r1, [r3, #12]
 80067d2:	f000 ff19 	bl	8007608 <_free_r>
 80067d6:	69e3      	ldr	r3, [r4, #28]
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	b111      	cbz	r1, 80067e2 <_reclaim_reent+0x3a>
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 ff13 	bl	8007608 <_free_r>
 80067e2:	69e3      	ldr	r3, [r4, #28]
 80067e4:	689d      	ldr	r5, [r3, #8]
 80067e6:	b15d      	cbz	r5, 8006800 <_reclaim_reent+0x58>
 80067e8:	4629      	mov	r1, r5
 80067ea:	4620      	mov	r0, r4
 80067ec:	682d      	ldr	r5, [r5, #0]
 80067ee:	f000 ff0b 	bl	8007608 <_free_r>
 80067f2:	e7f8      	b.n	80067e6 <_reclaim_reent+0x3e>
 80067f4:	680e      	ldr	r6, [r1, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 ff06 	bl	8007608 <_free_r>
 80067fc:	4631      	mov	r1, r6
 80067fe:	e7e1      	b.n	80067c4 <_reclaim_reent+0x1c>
 8006800:	6961      	ldr	r1, [r4, #20]
 8006802:	b111      	cbz	r1, 800680a <_reclaim_reent+0x62>
 8006804:	4620      	mov	r0, r4
 8006806:	f000 feff 	bl	8007608 <_free_r>
 800680a:	69e1      	ldr	r1, [r4, #28]
 800680c:	b111      	cbz	r1, 8006814 <_reclaim_reent+0x6c>
 800680e:	4620      	mov	r0, r4
 8006810:	f000 fefa 	bl	8007608 <_free_r>
 8006814:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006816:	b111      	cbz	r1, 800681e <_reclaim_reent+0x76>
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fef5 	bl	8007608 <_free_r>
 800681e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006820:	b111      	cbz	r1, 8006828 <_reclaim_reent+0x80>
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fef0 	bl	8007608 <_free_r>
 8006828:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800682a:	b111      	cbz	r1, 8006832 <_reclaim_reent+0x8a>
 800682c:	4620      	mov	r0, r4
 800682e:	f000 feeb 	bl	8007608 <_free_r>
 8006832:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006834:	b111      	cbz	r1, 800683c <_reclaim_reent+0x94>
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fee6 	bl	8007608 <_free_r>
 800683c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800683e:	b111      	cbz	r1, 8006846 <_reclaim_reent+0x9e>
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fee1 	bl	8007608 <_free_r>
 8006846:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006848:	b111      	cbz	r1, 8006850 <_reclaim_reent+0xa8>
 800684a:	4620      	mov	r0, r4
 800684c:	f000 fedc 	bl	8007608 <_free_r>
 8006850:	6a23      	ldr	r3, [r4, #32]
 8006852:	b11b      	cbz	r3, 800685c <_reclaim_reent+0xb4>
 8006854:	4620      	mov	r0, r4
 8006856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800685a:	4718      	bx	r3
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	bf00      	nop
 8006860:	2000001c 	.word	0x2000001c

08006864 <_lseek_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	@ (8006884 <_lseek_r+0x20>)
 8006868:	4604      	mov	r4, r0
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	2200      	movs	r2, #0
 8006870:	602a      	str	r2, [r5, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fa ff5e 	bl	8001734 <_lseek>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_lseek_r+0x1e>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_lseek_r+0x1e>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	200043d0 	.word	0x200043d0

08006888 <_read_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d07      	ldr	r5, [pc, #28]	@ (80068a8 <_read_r+0x20>)
 800688c:	4604      	mov	r4, r0
 800688e:	4608      	mov	r0, r1
 8006890:	4611      	mov	r1, r2
 8006892:	2200      	movs	r2, #0
 8006894:	602a      	str	r2, [r5, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f7fa fc3c 	bl	8001114 <_read>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_read_r+0x1e>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_read_r+0x1e>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	200043d0 	.word	0x200043d0

080068ac <_write_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d07      	ldr	r5, [pc, #28]	@ (80068cc <_write_r+0x20>)
 80068b0:	4604      	mov	r4, r0
 80068b2:	4608      	mov	r0, r1
 80068b4:	4611      	mov	r1, r2
 80068b6:	2200      	movs	r2, #0
 80068b8:	602a      	str	r2, [r5, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	f7fa fbda 	bl	8001074 <_write>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_write_r+0x1e>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_write_r+0x1e>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	200043d0 	.word	0x200043d0

080068d0 <__errno>:
 80068d0:	4b01      	ldr	r3, [pc, #4]	@ (80068d8 <__errno+0x8>)
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	2000001c 	.word	0x2000001c

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	4d0d      	ldr	r5, [pc, #52]	@ (8006914 <__libc_init_array+0x38>)
 80068e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006918 <__libc_init_array+0x3c>)
 80068e2:	1b64      	subs	r4, r4, r5
 80068e4:	10a4      	asrs	r4, r4, #2
 80068e6:	2600      	movs	r6, #0
 80068e8:	42a6      	cmp	r6, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	4d0b      	ldr	r5, [pc, #44]	@ (800691c <__libc_init_array+0x40>)
 80068ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006920 <__libc_init_array+0x44>)
 80068f0:	f003 fad2 	bl	8009e98 <_init>
 80068f4:	1b64      	subs	r4, r4, r5
 80068f6:	10a4      	asrs	r4, r4, #2
 80068f8:	2600      	movs	r6, #0
 80068fa:	42a6      	cmp	r6, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	f855 3b04 	ldr.w	r3, [r5], #4
 8006904:	4798      	blx	r3
 8006906:	3601      	adds	r6, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	f855 3b04 	ldr.w	r3, [r5], #4
 800690e:	4798      	blx	r3
 8006910:	3601      	adds	r6, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	0800a3f4 	.word	0x0800a3f4
 8006918:	0800a3f4 	.word	0x0800a3f4
 800691c:	0800a3f4 	.word	0x0800a3f4
 8006920:	0800a3f8 	.word	0x0800a3f8

08006924 <__retarget_lock_init_recursive>:
 8006924:	4770      	bx	lr

08006926 <__retarget_lock_acquire_recursive>:
 8006926:	4770      	bx	lr

08006928 <__retarget_lock_release_recursive>:
 8006928:	4770      	bx	lr

0800692a <memcpy>:
 800692a:	440a      	add	r2, r1
 800692c:	4291      	cmp	r1, r2
 800692e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006932:	d100      	bne.n	8006936 <memcpy+0xc>
 8006934:	4770      	bx	lr
 8006936:	b510      	push	{r4, lr}
 8006938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006940:	4291      	cmp	r1, r2
 8006942:	d1f9      	bne.n	8006938 <memcpy+0xe>
 8006944:	bd10      	pop	{r4, pc}
	...

08006948 <nanf>:
 8006948:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006950 <nanf+0x8>
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	7fc00000 	.word	0x7fc00000

08006954 <quorem>:
 8006954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	6903      	ldr	r3, [r0, #16]
 800695a:	690c      	ldr	r4, [r1, #16]
 800695c:	42a3      	cmp	r3, r4
 800695e:	4607      	mov	r7, r0
 8006960:	db7e      	blt.n	8006a60 <quorem+0x10c>
 8006962:	3c01      	subs	r4, #1
 8006964:	f101 0814 	add.w	r8, r1, #20
 8006968:	00a3      	lsls	r3, r4, #2
 800696a:	f100 0514 	add.w	r5, r0, #20
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800697a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800697e:	3301      	adds	r3, #1
 8006980:	429a      	cmp	r2, r3
 8006982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006986:	fbb2 f6f3 	udiv	r6, r2, r3
 800698a:	d32e      	bcc.n	80069ea <quorem+0x96>
 800698c:	f04f 0a00 	mov.w	sl, #0
 8006990:	46c4      	mov	ip, r8
 8006992:	46ae      	mov	lr, r5
 8006994:	46d3      	mov	fp, sl
 8006996:	f85c 3b04 	ldr.w	r3, [ip], #4
 800699a:	b298      	uxth	r0, r3
 800699c:	fb06 a000 	mla	r0, r6, r0, sl
 80069a0:	0c02      	lsrs	r2, r0, #16
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	fb06 2303 	mla	r3, r6, r3, r2
 80069a8:	f8de 2000 	ldr.w	r2, [lr]
 80069ac:	b280      	uxth	r0, r0
 80069ae:	b292      	uxth	r2, r2
 80069b0:	1a12      	subs	r2, r2, r0
 80069b2:	445a      	add	r2, fp
 80069b4:	f8de 0000 	ldr.w	r0, [lr]
 80069b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069bc:	b29b      	uxth	r3, r3
 80069be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069c6:	b292      	uxth	r2, r2
 80069c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069cc:	45e1      	cmp	r9, ip
 80069ce:	f84e 2b04 	str.w	r2, [lr], #4
 80069d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069d6:	d2de      	bcs.n	8006996 <quorem+0x42>
 80069d8:	9b00      	ldr	r3, [sp, #0]
 80069da:	58eb      	ldr	r3, [r5, r3]
 80069dc:	b92b      	cbnz	r3, 80069ea <quorem+0x96>
 80069de:	9b01      	ldr	r3, [sp, #4]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	429d      	cmp	r5, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	d32f      	bcc.n	8006a48 <quorem+0xf4>
 80069e8:	613c      	str	r4, [r7, #16]
 80069ea:	4638      	mov	r0, r7
 80069ec:	f001 f9c8 	bl	8007d80 <__mcmp>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	db25      	blt.n	8006a40 <quorem+0xec>
 80069f4:	4629      	mov	r1, r5
 80069f6:	2000      	movs	r0, #0
 80069f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80069fc:	f8d1 c000 	ldr.w	ip, [r1]
 8006a00:	fa1f fe82 	uxth.w	lr, r2
 8006a04:	fa1f f38c 	uxth.w	r3, ip
 8006a08:	eba3 030e 	sub.w	r3, r3, lr
 8006a0c:	4403      	add	r3, r0
 8006a0e:	0c12      	lsrs	r2, r2, #16
 8006a10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a1e:	45c1      	cmp	r9, r8
 8006a20:	f841 3b04 	str.w	r3, [r1], #4
 8006a24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a28:	d2e6      	bcs.n	80069f8 <quorem+0xa4>
 8006a2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a32:	b922      	cbnz	r2, 8006a3e <quorem+0xea>
 8006a34:	3b04      	subs	r3, #4
 8006a36:	429d      	cmp	r5, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	d30b      	bcc.n	8006a54 <quorem+0x100>
 8006a3c:	613c      	str	r4, [r7, #16]
 8006a3e:	3601      	adds	r6, #1
 8006a40:	4630      	mov	r0, r6
 8006a42:	b003      	add	sp, #12
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	3b04      	subs	r3, #4
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d1cb      	bne.n	80069e8 <quorem+0x94>
 8006a50:	3c01      	subs	r4, #1
 8006a52:	e7c6      	b.n	80069e2 <quorem+0x8e>
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	3b04      	subs	r3, #4
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d1ef      	bne.n	8006a3c <quorem+0xe8>
 8006a5c:	3c01      	subs	r4, #1
 8006a5e:	e7ea      	b.n	8006a36 <quorem+0xe2>
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7ee      	b.n	8006a42 <quorem+0xee>
 8006a64:	0000      	movs	r0, r0
	...

08006a68 <_dtoa_r>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	69c7      	ldr	r7, [r0, #28]
 8006a6e:	b097      	sub	sp, #92	@ 0x5c
 8006a70:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006a74:	ec55 4b10 	vmov	r4, r5, d0
 8006a78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006a7a:	9107      	str	r1, [sp, #28]
 8006a7c:	4681      	mov	r9, r0
 8006a7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a80:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a82:	b97f      	cbnz	r7, 8006aa4 <_dtoa_r+0x3c>
 8006a84:	2010      	movs	r0, #16
 8006a86:	f000 fe09 	bl	800769c <malloc>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006a90:	b920      	cbnz	r0, 8006a9c <_dtoa_r+0x34>
 8006a92:	4ba9      	ldr	r3, [pc, #676]	@ (8006d38 <_dtoa_r+0x2d0>)
 8006a94:	21ef      	movs	r1, #239	@ 0xef
 8006a96:	48a9      	ldr	r0, [pc, #676]	@ (8006d3c <_dtoa_r+0x2d4>)
 8006a98:	f002 fdf2 	bl	8009680 <__assert_func>
 8006a9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006aa0:	6007      	str	r7, [r0, #0]
 8006aa2:	60c7      	str	r7, [r0, #12]
 8006aa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	b159      	cbz	r1, 8006ac4 <_dtoa_r+0x5c>
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	604a      	str	r2, [r1, #4]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4093      	lsls	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]
 8006ab6:	4648      	mov	r0, r9
 8006ab8:	f000 fee6 	bl	8007888 <_Bfree>
 8006abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	1e2b      	subs	r3, r5, #0
 8006ac6:	bfb9      	ittee	lt
 8006ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006acc:	9305      	strlt	r3, [sp, #20]
 8006ace:	2300      	movge	r3, #0
 8006ad0:	6033      	strge	r3, [r6, #0]
 8006ad2:	9f05      	ldr	r7, [sp, #20]
 8006ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8006d40 <_dtoa_r+0x2d8>)
 8006ad6:	bfbc      	itt	lt
 8006ad8:	2201      	movlt	r2, #1
 8006ada:	6032      	strlt	r2, [r6, #0]
 8006adc:	43bb      	bics	r3, r7
 8006ade:	d112      	bne.n	8006b06 <_dtoa_r+0x9e>
 8006ae0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006aec:	4323      	orrs	r3, r4
 8006aee:	f000 855a 	beq.w	80075a6 <_dtoa_r+0xb3e>
 8006af2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006af4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006d54 <_dtoa_r+0x2ec>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 855c 	beq.w	80075b6 <_dtoa_r+0xb4e>
 8006afe:	f10a 0303 	add.w	r3, sl, #3
 8006b02:	f000 bd56 	b.w	80075b2 <_dtoa_r+0xb4a>
 8006b06:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	ec51 0b17 	vmov	r0, r1, d7
 8006b10:	2300      	movs	r3, #0
 8006b12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006b16:	f7f9 ffe7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	b158      	cbz	r0, 8006b36 <_dtoa_r+0xce>
 8006b1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006b20:	2301      	movs	r3, #1
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b26:	b113      	cbz	r3, 8006b2e <_dtoa_r+0xc6>
 8006b28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006b2a:	4b86      	ldr	r3, [pc, #536]	@ (8006d44 <_dtoa_r+0x2dc>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006d58 <_dtoa_r+0x2f0>
 8006b32:	f000 bd40 	b.w	80075b6 <_dtoa_r+0xb4e>
 8006b36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006b3a:	aa14      	add	r2, sp, #80	@ 0x50
 8006b3c:	a915      	add	r1, sp, #84	@ 0x54
 8006b3e:	4648      	mov	r0, r9
 8006b40:	f001 fa3e 	bl	8007fc0 <__d2b>
 8006b44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b48:	9002      	str	r0, [sp, #8]
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	d078      	beq.n	8006c40 <_dtoa_r+0x1d8>
 8006b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b68:	4619      	mov	r1, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4b76      	ldr	r3, [pc, #472]	@ (8006d48 <_dtoa_r+0x2e0>)
 8006b6e:	f7f9 fb9b 	bl	80002a8 <__aeabi_dsub>
 8006b72:	a36b      	add	r3, pc, #428	@ (adr r3, 8006d20 <_dtoa_r+0x2b8>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f7f9 fd4e 	bl	8000618 <__aeabi_dmul>
 8006b7c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006d28 <_dtoa_r+0x2c0>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb93 	bl	80002ac <__adddf3>
 8006b86:	4604      	mov	r4, r0
 8006b88:	4630      	mov	r0, r6
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	f7f9 fcda 	bl	8000544 <__aeabi_i2d>
 8006b90:	a367      	add	r3, pc, #412	@ (adr r3, 8006d30 <_dtoa_r+0x2c8>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fd3f 	bl	8000618 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 fb83 	bl	80002ac <__adddf3>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	f7f9 ffe5 	bl	8000b78 <__aeabi_d2iz>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	f7f9 ffa0 	bl	8000afc <__aeabi_dcmplt>
 8006bbc:	b140      	cbz	r0, 8006bd0 <_dtoa_r+0x168>
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7f9 fcc0 	bl	8000544 <__aeabi_i2d>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f7f9 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bcc:	b900      	cbnz	r0, 8006bd0 <_dtoa_r+0x168>
 8006bce:	3f01      	subs	r7, #1
 8006bd0:	2f16      	cmp	r7, #22
 8006bd2:	d852      	bhi.n	8006c7a <_dtoa_r+0x212>
 8006bd4:	4b5d      	ldr	r3, [pc, #372]	@ (8006d4c <_dtoa_r+0x2e4>)
 8006bd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006be2:	f7f9 ff8b 	bl	8000afc <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d049      	beq.n	8006c7e <_dtoa_r+0x216>
 8006bea:	3f01      	subs	r7, #1
 8006bec:	2300      	movs	r3, #0
 8006bee:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bf2:	1b9b      	subs	r3, r3, r6
 8006bf4:	1e5a      	subs	r2, r3, #1
 8006bf6:	bf45      	ittet	mi
 8006bf8:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bfc:	9300      	strmi	r3, [sp, #0]
 8006bfe:	2300      	movpl	r3, #0
 8006c00:	2300      	movmi	r3, #0
 8006c02:	9206      	str	r2, [sp, #24]
 8006c04:	bf54      	ite	pl
 8006c06:	9300      	strpl	r3, [sp, #0]
 8006c08:	9306      	strmi	r3, [sp, #24]
 8006c0a:	2f00      	cmp	r7, #0
 8006c0c:	db39      	blt.n	8006c82 <_dtoa_r+0x21a>
 8006c0e:	9b06      	ldr	r3, [sp, #24]
 8006c10:	970d      	str	r7, [sp, #52]	@ 0x34
 8006c12:	443b      	add	r3, r7
 8006c14:	9306      	str	r3, [sp, #24]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d863      	bhi.n	8006ce8 <_dtoa_r+0x280>
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	bfc4      	itt	gt
 8006c24:	3b04      	subgt	r3, #4
 8006c26:	9307      	strgt	r3, [sp, #28]
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c2e:	bfcc      	ite	gt
 8006c30:	2400      	movgt	r4, #0
 8006c32:	2401      	movle	r4, #1
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d863      	bhi.n	8006d00 <_dtoa_r+0x298>
 8006c38:	e8df f003 	tbb	[pc, r3]
 8006c3c:	2b375452 	.word	0x2b375452
 8006c40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006c44:	441e      	add	r6, r3
 8006c46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	bfc1      	itttt	gt
 8006c4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c52:	409f      	lslgt	r7, r3
 8006c54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c58:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c5c:	bfd6      	itet	le
 8006c5e:	f1c3 0320 	rsble	r3, r3, #32
 8006c62:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c66:	fa04 f003 	lslle.w	r0, r4, r3
 8006c6a:	f7f9 fc5b 	bl	8000524 <__aeabi_ui2d>
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c74:	3e01      	subs	r6, #1
 8006c76:	9212      	str	r2, [sp, #72]	@ 0x48
 8006c78:	e776      	b.n	8006b68 <_dtoa_r+0x100>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e7b7      	b.n	8006bee <_dtoa_r+0x186>
 8006c7e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006c80:	e7b6      	b.n	8006bf0 <_dtoa_r+0x188>
 8006c82:	9b00      	ldr	r3, [sp, #0]
 8006c84:	1bdb      	subs	r3, r3, r7
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	427b      	negs	r3, r7
 8006c8a:	9308      	str	r3, [sp, #32]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006c90:	e7c3      	b.n	8006c1a <_dtoa_r+0x1b2>
 8006c92:	2301      	movs	r3, #1
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c98:	eb07 0b03 	add.w	fp, r7, r3
 8006c9c:	f10b 0301 	add.w	r3, fp, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	bfb8      	it	lt
 8006ca6:	2301      	movlt	r3, #1
 8006ca8:	e006      	b.n	8006cb8 <_dtoa_r+0x250>
 8006caa:	2301      	movs	r3, #1
 8006cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dd28      	ble.n	8006d06 <_dtoa_r+0x29e>
 8006cb4:	469b      	mov	fp, r3
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f102 0514 	add.w	r5, r2, #20
 8006cc4:	429d      	cmp	r5, r3
 8006cc6:	d926      	bls.n	8006d16 <_dtoa_r+0x2ae>
 8006cc8:	6041      	str	r1, [r0, #4]
 8006cca:	4648      	mov	r0, r9
 8006ccc:	f000 fd9c 	bl	8007808 <_Balloc>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d142      	bne.n	8006d5c <_dtoa_r+0x2f4>
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006d50 <_dtoa_r+0x2e8>)
 8006cd8:	4602      	mov	r2, r0
 8006cda:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cde:	e6da      	b.n	8006a96 <_dtoa_r+0x2e>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e7e3      	b.n	8006cac <_dtoa_r+0x244>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e7d5      	b.n	8006c94 <_dtoa_r+0x22c>
 8006ce8:	2401      	movs	r4, #1
 8006cea:	2300      	movs	r3, #0
 8006cec:	9307      	str	r3, [sp, #28]
 8006cee:	9409      	str	r4, [sp, #36]	@ 0x24
 8006cf0:	f04f 3bff 	mov.w	fp, #4294967295
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8cd b00c 	str.w	fp, [sp, #12]
 8006cfa:	2312      	movs	r3, #18
 8006cfc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006cfe:	e7db      	b.n	8006cb8 <_dtoa_r+0x250>
 8006d00:	2301      	movs	r3, #1
 8006d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d04:	e7f4      	b.n	8006cf0 <_dtoa_r+0x288>
 8006d06:	f04f 0b01 	mov.w	fp, #1
 8006d0a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006d0e:	465b      	mov	r3, fp
 8006d10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006d14:	e7d0      	b.n	8006cb8 <_dtoa_r+0x250>
 8006d16:	3101      	adds	r1, #1
 8006d18:	0052      	lsls	r2, r2, #1
 8006d1a:	e7d1      	b.n	8006cc0 <_dtoa_r+0x258>
 8006d1c:	f3af 8000 	nop.w
 8006d20:	636f4361 	.word	0x636f4361
 8006d24:	3fd287a7 	.word	0x3fd287a7
 8006d28:	8b60c8b3 	.word	0x8b60c8b3
 8006d2c:	3fc68a28 	.word	0x3fc68a28
 8006d30:	509f79fb 	.word	0x509f79fb
 8006d34:	3fd34413 	.word	0x3fd34413
 8006d38:	0800a006 	.word	0x0800a006
 8006d3c:	0800a01d 	.word	0x0800a01d
 8006d40:	7ff00000 	.word	0x7ff00000
 8006d44:	08009fd1 	.word	0x08009fd1
 8006d48:	3ff80000 	.word	0x3ff80000
 8006d4c:	0800a1d0 	.word	0x0800a1d0
 8006d50:	0800a075 	.word	0x0800a075
 8006d54:	0800a002 	.word	0x0800a002
 8006d58:	08009fd0 	.word	0x08009fd0
 8006d5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d60:	6018      	str	r0, [r3, #0]
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	2b0e      	cmp	r3, #14
 8006d66:	f200 80a1 	bhi.w	8006eac <_dtoa_r+0x444>
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	f000 809e 	beq.w	8006eac <_dtoa_r+0x444>
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	dd33      	ble.n	8006ddc <_dtoa_r+0x374>
 8006d74:	4b9c      	ldr	r3, [pc, #624]	@ (8006fe8 <_dtoa_r+0x580>)
 8006d76:	f007 020f 	and.w	r2, r7, #15
 8006d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d7e:	ed93 7b00 	vldr	d7, [r3]
 8006d82:	05f8      	lsls	r0, r7, #23
 8006d84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006d88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d8c:	d516      	bpl.n	8006dbc <_dtoa_r+0x354>
 8006d8e:	4b97      	ldr	r3, [pc, #604]	@ (8006fec <_dtoa_r+0x584>)
 8006d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d98:	f7f9 fd68 	bl	800086c <__aeabi_ddiv>
 8006d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006da0:	f004 040f 	and.w	r4, r4, #15
 8006da4:	2603      	movs	r6, #3
 8006da6:	4d91      	ldr	r5, [pc, #580]	@ (8006fec <_dtoa_r+0x584>)
 8006da8:	b954      	cbnz	r4, 8006dc0 <_dtoa_r+0x358>
 8006daa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db2:	f7f9 fd5b 	bl	800086c <__aeabi_ddiv>
 8006db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dba:	e028      	b.n	8006e0e <_dtoa_r+0x3a6>
 8006dbc:	2602      	movs	r6, #2
 8006dbe:	e7f2      	b.n	8006da6 <_dtoa_r+0x33e>
 8006dc0:	07e1      	lsls	r1, r4, #31
 8006dc2:	d508      	bpl.n	8006dd6 <_dtoa_r+0x36e>
 8006dc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dcc:	f7f9 fc24 	bl	8000618 <__aeabi_dmul>
 8006dd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	1064      	asrs	r4, r4, #1
 8006dd8:	3508      	adds	r5, #8
 8006dda:	e7e5      	b.n	8006da8 <_dtoa_r+0x340>
 8006ddc:	f000 80af 	beq.w	8006f3e <_dtoa_r+0x4d6>
 8006de0:	427c      	negs	r4, r7
 8006de2:	4b81      	ldr	r3, [pc, #516]	@ (8006fe8 <_dtoa_r+0x580>)
 8006de4:	4d81      	ldr	r5, [pc, #516]	@ (8006fec <_dtoa_r+0x584>)
 8006de6:	f004 020f 	and.w	r2, r4, #15
 8006dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006df6:	f7f9 fc0f 	bl	8000618 <__aeabi_dmul>
 8006dfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dfe:	1124      	asrs	r4, r4, #4
 8006e00:	2300      	movs	r3, #0
 8006e02:	2602      	movs	r6, #2
 8006e04:	2c00      	cmp	r4, #0
 8006e06:	f040 808f 	bne.w	8006f28 <_dtoa_r+0x4c0>
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1d3      	bne.n	8006db6 <_dtoa_r+0x34e>
 8006e0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8094 	beq.w	8006f42 <_dtoa_r+0x4da>
 8006e1a:	4b75      	ldr	r3, [pc, #468]	@ (8006ff0 <_dtoa_r+0x588>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fe6b 	bl	8000afc <__aeabi_dcmplt>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f000 808b 	beq.w	8006f42 <_dtoa_r+0x4da>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8087 	beq.w	8006f42 <_dtoa_r+0x4da>
 8006e34:	f1bb 0f00 	cmp.w	fp, #0
 8006e38:	dd34      	ble.n	8006ea4 <_dtoa_r+0x43c>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8006ff4 <_dtoa_r+0x58c>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4629      	mov	r1, r5
 8006e42:	f7f9 fbe9 	bl	8000618 <__aeabi_dmul>
 8006e46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e4a:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e4e:	3601      	adds	r6, #1
 8006e50:	465c      	mov	r4, fp
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7f9 fb76 	bl	8000544 <__aeabi_i2d>
 8006e58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e5c:	f7f9 fbdc 	bl	8000618 <__aeabi_dmul>
 8006e60:	4b65      	ldr	r3, [pc, #404]	@ (8006ff8 <_dtoa_r+0x590>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fa22 	bl	80002ac <__adddf3>
 8006e68:	4605      	mov	r5, r0
 8006e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	d16a      	bne.n	8006f48 <_dtoa_r+0x4e0>
 8006e72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e76:	4b61      	ldr	r3, [pc, #388]	@ (8006ffc <_dtoa_r+0x594>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f7f9 fa15 	bl	80002a8 <__aeabi_dsub>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e86:	462a      	mov	r2, r5
 8006e88:	4633      	mov	r3, r6
 8006e8a:	f7f9 fe55 	bl	8000b38 <__aeabi_dcmpgt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f040 8298 	bne.w	80073c4 <_dtoa_r+0x95c>
 8006e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e98:	462a      	mov	r2, r5
 8006e9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e9e:	f7f9 fe2d 	bl	8000afc <__aeabi_dcmplt>
 8006ea2:	bb38      	cbnz	r0, 8006ef4 <_dtoa_r+0x48c>
 8006ea4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006ea8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006eac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f2c0 8157 	blt.w	8007162 <_dtoa_r+0x6fa>
 8006eb4:	2f0e      	cmp	r7, #14
 8006eb6:	f300 8154 	bgt.w	8007162 <_dtoa_r+0x6fa>
 8006eba:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe8 <_dtoa_r+0x580>)
 8006ebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ec0:	ed93 7b00 	vldr	d7, [r3]
 8006ec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	ed8d 7b00 	vstr	d7, [sp]
 8006ecc:	f280 80e5 	bge.w	800709a <_dtoa_r+0x632>
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f300 80e1 	bgt.w	800709a <_dtoa_r+0x632>
 8006ed8:	d10c      	bne.n	8006ef4 <_dtoa_r+0x48c>
 8006eda:	4b48      	ldr	r3, [pc, #288]	@ (8006ffc <_dtoa_r+0x594>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	ec51 0b17 	vmov	r0, r1, d7
 8006ee2:	f7f9 fb99 	bl	8000618 <__aeabi_dmul>
 8006ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eea:	f7f9 fe1b 	bl	8000b24 <__aeabi_dcmpge>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f000 8266 	beq.w	80073c0 <_dtoa_r+0x958>
 8006ef4:	2400      	movs	r4, #0
 8006ef6:	4625      	mov	r5, r4
 8006ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006efa:	4656      	mov	r6, sl
 8006efc:	ea6f 0803 	mvn.w	r8, r3
 8006f00:	2700      	movs	r7, #0
 8006f02:	4621      	mov	r1, r4
 8006f04:	4648      	mov	r0, r9
 8006f06:	f000 fcbf 	bl	8007888 <_Bfree>
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	f000 80bd 	beq.w	800708a <_dtoa_r+0x622>
 8006f10:	b12f      	cbz	r7, 8006f1e <_dtoa_r+0x4b6>
 8006f12:	42af      	cmp	r7, r5
 8006f14:	d003      	beq.n	8006f1e <_dtoa_r+0x4b6>
 8006f16:	4639      	mov	r1, r7
 8006f18:	4648      	mov	r0, r9
 8006f1a:	f000 fcb5 	bl	8007888 <_Bfree>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4648      	mov	r0, r9
 8006f22:	f000 fcb1 	bl	8007888 <_Bfree>
 8006f26:	e0b0      	b.n	800708a <_dtoa_r+0x622>
 8006f28:	07e2      	lsls	r2, r4, #31
 8006f2a:	d505      	bpl.n	8006f38 <_dtoa_r+0x4d0>
 8006f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f30:	f7f9 fb72 	bl	8000618 <__aeabi_dmul>
 8006f34:	3601      	adds	r6, #1
 8006f36:	2301      	movs	r3, #1
 8006f38:	1064      	asrs	r4, r4, #1
 8006f3a:	3508      	adds	r5, #8
 8006f3c:	e762      	b.n	8006e04 <_dtoa_r+0x39c>
 8006f3e:	2602      	movs	r6, #2
 8006f40:	e765      	b.n	8006e0e <_dtoa_r+0x3a6>
 8006f42:	9c03      	ldr	r4, [sp, #12]
 8006f44:	46b8      	mov	r8, r7
 8006f46:	e784      	b.n	8006e52 <_dtoa_r+0x3ea>
 8006f48:	4b27      	ldr	r3, [pc, #156]	@ (8006fe8 <_dtoa_r+0x580>)
 8006f4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f54:	4454      	add	r4, sl
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d054      	beq.n	8007004 <_dtoa_r+0x59c>
 8006f5a:	4929      	ldr	r1, [pc, #164]	@ (8007000 <_dtoa_r+0x598>)
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	f7f9 fc85 	bl	800086c <__aeabi_ddiv>
 8006f62:	4633      	mov	r3, r6
 8006f64:	462a      	mov	r2, r5
 8006f66:	f7f9 f99f 	bl	80002a8 <__aeabi_dsub>
 8006f6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f6e:	4656      	mov	r6, sl
 8006f70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f74:	f7f9 fe00 	bl	8000b78 <__aeabi_d2iz>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	f7f9 fae3 	bl	8000544 <__aeabi_i2d>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f86:	f7f9 f98f 	bl	80002a8 <__aeabi_dsub>
 8006f8a:	3530      	adds	r5, #48	@ 0x30
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f94:	f806 5b01 	strb.w	r5, [r6], #1
 8006f98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f9c:	f7f9 fdae 	bl	8000afc <__aeabi_dcmplt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d172      	bne.n	800708a <_dtoa_r+0x622>
 8006fa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa8:	4911      	ldr	r1, [pc, #68]	@ (8006ff0 <_dtoa_r+0x588>)
 8006faa:	2000      	movs	r0, #0
 8006fac:	f7f9 f97c 	bl	80002a8 <__aeabi_dsub>
 8006fb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006fb4:	f7f9 fda2 	bl	8000afc <__aeabi_dcmplt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f040 80b4 	bne.w	8007126 <_dtoa_r+0x6be>
 8006fbe:	42a6      	cmp	r6, r4
 8006fc0:	f43f af70 	beq.w	8006ea4 <_dtoa_r+0x43c>
 8006fc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <_dtoa_r+0x58c>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 fb24 	bl	8000618 <__aeabi_dmul>
 8006fd0:	4b08      	ldr	r3, [pc, #32]	@ (8006ff4 <_dtoa_r+0x58c>)
 8006fd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fdc:	f7f9 fb1c 	bl	8000618 <__aeabi_dmul>
 8006fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fe4:	e7c4      	b.n	8006f70 <_dtoa_r+0x508>
 8006fe6:	bf00      	nop
 8006fe8:	0800a1d0 	.word	0x0800a1d0
 8006fec:	0800a1a8 	.word	0x0800a1a8
 8006ff0:	3ff00000 	.word	0x3ff00000
 8006ff4:	40240000 	.word	0x40240000
 8006ff8:	401c0000 	.word	0x401c0000
 8006ffc:	40140000 	.word	0x40140000
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	f7f9 fb06 	bl	8000618 <__aeabi_dmul>
 800700c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007010:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007012:	4656      	mov	r6, sl
 8007014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007018:	f7f9 fdae 	bl	8000b78 <__aeabi_d2iz>
 800701c:	4605      	mov	r5, r0
 800701e:	f7f9 fa91 	bl	8000544 <__aeabi_i2d>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800702a:	f7f9 f93d 	bl	80002a8 <__aeabi_dsub>
 800702e:	3530      	adds	r5, #48	@ 0x30
 8007030:	f806 5b01 	strb.w	r5, [r6], #1
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	42a6      	cmp	r6, r4
 800703a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	d124      	bne.n	800708e <_dtoa_r+0x626>
 8007044:	4baf      	ldr	r3, [pc, #700]	@ (8007304 <_dtoa_r+0x89c>)
 8007046:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800704a:	f7f9 f92f 	bl	80002ac <__adddf3>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007056:	f7f9 fd6f 	bl	8000b38 <__aeabi_dcmpgt>
 800705a:	2800      	cmp	r0, #0
 800705c:	d163      	bne.n	8007126 <_dtoa_r+0x6be>
 800705e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007062:	49a8      	ldr	r1, [pc, #672]	@ (8007304 <_dtoa_r+0x89c>)
 8007064:	2000      	movs	r0, #0
 8007066:	f7f9 f91f 	bl	80002a8 <__aeabi_dsub>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007072:	f7f9 fd43 	bl	8000afc <__aeabi_dcmplt>
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f af14 	beq.w	8006ea4 <_dtoa_r+0x43c>
 800707c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800707e:	1e73      	subs	r3, r6, #1
 8007080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007082:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007086:	2b30      	cmp	r3, #48	@ 0x30
 8007088:	d0f8      	beq.n	800707c <_dtoa_r+0x614>
 800708a:	4647      	mov	r7, r8
 800708c:	e03b      	b.n	8007106 <_dtoa_r+0x69e>
 800708e:	4b9e      	ldr	r3, [pc, #632]	@ (8007308 <_dtoa_r+0x8a0>)
 8007090:	f7f9 fac2 	bl	8000618 <__aeabi_dmul>
 8007094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007098:	e7bc      	b.n	8007014 <_dtoa_r+0x5ac>
 800709a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800709e:	4656      	mov	r6, sl
 80070a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 fbe0 	bl	800086c <__aeabi_ddiv>
 80070ac:	f7f9 fd64 	bl	8000b78 <__aeabi_d2iz>
 80070b0:	4680      	mov	r8, r0
 80070b2:	f7f9 fa47 	bl	8000544 <__aeabi_i2d>
 80070b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ba:	f7f9 faad 	bl	8000618 <__aeabi_dmul>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4620      	mov	r0, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070ca:	f7f9 f8ed 	bl	80002a8 <__aeabi_dsub>
 80070ce:	f806 4b01 	strb.w	r4, [r6], #1
 80070d2:	9d03      	ldr	r5, [sp, #12]
 80070d4:	eba6 040a 	sub.w	r4, r6, sl
 80070d8:	42a5      	cmp	r5, r4
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	d133      	bne.n	8007148 <_dtoa_r+0x6e0>
 80070e0:	f7f9 f8e4 	bl	80002ac <__adddf3>
 80070e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e8:	4604      	mov	r4, r0
 80070ea:	460d      	mov	r5, r1
 80070ec:	f7f9 fd24 	bl	8000b38 <__aeabi_dcmpgt>
 80070f0:	b9c0      	cbnz	r0, 8007124 <_dtoa_r+0x6bc>
 80070f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7f9 fcf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80070fe:	b110      	cbz	r0, 8007106 <_dtoa_r+0x69e>
 8007100:	f018 0f01 	tst.w	r8, #1
 8007104:	d10e      	bne.n	8007124 <_dtoa_r+0x6bc>
 8007106:	9902      	ldr	r1, [sp, #8]
 8007108:	4648      	mov	r0, r9
 800710a:	f000 fbbd 	bl	8007888 <_Bfree>
 800710e:	2300      	movs	r3, #0
 8007110:	7033      	strb	r3, [r6, #0]
 8007112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007114:	3701      	adds	r7, #1
 8007116:	601f      	str	r7, [r3, #0]
 8007118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 824b 	beq.w	80075b6 <_dtoa_r+0xb4e>
 8007120:	601e      	str	r6, [r3, #0]
 8007122:	e248      	b.n	80075b6 <_dtoa_r+0xb4e>
 8007124:	46b8      	mov	r8, r7
 8007126:	4633      	mov	r3, r6
 8007128:	461e      	mov	r6, r3
 800712a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800712e:	2a39      	cmp	r2, #57	@ 0x39
 8007130:	d106      	bne.n	8007140 <_dtoa_r+0x6d8>
 8007132:	459a      	cmp	sl, r3
 8007134:	d1f8      	bne.n	8007128 <_dtoa_r+0x6c0>
 8007136:	2230      	movs	r2, #48	@ 0x30
 8007138:	f108 0801 	add.w	r8, r8, #1
 800713c:	f88a 2000 	strb.w	r2, [sl]
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	3201      	adds	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e7a0      	b.n	800708a <_dtoa_r+0x622>
 8007148:	4b6f      	ldr	r3, [pc, #444]	@ (8007308 <_dtoa_r+0x8a0>)
 800714a:	2200      	movs	r2, #0
 800714c:	f7f9 fa64 	bl	8000618 <__aeabi_dmul>
 8007150:	2200      	movs	r2, #0
 8007152:	2300      	movs	r3, #0
 8007154:	4604      	mov	r4, r0
 8007156:	460d      	mov	r5, r1
 8007158:	f7f9 fcc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800715c:	2800      	cmp	r0, #0
 800715e:	d09f      	beq.n	80070a0 <_dtoa_r+0x638>
 8007160:	e7d1      	b.n	8007106 <_dtoa_r+0x69e>
 8007162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007164:	2a00      	cmp	r2, #0
 8007166:	f000 80ea 	beq.w	800733e <_dtoa_r+0x8d6>
 800716a:	9a07      	ldr	r2, [sp, #28]
 800716c:	2a01      	cmp	r2, #1
 800716e:	f300 80cd 	bgt.w	800730c <_dtoa_r+0x8a4>
 8007172:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007174:	2a00      	cmp	r2, #0
 8007176:	f000 80c1 	beq.w	80072fc <_dtoa_r+0x894>
 800717a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800717e:	9c08      	ldr	r4, [sp, #32]
 8007180:	9e00      	ldr	r6, [sp, #0]
 8007182:	9a00      	ldr	r2, [sp, #0]
 8007184:	441a      	add	r2, r3
 8007186:	9200      	str	r2, [sp, #0]
 8007188:	9a06      	ldr	r2, [sp, #24]
 800718a:	2101      	movs	r1, #1
 800718c:	441a      	add	r2, r3
 800718e:	4648      	mov	r0, r9
 8007190:	9206      	str	r2, [sp, #24]
 8007192:	f000 fc77 	bl	8007a84 <__i2b>
 8007196:	4605      	mov	r5, r0
 8007198:	b166      	cbz	r6, 80071b4 <_dtoa_r+0x74c>
 800719a:	9b06      	ldr	r3, [sp, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dd09      	ble.n	80071b4 <_dtoa_r+0x74c>
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	9a00      	ldr	r2, [sp, #0]
 80071a4:	bfa8      	it	ge
 80071a6:	4633      	movge	r3, r6
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	9200      	str	r2, [sp, #0]
 80071ac:	9a06      	ldr	r2, [sp, #24]
 80071ae:	1af6      	subs	r6, r6, r3
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	9306      	str	r3, [sp, #24]
 80071b4:	9b08      	ldr	r3, [sp, #32]
 80071b6:	b30b      	cbz	r3, 80071fc <_dtoa_r+0x794>
 80071b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80c6 	beq.w	800734c <_dtoa_r+0x8e4>
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	f000 80c0 	beq.w	8007346 <_dtoa_r+0x8de>
 80071c6:	4629      	mov	r1, r5
 80071c8:	4622      	mov	r2, r4
 80071ca:	4648      	mov	r0, r9
 80071cc:	f000 fd12 	bl	8007bf4 <__pow5mult>
 80071d0:	9a02      	ldr	r2, [sp, #8]
 80071d2:	4601      	mov	r1, r0
 80071d4:	4605      	mov	r5, r0
 80071d6:	4648      	mov	r0, r9
 80071d8:	f000 fc6a 	bl	8007ab0 <__multiply>
 80071dc:	9902      	ldr	r1, [sp, #8]
 80071de:	4680      	mov	r8, r0
 80071e0:	4648      	mov	r0, r9
 80071e2:	f000 fb51 	bl	8007888 <_Bfree>
 80071e6:	9b08      	ldr	r3, [sp, #32]
 80071e8:	1b1b      	subs	r3, r3, r4
 80071ea:	9308      	str	r3, [sp, #32]
 80071ec:	f000 80b1 	beq.w	8007352 <_dtoa_r+0x8ea>
 80071f0:	9a08      	ldr	r2, [sp, #32]
 80071f2:	4641      	mov	r1, r8
 80071f4:	4648      	mov	r0, r9
 80071f6:	f000 fcfd 	bl	8007bf4 <__pow5mult>
 80071fa:	9002      	str	r0, [sp, #8]
 80071fc:	2101      	movs	r1, #1
 80071fe:	4648      	mov	r0, r9
 8007200:	f000 fc40 	bl	8007a84 <__i2b>
 8007204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007206:	4604      	mov	r4, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 81d8 	beq.w	80075be <_dtoa_r+0xb56>
 800720e:	461a      	mov	r2, r3
 8007210:	4601      	mov	r1, r0
 8007212:	4648      	mov	r0, r9
 8007214:	f000 fcee 	bl	8007bf4 <__pow5mult>
 8007218:	9b07      	ldr	r3, [sp, #28]
 800721a:	2b01      	cmp	r3, #1
 800721c:	4604      	mov	r4, r0
 800721e:	f300 809f 	bgt.w	8007360 <_dtoa_r+0x8f8>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 8097 	bne.w	8007358 <_dtoa_r+0x8f0>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 8093 	bne.w	800735c <_dtoa_r+0x8f4>
 8007236:	9b05      	ldr	r3, [sp, #20]
 8007238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800723c:	0d1b      	lsrs	r3, r3, #20
 800723e:	051b      	lsls	r3, r3, #20
 8007240:	b133      	cbz	r3, 8007250 <_dtoa_r+0x7e8>
 8007242:	9b00      	ldr	r3, [sp, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	9b06      	ldr	r3, [sp, #24]
 800724a:	3301      	adds	r3, #1
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	2301      	movs	r3, #1
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 81b8 	beq.w	80075ca <_dtoa_r+0xb62>
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007260:	6918      	ldr	r0, [r3, #16]
 8007262:	f000 fbc3 	bl	80079ec <__hi0bits>
 8007266:	f1c0 0020 	rsb	r0, r0, #32
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	4418      	add	r0, r3
 800726e:	f010 001f 	ands.w	r0, r0, #31
 8007272:	f000 8082 	beq.w	800737a <_dtoa_r+0x912>
 8007276:	f1c0 0320 	rsb	r3, r0, #32
 800727a:	2b04      	cmp	r3, #4
 800727c:	dd73      	ble.n	8007366 <_dtoa_r+0x8fe>
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	f1c0 001c 	rsb	r0, r0, #28
 8007284:	4403      	add	r3, r0
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	9b06      	ldr	r3, [sp, #24]
 800728a:	4403      	add	r3, r0
 800728c:	4406      	add	r6, r0
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd05      	ble.n	80072a2 <_dtoa_r+0x83a>
 8007296:	9902      	ldr	r1, [sp, #8]
 8007298:	461a      	mov	r2, r3
 800729a:	4648      	mov	r0, r9
 800729c:	f000 fd04 	bl	8007ca8 <__lshift>
 80072a0:	9002      	str	r0, [sp, #8]
 80072a2:	9b06      	ldr	r3, [sp, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd05      	ble.n	80072b4 <_dtoa_r+0x84c>
 80072a8:	4621      	mov	r1, r4
 80072aa:	461a      	mov	r2, r3
 80072ac:	4648      	mov	r0, r9
 80072ae:	f000 fcfb 	bl	8007ca8 <__lshift>
 80072b2:	4604      	mov	r4, r0
 80072b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d061      	beq.n	800737e <_dtoa_r+0x916>
 80072ba:	9802      	ldr	r0, [sp, #8]
 80072bc:	4621      	mov	r1, r4
 80072be:	f000 fd5f 	bl	8007d80 <__mcmp>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	da5b      	bge.n	800737e <_dtoa_r+0x916>
 80072c6:	2300      	movs	r3, #0
 80072c8:	9902      	ldr	r1, [sp, #8]
 80072ca:	220a      	movs	r2, #10
 80072cc:	4648      	mov	r0, r9
 80072ce:	f000 fafd 	bl	80078cc <__multadd>
 80072d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d4:	9002      	str	r0, [sp, #8]
 80072d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8177 	beq.w	80075ce <_dtoa_r+0xb66>
 80072e0:	4629      	mov	r1, r5
 80072e2:	2300      	movs	r3, #0
 80072e4:	220a      	movs	r2, #10
 80072e6:	4648      	mov	r0, r9
 80072e8:	f000 faf0 	bl	80078cc <__multadd>
 80072ec:	f1bb 0f00 	cmp.w	fp, #0
 80072f0:	4605      	mov	r5, r0
 80072f2:	dc6f      	bgt.n	80073d4 <_dtoa_r+0x96c>
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	dc49      	bgt.n	800738e <_dtoa_r+0x926>
 80072fa:	e06b      	b.n	80073d4 <_dtoa_r+0x96c>
 80072fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007302:	e73c      	b.n	800717e <_dtoa_r+0x716>
 8007304:	3fe00000 	.word	0x3fe00000
 8007308:	40240000 	.word	0x40240000
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	1e5c      	subs	r4, r3, #1
 8007310:	9b08      	ldr	r3, [sp, #32]
 8007312:	42a3      	cmp	r3, r4
 8007314:	db09      	blt.n	800732a <_dtoa_r+0x8c2>
 8007316:	1b1c      	subs	r4, r3, r4
 8007318:	9b03      	ldr	r3, [sp, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f6bf af30 	bge.w	8007180 <_dtoa_r+0x718>
 8007320:	9b00      	ldr	r3, [sp, #0]
 8007322:	9a03      	ldr	r2, [sp, #12]
 8007324:	1a9e      	subs	r6, r3, r2
 8007326:	2300      	movs	r3, #0
 8007328:	e72b      	b.n	8007182 <_dtoa_r+0x71a>
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800732e:	9408      	str	r4, [sp, #32]
 8007330:	1ae3      	subs	r3, r4, r3
 8007332:	441a      	add	r2, r3
 8007334:	9e00      	ldr	r6, [sp, #0]
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	920d      	str	r2, [sp, #52]	@ 0x34
 800733a:	2400      	movs	r4, #0
 800733c:	e721      	b.n	8007182 <_dtoa_r+0x71a>
 800733e:	9c08      	ldr	r4, [sp, #32]
 8007340:	9e00      	ldr	r6, [sp, #0]
 8007342:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007344:	e728      	b.n	8007198 <_dtoa_r+0x730>
 8007346:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800734a:	e751      	b.n	80071f0 <_dtoa_r+0x788>
 800734c:	9a08      	ldr	r2, [sp, #32]
 800734e:	9902      	ldr	r1, [sp, #8]
 8007350:	e750      	b.n	80071f4 <_dtoa_r+0x78c>
 8007352:	f8cd 8008 	str.w	r8, [sp, #8]
 8007356:	e751      	b.n	80071fc <_dtoa_r+0x794>
 8007358:	2300      	movs	r3, #0
 800735a:	e779      	b.n	8007250 <_dtoa_r+0x7e8>
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	e777      	b.n	8007250 <_dtoa_r+0x7e8>
 8007360:	2300      	movs	r3, #0
 8007362:	9308      	str	r3, [sp, #32]
 8007364:	e779      	b.n	800725a <_dtoa_r+0x7f2>
 8007366:	d093      	beq.n	8007290 <_dtoa_r+0x828>
 8007368:	9a00      	ldr	r2, [sp, #0]
 800736a:	331c      	adds	r3, #28
 800736c:	441a      	add	r2, r3
 800736e:	9200      	str	r2, [sp, #0]
 8007370:	9a06      	ldr	r2, [sp, #24]
 8007372:	441a      	add	r2, r3
 8007374:	441e      	add	r6, r3
 8007376:	9206      	str	r2, [sp, #24]
 8007378:	e78a      	b.n	8007290 <_dtoa_r+0x828>
 800737a:	4603      	mov	r3, r0
 800737c:	e7f4      	b.n	8007368 <_dtoa_r+0x900>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	46b8      	mov	r8, r7
 8007384:	dc20      	bgt.n	80073c8 <_dtoa_r+0x960>
 8007386:	469b      	mov	fp, r3
 8007388:	9b07      	ldr	r3, [sp, #28]
 800738a:	2b02      	cmp	r3, #2
 800738c:	dd1e      	ble.n	80073cc <_dtoa_r+0x964>
 800738e:	f1bb 0f00 	cmp.w	fp, #0
 8007392:	f47f adb1 	bne.w	8006ef8 <_dtoa_r+0x490>
 8007396:	4621      	mov	r1, r4
 8007398:	465b      	mov	r3, fp
 800739a:	2205      	movs	r2, #5
 800739c:	4648      	mov	r0, r9
 800739e:	f000 fa95 	bl	80078cc <__multadd>
 80073a2:	4601      	mov	r1, r0
 80073a4:	4604      	mov	r4, r0
 80073a6:	9802      	ldr	r0, [sp, #8]
 80073a8:	f000 fcea 	bl	8007d80 <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f77f ada3 	ble.w	8006ef8 <_dtoa_r+0x490>
 80073b2:	4656      	mov	r6, sl
 80073b4:	2331      	movs	r3, #49	@ 0x31
 80073b6:	f806 3b01 	strb.w	r3, [r6], #1
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	e59f      	b.n	8006f00 <_dtoa_r+0x498>
 80073c0:	9c03      	ldr	r4, [sp, #12]
 80073c2:	46b8      	mov	r8, r7
 80073c4:	4625      	mov	r5, r4
 80073c6:	e7f4      	b.n	80073b2 <_dtoa_r+0x94a>
 80073c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8101 	beq.w	80075d6 <_dtoa_r+0xb6e>
 80073d4:	2e00      	cmp	r6, #0
 80073d6:	dd05      	ble.n	80073e4 <_dtoa_r+0x97c>
 80073d8:	4629      	mov	r1, r5
 80073da:	4632      	mov	r2, r6
 80073dc:	4648      	mov	r0, r9
 80073de:	f000 fc63 	bl	8007ca8 <__lshift>
 80073e2:	4605      	mov	r5, r0
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d05c      	beq.n	80074a4 <_dtoa_r+0xa3c>
 80073ea:	6869      	ldr	r1, [r5, #4]
 80073ec:	4648      	mov	r0, r9
 80073ee:	f000 fa0b 	bl	8007808 <_Balloc>
 80073f2:	4606      	mov	r6, r0
 80073f4:	b928      	cbnz	r0, 8007402 <_dtoa_r+0x99a>
 80073f6:	4b82      	ldr	r3, [pc, #520]	@ (8007600 <_dtoa_r+0xb98>)
 80073f8:	4602      	mov	r2, r0
 80073fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073fe:	f7ff bb4a 	b.w	8006a96 <_dtoa_r+0x2e>
 8007402:	692a      	ldr	r2, [r5, #16]
 8007404:	3202      	adds	r2, #2
 8007406:	0092      	lsls	r2, r2, #2
 8007408:	f105 010c 	add.w	r1, r5, #12
 800740c:	300c      	adds	r0, #12
 800740e:	f7ff fa8c 	bl	800692a <memcpy>
 8007412:	2201      	movs	r2, #1
 8007414:	4631      	mov	r1, r6
 8007416:	4648      	mov	r0, r9
 8007418:	f000 fc46 	bl	8007ca8 <__lshift>
 800741c:	f10a 0301 	add.w	r3, sl, #1
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	eb0a 030b 	add.w	r3, sl, fp
 8007426:	9308      	str	r3, [sp, #32]
 8007428:	9b04      	ldr	r3, [sp, #16]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	462f      	mov	r7, r5
 8007430:	9306      	str	r3, [sp, #24]
 8007432:	4605      	mov	r5, r0
 8007434:	9b00      	ldr	r3, [sp, #0]
 8007436:	9802      	ldr	r0, [sp, #8]
 8007438:	4621      	mov	r1, r4
 800743a:	f103 3bff 	add.w	fp, r3, #4294967295
 800743e:	f7ff fa89 	bl	8006954 <quorem>
 8007442:	4603      	mov	r3, r0
 8007444:	3330      	adds	r3, #48	@ 0x30
 8007446:	9003      	str	r0, [sp, #12]
 8007448:	4639      	mov	r1, r7
 800744a:	9802      	ldr	r0, [sp, #8]
 800744c:	9309      	str	r3, [sp, #36]	@ 0x24
 800744e:	f000 fc97 	bl	8007d80 <__mcmp>
 8007452:	462a      	mov	r2, r5
 8007454:	9004      	str	r0, [sp, #16]
 8007456:	4621      	mov	r1, r4
 8007458:	4648      	mov	r0, r9
 800745a:	f000 fcad 	bl	8007db8 <__mdiff>
 800745e:	68c2      	ldr	r2, [r0, #12]
 8007460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007462:	4606      	mov	r6, r0
 8007464:	bb02      	cbnz	r2, 80074a8 <_dtoa_r+0xa40>
 8007466:	4601      	mov	r1, r0
 8007468:	9802      	ldr	r0, [sp, #8]
 800746a:	f000 fc89 	bl	8007d80 <__mcmp>
 800746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007470:	4602      	mov	r2, r0
 8007472:	4631      	mov	r1, r6
 8007474:	4648      	mov	r0, r9
 8007476:	920c      	str	r2, [sp, #48]	@ 0x30
 8007478:	9309      	str	r3, [sp, #36]	@ 0x24
 800747a:	f000 fa05 	bl	8007888 <_Bfree>
 800747e:	9b07      	ldr	r3, [sp, #28]
 8007480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007482:	9e00      	ldr	r6, [sp, #0]
 8007484:	ea42 0103 	orr.w	r1, r2, r3
 8007488:	9b06      	ldr	r3, [sp, #24]
 800748a:	4319      	orrs	r1, r3
 800748c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748e:	d10d      	bne.n	80074ac <_dtoa_r+0xa44>
 8007490:	2b39      	cmp	r3, #57	@ 0x39
 8007492:	d027      	beq.n	80074e4 <_dtoa_r+0xa7c>
 8007494:	9a04      	ldr	r2, [sp, #16]
 8007496:	2a00      	cmp	r2, #0
 8007498:	dd01      	ble.n	800749e <_dtoa_r+0xa36>
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	3331      	adds	r3, #49	@ 0x31
 800749e:	f88b 3000 	strb.w	r3, [fp]
 80074a2:	e52e      	b.n	8006f02 <_dtoa_r+0x49a>
 80074a4:	4628      	mov	r0, r5
 80074a6:	e7b9      	b.n	800741c <_dtoa_r+0x9b4>
 80074a8:	2201      	movs	r2, #1
 80074aa:	e7e2      	b.n	8007472 <_dtoa_r+0xa0a>
 80074ac:	9904      	ldr	r1, [sp, #16]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	db04      	blt.n	80074bc <_dtoa_r+0xa54>
 80074b2:	9807      	ldr	r0, [sp, #28]
 80074b4:	4301      	orrs	r1, r0
 80074b6:	9806      	ldr	r0, [sp, #24]
 80074b8:	4301      	orrs	r1, r0
 80074ba:	d120      	bne.n	80074fe <_dtoa_r+0xa96>
 80074bc:	2a00      	cmp	r2, #0
 80074be:	ddee      	ble.n	800749e <_dtoa_r+0xa36>
 80074c0:	9902      	ldr	r1, [sp, #8]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2201      	movs	r2, #1
 80074c6:	4648      	mov	r0, r9
 80074c8:	f000 fbee 	bl	8007ca8 <__lshift>
 80074cc:	4621      	mov	r1, r4
 80074ce:	9002      	str	r0, [sp, #8]
 80074d0:	f000 fc56 	bl	8007d80 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	9b00      	ldr	r3, [sp, #0]
 80074d8:	dc02      	bgt.n	80074e0 <_dtoa_r+0xa78>
 80074da:	d1e0      	bne.n	800749e <_dtoa_r+0xa36>
 80074dc:	07da      	lsls	r2, r3, #31
 80074de:	d5de      	bpl.n	800749e <_dtoa_r+0xa36>
 80074e0:	2b39      	cmp	r3, #57	@ 0x39
 80074e2:	d1da      	bne.n	800749a <_dtoa_r+0xa32>
 80074e4:	2339      	movs	r3, #57	@ 0x39
 80074e6:	f88b 3000 	strb.w	r3, [fp]
 80074ea:	4633      	mov	r3, r6
 80074ec:	461e      	mov	r6, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074f4:	2a39      	cmp	r2, #57	@ 0x39
 80074f6:	d04e      	beq.n	8007596 <_dtoa_r+0xb2e>
 80074f8:	3201      	adds	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e501      	b.n	8006f02 <_dtoa_r+0x49a>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	dd03      	ble.n	800750a <_dtoa_r+0xaa2>
 8007502:	2b39      	cmp	r3, #57	@ 0x39
 8007504:	d0ee      	beq.n	80074e4 <_dtoa_r+0xa7c>
 8007506:	3301      	adds	r3, #1
 8007508:	e7c9      	b.n	800749e <_dtoa_r+0xa36>
 800750a:	9a00      	ldr	r2, [sp, #0]
 800750c:	9908      	ldr	r1, [sp, #32]
 800750e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007512:	428a      	cmp	r2, r1
 8007514:	d028      	beq.n	8007568 <_dtoa_r+0xb00>
 8007516:	9902      	ldr	r1, [sp, #8]
 8007518:	2300      	movs	r3, #0
 800751a:	220a      	movs	r2, #10
 800751c:	4648      	mov	r0, r9
 800751e:	f000 f9d5 	bl	80078cc <__multadd>
 8007522:	42af      	cmp	r7, r5
 8007524:	9002      	str	r0, [sp, #8]
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	f04f 020a 	mov.w	r2, #10
 800752e:	4639      	mov	r1, r7
 8007530:	4648      	mov	r0, r9
 8007532:	d107      	bne.n	8007544 <_dtoa_r+0xadc>
 8007534:	f000 f9ca 	bl	80078cc <__multadd>
 8007538:	4607      	mov	r7, r0
 800753a:	4605      	mov	r5, r0
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	e777      	b.n	8007434 <_dtoa_r+0x9cc>
 8007544:	f000 f9c2 	bl	80078cc <__multadd>
 8007548:	4629      	mov	r1, r5
 800754a:	4607      	mov	r7, r0
 800754c:	2300      	movs	r3, #0
 800754e:	220a      	movs	r2, #10
 8007550:	4648      	mov	r0, r9
 8007552:	f000 f9bb 	bl	80078cc <__multadd>
 8007556:	4605      	mov	r5, r0
 8007558:	e7f0      	b.n	800753c <_dtoa_r+0xad4>
 800755a:	f1bb 0f00 	cmp.w	fp, #0
 800755e:	bfcc      	ite	gt
 8007560:	465e      	movgt	r6, fp
 8007562:	2601      	movle	r6, #1
 8007564:	4456      	add	r6, sl
 8007566:	2700      	movs	r7, #0
 8007568:	9902      	ldr	r1, [sp, #8]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	2201      	movs	r2, #1
 800756e:	4648      	mov	r0, r9
 8007570:	f000 fb9a 	bl	8007ca8 <__lshift>
 8007574:	4621      	mov	r1, r4
 8007576:	9002      	str	r0, [sp, #8]
 8007578:	f000 fc02 	bl	8007d80 <__mcmp>
 800757c:	2800      	cmp	r0, #0
 800757e:	dcb4      	bgt.n	80074ea <_dtoa_r+0xa82>
 8007580:	d102      	bne.n	8007588 <_dtoa_r+0xb20>
 8007582:	9b00      	ldr	r3, [sp, #0]
 8007584:	07db      	lsls	r3, r3, #31
 8007586:	d4b0      	bmi.n	80074ea <_dtoa_r+0xa82>
 8007588:	4633      	mov	r3, r6
 800758a:	461e      	mov	r6, r3
 800758c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007590:	2a30      	cmp	r2, #48	@ 0x30
 8007592:	d0fa      	beq.n	800758a <_dtoa_r+0xb22>
 8007594:	e4b5      	b.n	8006f02 <_dtoa_r+0x49a>
 8007596:	459a      	cmp	sl, r3
 8007598:	d1a8      	bne.n	80074ec <_dtoa_r+0xa84>
 800759a:	2331      	movs	r3, #49	@ 0x31
 800759c:	f108 0801 	add.w	r8, r8, #1
 80075a0:	f88a 3000 	strb.w	r3, [sl]
 80075a4:	e4ad      	b.n	8006f02 <_dtoa_r+0x49a>
 80075a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007604 <_dtoa_r+0xb9c>
 80075ac:	b11b      	cbz	r3, 80075b6 <_dtoa_r+0xb4e>
 80075ae:	f10a 0308 	add.w	r3, sl, #8
 80075b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4650      	mov	r0, sl
 80075b8:	b017      	add	sp, #92	@ 0x5c
 80075ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075be:	9b07      	ldr	r3, [sp, #28]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f77f ae2e 	ble.w	8007222 <_dtoa_r+0x7ba>
 80075c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075c8:	9308      	str	r3, [sp, #32]
 80075ca:	2001      	movs	r0, #1
 80075cc:	e64d      	b.n	800726a <_dtoa_r+0x802>
 80075ce:	f1bb 0f00 	cmp.w	fp, #0
 80075d2:	f77f aed9 	ble.w	8007388 <_dtoa_r+0x920>
 80075d6:	4656      	mov	r6, sl
 80075d8:	9802      	ldr	r0, [sp, #8]
 80075da:	4621      	mov	r1, r4
 80075dc:	f7ff f9ba 	bl	8006954 <quorem>
 80075e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80075e4:	f806 3b01 	strb.w	r3, [r6], #1
 80075e8:	eba6 020a 	sub.w	r2, r6, sl
 80075ec:	4593      	cmp	fp, r2
 80075ee:	ddb4      	ble.n	800755a <_dtoa_r+0xaf2>
 80075f0:	9902      	ldr	r1, [sp, #8]
 80075f2:	2300      	movs	r3, #0
 80075f4:	220a      	movs	r2, #10
 80075f6:	4648      	mov	r0, r9
 80075f8:	f000 f968 	bl	80078cc <__multadd>
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	e7eb      	b.n	80075d8 <_dtoa_r+0xb70>
 8007600:	0800a075 	.word	0x0800a075
 8007604:	08009ff9 	.word	0x08009ff9

08007608 <_free_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4605      	mov	r5, r0
 800760c:	2900      	cmp	r1, #0
 800760e:	d041      	beq.n	8007694 <_free_r+0x8c>
 8007610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007614:	1f0c      	subs	r4, r1, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfb8      	it	lt
 800761a:	18e4      	addlt	r4, r4, r3
 800761c:	f000 f8e8 	bl	80077f0 <__malloc_lock>
 8007620:	4a1d      	ldr	r2, [pc, #116]	@ (8007698 <_free_r+0x90>)
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	b933      	cbnz	r3, 8007634 <_free_r+0x2c>
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	6014      	str	r4, [r2, #0]
 800762a:	4628      	mov	r0, r5
 800762c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007630:	f000 b8e4 	b.w	80077fc <__malloc_unlock>
 8007634:	42a3      	cmp	r3, r4
 8007636:	d908      	bls.n	800764a <_free_r+0x42>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	1821      	adds	r1, r4, r0
 800763c:	428b      	cmp	r3, r1
 800763e:	bf01      	itttt	eq
 8007640:	6819      	ldreq	r1, [r3, #0]
 8007642:	685b      	ldreq	r3, [r3, #4]
 8007644:	1809      	addeq	r1, r1, r0
 8007646:	6021      	streq	r1, [r4, #0]
 8007648:	e7ed      	b.n	8007626 <_free_r+0x1e>
 800764a:	461a      	mov	r2, r3
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b10b      	cbz	r3, 8007654 <_free_r+0x4c>
 8007650:	42a3      	cmp	r3, r4
 8007652:	d9fa      	bls.n	800764a <_free_r+0x42>
 8007654:	6811      	ldr	r1, [r2, #0]
 8007656:	1850      	adds	r0, r2, r1
 8007658:	42a0      	cmp	r0, r4
 800765a:	d10b      	bne.n	8007674 <_free_r+0x6c>
 800765c:	6820      	ldr	r0, [r4, #0]
 800765e:	4401      	add	r1, r0
 8007660:	1850      	adds	r0, r2, r1
 8007662:	4283      	cmp	r3, r0
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	d1e0      	bne.n	800762a <_free_r+0x22>
 8007668:	6818      	ldr	r0, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6053      	str	r3, [r2, #4]
 800766e:	4408      	add	r0, r1
 8007670:	6010      	str	r0, [r2, #0]
 8007672:	e7da      	b.n	800762a <_free_r+0x22>
 8007674:	d902      	bls.n	800767c <_free_r+0x74>
 8007676:	230c      	movs	r3, #12
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	e7d6      	b.n	800762a <_free_r+0x22>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	1821      	adds	r1, r4, r0
 8007680:	428b      	cmp	r3, r1
 8007682:	bf04      	itt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	bf04      	itt	eq
 800768c:	1809      	addeq	r1, r1, r0
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	6054      	str	r4, [r2, #4]
 8007692:	e7ca      	b.n	800762a <_free_r+0x22>
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	200043dc 	.word	0x200043dc

0800769c <malloc>:
 800769c:	4b02      	ldr	r3, [pc, #8]	@ (80076a8 <malloc+0xc>)
 800769e:	4601      	mov	r1, r0
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	f000 b825 	b.w	80076f0 <_malloc_r>
 80076a6:	bf00      	nop
 80076a8:	2000001c 	.word	0x2000001c

080076ac <sbrk_aligned>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4e0f      	ldr	r6, [pc, #60]	@ (80076ec <sbrk_aligned+0x40>)
 80076b0:	460c      	mov	r4, r1
 80076b2:	6831      	ldr	r1, [r6, #0]
 80076b4:	4605      	mov	r5, r0
 80076b6:	b911      	cbnz	r1, 80076be <sbrk_aligned+0x12>
 80076b8:	f001 ffca 	bl	8009650 <_sbrk_r>
 80076bc:	6030      	str	r0, [r6, #0]
 80076be:	4621      	mov	r1, r4
 80076c0:	4628      	mov	r0, r5
 80076c2:	f001 ffc5 	bl	8009650 <_sbrk_r>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d103      	bne.n	80076d2 <sbrk_aligned+0x26>
 80076ca:	f04f 34ff 	mov.w	r4, #4294967295
 80076ce:	4620      	mov	r0, r4
 80076d0:	bd70      	pop	{r4, r5, r6, pc}
 80076d2:	1cc4      	adds	r4, r0, #3
 80076d4:	f024 0403 	bic.w	r4, r4, #3
 80076d8:	42a0      	cmp	r0, r4
 80076da:	d0f8      	beq.n	80076ce <sbrk_aligned+0x22>
 80076dc:	1a21      	subs	r1, r4, r0
 80076de:	4628      	mov	r0, r5
 80076e0:	f001 ffb6 	bl	8009650 <_sbrk_r>
 80076e4:	3001      	adds	r0, #1
 80076e6:	d1f2      	bne.n	80076ce <sbrk_aligned+0x22>
 80076e8:	e7ef      	b.n	80076ca <sbrk_aligned+0x1e>
 80076ea:	bf00      	nop
 80076ec:	200043d8 	.word	0x200043d8

080076f0 <_malloc_r>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	1ccd      	adds	r5, r1, #3
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	2d00      	cmp	r5, #0
 8007704:	4606      	mov	r6, r0
 8007706:	db01      	blt.n	800770c <_malloc_r+0x1c>
 8007708:	42a9      	cmp	r1, r5
 800770a:	d904      	bls.n	8007716 <_malloc_r+0x26>
 800770c:	230c      	movs	r3, #12
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	2000      	movs	r0, #0
 8007712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077ec <_malloc_r+0xfc>
 800771a:	f000 f869 	bl	80077f0 <__malloc_lock>
 800771e:	f8d8 3000 	ldr.w	r3, [r8]
 8007722:	461c      	mov	r4, r3
 8007724:	bb44      	cbnz	r4, 8007778 <_malloc_r+0x88>
 8007726:	4629      	mov	r1, r5
 8007728:	4630      	mov	r0, r6
 800772a:	f7ff ffbf 	bl	80076ac <sbrk_aligned>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	4604      	mov	r4, r0
 8007732:	d158      	bne.n	80077e6 <_malloc_r+0xf6>
 8007734:	f8d8 4000 	ldr.w	r4, [r8]
 8007738:	4627      	mov	r7, r4
 800773a:	2f00      	cmp	r7, #0
 800773c:	d143      	bne.n	80077c6 <_malloc_r+0xd6>
 800773e:	2c00      	cmp	r4, #0
 8007740:	d04b      	beq.n	80077da <_malloc_r+0xea>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	4639      	mov	r1, r7
 8007746:	4630      	mov	r0, r6
 8007748:	eb04 0903 	add.w	r9, r4, r3
 800774c:	f001 ff80 	bl	8009650 <_sbrk_r>
 8007750:	4581      	cmp	r9, r0
 8007752:	d142      	bne.n	80077da <_malloc_r+0xea>
 8007754:	6821      	ldr	r1, [r4, #0]
 8007756:	1a6d      	subs	r5, r5, r1
 8007758:	4629      	mov	r1, r5
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff ffa6 	bl	80076ac <sbrk_aligned>
 8007760:	3001      	adds	r0, #1
 8007762:	d03a      	beq.n	80077da <_malloc_r+0xea>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	442b      	add	r3, r5
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	f8d8 3000 	ldr.w	r3, [r8]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	bb62      	cbnz	r2, 80077cc <_malloc_r+0xdc>
 8007772:	f8c8 7000 	str.w	r7, [r8]
 8007776:	e00f      	b.n	8007798 <_malloc_r+0xa8>
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	1b52      	subs	r2, r2, r5
 800777c:	d420      	bmi.n	80077c0 <_malloc_r+0xd0>
 800777e:	2a0b      	cmp	r2, #11
 8007780:	d917      	bls.n	80077b2 <_malloc_r+0xc2>
 8007782:	1961      	adds	r1, r4, r5
 8007784:	42a3      	cmp	r3, r4
 8007786:	6025      	str	r5, [r4, #0]
 8007788:	bf18      	it	ne
 800778a:	6059      	strne	r1, [r3, #4]
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	bf08      	it	eq
 8007790:	f8c8 1000 	streq.w	r1, [r8]
 8007794:	5162      	str	r2, [r4, r5]
 8007796:	604b      	str	r3, [r1, #4]
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f82f 	bl	80077fc <__malloc_unlock>
 800779e:	f104 000b 	add.w	r0, r4, #11
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	f020 0007 	bic.w	r0, r0, #7
 80077a8:	1ac2      	subs	r2, r0, r3
 80077aa:	bf1c      	itt	ne
 80077ac:	1a1b      	subne	r3, r3, r0
 80077ae:	50a3      	strne	r3, [r4, r2]
 80077b0:	e7af      	b.n	8007712 <_malloc_r+0x22>
 80077b2:	6862      	ldr	r2, [r4, #4]
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	bf0c      	ite	eq
 80077b8:	f8c8 2000 	streq.w	r2, [r8]
 80077bc:	605a      	strne	r2, [r3, #4]
 80077be:	e7eb      	b.n	8007798 <_malloc_r+0xa8>
 80077c0:	4623      	mov	r3, r4
 80077c2:	6864      	ldr	r4, [r4, #4]
 80077c4:	e7ae      	b.n	8007724 <_malloc_r+0x34>
 80077c6:	463c      	mov	r4, r7
 80077c8:	687f      	ldr	r7, [r7, #4]
 80077ca:	e7b6      	b.n	800773a <_malloc_r+0x4a>
 80077cc:	461a      	mov	r2, r3
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	42a3      	cmp	r3, r4
 80077d2:	d1fb      	bne.n	80077cc <_malloc_r+0xdc>
 80077d4:	2300      	movs	r3, #0
 80077d6:	6053      	str	r3, [r2, #4]
 80077d8:	e7de      	b.n	8007798 <_malloc_r+0xa8>
 80077da:	230c      	movs	r3, #12
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	4630      	mov	r0, r6
 80077e0:	f000 f80c 	bl	80077fc <__malloc_unlock>
 80077e4:	e794      	b.n	8007710 <_malloc_r+0x20>
 80077e6:	6005      	str	r5, [r0, #0]
 80077e8:	e7d6      	b.n	8007798 <_malloc_r+0xa8>
 80077ea:	bf00      	nop
 80077ec:	200043dc 	.word	0x200043dc

080077f0 <__malloc_lock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	@ (80077f8 <__malloc_lock+0x8>)
 80077f2:	f7ff b898 	b.w	8006926 <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	200043d4 	.word	0x200043d4

080077fc <__malloc_unlock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	@ (8007804 <__malloc_unlock+0x8>)
 80077fe:	f7ff b893 	b.w	8006928 <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	200043d4 	.word	0x200043d4

08007808 <_Balloc>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	69c6      	ldr	r6, [r0, #28]
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	b976      	cbnz	r6, 8007830 <_Balloc+0x28>
 8007812:	2010      	movs	r0, #16
 8007814:	f7ff ff42 	bl	800769c <malloc>
 8007818:	4602      	mov	r2, r0
 800781a:	61e0      	str	r0, [r4, #28]
 800781c:	b920      	cbnz	r0, 8007828 <_Balloc+0x20>
 800781e:	4b18      	ldr	r3, [pc, #96]	@ (8007880 <_Balloc+0x78>)
 8007820:	4818      	ldr	r0, [pc, #96]	@ (8007884 <_Balloc+0x7c>)
 8007822:	216b      	movs	r1, #107	@ 0x6b
 8007824:	f001 ff2c 	bl	8009680 <__assert_func>
 8007828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800782c:	6006      	str	r6, [r0, #0]
 800782e:	60c6      	str	r6, [r0, #12]
 8007830:	69e6      	ldr	r6, [r4, #28]
 8007832:	68f3      	ldr	r3, [r6, #12]
 8007834:	b183      	cbz	r3, 8007858 <_Balloc+0x50>
 8007836:	69e3      	ldr	r3, [r4, #28]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800783e:	b9b8      	cbnz	r0, 8007870 <_Balloc+0x68>
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f605 	lsl.w	r6, r1, r5
 8007846:	1d72      	adds	r2, r6, #5
 8007848:	0092      	lsls	r2, r2, #2
 800784a:	4620      	mov	r0, r4
 800784c:	f001 ff36 	bl	80096bc <_calloc_r>
 8007850:	b160      	cbz	r0, 800786c <_Balloc+0x64>
 8007852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007856:	e00e      	b.n	8007876 <_Balloc+0x6e>
 8007858:	2221      	movs	r2, #33	@ 0x21
 800785a:	2104      	movs	r1, #4
 800785c:	4620      	mov	r0, r4
 800785e:	f001 ff2d 	bl	80096bc <_calloc_r>
 8007862:	69e3      	ldr	r3, [r4, #28]
 8007864:	60f0      	str	r0, [r6, #12]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e4      	bne.n	8007836 <_Balloc+0x2e>
 800786c:	2000      	movs	r0, #0
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	6802      	ldr	r2, [r0, #0]
 8007872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007876:	2300      	movs	r3, #0
 8007878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800787c:	e7f7      	b.n	800786e <_Balloc+0x66>
 800787e:	bf00      	nop
 8007880:	0800a006 	.word	0x0800a006
 8007884:	0800a086 	.word	0x0800a086

08007888 <_Bfree>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	69c6      	ldr	r6, [r0, #28]
 800788c:	4605      	mov	r5, r0
 800788e:	460c      	mov	r4, r1
 8007890:	b976      	cbnz	r6, 80078b0 <_Bfree+0x28>
 8007892:	2010      	movs	r0, #16
 8007894:	f7ff ff02 	bl	800769c <malloc>
 8007898:	4602      	mov	r2, r0
 800789a:	61e8      	str	r0, [r5, #28]
 800789c:	b920      	cbnz	r0, 80078a8 <_Bfree+0x20>
 800789e:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <_Bfree+0x3c>)
 80078a0:	4809      	ldr	r0, [pc, #36]	@ (80078c8 <_Bfree+0x40>)
 80078a2:	218f      	movs	r1, #143	@ 0x8f
 80078a4:	f001 feec 	bl	8009680 <__assert_func>
 80078a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078ac:	6006      	str	r6, [r0, #0]
 80078ae:	60c6      	str	r6, [r0, #12]
 80078b0:	b13c      	cbz	r4, 80078c2 <_Bfree+0x3a>
 80078b2:	69eb      	ldr	r3, [r5, #28]
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078bc:	6021      	str	r1, [r4, #0]
 80078be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	0800a006 	.word	0x0800a006
 80078c8:	0800a086 	.word	0x0800a086

080078cc <__multadd>:
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	690d      	ldr	r5, [r1, #16]
 80078d2:	4607      	mov	r7, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	461e      	mov	r6, r3
 80078d8:	f101 0c14 	add.w	ip, r1, #20
 80078dc:	2000      	movs	r0, #0
 80078de:	f8dc 3000 	ldr.w	r3, [ip]
 80078e2:	b299      	uxth	r1, r3
 80078e4:	fb02 6101 	mla	r1, r2, r1, r6
 80078e8:	0c1e      	lsrs	r6, r3, #16
 80078ea:	0c0b      	lsrs	r3, r1, #16
 80078ec:	fb02 3306 	mla	r3, r2, r6, r3
 80078f0:	b289      	uxth	r1, r1
 80078f2:	3001      	adds	r0, #1
 80078f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078f8:	4285      	cmp	r5, r0
 80078fa:	f84c 1b04 	str.w	r1, [ip], #4
 80078fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007902:	dcec      	bgt.n	80078de <__multadd+0x12>
 8007904:	b30e      	cbz	r6, 800794a <__multadd+0x7e>
 8007906:	68a3      	ldr	r3, [r4, #8]
 8007908:	42ab      	cmp	r3, r5
 800790a:	dc19      	bgt.n	8007940 <__multadd+0x74>
 800790c:	6861      	ldr	r1, [r4, #4]
 800790e:	4638      	mov	r0, r7
 8007910:	3101      	adds	r1, #1
 8007912:	f7ff ff79 	bl	8007808 <_Balloc>
 8007916:	4680      	mov	r8, r0
 8007918:	b928      	cbnz	r0, 8007926 <__multadd+0x5a>
 800791a:	4602      	mov	r2, r0
 800791c:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <__multadd+0x84>)
 800791e:	480d      	ldr	r0, [pc, #52]	@ (8007954 <__multadd+0x88>)
 8007920:	21ba      	movs	r1, #186	@ 0xba
 8007922:	f001 fead 	bl	8009680 <__assert_func>
 8007926:	6922      	ldr	r2, [r4, #16]
 8007928:	3202      	adds	r2, #2
 800792a:	f104 010c 	add.w	r1, r4, #12
 800792e:	0092      	lsls	r2, r2, #2
 8007930:	300c      	adds	r0, #12
 8007932:	f7fe fffa 	bl	800692a <memcpy>
 8007936:	4621      	mov	r1, r4
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff ffa5 	bl	8007888 <_Bfree>
 800793e:	4644      	mov	r4, r8
 8007940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007944:	3501      	adds	r5, #1
 8007946:	615e      	str	r6, [r3, #20]
 8007948:	6125      	str	r5, [r4, #16]
 800794a:	4620      	mov	r0, r4
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	0800a075 	.word	0x0800a075
 8007954:	0800a086 	.word	0x0800a086

08007958 <__s2b>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	460c      	mov	r4, r1
 800795e:	4615      	mov	r5, r2
 8007960:	461f      	mov	r7, r3
 8007962:	2209      	movs	r2, #9
 8007964:	3308      	adds	r3, #8
 8007966:	4606      	mov	r6, r0
 8007968:	fb93 f3f2 	sdiv	r3, r3, r2
 800796c:	2100      	movs	r1, #0
 800796e:	2201      	movs	r2, #1
 8007970:	429a      	cmp	r2, r3
 8007972:	db09      	blt.n	8007988 <__s2b+0x30>
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff ff47 	bl	8007808 <_Balloc>
 800797a:	b940      	cbnz	r0, 800798e <__s2b+0x36>
 800797c:	4602      	mov	r2, r0
 800797e:	4b19      	ldr	r3, [pc, #100]	@ (80079e4 <__s2b+0x8c>)
 8007980:	4819      	ldr	r0, [pc, #100]	@ (80079e8 <__s2b+0x90>)
 8007982:	21d3      	movs	r1, #211	@ 0xd3
 8007984:	f001 fe7c 	bl	8009680 <__assert_func>
 8007988:	0052      	lsls	r2, r2, #1
 800798a:	3101      	adds	r1, #1
 800798c:	e7f0      	b.n	8007970 <__s2b+0x18>
 800798e:	9b08      	ldr	r3, [sp, #32]
 8007990:	6143      	str	r3, [r0, #20]
 8007992:	2d09      	cmp	r5, #9
 8007994:	f04f 0301 	mov.w	r3, #1
 8007998:	6103      	str	r3, [r0, #16]
 800799a:	dd16      	ble.n	80079ca <__s2b+0x72>
 800799c:	f104 0909 	add.w	r9, r4, #9
 80079a0:	46c8      	mov	r8, r9
 80079a2:	442c      	add	r4, r5
 80079a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079a8:	4601      	mov	r1, r0
 80079aa:	3b30      	subs	r3, #48	@ 0x30
 80079ac:	220a      	movs	r2, #10
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7ff ff8c 	bl	80078cc <__multadd>
 80079b4:	45a0      	cmp	r8, r4
 80079b6:	d1f5      	bne.n	80079a4 <__s2b+0x4c>
 80079b8:	f1a5 0408 	sub.w	r4, r5, #8
 80079bc:	444c      	add	r4, r9
 80079be:	1b2d      	subs	r5, r5, r4
 80079c0:	1963      	adds	r3, r4, r5
 80079c2:	42bb      	cmp	r3, r7
 80079c4:	db04      	blt.n	80079d0 <__s2b+0x78>
 80079c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ca:	340a      	adds	r4, #10
 80079cc:	2509      	movs	r5, #9
 80079ce:	e7f6      	b.n	80079be <__s2b+0x66>
 80079d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079d4:	4601      	mov	r1, r0
 80079d6:	3b30      	subs	r3, #48	@ 0x30
 80079d8:	220a      	movs	r2, #10
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff76 	bl	80078cc <__multadd>
 80079e0:	e7ee      	b.n	80079c0 <__s2b+0x68>
 80079e2:	bf00      	nop
 80079e4:	0800a075 	.word	0x0800a075
 80079e8:	0800a086 	.word	0x0800a086

080079ec <__hi0bits>:
 80079ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079f0:	4603      	mov	r3, r0
 80079f2:	bf36      	itet	cc
 80079f4:	0403      	lslcc	r3, r0, #16
 80079f6:	2000      	movcs	r0, #0
 80079f8:	2010      	movcc	r0, #16
 80079fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079fe:	bf3c      	itt	cc
 8007a00:	021b      	lslcc	r3, r3, #8
 8007a02:	3008      	addcc	r0, #8
 8007a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a08:	bf3c      	itt	cc
 8007a0a:	011b      	lslcc	r3, r3, #4
 8007a0c:	3004      	addcc	r0, #4
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a12:	bf3c      	itt	cc
 8007a14:	009b      	lslcc	r3, r3, #2
 8007a16:	3002      	addcc	r0, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	db05      	blt.n	8007a28 <__hi0bits+0x3c>
 8007a1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a20:	f100 0001 	add.w	r0, r0, #1
 8007a24:	bf08      	it	eq
 8007a26:	2020      	moveq	r0, #32
 8007a28:	4770      	bx	lr

08007a2a <__lo0bits>:
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	f013 0007 	ands.w	r0, r3, #7
 8007a32:	d00b      	beq.n	8007a4c <__lo0bits+0x22>
 8007a34:	07d9      	lsls	r1, r3, #31
 8007a36:	d421      	bmi.n	8007a7c <__lo0bits+0x52>
 8007a38:	0798      	lsls	r0, r3, #30
 8007a3a:	bf49      	itett	mi
 8007a3c:	085b      	lsrmi	r3, r3, #1
 8007a3e:	089b      	lsrpl	r3, r3, #2
 8007a40:	2001      	movmi	r0, #1
 8007a42:	6013      	strmi	r3, [r2, #0]
 8007a44:	bf5c      	itt	pl
 8007a46:	6013      	strpl	r3, [r2, #0]
 8007a48:	2002      	movpl	r0, #2
 8007a4a:	4770      	bx	lr
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	b909      	cbnz	r1, 8007a54 <__lo0bits+0x2a>
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	2010      	movs	r0, #16
 8007a54:	b2d9      	uxtb	r1, r3
 8007a56:	b909      	cbnz	r1, 8007a5c <__lo0bits+0x32>
 8007a58:	3008      	adds	r0, #8
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	0719      	lsls	r1, r3, #28
 8007a5e:	bf04      	itt	eq
 8007a60:	091b      	lsreq	r3, r3, #4
 8007a62:	3004      	addeq	r0, #4
 8007a64:	0799      	lsls	r1, r3, #30
 8007a66:	bf04      	itt	eq
 8007a68:	089b      	lsreq	r3, r3, #2
 8007a6a:	3002      	addeq	r0, #2
 8007a6c:	07d9      	lsls	r1, r3, #31
 8007a6e:	d403      	bmi.n	8007a78 <__lo0bits+0x4e>
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	f100 0001 	add.w	r0, r0, #1
 8007a76:	d003      	beq.n	8007a80 <__lo0bits+0x56>
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	4770      	bx	lr
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	4770      	bx	lr
 8007a80:	2020      	movs	r0, #32
 8007a82:	4770      	bx	lr

08007a84 <__i2b>:
 8007a84:	b510      	push	{r4, lr}
 8007a86:	460c      	mov	r4, r1
 8007a88:	2101      	movs	r1, #1
 8007a8a:	f7ff febd 	bl	8007808 <_Balloc>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <__i2b+0x1a>
 8007a92:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <__i2b+0x24>)
 8007a94:	4805      	ldr	r0, [pc, #20]	@ (8007aac <__i2b+0x28>)
 8007a96:	f240 1145 	movw	r1, #325	@ 0x145
 8007a9a:	f001 fdf1 	bl	8009680 <__assert_func>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	6144      	str	r4, [r0, #20]
 8007aa2:	6103      	str	r3, [r0, #16]
 8007aa4:	bd10      	pop	{r4, pc}
 8007aa6:	bf00      	nop
 8007aa8:	0800a075 	.word	0x0800a075
 8007aac:	0800a086 	.word	0x0800a086

08007ab0 <__multiply>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	4617      	mov	r7, r2
 8007ab6:	690a      	ldr	r2, [r1, #16]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	bfa8      	it	ge
 8007abe:	463b      	movge	r3, r7
 8007ac0:	4689      	mov	r9, r1
 8007ac2:	bfa4      	itt	ge
 8007ac4:	460f      	movge	r7, r1
 8007ac6:	4699      	movge	r9, r3
 8007ac8:	693d      	ldr	r5, [r7, #16]
 8007aca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6879      	ldr	r1, [r7, #4]
 8007ad2:	eb05 060a 	add.w	r6, r5, sl
 8007ad6:	42b3      	cmp	r3, r6
 8007ad8:	b085      	sub	sp, #20
 8007ada:	bfb8      	it	lt
 8007adc:	3101      	addlt	r1, #1
 8007ade:	f7ff fe93 	bl	8007808 <_Balloc>
 8007ae2:	b930      	cbnz	r0, 8007af2 <__multiply+0x42>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b41      	ldr	r3, [pc, #260]	@ (8007bec <__multiply+0x13c>)
 8007ae8:	4841      	ldr	r0, [pc, #260]	@ (8007bf0 <__multiply+0x140>)
 8007aea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007aee:	f001 fdc7 	bl	8009680 <__assert_func>
 8007af2:	f100 0414 	add.w	r4, r0, #20
 8007af6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007afa:	4623      	mov	r3, r4
 8007afc:	2200      	movs	r2, #0
 8007afe:	4573      	cmp	r3, lr
 8007b00:	d320      	bcc.n	8007b44 <__multiply+0x94>
 8007b02:	f107 0814 	add.w	r8, r7, #20
 8007b06:	f109 0114 	add.w	r1, r9, #20
 8007b0a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b0e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	1beb      	subs	r3, r5, r7
 8007b16:	3b15      	subs	r3, #21
 8007b18:	f023 0303 	bic.w	r3, r3, #3
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	3715      	adds	r7, #21
 8007b20:	42bd      	cmp	r5, r7
 8007b22:	bf38      	it	cc
 8007b24:	2304      	movcc	r3, #4
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	9103      	str	r1, [sp, #12]
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	d80c      	bhi.n	8007b4a <__multiply+0x9a>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	dd03      	ble.n	8007b3c <__multiply+0x8c>
 8007b34:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d055      	beq.n	8007be8 <__multiply+0x138>
 8007b3c:	6106      	str	r6, [r0, #16]
 8007b3e:	b005      	add	sp, #20
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	f843 2b04 	str.w	r2, [r3], #4
 8007b48:	e7d9      	b.n	8007afe <__multiply+0x4e>
 8007b4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b4e:	f1ba 0f00 	cmp.w	sl, #0
 8007b52:	d01f      	beq.n	8007b94 <__multiply+0xe4>
 8007b54:	46c4      	mov	ip, r8
 8007b56:	46a1      	mov	r9, r4
 8007b58:	2700      	movs	r7, #0
 8007b5a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8007b62:	fa1f fb82 	uxth.w	fp, r2
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b6c:	443b      	add	r3, r7
 8007b6e:	f8d9 7000 	ldr.w	r7, [r9]
 8007b72:	0c12      	lsrs	r2, r2, #16
 8007b74:	0c3f      	lsrs	r7, r7, #16
 8007b76:	fb0a 7202 	mla	r2, sl, r2, r7
 8007b7a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b84:	4565      	cmp	r5, ip
 8007b86:	f849 3b04 	str.w	r3, [r9], #4
 8007b8a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007b8e:	d8e4      	bhi.n	8007b5a <__multiply+0xaa>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	50e7      	str	r7, [r4, r3]
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b9a:	3104      	adds	r1, #4
 8007b9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ba0:	d020      	beq.n	8007be4 <__multiply+0x134>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	4647      	mov	r7, r8
 8007ba6:	46a4      	mov	ip, r4
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	f8b7 b000 	ldrh.w	fp, [r7]
 8007bb0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8007bb8:	4452      	add	r2, sl
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bc0:	f84c 3b04 	str.w	r3, [ip], #4
 8007bc4:	f857 3b04 	ldr.w	r3, [r7], #4
 8007bc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bcc:	f8bc 3000 	ldrh.w	r3, [ip]
 8007bd0:	fb09 330a 	mla	r3, r9, sl, r3
 8007bd4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007bd8:	42bd      	cmp	r5, r7
 8007bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bde:	d8e5      	bhi.n	8007bac <__multiply+0xfc>
 8007be0:	9a01      	ldr	r2, [sp, #4]
 8007be2:	50a3      	str	r3, [r4, r2]
 8007be4:	3404      	adds	r4, #4
 8007be6:	e79f      	b.n	8007b28 <__multiply+0x78>
 8007be8:	3e01      	subs	r6, #1
 8007bea:	e7a1      	b.n	8007b30 <__multiply+0x80>
 8007bec:	0800a075 	.word	0x0800a075
 8007bf0:	0800a086 	.word	0x0800a086

08007bf4 <__pow5mult>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	f012 0203 	ands.w	r2, r2, #3
 8007bfe:	4607      	mov	r7, r0
 8007c00:	460e      	mov	r6, r1
 8007c02:	d007      	beq.n	8007c14 <__pow5mult+0x20>
 8007c04:	4c25      	ldr	r4, [pc, #148]	@ (8007c9c <__pow5mult+0xa8>)
 8007c06:	3a01      	subs	r2, #1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c0e:	f7ff fe5d 	bl	80078cc <__multadd>
 8007c12:	4606      	mov	r6, r0
 8007c14:	10ad      	asrs	r5, r5, #2
 8007c16:	d03d      	beq.n	8007c94 <__pow5mult+0xa0>
 8007c18:	69fc      	ldr	r4, [r7, #28]
 8007c1a:	b97c      	cbnz	r4, 8007c3c <__pow5mult+0x48>
 8007c1c:	2010      	movs	r0, #16
 8007c1e:	f7ff fd3d 	bl	800769c <malloc>
 8007c22:	4602      	mov	r2, r0
 8007c24:	61f8      	str	r0, [r7, #28]
 8007c26:	b928      	cbnz	r0, 8007c34 <__pow5mult+0x40>
 8007c28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca0 <__pow5mult+0xac>)
 8007c2a:	481e      	ldr	r0, [pc, #120]	@ (8007ca4 <__pow5mult+0xb0>)
 8007c2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c30:	f001 fd26 	bl	8009680 <__assert_func>
 8007c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c38:	6004      	str	r4, [r0, #0]
 8007c3a:	60c4      	str	r4, [r0, #12]
 8007c3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c44:	b94c      	cbnz	r4, 8007c5a <__pow5mult+0x66>
 8007c46:	f240 2171 	movw	r1, #625	@ 0x271
 8007c4a:	4638      	mov	r0, r7
 8007c4c:	f7ff ff1a 	bl	8007a84 <__i2b>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c56:	4604      	mov	r4, r0
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	f04f 0900 	mov.w	r9, #0
 8007c5e:	07eb      	lsls	r3, r5, #31
 8007c60:	d50a      	bpl.n	8007c78 <__pow5mult+0x84>
 8007c62:	4631      	mov	r1, r6
 8007c64:	4622      	mov	r2, r4
 8007c66:	4638      	mov	r0, r7
 8007c68:	f7ff ff22 	bl	8007ab0 <__multiply>
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff fe09 	bl	8007888 <_Bfree>
 8007c76:	4646      	mov	r6, r8
 8007c78:	106d      	asrs	r5, r5, #1
 8007c7a:	d00b      	beq.n	8007c94 <__pow5mult+0xa0>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	b938      	cbnz	r0, 8007c90 <__pow5mult+0x9c>
 8007c80:	4622      	mov	r2, r4
 8007c82:	4621      	mov	r1, r4
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7ff ff13 	bl	8007ab0 <__multiply>
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	f8c0 9000 	str.w	r9, [r0]
 8007c90:	4604      	mov	r4, r0
 8007c92:	e7e4      	b.n	8007c5e <__pow5mult+0x6a>
 8007c94:	4630      	mov	r0, r6
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	bf00      	nop
 8007c9c:	0800a198 	.word	0x0800a198
 8007ca0:	0800a006 	.word	0x0800a006
 8007ca4:	0800a086 	.word	0x0800a086

08007ca8 <__lshift>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	6849      	ldr	r1, [r1, #4]
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	4607      	mov	r7, r0
 8007cba:	4691      	mov	r9, r2
 8007cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc0:	f108 0601 	add.w	r6, r8, #1
 8007cc4:	42b3      	cmp	r3, r6
 8007cc6:	db0b      	blt.n	8007ce0 <__lshift+0x38>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff fd9d 	bl	8007808 <_Balloc>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b948      	cbnz	r0, 8007ce6 <__lshift+0x3e>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b28      	ldr	r3, [pc, #160]	@ (8007d78 <__lshift+0xd0>)
 8007cd6:	4829      	ldr	r0, [pc, #164]	@ (8007d7c <__lshift+0xd4>)
 8007cd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007cdc:	f001 fcd0 	bl	8009680 <__assert_func>
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	e7ee      	b.n	8007cc4 <__lshift+0x1c>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f100 0114 	add.w	r1, r0, #20
 8007cec:	f100 0210 	add.w	r2, r0, #16
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	4553      	cmp	r3, sl
 8007cf4:	db33      	blt.n	8007d5e <__lshift+0xb6>
 8007cf6:	6920      	ldr	r0, [r4, #16]
 8007cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cfc:	f104 0314 	add.w	r3, r4, #20
 8007d00:	f019 091f 	ands.w	r9, r9, #31
 8007d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d0c:	d02b      	beq.n	8007d66 <__lshift+0xbe>
 8007d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d12:	468a      	mov	sl, r1
 8007d14:	2200      	movs	r2, #0
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	fa00 f009 	lsl.w	r0, r0, r9
 8007d1c:	4310      	orrs	r0, r2
 8007d1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d26:	459c      	cmp	ip, r3
 8007d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d2c:	d8f3      	bhi.n	8007d16 <__lshift+0x6e>
 8007d2e:	ebac 0304 	sub.w	r3, ip, r4
 8007d32:	3b15      	subs	r3, #21
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	3304      	adds	r3, #4
 8007d3a:	f104 0015 	add.w	r0, r4, #21
 8007d3e:	4560      	cmp	r0, ip
 8007d40:	bf88      	it	hi
 8007d42:	2304      	movhi	r3, #4
 8007d44:	50ca      	str	r2, [r1, r3]
 8007d46:	b10a      	cbz	r2, 8007d4c <__lshift+0xa4>
 8007d48:	f108 0602 	add.w	r6, r8, #2
 8007d4c:	3e01      	subs	r6, #1
 8007d4e:	4638      	mov	r0, r7
 8007d50:	612e      	str	r6, [r5, #16]
 8007d52:	4621      	mov	r1, r4
 8007d54:	f7ff fd98 	bl	8007888 <_Bfree>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d62:	3301      	adds	r3, #1
 8007d64:	e7c5      	b.n	8007cf2 <__lshift+0x4a>
 8007d66:	3904      	subs	r1, #4
 8007d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d70:	459c      	cmp	ip, r3
 8007d72:	d8f9      	bhi.n	8007d68 <__lshift+0xc0>
 8007d74:	e7ea      	b.n	8007d4c <__lshift+0xa4>
 8007d76:	bf00      	nop
 8007d78:	0800a075 	.word	0x0800a075
 8007d7c:	0800a086 	.word	0x0800a086

08007d80 <__mcmp>:
 8007d80:	690a      	ldr	r2, [r1, #16]
 8007d82:	4603      	mov	r3, r0
 8007d84:	6900      	ldr	r0, [r0, #16]
 8007d86:	1a80      	subs	r0, r0, r2
 8007d88:	b530      	push	{r4, r5, lr}
 8007d8a:	d10e      	bne.n	8007daa <__mcmp+0x2a>
 8007d8c:	3314      	adds	r3, #20
 8007d8e:	3114      	adds	r1, #20
 8007d90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007da0:	4295      	cmp	r5, r2
 8007da2:	d003      	beq.n	8007dac <__mcmp+0x2c>
 8007da4:	d205      	bcs.n	8007db2 <__mcmp+0x32>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	bd30      	pop	{r4, r5, pc}
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d3f3      	bcc.n	8007d98 <__mcmp+0x18>
 8007db0:	e7fb      	b.n	8007daa <__mcmp+0x2a>
 8007db2:	2001      	movs	r0, #1
 8007db4:	e7f9      	b.n	8007daa <__mcmp+0x2a>
	...

08007db8 <__mdiff>:
 8007db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4648      	mov	r0, r9
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	f7ff ffdb 	bl	8007d80 <__mcmp>
 8007dca:	1e05      	subs	r5, r0, #0
 8007dcc:	d112      	bne.n	8007df4 <__mdiff+0x3c>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff fd19 	bl	8007808 <_Balloc>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	b928      	cbnz	r0, 8007de6 <__mdiff+0x2e>
 8007dda:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed8 <__mdiff+0x120>)
 8007ddc:	f240 2137 	movw	r1, #567	@ 0x237
 8007de0:	483e      	ldr	r0, [pc, #248]	@ (8007edc <__mdiff+0x124>)
 8007de2:	f001 fc4d 	bl	8009680 <__assert_func>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dec:	4610      	mov	r0, r2
 8007dee:	b003      	add	sp, #12
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	bfbc      	itt	lt
 8007df6:	464b      	movlt	r3, r9
 8007df8:	46a1      	movlt	r9, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e00:	bfba      	itte	lt
 8007e02:	461c      	movlt	r4, r3
 8007e04:	2501      	movlt	r5, #1
 8007e06:	2500      	movge	r5, #0
 8007e08:	f7ff fcfe 	bl	8007808 <_Balloc>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	b918      	cbnz	r0, 8007e18 <__mdiff+0x60>
 8007e10:	4b31      	ldr	r3, [pc, #196]	@ (8007ed8 <__mdiff+0x120>)
 8007e12:	f240 2145 	movw	r1, #581	@ 0x245
 8007e16:	e7e3      	b.n	8007de0 <__mdiff+0x28>
 8007e18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e1c:	6926      	ldr	r6, [r4, #16]
 8007e1e:	60c5      	str	r5, [r0, #12]
 8007e20:	f109 0310 	add.w	r3, r9, #16
 8007e24:	f109 0514 	add.w	r5, r9, #20
 8007e28:	f104 0e14 	add.w	lr, r4, #20
 8007e2c:	f100 0b14 	add.w	fp, r0, #20
 8007e30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	46d9      	mov	r9, fp
 8007e3c:	f04f 0c00 	mov.w	ip, #0
 8007e40:	9b01      	ldr	r3, [sp, #4]
 8007e42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	fa1f f38a 	uxth.w	r3, sl
 8007e50:	4619      	mov	r1, r3
 8007e52:	b283      	uxth	r3, r0
 8007e54:	1acb      	subs	r3, r1, r3
 8007e56:	0c00      	lsrs	r0, r0, #16
 8007e58:	4463      	add	r3, ip
 8007e5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e68:	4576      	cmp	r6, lr
 8007e6a:	f849 3b04 	str.w	r3, [r9], #4
 8007e6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e72:	d8e5      	bhi.n	8007e40 <__mdiff+0x88>
 8007e74:	1b33      	subs	r3, r6, r4
 8007e76:	3b15      	subs	r3, #21
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	3415      	adds	r4, #21
 8007e7e:	3304      	adds	r3, #4
 8007e80:	42a6      	cmp	r6, r4
 8007e82:	bf38      	it	cc
 8007e84:	2304      	movcc	r3, #4
 8007e86:	441d      	add	r5, r3
 8007e88:	445b      	add	r3, fp
 8007e8a:	461e      	mov	r6, r3
 8007e8c:	462c      	mov	r4, r5
 8007e8e:	4544      	cmp	r4, r8
 8007e90:	d30e      	bcc.n	8007eb0 <__mdiff+0xf8>
 8007e92:	f108 0103 	add.w	r1, r8, #3
 8007e96:	1b49      	subs	r1, r1, r5
 8007e98:	f021 0103 	bic.w	r1, r1, #3
 8007e9c:	3d03      	subs	r5, #3
 8007e9e:	45a8      	cmp	r8, r5
 8007ea0:	bf38      	it	cc
 8007ea2:	2100      	movcc	r1, #0
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eaa:	b191      	cbz	r1, 8007ed2 <__mdiff+0x11a>
 8007eac:	6117      	str	r7, [r2, #16]
 8007eae:	e79d      	b.n	8007dec <__mdiff+0x34>
 8007eb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007eb4:	46e6      	mov	lr, ip
 8007eb6:	0c08      	lsrs	r0, r1, #16
 8007eb8:	fa1c fc81 	uxtah	ip, ip, r1
 8007ebc:	4471      	add	r1, lr
 8007ebe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ec2:	b289      	uxth	r1, r1
 8007ec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ec8:	f846 1b04 	str.w	r1, [r6], #4
 8007ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ed0:	e7dd      	b.n	8007e8e <__mdiff+0xd6>
 8007ed2:	3f01      	subs	r7, #1
 8007ed4:	e7e7      	b.n	8007ea6 <__mdiff+0xee>
 8007ed6:	bf00      	nop
 8007ed8:	0800a075 	.word	0x0800a075
 8007edc:	0800a086 	.word	0x0800a086

08007ee0 <__ulp>:
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	ed8d 0b00 	vstr	d0, [sp]
 8007ee6:	9a01      	ldr	r2, [sp, #4]
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f28 <__ulp+0x48>)
 8007eea:	4013      	ands	r3, r2
 8007eec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc08      	bgt.n	8007f06 <__ulp+0x26>
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007efa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007efe:	da04      	bge.n	8007f0a <__ulp+0x2a>
 8007f00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f04:	4113      	asrs	r3, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	e008      	b.n	8007f1c <__ulp+0x3c>
 8007f0a:	f1a2 0314 	sub.w	r3, r2, #20
 8007f0e:	2b1e      	cmp	r3, #30
 8007f10:	bfda      	itte	le
 8007f12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f16:	40da      	lsrle	r2, r3
 8007f18:	2201      	movgt	r2, #1
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	ec41 0b10 	vmov	d0, r0, r1
 8007f24:	b002      	add	sp, #8
 8007f26:	4770      	bx	lr
 8007f28:	7ff00000 	.word	0x7ff00000

08007f2c <__b2d>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	6906      	ldr	r6, [r0, #16]
 8007f32:	f100 0814 	add.w	r8, r0, #20
 8007f36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f3a:	1f37      	subs	r7, r6, #4
 8007f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7ff fd53 	bl	80079ec <__hi0bits>
 8007f46:	f1c0 0320 	rsb	r3, r0, #32
 8007f4a:	280a      	cmp	r0, #10
 8007f4c:	600b      	str	r3, [r1, #0]
 8007f4e:	491b      	ldr	r1, [pc, #108]	@ (8007fbc <__b2d+0x90>)
 8007f50:	dc15      	bgt.n	8007f7e <__b2d+0x52>
 8007f52:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f56:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f5a:	45b8      	cmp	r8, r7
 8007f5c:	ea43 0501 	orr.w	r5, r3, r1
 8007f60:	bf34      	ite	cc
 8007f62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f66:	2300      	movcs	r3, #0
 8007f68:	3015      	adds	r0, #21
 8007f6a:	fa02 f000 	lsl.w	r0, r2, r0
 8007f6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f72:	4303      	orrs	r3, r0
 8007f74:	461c      	mov	r4, r3
 8007f76:	ec45 4b10 	vmov	d0, r4, r5
 8007f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f7e:	45b8      	cmp	r8, r7
 8007f80:	bf3a      	itte	cc
 8007f82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f86:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f8a:	2300      	movcs	r3, #0
 8007f8c:	380b      	subs	r0, #11
 8007f8e:	d012      	beq.n	8007fb6 <__b2d+0x8a>
 8007f90:	f1c0 0120 	rsb	r1, r0, #32
 8007f94:	fa23 f401 	lsr.w	r4, r3, r1
 8007f98:	4082      	lsls	r2, r0
 8007f9a:	4322      	orrs	r2, r4
 8007f9c:	4547      	cmp	r7, r8
 8007f9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007fa2:	bf8c      	ite	hi
 8007fa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007fa8:	2200      	movls	r2, #0
 8007faa:	4083      	lsls	r3, r0
 8007fac:	40ca      	lsrs	r2, r1
 8007fae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	e7de      	b.n	8007f74 <__b2d+0x48>
 8007fb6:	ea42 0501 	orr.w	r5, r2, r1
 8007fba:	e7db      	b.n	8007f74 <__b2d+0x48>
 8007fbc:	3ff00000 	.word	0x3ff00000

08007fc0 <__d2b>:
 8007fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	ec59 8b10 	vmov	r8, r9, d0
 8007fcc:	4616      	mov	r6, r2
 8007fce:	f7ff fc1b 	bl	8007808 <_Balloc>
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b930      	cbnz	r0, 8007fe4 <__d2b+0x24>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b23      	ldr	r3, [pc, #140]	@ (8008068 <__d2b+0xa8>)
 8007fda:	4824      	ldr	r0, [pc, #144]	@ (800806c <__d2b+0xac>)
 8007fdc:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fe0:	f001 fb4e 	bl	8009680 <__assert_func>
 8007fe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fec:	b10d      	cbz	r5, 8007ff2 <__d2b+0x32>
 8007fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ff2:	9301      	str	r3, [sp, #4]
 8007ff4:	f1b8 0300 	subs.w	r3, r8, #0
 8007ff8:	d023      	beq.n	8008042 <__d2b+0x82>
 8007ffa:	4668      	mov	r0, sp
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	f7ff fd14 	bl	8007a2a <__lo0bits>
 8008002:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008006:	b1d0      	cbz	r0, 800803e <__d2b+0x7e>
 8008008:	f1c0 0320 	rsb	r3, r0, #32
 800800c:	fa02 f303 	lsl.w	r3, r2, r3
 8008010:	430b      	orrs	r3, r1
 8008012:	40c2      	lsrs	r2, r0
 8008014:	6163      	str	r3, [r4, #20]
 8008016:	9201      	str	r2, [sp, #4]
 8008018:	9b01      	ldr	r3, [sp, #4]
 800801a:	61a3      	str	r3, [r4, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	bf0c      	ite	eq
 8008020:	2201      	moveq	r2, #1
 8008022:	2202      	movne	r2, #2
 8008024:	6122      	str	r2, [r4, #16]
 8008026:	b1a5      	cbz	r5, 8008052 <__d2b+0x92>
 8008028:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800802c:	4405      	add	r5, r0
 800802e:	603d      	str	r5, [r7, #0]
 8008030:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008034:	6030      	str	r0, [r6, #0]
 8008036:	4620      	mov	r0, r4
 8008038:	b003      	add	sp, #12
 800803a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800803e:	6161      	str	r1, [r4, #20]
 8008040:	e7ea      	b.n	8008018 <__d2b+0x58>
 8008042:	a801      	add	r0, sp, #4
 8008044:	f7ff fcf1 	bl	8007a2a <__lo0bits>
 8008048:	9b01      	ldr	r3, [sp, #4]
 800804a:	6163      	str	r3, [r4, #20]
 800804c:	3020      	adds	r0, #32
 800804e:	2201      	movs	r2, #1
 8008050:	e7e8      	b.n	8008024 <__d2b+0x64>
 8008052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800805a:	6038      	str	r0, [r7, #0]
 800805c:	6918      	ldr	r0, [r3, #16]
 800805e:	f7ff fcc5 	bl	80079ec <__hi0bits>
 8008062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008066:	e7e5      	b.n	8008034 <__d2b+0x74>
 8008068:	0800a075 	.word	0x0800a075
 800806c:	0800a086 	.word	0x0800a086

08008070 <__ratio>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	b085      	sub	sp, #20
 8008076:	e9cd 1000 	strd	r1, r0, [sp]
 800807a:	a902      	add	r1, sp, #8
 800807c:	f7ff ff56 	bl	8007f2c <__b2d>
 8008080:	9800      	ldr	r0, [sp, #0]
 8008082:	a903      	add	r1, sp, #12
 8008084:	ec55 4b10 	vmov	r4, r5, d0
 8008088:	f7ff ff50 	bl	8007f2c <__b2d>
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	6919      	ldr	r1, [r3, #16]
 8008090:	9b00      	ldr	r3, [sp, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	1ac9      	subs	r1, r1, r3
 8008096:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	ec5b ab10 	vmov	sl, fp, d0
 80080a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfce      	itee	gt
 80080a8:	462a      	movgt	r2, r5
 80080aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080ae:	465a      	movle	r2, fp
 80080b0:	462f      	mov	r7, r5
 80080b2:	46d9      	mov	r9, fp
 80080b4:	bfcc      	ite	gt
 80080b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80080be:	464b      	mov	r3, r9
 80080c0:	4652      	mov	r2, sl
 80080c2:	4620      	mov	r0, r4
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 fbd1 	bl	800086c <__aeabi_ddiv>
 80080ca:	ec41 0b10 	vmov	d0, r0, r1
 80080ce:	b005      	add	sp, #20
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080d4 <__copybits>:
 80080d4:	3901      	subs	r1, #1
 80080d6:	b570      	push	{r4, r5, r6, lr}
 80080d8:	1149      	asrs	r1, r1, #5
 80080da:	6914      	ldr	r4, [r2, #16]
 80080dc:	3101      	adds	r1, #1
 80080de:	f102 0314 	add.w	r3, r2, #20
 80080e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080ea:	1f05      	subs	r5, r0, #4
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d30c      	bcc.n	800810a <__copybits+0x36>
 80080f0:	1aa3      	subs	r3, r4, r2
 80080f2:	3b11      	subs	r3, #17
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3211      	adds	r2, #17
 80080fa:	42a2      	cmp	r2, r4
 80080fc:	bf88      	it	hi
 80080fe:	2300      	movhi	r3, #0
 8008100:	4418      	add	r0, r3
 8008102:	2300      	movs	r3, #0
 8008104:	4288      	cmp	r0, r1
 8008106:	d305      	bcc.n	8008114 <__copybits+0x40>
 8008108:	bd70      	pop	{r4, r5, r6, pc}
 800810a:	f853 6b04 	ldr.w	r6, [r3], #4
 800810e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008112:	e7eb      	b.n	80080ec <__copybits+0x18>
 8008114:	f840 3b04 	str.w	r3, [r0], #4
 8008118:	e7f4      	b.n	8008104 <__copybits+0x30>

0800811a <__any_on>:
 800811a:	f100 0214 	add.w	r2, r0, #20
 800811e:	6900      	ldr	r0, [r0, #16]
 8008120:	114b      	asrs	r3, r1, #5
 8008122:	4298      	cmp	r0, r3
 8008124:	b510      	push	{r4, lr}
 8008126:	db11      	blt.n	800814c <__any_on+0x32>
 8008128:	dd0a      	ble.n	8008140 <__any_on+0x26>
 800812a:	f011 011f 	ands.w	r1, r1, #31
 800812e:	d007      	beq.n	8008140 <__any_on+0x26>
 8008130:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008134:	fa24 f001 	lsr.w	r0, r4, r1
 8008138:	fa00 f101 	lsl.w	r1, r0, r1
 800813c:	428c      	cmp	r4, r1
 800813e:	d10b      	bne.n	8008158 <__any_on+0x3e>
 8008140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008144:	4293      	cmp	r3, r2
 8008146:	d803      	bhi.n	8008150 <__any_on+0x36>
 8008148:	2000      	movs	r0, #0
 800814a:	bd10      	pop	{r4, pc}
 800814c:	4603      	mov	r3, r0
 800814e:	e7f7      	b.n	8008140 <__any_on+0x26>
 8008150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008154:	2900      	cmp	r1, #0
 8008156:	d0f5      	beq.n	8008144 <__any_on+0x2a>
 8008158:	2001      	movs	r0, #1
 800815a:	e7f6      	b.n	800814a <__any_on+0x30>

0800815c <sulp>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	ec45 4b10 	vmov	d0, r4, r5
 8008166:	4616      	mov	r6, r2
 8008168:	f7ff feba 	bl	8007ee0 <__ulp>
 800816c:	ec51 0b10 	vmov	r0, r1, d0
 8008170:	b17e      	cbz	r6, 8008192 <sulp+0x36>
 8008172:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008176:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800817a:	2b00      	cmp	r3, #0
 800817c:	dd09      	ble.n	8008192 <sulp+0x36>
 800817e:	051b      	lsls	r3, r3, #20
 8008180:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008184:	2400      	movs	r4, #0
 8008186:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	f7f8 fa43 	bl	8000618 <__aeabi_dmul>
 8008192:	ec41 0b10 	vmov	d0, r0, r1
 8008196:	bd70      	pop	{r4, r5, r6, pc}

08008198 <_strtod_l>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	b09f      	sub	sp, #124	@ 0x7c
 800819e:	460c      	mov	r4, r1
 80081a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081a2:	2200      	movs	r2, #0
 80081a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80081a6:	9005      	str	r0, [sp, #20]
 80081a8:	f04f 0a00 	mov.w	sl, #0
 80081ac:	f04f 0b00 	mov.w	fp, #0
 80081b0:	460a      	mov	r2, r1
 80081b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081b4:	7811      	ldrb	r1, [r2, #0]
 80081b6:	292b      	cmp	r1, #43	@ 0x2b
 80081b8:	d04a      	beq.n	8008250 <_strtod_l+0xb8>
 80081ba:	d838      	bhi.n	800822e <_strtod_l+0x96>
 80081bc:	290d      	cmp	r1, #13
 80081be:	d832      	bhi.n	8008226 <_strtod_l+0x8e>
 80081c0:	2908      	cmp	r1, #8
 80081c2:	d832      	bhi.n	800822a <_strtod_l+0x92>
 80081c4:	2900      	cmp	r1, #0
 80081c6:	d03b      	beq.n	8008240 <_strtod_l+0xa8>
 80081c8:	2200      	movs	r2, #0
 80081ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80081cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80081ce:	782a      	ldrb	r2, [r5, #0]
 80081d0:	2a30      	cmp	r2, #48	@ 0x30
 80081d2:	f040 80b2 	bne.w	800833a <_strtod_l+0x1a2>
 80081d6:	786a      	ldrb	r2, [r5, #1]
 80081d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081dc:	2a58      	cmp	r2, #88	@ 0x58
 80081de:	d16e      	bne.n	80082be <_strtod_l+0x126>
 80081e0:	9302      	str	r3, [sp, #8]
 80081e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	4a8f      	ldr	r2, [pc, #572]	@ (8008428 <_strtod_l+0x290>)
 80081ec:	9805      	ldr	r0, [sp, #20]
 80081ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80081f0:	a919      	add	r1, sp, #100	@ 0x64
 80081f2:	f001 fadf 	bl	80097b4 <__gethex>
 80081f6:	f010 060f 	ands.w	r6, r0, #15
 80081fa:	4604      	mov	r4, r0
 80081fc:	d005      	beq.n	800820a <_strtod_l+0x72>
 80081fe:	2e06      	cmp	r6, #6
 8008200:	d128      	bne.n	8008254 <_strtod_l+0xbc>
 8008202:	3501      	adds	r5, #1
 8008204:	2300      	movs	r3, #0
 8008206:	9519      	str	r5, [sp, #100]	@ 0x64
 8008208:	930e      	str	r3, [sp, #56]	@ 0x38
 800820a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 858e 	bne.w	8008d2e <_strtod_l+0xb96>
 8008212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008214:	b1cb      	cbz	r3, 800824a <_strtod_l+0xb2>
 8008216:	4652      	mov	r2, sl
 8008218:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800821c:	ec43 2b10 	vmov	d0, r2, r3
 8008220:	b01f      	add	sp, #124	@ 0x7c
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	2920      	cmp	r1, #32
 8008228:	d1ce      	bne.n	80081c8 <_strtod_l+0x30>
 800822a:	3201      	adds	r2, #1
 800822c:	e7c1      	b.n	80081b2 <_strtod_l+0x1a>
 800822e:	292d      	cmp	r1, #45	@ 0x2d
 8008230:	d1ca      	bne.n	80081c8 <_strtod_l+0x30>
 8008232:	2101      	movs	r1, #1
 8008234:	910e      	str	r1, [sp, #56]	@ 0x38
 8008236:	1c51      	adds	r1, r2, #1
 8008238:	9119      	str	r1, [sp, #100]	@ 0x64
 800823a:	7852      	ldrb	r2, [r2, #1]
 800823c:	2a00      	cmp	r2, #0
 800823e:	d1c5      	bne.n	80081cc <_strtod_l+0x34>
 8008240:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008242:	9419      	str	r4, [sp, #100]	@ 0x64
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 8570 	bne.w	8008d2a <_strtod_l+0xb92>
 800824a:	4652      	mov	r2, sl
 800824c:	465b      	mov	r3, fp
 800824e:	e7e5      	b.n	800821c <_strtod_l+0x84>
 8008250:	2100      	movs	r1, #0
 8008252:	e7ef      	b.n	8008234 <_strtod_l+0x9c>
 8008254:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008256:	b13a      	cbz	r2, 8008268 <_strtod_l+0xd0>
 8008258:	2135      	movs	r1, #53	@ 0x35
 800825a:	a81c      	add	r0, sp, #112	@ 0x70
 800825c:	f7ff ff3a 	bl	80080d4 <__copybits>
 8008260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008262:	9805      	ldr	r0, [sp, #20]
 8008264:	f7ff fb10 	bl	8007888 <_Bfree>
 8008268:	3e01      	subs	r6, #1
 800826a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800826c:	2e04      	cmp	r6, #4
 800826e:	d806      	bhi.n	800827e <_strtod_l+0xe6>
 8008270:	e8df f006 	tbb	[pc, r6]
 8008274:	201d0314 	.word	0x201d0314
 8008278:	14          	.byte	0x14
 8008279:	00          	.byte	0x00
 800827a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800827e:	05e1      	lsls	r1, r4, #23
 8008280:	bf48      	it	mi
 8008282:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800828a:	0d1b      	lsrs	r3, r3, #20
 800828c:	051b      	lsls	r3, r3, #20
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1bb      	bne.n	800820a <_strtod_l+0x72>
 8008292:	f7fe fb1d 	bl	80068d0 <__errno>
 8008296:	2322      	movs	r3, #34	@ 0x22
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	e7b6      	b.n	800820a <_strtod_l+0x72>
 800829c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80082a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082ac:	e7e7      	b.n	800827e <_strtod_l+0xe6>
 80082ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008430 <_strtod_l+0x298>
 80082b2:	e7e4      	b.n	800827e <_strtod_l+0xe6>
 80082b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80082b8:	f04f 3aff 	mov.w	sl, #4294967295
 80082bc:	e7df      	b.n	800827e <_strtod_l+0xe6>
 80082be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b30      	cmp	r3, #48	@ 0x30
 80082c8:	d0f9      	beq.n	80082be <_strtod_l+0x126>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d09d      	beq.n	800820a <_strtod_l+0x72>
 80082ce:	2301      	movs	r3, #1
 80082d0:	2700      	movs	r7, #0
 80082d2:	9308      	str	r3, [sp, #32]
 80082d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80082d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80082da:	46b9      	mov	r9, r7
 80082dc:	220a      	movs	r2, #10
 80082de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80082e0:	7805      	ldrb	r5, [r0, #0]
 80082e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80082e6:	b2d9      	uxtb	r1, r3
 80082e8:	2909      	cmp	r1, #9
 80082ea:	d928      	bls.n	800833e <_strtod_l+0x1a6>
 80082ec:	494f      	ldr	r1, [pc, #316]	@ (800842c <_strtod_l+0x294>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	f001 f97a 	bl	80095e8 <strncmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d032      	beq.n	800835e <_strtod_l+0x1c6>
 80082f8:	2000      	movs	r0, #0
 80082fa:	462a      	mov	r2, r5
 80082fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80082fe:	464d      	mov	r5, r9
 8008300:	4603      	mov	r3, r0
 8008302:	2a65      	cmp	r2, #101	@ 0x65
 8008304:	d001      	beq.n	800830a <_strtod_l+0x172>
 8008306:	2a45      	cmp	r2, #69	@ 0x45
 8008308:	d114      	bne.n	8008334 <_strtod_l+0x19c>
 800830a:	b91d      	cbnz	r5, 8008314 <_strtod_l+0x17c>
 800830c:	9a08      	ldr	r2, [sp, #32]
 800830e:	4302      	orrs	r2, r0
 8008310:	d096      	beq.n	8008240 <_strtod_l+0xa8>
 8008312:	2500      	movs	r5, #0
 8008314:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008316:	1c62      	adds	r2, r4, #1
 8008318:	9219      	str	r2, [sp, #100]	@ 0x64
 800831a:	7862      	ldrb	r2, [r4, #1]
 800831c:	2a2b      	cmp	r2, #43	@ 0x2b
 800831e:	d07a      	beq.n	8008416 <_strtod_l+0x27e>
 8008320:	2a2d      	cmp	r2, #45	@ 0x2d
 8008322:	d07e      	beq.n	8008422 <_strtod_l+0x28a>
 8008324:	f04f 0c00 	mov.w	ip, #0
 8008328:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800832c:	2909      	cmp	r1, #9
 800832e:	f240 8085 	bls.w	800843c <_strtod_l+0x2a4>
 8008332:	9419      	str	r4, [sp, #100]	@ 0x64
 8008334:	f04f 0800 	mov.w	r8, #0
 8008338:	e0a5      	b.n	8008486 <_strtod_l+0x2ee>
 800833a:	2300      	movs	r3, #0
 800833c:	e7c8      	b.n	80082d0 <_strtod_l+0x138>
 800833e:	f1b9 0f08 	cmp.w	r9, #8
 8008342:	bfd8      	it	le
 8008344:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008346:	f100 0001 	add.w	r0, r0, #1
 800834a:	bfda      	itte	le
 800834c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008350:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008352:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008356:	f109 0901 	add.w	r9, r9, #1
 800835a:	9019      	str	r0, [sp, #100]	@ 0x64
 800835c:	e7bf      	b.n	80082de <_strtod_l+0x146>
 800835e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	9219      	str	r2, [sp, #100]	@ 0x64
 8008364:	785a      	ldrb	r2, [r3, #1]
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d03b      	beq.n	80083e4 <_strtod_l+0x24c>
 800836c:	900a      	str	r0, [sp, #40]	@ 0x28
 800836e:	464d      	mov	r5, r9
 8008370:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008374:	2b09      	cmp	r3, #9
 8008376:	d912      	bls.n	800839e <_strtod_l+0x206>
 8008378:	2301      	movs	r3, #1
 800837a:	e7c2      	b.n	8008302 <_strtod_l+0x16a>
 800837c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	9219      	str	r2, [sp, #100]	@ 0x64
 8008382:	785a      	ldrb	r2, [r3, #1]
 8008384:	3001      	adds	r0, #1
 8008386:	2a30      	cmp	r2, #48	@ 0x30
 8008388:	d0f8      	beq.n	800837c <_strtod_l+0x1e4>
 800838a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800838e:	2b08      	cmp	r3, #8
 8008390:	f200 84d2 	bhi.w	8008d38 <_strtod_l+0xba0>
 8008394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008396:	900a      	str	r0, [sp, #40]	@ 0x28
 8008398:	2000      	movs	r0, #0
 800839a:	930c      	str	r3, [sp, #48]	@ 0x30
 800839c:	4605      	mov	r5, r0
 800839e:	3a30      	subs	r2, #48	@ 0x30
 80083a0:	f100 0301 	add.w	r3, r0, #1
 80083a4:	d018      	beq.n	80083d8 <_strtod_l+0x240>
 80083a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083a8:	4419      	add	r1, r3
 80083aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80083ac:	462e      	mov	r6, r5
 80083ae:	f04f 0e0a 	mov.w	lr, #10
 80083b2:	1c71      	adds	r1, r6, #1
 80083b4:	eba1 0c05 	sub.w	ip, r1, r5
 80083b8:	4563      	cmp	r3, ip
 80083ba:	dc15      	bgt.n	80083e8 <_strtod_l+0x250>
 80083bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80083c0:	182b      	adds	r3, r5, r0
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	f105 0501 	add.w	r5, r5, #1
 80083c8:	4405      	add	r5, r0
 80083ca:	dc1a      	bgt.n	8008402 <_strtod_l+0x26a>
 80083cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083ce:	230a      	movs	r3, #10
 80083d0:	fb03 2301 	mla	r3, r3, r1, r2
 80083d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d6:	2300      	movs	r3, #0
 80083d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083da:	1c51      	adds	r1, r2, #1
 80083dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80083de:	7852      	ldrb	r2, [r2, #1]
 80083e0:	4618      	mov	r0, r3
 80083e2:	e7c5      	b.n	8008370 <_strtod_l+0x1d8>
 80083e4:	4648      	mov	r0, r9
 80083e6:	e7ce      	b.n	8008386 <_strtod_l+0x1ee>
 80083e8:	2e08      	cmp	r6, #8
 80083ea:	dc05      	bgt.n	80083f8 <_strtod_l+0x260>
 80083ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083ee:	fb0e f606 	mul.w	r6, lr, r6
 80083f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80083f4:	460e      	mov	r6, r1
 80083f6:	e7dc      	b.n	80083b2 <_strtod_l+0x21a>
 80083f8:	2910      	cmp	r1, #16
 80083fa:	bfd8      	it	le
 80083fc:	fb0e f707 	mulle.w	r7, lr, r7
 8008400:	e7f8      	b.n	80083f4 <_strtod_l+0x25c>
 8008402:	2b0f      	cmp	r3, #15
 8008404:	bfdc      	itt	le
 8008406:	230a      	movle	r3, #10
 8008408:	fb03 2707 	mlale	r7, r3, r7, r2
 800840c:	e7e3      	b.n	80083d6 <_strtod_l+0x23e>
 800840e:	2300      	movs	r3, #0
 8008410:	930a      	str	r3, [sp, #40]	@ 0x28
 8008412:	2301      	movs	r3, #1
 8008414:	e77a      	b.n	800830c <_strtod_l+0x174>
 8008416:	f04f 0c00 	mov.w	ip, #0
 800841a:	1ca2      	adds	r2, r4, #2
 800841c:	9219      	str	r2, [sp, #100]	@ 0x64
 800841e:	78a2      	ldrb	r2, [r4, #2]
 8008420:	e782      	b.n	8008328 <_strtod_l+0x190>
 8008422:	f04f 0c01 	mov.w	ip, #1
 8008426:	e7f8      	b.n	800841a <_strtod_l+0x282>
 8008428:	0800a2ac 	.word	0x0800a2ac
 800842c:	0800a0df 	.word	0x0800a0df
 8008430:	7ff00000 	.word	0x7ff00000
 8008434:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008436:	1c51      	adds	r1, r2, #1
 8008438:	9119      	str	r1, [sp, #100]	@ 0x64
 800843a:	7852      	ldrb	r2, [r2, #1]
 800843c:	2a30      	cmp	r2, #48	@ 0x30
 800843e:	d0f9      	beq.n	8008434 <_strtod_l+0x29c>
 8008440:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008444:	2908      	cmp	r1, #8
 8008446:	f63f af75 	bhi.w	8008334 <_strtod_l+0x19c>
 800844a:	3a30      	subs	r2, #48	@ 0x30
 800844c:	9209      	str	r2, [sp, #36]	@ 0x24
 800844e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008450:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008452:	f04f 080a 	mov.w	r8, #10
 8008456:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008458:	1c56      	adds	r6, r2, #1
 800845a:	9619      	str	r6, [sp, #100]	@ 0x64
 800845c:	7852      	ldrb	r2, [r2, #1]
 800845e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008462:	f1be 0f09 	cmp.w	lr, #9
 8008466:	d939      	bls.n	80084dc <_strtod_l+0x344>
 8008468:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800846a:	1a76      	subs	r6, r6, r1
 800846c:	2e08      	cmp	r6, #8
 800846e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008472:	dc03      	bgt.n	800847c <_strtod_l+0x2e4>
 8008474:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008476:	4588      	cmp	r8, r1
 8008478:	bfa8      	it	ge
 800847a:	4688      	movge	r8, r1
 800847c:	f1bc 0f00 	cmp.w	ip, #0
 8008480:	d001      	beq.n	8008486 <_strtod_l+0x2ee>
 8008482:	f1c8 0800 	rsb	r8, r8, #0
 8008486:	2d00      	cmp	r5, #0
 8008488:	d14e      	bne.n	8008528 <_strtod_l+0x390>
 800848a:	9908      	ldr	r1, [sp, #32]
 800848c:	4308      	orrs	r0, r1
 800848e:	f47f aebc 	bne.w	800820a <_strtod_l+0x72>
 8008492:	2b00      	cmp	r3, #0
 8008494:	f47f aed4 	bne.w	8008240 <_strtod_l+0xa8>
 8008498:	2a69      	cmp	r2, #105	@ 0x69
 800849a:	d028      	beq.n	80084ee <_strtod_l+0x356>
 800849c:	dc25      	bgt.n	80084ea <_strtod_l+0x352>
 800849e:	2a49      	cmp	r2, #73	@ 0x49
 80084a0:	d025      	beq.n	80084ee <_strtod_l+0x356>
 80084a2:	2a4e      	cmp	r2, #78	@ 0x4e
 80084a4:	f47f aecc 	bne.w	8008240 <_strtod_l+0xa8>
 80084a8:	499a      	ldr	r1, [pc, #616]	@ (8008714 <_strtod_l+0x57c>)
 80084aa:	a819      	add	r0, sp, #100	@ 0x64
 80084ac:	f001 fba4 	bl	8009bf8 <__match>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f43f aec5 	beq.w	8008240 <_strtod_l+0xa8>
 80084b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b28      	cmp	r3, #40	@ 0x28
 80084bc:	d12e      	bne.n	800851c <_strtod_l+0x384>
 80084be:	4996      	ldr	r1, [pc, #600]	@ (8008718 <_strtod_l+0x580>)
 80084c0:	aa1c      	add	r2, sp, #112	@ 0x70
 80084c2:	a819      	add	r0, sp, #100	@ 0x64
 80084c4:	f001 fbac 	bl	8009c20 <__hexnan>
 80084c8:	2805      	cmp	r0, #5
 80084ca:	d127      	bne.n	800851c <_strtod_l+0x384>
 80084cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80084ce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80084d2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80084d6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80084da:	e696      	b.n	800820a <_strtod_l+0x72>
 80084dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084de:	fb08 2101 	mla	r1, r8, r1, r2
 80084e2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80084e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80084e8:	e7b5      	b.n	8008456 <_strtod_l+0x2be>
 80084ea:	2a6e      	cmp	r2, #110	@ 0x6e
 80084ec:	e7da      	b.n	80084a4 <_strtod_l+0x30c>
 80084ee:	498b      	ldr	r1, [pc, #556]	@ (800871c <_strtod_l+0x584>)
 80084f0:	a819      	add	r0, sp, #100	@ 0x64
 80084f2:	f001 fb81 	bl	8009bf8 <__match>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f aea2 	beq.w	8008240 <_strtod_l+0xa8>
 80084fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084fe:	4988      	ldr	r1, [pc, #544]	@ (8008720 <_strtod_l+0x588>)
 8008500:	3b01      	subs	r3, #1
 8008502:	a819      	add	r0, sp, #100	@ 0x64
 8008504:	9319      	str	r3, [sp, #100]	@ 0x64
 8008506:	f001 fb77 	bl	8009bf8 <__match>
 800850a:	b910      	cbnz	r0, 8008512 <_strtod_l+0x37a>
 800850c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800850e:	3301      	adds	r3, #1
 8008510:	9319      	str	r3, [sp, #100]	@ 0x64
 8008512:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008730 <_strtod_l+0x598>
 8008516:	f04f 0a00 	mov.w	sl, #0
 800851a:	e676      	b.n	800820a <_strtod_l+0x72>
 800851c:	4881      	ldr	r0, [pc, #516]	@ (8008724 <_strtod_l+0x58c>)
 800851e:	f001 f8a7 	bl	8009670 <nan>
 8008522:	ec5b ab10 	vmov	sl, fp, d0
 8008526:	e670      	b.n	800820a <_strtod_l+0x72>
 8008528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800852a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800852c:	eba8 0303 	sub.w	r3, r8, r3
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	bf08      	it	eq
 8008536:	46a9      	moveq	r9, r5
 8008538:	2d10      	cmp	r5, #16
 800853a:	9309      	str	r3, [sp, #36]	@ 0x24
 800853c:	462c      	mov	r4, r5
 800853e:	bfa8      	it	ge
 8008540:	2410      	movge	r4, #16
 8008542:	f7f7 ffef 	bl	8000524 <__aeabi_ui2d>
 8008546:	2d09      	cmp	r5, #9
 8008548:	4682      	mov	sl, r0
 800854a:	468b      	mov	fp, r1
 800854c:	dc13      	bgt.n	8008576 <_strtod_l+0x3de>
 800854e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	f43f ae5a 	beq.w	800820a <_strtod_l+0x72>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	dd78      	ble.n	800864c <_strtod_l+0x4b4>
 800855a:	2b16      	cmp	r3, #22
 800855c:	dc5f      	bgt.n	800861e <_strtod_l+0x486>
 800855e:	4972      	ldr	r1, [pc, #456]	@ (8008728 <_strtod_l+0x590>)
 8008560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008568:	4652      	mov	r2, sl
 800856a:	465b      	mov	r3, fp
 800856c:	f7f8 f854 	bl	8000618 <__aeabi_dmul>
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	e649      	b.n	800820a <_strtod_l+0x72>
 8008576:	4b6c      	ldr	r3, [pc, #432]	@ (8008728 <_strtod_l+0x590>)
 8008578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800857c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008580:	f7f8 f84a 	bl	8000618 <__aeabi_dmul>
 8008584:	4682      	mov	sl, r0
 8008586:	4638      	mov	r0, r7
 8008588:	468b      	mov	fp, r1
 800858a:	f7f7 ffcb 	bl	8000524 <__aeabi_ui2d>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	4650      	mov	r0, sl
 8008594:	4659      	mov	r1, fp
 8008596:	f7f7 fe89 	bl	80002ac <__adddf3>
 800859a:	2d0f      	cmp	r5, #15
 800859c:	4682      	mov	sl, r0
 800859e:	468b      	mov	fp, r1
 80085a0:	ddd5      	ble.n	800854e <_strtod_l+0x3b6>
 80085a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a4:	1b2c      	subs	r4, r5, r4
 80085a6:	441c      	add	r4, r3
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	f340 8093 	ble.w	80086d4 <_strtod_l+0x53c>
 80085ae:	f014 030f 	ands.w	r3, r4, #15
 80085b2:	d00a      	beq.n	80085ca <_strtod_l+0x432>
 80085b4:	495c      	ldr	r1, [pc, #368]	@ (8008728 <_strtod_l+0x590>)
 80085b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c2:	f7f8 f829 	bl	8000618 <__aeabi_dmul>
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	f034 040f 	bics.w	r4, r4, #15
 80085ce:	d073      	beq.n	80086b8 <_strtod_l+0x520>
 80085d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80085d4:	dd49      	ble.n	800866a <_strtod_l+0x4d2>
 80085d6:	2400      	movs	r4, #0
 80085d8:	46a0      	mov	r8, r4
 80085da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80085dc:	46a1      	mov	r9, r4
 80085de:	9a05      	ldr	r2, [sp, #20]
 80085e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008730 <_strtod_l+0x598>
 80085e4:	2322      	movs	r3, #34	@ 0x22
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f43f ae0b 	beq.w	800820a <_strtod_l+0x72>
 80085f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085f6:	9805      	ldr	r0, [sp, #20]
 80085f8:	f7ff f946 	bl	8007888 <_Bfree>
 80085fc:	9805      	ldr	r0, [sp, #20]
 80085fe:	4649      	mov	r1, r9
 8008600:	f7ff f942 	bl	8007888 <_Bfree>
 8008604:	9805      	ldr	r0, [sp, #20]
 8008606:	4641      	mov	r1, r8
 8008608:	f7ff f93e 	bl	8007888 <_Bfree>
 800860c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800860e:	9805      	ldr	r0, [sp, #20]
 8008610:	f7ff f93a 	bl	8007888 <_Bfree>
 8008614:	9805      	ldr	r0, [sp, #20]
 8008616:	4621      	mov	r1, r4
 8008618:	f7ff f936 	bl	8007888 <_Bfree>
 800861c:	e5f5      	b.n	800820a <_strtod_l+0x72>
 800861e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008620:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008624:	4293      	cmp	r3, r2
 8008626:	dbbc      	blt.n	80085a2 <_strtod_l+0x40a>
 8008628:	4c3f      	ldr	r4, [pc, #252]	@ (8008728 <_strtod_l+0x590>)
 800862a:	f1c5 050f 	rsb	r5, r5, #15
 800862e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800863a:	f7f7 ffed 	bl	8000618 <__aeabi_dmul>
 800863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008640:	1b5d      	subs	r5, r3, r5
 8008642:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008646:	e9d4 2300 	ldrd	r2, r3, [r4]
 800864a:	e78f      	b.n	800856c <_strtod_l+0x3d4>
 800864c:	3316      	adds	r3, #22
 800864e:	dba8      	blt.n	80085a2 <_strtod_l+0x40a>
 8008650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008652:	eba3 0808 	sub.w	r8, r3, r8
 8008656:	4b34      	ldr	r3, [pc, #208]	@ (8008728 <_strtod_l+0x590>)
 8008658:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800865c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008660:	4650      	mov	r0, sl
 8008662:	4659      	mov	r1, fp
 8008664:	f7f8 f902 	bl	800086c <__aeabi_ddiv>
 8008668:	e782      	b.n	8008570 <_strtod_l+0x3d8>
 800866a:	2300      	movs	r3, #0
 800866c:	4f2f      	ldr	r7, [pc, #188]	@ (800872c <_strtod_l+0x594>)
 800866e:	1124      	asrs	r4, r4, #4
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	461e      	mov	r6, r3
 8008676:	2c01      	cmp	r4, #1
 8008678:	dc21      	bgt.n	80086be <_strtod_l+0x526>
 800867a:	b10b      	cbz	r3, 8008680 <_strtod_l+0x4e8>
 800867c:	4682      	mov	sl, r0
 800867e:	468b      	mov	fp, r1
 8008680:	492a      	ldr	r1, [pc, #168]	@ (800872c <_strtod_l+0x594>)
 8008682:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008686:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800868a:	4652      	mov	r2, sl
 800868c:	465b      	mov	r3, fp
 800868e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008692:	f7f7 ffc1 	bl	8000618 <__aeabi_dmul>
 8008696:	4b26      	ldr	r3, [pc, #152]	@ (8008730 <_strtod_l+0x598>)
 8008698:	460a      	mov	r2, r1
 800869a:	400b      	ands	r3, r1
 800869c:	4925      	ldr	r1, [pc, #148]	@ (8008734 <_strtod_l+0x59c>)
 800869e:	428b      	cmp	r3, r1
 80086a0:	4682      	mov	sl, r0
 80086a2:	d898      	bhi.n	80085d6 <_strtod_l+0x43e>
 80086a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80086a8:	428b      	cmp	r3, r1
 80086aa:	bf86      	itte	hi
 80086ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008738 <_strtod_l+0x5a0>
 80086b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80086b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80086b8:	2300      	movs	r3, #0
 80086ba:	9308      	str	r3, [sp, #32]
 80086bc:	e076      	b.n	80087ac <_strtod_l+0x614>
 80086be:	07e2      	lsls	r2, r4, #31
 80086c0:	d504      	bpl.n	80086cc <_strtod_l+0x534>
 80086c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c6:	f7f7 ffa7 	bl	8000618 <__aeabi_dmul>
 80086ca:	2301      	movs	r3, #1
 80086cc:	3601      	adds	r6, #1
 80086ce:	1064      	asrs	r4, r4, #1
 80086d0:	3708      	adds	r7, #8
 80086d2:	e7d0      	b.n	8008676 <_strtod_l+0x4de>
 80086d4:	d0f0      	beq.n	80086b8 <_strtod_l+0x520>
 80086d6:	4264      	negs	r4, r4
 80086d8:	f014 020f 	ands.w	r2, r4, #15
 80086dc:	d00a      	beq.n	80086f4 <_strtod_l+0x55c>
 80086de:	4b12      	ldr	r3, [pc, #72]	@ (8008728 <_strtod_l+0x590>)
 80086e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e4:	4650      	mov	r0, sl
 80086e6:	4659      	mov	r1, fp
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f8 f8be 	bl	800086c <__aeabi_ddiv>
 80086f0:	4682      	mov	sl, r0
 80086f2:	468b      	mov	fp, r1
 80086f4:	1124      	asrs	r4, r4, #4
 80086f6:	d0df      	beq.n	80086b8 <_strtod_l+0x520>
 80086f8:	2c1f      	cmp	r4, #31
 80086fa:	dd1f      	ble.n	800873c <_strtod_l+0x5a4>
 80086fc:	2400      	movs	r4, #0
 80086fe:	46a0      	mov	r8, r4
 8008700:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008702:	46a1      	mov	r9, r4
 8008704:	9a05      	ldr	r2, [sp, #20]
 8008706:	2322      	movs	r3, #34	@ 0x22
 8008708:	f04f 0a00 	mov.w	sl, #0
 800870c:	f04f 0b00 	mov.w	fp, #0
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e76b      	b.n	80085ec <_strtod_l+0x454>
 8008714:	08009fcd 	.word	0x08009fcd
 8008718:	0800a298 	.word	0x0800a298
 800871c:	08009fc5 	.word	0x08009fc5
 8008720:	08009ffc 	.word	0x08009ffc
 8008724:	0800a135 	.word	0x0800a135
 8008728:	0800a1d0 	.word	0x0800a1d0
 800872c:	0800a1a8 	.word	0x0800a1a8
 8008730:	7ff00000 	.word	0x7ff00000
 8008734:	7ca00000 	.word	0x7ca00000
 8008738:	7fefffff 	.word	0x7fefffff
 800873c:	f014 0310 	ands.w	r3, r4, #16
 8008740:	bf18      	it	ne
 8008742:	236a      	movne	r3, #106	@ 0x6a
 8008744:	4ea9      	ldr	r6, [pc, #676]	@ (80089ec <_strtod_l+0x854>)
 8008746:	9308      	str	r3, [sp, #32]
 8008748:	4650      	mov	r0, sl
 800874a:	4659      	mov	r1, fp
 800874c:	2300      	movs	r3, #0
 800874e:	07e7      	lsls	r7, r4, #31
 8008750:	d504      	bpl.n	800875c <_strtod_l+0x5c4>
 8008752:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008756:	f7f7 ff5f 	bl	8000618 <__aeabi_dmul>
 800875a:	2301      	movs	r3, #1
 800875c:	1064      	asrs	r4, r4, #1
 800875e:	f106 0608 	add.w	r6, r6, #8
 8008762:	d1f4      	bne.n	800874e <_strtod_l+0x5b6>
 8008764:	b10b      	cbz	r3, 800876a <_strtod_l+0x5d2>
 8008766:	4682      	mov	sl, r0
 8008768:	468b      	mov	fp, r1
 800876a:	9b08      	ldr	r3, [sp, #32]
 800876c:	b1b3      	cbz	r3, 800879c <_strtod_l+0x604>
 800876e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008772:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008776:	2b00      	cmp	r3, #0
 8008778:	4659      	mov	r1, fp
 800877a:	dd0f      	ble.n	800879c <_strtod_l+0x604>
 800877c:	2b1f      	cmp	r3, #31
 800877e:	dd56      	ble.n	800882e <_strtod_l+0x696>
 8008780:	2b34      	cmp	r3, #52	@ 0x34
 8008782:	bfde      	ittt	le
 8008784:	f04f 33ff 	movle.w	r3, #4294967295
 8008788:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800878c:	4093      	lslle	r3, r2
 800878e:	f04f 0a00 	mov.w	sl, #0
 8008792:	bfcc      	ite	gt
 8008794:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008798:	ea03 0b01 	andle.w	fp, r3, r1
 800879c:	2200      	movs	r2, #0
 800879e:	2300      	movs	r3, #0
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	f7f8 f9a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d1a7      	bne.n	80086fc <_strtod_l+0x564>
 80087ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80087b2:	9805      	ldr	r0, [sp, #20]
 80087b4:	462b      	mov	r3, r5
 80087b6:	464a      	mov	r2, r9
 80087b8:	f7ff f8ce 	bl	8007958 <__s2b>
 80087bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80087be:	2800      	cmp	r0, #0
 80087c0:	f43f af09 	beq.w	80085d6 <_strtod_l+0x43e>
 80087c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	eba3 0308 	sub.w	r3, r3, r8
 80087ce:	bfa8      	it	ge
 80087d0:	2300      	movge	r3, #0
 80087d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80087d4:	2400      	movs	r4, #0
 80087d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087da:	9316      	str	r3, [sp, #88]	@ 0x58
 80087dc:	46a0      	mov	r8, r4
 80087de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087e0:	9805      	ldr	r0, [sp, #20]
 80087e2:	6859      	ldr	r1, [r3, #4]
 80087e4:	f7ff f810 	bl	8007808 <_Balloc>
 80087e8:	4681      	mov	r9, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	f43f aef7 	beq.w	80085de <_strtod_l+0x446>
 80087f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	3202      	adds	r2, #2
 80087f6:	f103 010c 	add.w	r1, r3, #12
 80087fa:	0092      	lsls	r2, r2, #2
 80087fc:	300c      	adds	r0, #12
 80087fe:	f7fe f894 	bl	800692a <memcpy>
 8008802:	ec4b ab10 	vmov	d0, sl, fp
 8008806:	9805      	ldr	r0, [sp, #20]
 8008808:	aa1c      	add	r2, sp, #112	@ 0x70
 800880a:	a91b      	add	r1, sp, #108	@ 0x6c
 800880c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008810:	f7ff fbd6 	bl	8007fc0 <__d2b>
 8008814:	901a      	str	r0, [sp, #104]	@ 0x68
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f aee1 	beq.w	80085de <_strtod_l+0x446>
 800881c:	9805      	ldr	r0, [sp, #20]
 800881e:	2101      	movs	r1, #1
 8008820:	f7ff f930 	bl	8007a84 <__i2b>
 8008824:	4680      	mov	r8, r0
 8008826:	b948      	cbnz	r0, 800883c <_strtod_l+0x6a4>
 8008828:	f04f 0800 	mov.w	r8, #0
 800882c:	e6d7      	b.n	80085de <_strtod_l+0x446>
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	ea03 0a0a 	and.w	sl, r3, sl
 800883a:	e7af      	b.n	800879c <_strtod_l+0x604>
 800883c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800883e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008840:	2d00      	cmp	r5, #0
 8008842:	bfab      	itete	ge
 8008844:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008846:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008848:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800884a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800884c:	bfac      	ite	ge
 800884e:	18ef      	addge	r7, r5, r3
 8008850:	1b5e      	sublt	r6, r3, r5
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	1aed      	subs	r5, r5, r3
 8008856:	4415      	add	r5, r2
 8008858:	4b65      	ldr	r3, [pc, #404]	@ (80089f0 <_strtod_l+0x858>)
 800885a:	3d01      	subs	r5, #1
 800885c:	429d      	cmp	r5, r3
 800885e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008862:	da50      	bge.n	8008906 <_strtod_l+0x76e>
 8008864:	1b5b      	subs	r3, r3, r5
 8008866:	2b1f      	cmp	r3, #31
 8008868:	eba2 0203 	sub.w	r2, r2, r3
 800886c:	f04f 0101 	mov.w	r1, #1
 8008870:	dc3d      	bgt.n	80088ee <_strtod_l+0x756>
 8008872:	fa01 f303 	lsl.w	r3, r1, r3
 8008876:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008878:	2300      	movs	r3, #0
 800887a:	9310      	str	r3, [sp, #64]	@ 0x40
 800887c:	18bd      	adds	r5, r7, r2
 800887e:	9b08      	ldr	r3, [sp, #32]
 8008880:	42af      	cmp	r7, r5
 8008882:	4416      	add	r6, r2
 8008884:	441e      	add	r6, r3
 8008886:	463b      	mov	r3, r7
 8008888:	bfa8      	it	ge
 800888a:	462b      	movge	r3, r5
 800888c:	42b3      	cmp	r3, r6
 800888e:	bfa8      	it	ge
 8008890:	4633      	movge	r3, r6
 8008892:	2b00      	cmp	r3, #0
 8008894:	bfc2      	ittt	gt
 8008896:	1aed      	subgt	r5, r5, r3
 8008898:	1af6      	subgt	r6, r6, r3
 800889a:	1aff      	subgt	r7, r7, r3
 800889c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd16      	ble.n	80088d0 <_strtod_l+0x738>
 80088a2:	4641      	mov	r1, r8
 80088a4:	9805      	ldr	r0, [sp, #20]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f7ff f9a4 	bl	8007bf4 <__pow5mult>
 80088ac:	4680      	mov	r8, r0
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d0ba      	beq.n	8008828 <_strtod_l+0x690>
 80088b2:	4601      	mov	r1, r0
 80088b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088b6:	9805      	ldr	r0, [sp, #20]
 80088b8:	f7ff f8fa 	bl	8007ab0 <__multiply>
 80088bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f ae8d 	beq.w	80085de <_strtod_l+0x446>
 80088c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088c6:	9805      	ldr	r0, [sp, #20]
 80088c8:	f7fe ffde 	bl	8007888 <_Bfree>
 80088cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80088d0:	2d00      	cmp	r5, #0
 80088d2:	dc1d      	bgt.n	8008910 <_strtod_l+0x778>
 80088d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dd23      	ble.n	8008922 <_strtod_l+0x78a>
 80088da:	4649      	mov	r1, r9
 80088dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80088de:	9805      	ldr	r0, [sp, #20]
 80088e0:	f7ff f988 	bl	8007bf4 <__pow5mult>
 80088e4:	4681      	mov	r9, r0
 80088e6:	b9e0      	cbnz	r0, 8008922 <_strtod_l+0x78a>
 80088e8:	f04f 0900 	mov.w	r9, #0
 80088ec:	e677      	b.n	80085de <_strtod_l+0x446>
 80088ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80088f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80088f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80088fa:	35e2      	adds	r5, #226	@ 0xe2
 80088fc:	fa01 f305 	lsl.w	r3, r1, r5
 8008900:	9310      	str	r3, [sp, #64]	@ 0x40
 8008902:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008904:	e7ba      	b.n	800887c <_strtod_l+0x6e4>
 8008906:	2300      	movs	r3, #0
 8008908:	9310      	str	r3, [sp, #64]	@ 0x40
 800890a:	2301      	movs	r3, #1
 800890c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800890e:	e7b5      	b.n	800887c <_strtod_l+0x6e4>
 8008910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008912:	9805      	ldr	r0, [sp, #20]
 8008914:	462a      	mov	r2, r5
 8008916:	f7ff f9c7 	bl	8007ca8 <__lshift>
 800891a:	901a      	str	r0, [sp, #104]	@ 0x68
 800891c:	2800      	cmp	r0, #0
 800891e:	d1d9      	bne.n	80088d4 <_strtod_l+0x73c>
 8008920:	e65d      	b.n	80085de <_strtod_l+0x446>
 8008922:	2e00      	cmp	r6, #0
 8008924:	dd07      	ble.n	8008936 <_strtod_l+0x79e>
 8008926:	4649      	mov	r1, r9
 8008928:	9805      	ldr	r0, [sp, #20]
 800892a:	4632      	mov	r2, r6
 800892c:	f7ff f9bc 	bl	8007ca8 <__lshift>
 8008930:	4681      	mov	r9, r0
 8008932:	2800      	cmp	r0, #0
 8008934:	d0d8      	beq.n	80088e8 <_strtod_l+0x750>
 8008936:	2f00      	cmp	r7, #0
 8008938:	dd08      	ble.n	800894c <_strtod_l+0x7b4>
 800893a:	4641      	mov	r1, r8
 800893c:	9805      	ldr	r0, [sp, #20]
 800893e:	463a      	mov	r2, r7
 8008940:	f7ff f9b2 	bl	8007ca8 <__lshift>
 8008944:	4680      	mov	r8, r0
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f ae49 	beq.w	80085de <_strtod_l+0x446>
 800894c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800894e:	9805      	ldr	r0, [sp, #20]
 8008950:	464a      	mov	r2, r9
 8008952:	f7ff fa31 	bl	8007db8 <__mdiff>
 8008956:	4604      	mov	r4, r0
 8008958:	2800      	cmp	r0, #0
 800895a:	f43f ae40 	beq.w	80085de <_strtod_l+0x446>
 800895e:	68c3      	ldr	r3, [r0, #12]
 8008960:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008962:	2300      	movs	r3, #0
 8008964:	60c3      	str	r3, [r0, #12]
 8008966:	4641      	mov	r1, r8
 8008968:	f7ff fa0a 	bl	8007d80 <__mcmp>
 800896c:	2800      	cmp	r0, #0
 800896e:	da45      	bge.n	80089fc <_strtod_l+0x864>
 8008970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008972:	ea53 030a 	orrs.w	r3, r3, sl
 8008976:	d16b      	bne.n	8008a50 <_strtod_l+0x8b8>
 8008978:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800897c:	2b00      	cmp	r3, #0
 800897e:	d167      	bne.n	8008a50 <_strtod_l+0x8b8>
 8008980:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008984:	0d1b      	lsrs	r3, r3, #20
 8008986:	051b      	lsls	r3, r3, #20
 8008988:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800898c:	d960      	bls.n	8008a50 <_strtod_l+0x8b8>
 800898e:	6963      	ldr	r3, [r4, #20]
 8008990:	b913      	cbnz	r3, 8008998 <_strtod_l+0x800>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	2b01      	cmp	r3, #1
 8008996:	dd5b      	ble.n	8008a50 <_strtod_l+0x8b8>
 8008998:	4621      	mov	r1, r4
 800899a:	2201      	movs	r2, #1
 800899c:	9805      	ldr	r0, [sp, #20]
 800899e:	f7ff f983 	bl	8007ca8 <__lshift>
 80089a2:	4641      	mov	r1, r8
 80089a4:	4604      	mov	r4, r0
 80089a6:	f7ff f9eb 	bl	8007d80 <__mcmp>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	dd50      	ble.n	8008a50 <_strtod_l+0x8b8>
 80089ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089b2:	9a08      	ldr	r2, [sp, #32]
 80089b4:	0d1b      	lsrs	r3, r3, #20
 80089b6:	051b      	lsls	r3, r3, #20
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d06a      	beq.n	8008a92 <_strtod_l+0x8fa>
 80089bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089c0:	d867      	bhi.n	8008a92 <_strtod_l+0x8fa>
 80089c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80089c6:	f67f ae9d 	bls.w	8008704 <_strtod_l+0x56c>
 80089ca:	4b0a      	ldr	r3, [pc, #40]	@ (80089f4 <_strtod_l+0x85c>)
 80089cc:	4650      	mov	r0, sl
 80089ce:	4659      	mov	r1, fp
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7f7 fe21 	bl	8000618 <__aeabi_dmul>
 80089d6:	4b08      	ldr	r3, [pc, #32]	@ (80089f8 <_strtod_l+0x860>)
 80089d8:	400b      	ands	r3, r1
 80089da:	4682      	mov	sl, r0
 80089dc:	468b      	mov	fp, r1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f47f ae08 	bne.w	80085f4 <_strtod_l+0x45c>
 80089e4:	9a05      	ldr	r2, [sp, #20]
 80089e6:	2322      	movs	r3, #34	@ 0x22
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	e603      	b.n	80085f4 <_strtod_l+0x45c>
 80089ec:	0800a2c0 	.word	0x0800a2c0
 80089f0:	fffffc02 	.word	0xfffffc02
 80089f4:	39500000 	.word	0x39500000
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008a00:	d165      	bne.n	8008ace <_strtod_l+0x936>
 8008a02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a08:	b35a      	cbz	r2, 8008a62 <_strtod_l+0x8ca>
 8008a0a:	4a9f      	ldr	r2, [pc, #636]	@ (8008c88 <_strtod_l+0xaf0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d12b      	bne.n	8008a68 <_strtod_l+0x8d0>
 8008a10:	9b08      	ldr	r3, [sp, #32]
 8008a12:	4651      	mov	r1, sl
 8008a14:	b303      	cbz	r3, 8008a58 <_strtod_l+0x8c0>
 8008a16:	4b9d      	ldr	r3, [pc, #628]	@ (8008c8c <_strtod_l+0xaf4>)
 8008a18:	465a      	mov	r2, fp
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	d81b      	bhi.n	8008a5e <_strtod_l+0x8c6>
 8008a26:	0d1b      	lsrs	r3, r3, #20
 8008a28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	4299      	cmp	r1, r3
 8008a32:	d119      	bne.n	8008a68 <_strtod_l+0x8d0>
 8008a34:	4b96      	ldr	r3, [pc, #600]	@ (8008c90 <_strtod_l+0xaf8>)
 8008a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d102      	bne.n	8008a42 <_strtod_l+0x8aa>
 8008a3c:	3101      	adds	r1, #1
 8008a3e:	f43f adce 	beq.w	80085de <_strtod_l+0x446>
 8008a42:	4b92      	ldr	r3, [pc, #584]	@ (8008c8c <_strtod_l+0xaf4>)
 8008a44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a46:	401a      	ands	r2, r3
 8008a48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a4c:	f04f 0a00 	mov.w	sl, #0
 8008a50:	9b08      	ldr	r3, [sp, #32]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1b9      	bne.n	80089ca <_strtod_l+0x832>
 8008a56:	e5cd      	b.n	80085f4 <_strtod_l+0x45c>
 8008a58:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5c:	e7e8      	b.n	8008a30 <_strtod_l+0x898>
 8008a5e:	4613      	mov	r3, r2
 8008a60:	e7e6      	b.n	8008a30 <_strtod_l+0x898>
 8008a62:	ea53 030a 	orrs.w	r3, r3, sl
 8008a66:	d0a2      	beq.n	80089ae <_strtod_l+0x816>
 8008a68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a6a:	b1db      	cbz	r3, 8008aa4 <_strtod_l+0x90c>
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a6e:	4213      	tst	r3, r2
 8008a70:	d0ee      	beq.n	8008a50 <_strtod_l+0x8b8>
 8008a72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a74:	9a08      	ldr	r2, [sp, #32]
 8008a76:	4650      	mov	r0, sl
 8008a78:	4659      	mov	r1, fp
 8008a7a:	b1bb      	cbz	r3, 8008aac <_strtod_l+0x914>
 8008a7c:	f7ff fb6e 	bl	800815c <sulp>
 8008a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a84:	ec53 2b10 	vmov	r2, r3, d0
 8008a88:	f7f7 fc10 	bl	80002ac <__adddf3>
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	468b      	mov	fp, r1
 8008a90:	e7de      	b.n	8008a50 <_strtod_l+0x8b8>
 8008a92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a9e:	f04f 3aff 	mov.w	sl, #4294967295
 8008aa2:	e7d5      	b.n	8008a50 <_strtod_l+0x8b8>
 8008aa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008aa6:	ea13 0f0a 	tst.w	r3, sl
 8008aaa:	e7e1      	b.n	8008a70 <_strtod_l+0x8d8>
 8008aac:	f7ff fb56 	bl	800815c <sulp>
 8008ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab4:	ec53 2b10 	vmov	r2, r3, d0
 8008ab8:	f7f7 fbf6 	bl	80002a8 <__aeabi_dsub>
 8008abc:	2200      	movs	r2, #0
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4682      	mov	sl, r0
 8008ac2:	468b      	mov	fp, r1
 8008ac4:	f7f8 f810 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0c1      	beq.n	8008a50 <_strtod_l+0x8b8>
 8008acc:	e61a      	b.n	8008704 <_strtod_l+0x56c>
 8008ace:	4641      	mov	r1, r8
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f7ff facd 	bl	8008070 <__ratio>
 8008ad6:	ec57 6b10 	vmov	r6, r7, d0
 8008ada:	2200      	movs	r2, #0
 8008adc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	f7f8 f814 	bl	8000b10 <__aeabi_dcmple>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d06f      	beq.n	8008bcc <_strtod_l+0xa34>
 8008aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d17a      	bne.n	8008be8 <_strtod_l+0xa50>
 8008af2:	f1ba 0f00 	cmp.w	sl, #0
 8008af6:	d158      	bne.n	8008baa <_strtod_l+0xa12>
 8008af8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008afa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d15a      	bne.n	8008bb8 <_strtod_l+0xa20>
 8008b02:	4b64      	ldr	r3, [pc, #400]	@ (8008c94 <_strtod_l+0xafc>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	4630      	mov	r0, r6
 8008b08:	4639      	mov	r1, r7
 8008b0a:	f7f7 fff7 	bl	8000afc <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d159      	bne.n	8008bc6 <_strtod_l+0xa2e>
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	4b60      	ldr	r3, [pc, #384]	@ (8008c98 <_strtod_l+0xb00>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fd7d 	bl	8000618 <__aeabi_dmul>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460f      	mov	r7, r1
 8008b22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b26:	9606      	str	r6, [sp, #24]
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b2e:	4d57      	ldr	r5, [pc, #348]	@ (8008c8c <_strtod_l+0xaf4>)
 8008b30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b36:	401d      	ands	r5, r3
 8008b38:	4b58      	ldr	r3, [pc, #352]	@ (8008c9c <_strtod_l+0xb04>)
 8008b3a:	429d      	cmp	r5, r3
 8008b3c:	f040 80b2 	bne.w	8008ca4 <_strtod_l+0xb0c>
 8008b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b46:	ec4b ab10 	vmov	d0, sl, fp
 8008b4a:	f7ff f9c9 	bl	8007ee0 <__ulp>
 8008b4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b52:	ec51 0b10 	vmov	r0, r1, d0
 8008b56:	f7f7 fd5f 	bl	8000618 <__aeabi_dmul>
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	f7f7 fba5 	bl	80002ac <__adddf3>
 8008b62:	460b      	mov	r3, r1
 8008b64:	4949      	ldr	r1, [pc, #292]	@ (8008c8c <_strtod_l+0xaf4>)
 8008b66:	4a4e      	ldr	r2, [pc, #312]	@ (8008ca0 <_strtod_l+0xb08>)
 8008b68:	4019      	ands	r1, r3
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	4682      	mov	sl, r0
 8008b6e:	d942      	bls.n	8008bf6 <_strtod_l+0xa5e>
 8008b70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b72:	4b47      	ldr	r3, [pc, #284]	@ (8008c90 <_strtod_l+0xaf8>)
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d103      	bne.n	8008b80 <_strtod_l+0x9e8>
 8008b78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	f43f ad2f 	beq.w	80085de <_strtod_l+0x446>
 8008b80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c90 <_strtod_l+0xaf8>
 8008b84:	f04f 3aff 	mov.w	sl, #4294967295
 8008b88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	f7fe fe7c 	bl	8007888 <_Bfree>
 8008b90:	9805      	ldr	r0, [sp, #20]
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7fe fe78 	bl	8007888 <_Bfree>
 8008b98:	9805      	ldr	r0, [sp, #20]
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	f7fe fe74 	bl	8007888 <_Bfree>
 8008ba0:	9805      	ldr	r0, [sp, #20]
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	f7fe fe70 	bl	8007888 <_Bfree>
 8008ba8:	e619      	b.n	80087de <_strtod_l+0x646>
 8008baa:	f1ba 0f01 	cmp.w	sl, #1
 8008bae:	d103      	bne.n	8008bb8 <_strtod_l+0xa20>
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f43f ada6 	beq.w	8008704 <_strtod_l+0x56c>
 8008bb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c68 <_strtod_l+0xad0>
 8008bbc:	4f35      	ldr	r7, [pc, #212]	@ (8008c94 <_strtod_l+0xafc>)
 8008bbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	e7b1      	b.n	8008b2a <_strtod_l+0x992>
 8008bc6:	4f34      	ldr	r7, [pc, #208]	@ (8008c98 <_strtod_l+0xb00>)
 8008bc8:	2600      	movs	r6, #0
 8008bca:	e7aa      	b.n	8008b22 <_strtod_l+0x98a>
 8008bcc:	4b32      	ldr	r3, [pc, #200]	@ (8008c98 <_strtod_l+0xb00>)
 8008bce:	4630      	mov	r0, r6
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f7f7 fd20 	bl	8000618 <__aeabi_dmul>
 8008bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d09f      	beq.n	8008b22 <_strtod_l+0x98a>
 8008be2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008be6:	e7a0      	b.n	8008b2a <_strtod_l+0x992>
 8008be8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c70 <_strtod_l+0xad8>
 8008bec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bf0:	ec57 6b17 	vmov	r6, r7, d7
 8008bf4:	e799      	b.n	8008b2a <_strtod_l+0x992>
 8008bf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008bfa:	9b08      	ldr	r3, [sp, #32]
 8008bfc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1c1      	bne.n	8008b88 <_strtod_l+0x9f0>
 8008c04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c08:	0d1b      	lsrs	r3, r3, #20
 8008c0a:	051b      	lsls	r3, r3, #20
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	d1bb      	bne.n	8008b88 <_strtod_l+0x9f0>
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f8 f860 	bl	8000cd8 <__aeabi_d2lz>
 8008c18:	f7f7 fcd0 	bl	80005bc <__aeabi_l2d>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fb40 	bl	80002a8 <__aeabi_dsub>
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c36:	ea46 060a 	orr.w	r6, r6, sl
 8008c3a:	431e      	orrs	r6, r3
 8008c3c:	d06f      	beq.n	8008d1e <_strtod_l+0xb86>
 8008c3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c78 <_strtod_l+0xae0>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 ff5a 	bl	8000afc <__aeabi_dcmplt>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f47f acd3 	bne.w	80085f4 <_strtod_l+0x45c>
 8008c4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c80 <_strtod_l+0xae8>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c58:	f7f7 ff6e 	bl	8000b38 <__aeabi_dcmpgt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d093      	beq.n	8008b88 <_strtod_l+0x9f0>
 8008c60:	e4c8      	b.n	80085f4 <_strtod_l+0x45c>
 8008c62:	bf00      	nop
 8008c64:	f3af 8000 	nop.w
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	bff00000 	.word	0xbff00000
 8008c70:	00000000 	.word	0x00000000
 8008c74:	3ff00000 	.word	0x3ff00000
 8008c78:	94a03595 	.word	0x94a03595
 8008c7c:	3fdfffff 	.word	0x3fdfffff
 8008c80:	35afe535 	.word	0x35afe535
 8008c84:	3fe00000 	.word	0x3fe00000
 8008c88:	000fffff 	.word	0x000fffff
 8008c8c:	7ff00000 	.word	0x7ff00000
 8008c90:	7fefffff 	.word	0x7fefffff
 8008c94:	3ff00000 	.word	0x3ff00000
 8008c98:	3fe00000 	.word	0x3fe00000
 8008c9c:	7fe00000 	.word	0x7fe00000
 8008ca0:	7c9fffff 	.word	0x7c9fffff
 8008ca4:	9b08      	ldr	r3, [sp, #32]
 8008ca6:	b323      	cbz	r3, 8008cf2 <_strtod_l+0xb5a>
 8008ca8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008cac:	d821      	bhi.n	8008cf2 <_strtod_l+0xb5a>
 8008cae:	a328      	add	r3, pc, #160	@ (adr r3, 8008d50 <_strtod_l+0xbb8>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 ff2a 	bl	8000b10 <__aeabi_dcmple>
 8008cbc:	b1a0      	cbz	r0, 8008ce8 <_strtod_l+0xb50>
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7f7 ff81 	bl	8000bc8 <__aeabi_d2uiz>
 8008cc6:	2801      	cmp	r0, #1
 8008cc8:	bf38      	it	cc
 8008cca:	2001      	movcc	r0, #1
 8008ccc:	f7f7 fc2a 	bl	8000524 <__aeabi_ui2d>
 8008cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	b9fb      	cbnz	r3, 8008d18 <_strtod_l+0xb80>
 8008cd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008cdc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008cde:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ce0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ce4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ce8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008cee:	1b5b      	subs	r3, r3, r5
 8008cf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cf2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008cf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008cfa:	f7ff f8f1 	bl	8007ee0 <__ulp>
 8008cfe:	4650      	mov	r0, sl
 8008d00:	ec53 2b10 	vmov	r2, r3, d0
 8008d04:	4659      	mov	r1, fp
 8008d06:	f7f7 fc87 	bl	8000618 <__aeabi_dmul>
 8008d0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d0e:	f7f7 facd 	bl	80002ac <__adddf3>
 8008d12:	4682      	mov	sl, r0
 8008d14:	468b      	mov	fp, r1
 8008d16:	e770      	b.n	8008bfa <_strtod_l+0xa62>
 8008d18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d1c:	e7e0      	b.n	8008ce0 <_strtod_l+0xb48>
 8008d1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d58 <_strtod_l+0xbc0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 feea 	bl	8000afc <__aeabi_dcmplt>
 8008d28:	e798      	b.n	8008c5c <_strtod_l+0xac4>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	f7ff ba6d 	b.w	8008212 <_strtod_l+0x7a>
 8008d38:	2a65      	cmp	r2, #101	@ 0x65
 8008d3a:	f43f ab68 	beq.w	800840e <_strtod_l+0x276>
 8008d3e:	2a45      	cmp	r2, #69	@ 0x45
 8008d40:	f43f ab65 	beq.w	800840e <_strtod_l+0x276>
 8008d44:	2301      	movs	r3, #1
 8008d46:	f7ff bba0 	b.w	800848a <_strtod_l+0x2f2>
 8008d4a:	bf00      	nop
 8008d4c:	f3af 8000 	nop.w
 8008d50:	ffc00000 	.word	0xffc00000
 8008d54:	41dfffff 	.word	0x41dfffff
 8008d58:	94a03595 	.word	0x94a03595
 8008d5c:	3fcfffff 	.word	0x3fcfffff

08008d60 <_strtod_r>:
 8008d60:	4b01      	ldr	r3, [pc, #4]	@ (8008d68 <_strtod_r+0x8>)
 8008d62:	f7ff ba19 	b.w	8008198 <_strtod_l>
 8008d66:	bf00      	nop
 8008d68:	2000006c 	.word	0x2000006c

08008d6c <_strtol_l.isra.0>:
 8008d6c:	2b24      	cmp	r3, #36	@ 0x24
 8008d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d72:	4686      	mov	lr, r0
 8008d74:	4690      	mov	r8, r2
 8008d76:	d801      	bhi.n	8008d7c <_strtol_l.isra.0+0x10>
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d106      	bne.n	8008d8a <_strtol_l.isra.0+0x1e>
 8008d7c:	f7fd fda8 	bl	80068d0 <__errno>
 8008d80:	2316      	movs	r3, #22
 8008d82:	6003      	str	r3, [r0, #0]
 8008d84:	2000      	movs	r0, #0
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	4834      	ldr	r0, [pc, #208]	@ (8008e5c <_strtol_l.isra.0+0xf0>)
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	462a      	mov	r2, r5
 8008d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d94:	5d06      	ldrb	r6, [r0, r4]
 8008d96:	f016 0608 	ands.w	r6, r6, #8
 8008d9a:	d1f8      	bne.n	8008d8e <_strtol_l.isra.0+0x22>
 8008d9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d9e:	d110      	bne.n	8008dc2 <_strtol_l.isra.0+0x56>
 8008da0:	782c      	ldrb	r4, [r5, #0]
 8008da2:	2601      	movs	r6, #1
 8008da4:	1c95      	adds	r5, r2, #2
 8008da6:	f033 0210 	bics.w	r2, r3, #16
 8008daa:	d115      	bne.n	8008dd8 <_strtol_l.isra.0+0x6c>
 8008dac:	2c30      	cmp	r4, #48	@ 0x30
 8008dae:	d10d      	bne.n	8008dcc <_strtol_l.isra.0+0x60>
 8008db0:	782a      	ldrb	r2, [r5, #0]
 8008db2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008db6:	2a58      	cmp	r2, #88	@ 0x58
 8008db8:	d108      	bne.n	8008dcc <_strtol_l.isra.0+0x60>
 8008dba:	786c      	ldrb	r4, [r5, #1]
 8008dbc:	3502      	adds	r5, #2
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	e00a      	b.n	8008dd8 <_strtol_l.isra.0+0x6c>
 8008dc2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008dc4:	bf04      	itt	eq
 8008dc6:	782c      	ldrbeq	r4, [r5, #0]
 8008dc8:	1c95      	addeq	r5, r2, #2
 8008dca:	e7ec      	b.n	8008da6 <_strtol_l.isra.0+0x3a>
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f6      	bne.n	8008dbe <_strtol_l.isra.0+0x52>
 8008dd0:	2c30      	cmp	r4, #48	@ 0x30
 8008dd2:	bf14      	ite	ne
 8008dd4:	230a      	movne	r3, #10
 8008dd6:	2308      	moveq	r3, #8
 8008dd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ddc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008de0:	2200      	movs	r2, #0
 8008de2:	fbbc f9f3 	udiv	r9, ip, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008dec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008df0:	2f09      	cmp	r7, #9
 8008df2:	d80f      	bhi.n	8008e14 <_strtol_l.isra.0+0xa8>
 8008df4:	463c      	mov	r4, r7
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	dd1b      	ble.n	8008e32 <_strtol_l.isra.0+0xc6>
 8008dfa:	1c57      	adds	r7, r2, #1
 8008dfc:	d007      	beq.n	8008e0e <_strtol_l.isra.0+0xa2>
 8008dfe:	4581      	cmp	r9, r0
 8008e00:	d314      	bcc.n	8008e2c <_strtol_l.isra.0+0xc0>
 8008e02:	d101      	bne.n	8008e08 <_strtol_l.isra.0+0x9c>
 8008e04:	45a2      	cmp	sl, r4
 8008e06:	db11      	blt.n	8008e2c <_strtol_l.isra.0+0xc0>
 8008e08:	fb00 4003 	mla	r0, r0, r3, r4
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e12:	e7eb      	b.n	8008dec <_strtol_l.isra.0+0x80>
 8008e14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e18:	2f19      	cmp	r7, #25
 8008e1a:	d801      	bhi.n	8008e20 <_strtol_l.isra.0+0xb4>
 8008e1c:	3c37      	subs	r4, #55	@ 0x37
 8008e1e:	e7ea      	b.n	8008df6 <_strtol_l.isra.0+0x8a>
 8008e20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e24:	2f19      	cmp	r7, #25
 8008e26:	d804      	bhi.n	8008e32 <_strtol_l.isra.0+0xc6>
 8008e28:	3c57      	subs	r4, #87	@ 0x57
 8008e2a:	e7e4      	b.n	8008df6 <_strtol_l.isra.0+0x8a>
 8008e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e30:	e7ed      	b.n	8008e0e <_strtol_l.isra.0+0xa2>
 8008e32:	1c53      	adds	r3, r2, #1
 8008e34:	d108      	bne.n	8008e48 <_strtol_l.isra.0+0xdc>
 8008e36:	2322      	movs	r3, #34	@ 0x22
 8008e38:	f8ce 3000 	str.w	r3, [lr]
 8008e3c:	4660      	mov	r0, ip
 8008e3e:	f1b8 0f00 	cmp.w	r8, #0
 8008e42:	d0a0      	beq.n	8008d86 <_strtol_l.isra.0+0x1a>
 8008e44:	1e69      	subs	r1, r5, #1
 8008e46:	e006      	b.n	8008e56 <_strtol_l.isra.0+0xea>
 8008e48:	b106      	cbz	r6, 8008e4c <_strtol_l.isra.0+0xe0>
 8008e4a:	4240      	negs	r0, r0
 8008e4c:	f1b8 0f00 	cmp.w	r8, #0
 8008e50:	d099      	beq.n	8008d86 <_strtol_l.isra.0+0x1a>
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	d1f6      	bne.n	8008e44 <_strtol_l.isra.0+0xd8>
 8008e56:	f8c8 1000 	str.w	r1, [r8]
 8008e5a:	e794      	b.n	8008d86 <_strtol_l.isra.0+0x1a>
 8008e5c:	0800a2e9 	.word	0x0800a2e9

08008e60 <_strtol_r>:
 8008e60:	f7ff bf84 	b.w	8008d6c <_strtol_l.isra.0>

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	42be      	cmp	r6, r7
 8008e6e:	680b      	ldr	r3, [r1, #0]
 8008e70:	4682      	mov	sl, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4690      	mov	r8, r2
 8008e76:	d82d      	bhi.n	8008ed4 <__ssputs_r+0x70>
 8008e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e80:	d026      	beq.n	8008ed0 <__ssputs_r+0x6c>
 8008e82:	6965      	ldr	r5, [r4, #20]
 8008e84:	6909      	ldr	r1, [r1, #16]
 8008e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e8a:	eba3 0901 	sub.w	r9, r3, r1
 8008e8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e92:	1c7b      	adds	r3, r7, #1
 8008e94:	444b      	add	r3, r9
 8008e96:	106d      	asrs	r5, r5, #1
 8008e98:	429d      	cmp	r5, r3
 8008e9a:	bf38      	it	cc
 8008e9c:	461d      	movcc	r5, r3
 8008e9e:	0553      	lsls	r3, r2, #21
 8008ea0:	d527      	bpl.n	8008ef2 <__ssputs_r+0x8e>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f7fe fc24 	bl	80076f0 <_malloc_r>
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	b360      	cbz	r0, 8008f06 <__ssputs_r+0xa2>
 8008eac:	6921      	ldr	r1, [r4, #16]
 8008eae:	464a      	mov	r2, r9
 8008eb0:	f7fd fd3b 	bl	800692a <memcpy>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	6126      	str	r6, [r4, #16]
 8008ec2:	6165      	str	r5, [r4, #20]
 8008ec4:	444e      	add	r6, r9
 8008ec6:	eba5 0509 	sub.w	r5, r5, r9
 8008eca:	6026      	str	r6, [r4, #0]
 8008ecc:	60a5      	str	r5, [r4, #8]
 8008ece:	463e      	mov	r6, r7
 8008ed0:	42be      	cmp	r6, r7
 8008ed2:	d900      	bls.n	8008ed6 <__ssputs_r+0x72>
 8008ed4:	463e      	mov	r6, r7
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4641      	mov	r1, r8
 8008edc:	f000 fb6a 	bl	80095b4 <memmove>
 8008ee0:	68a3      	ldr	r3, [r4, #8]
 8008ee2:	1b9b      	subs	r3, r3, r6
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4433      	add	r3, r6
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	f000 ff41 	bl	8009d7a <_realloc_r>
 8008ef8:	4606      	mov	r6, r0
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d1e0      	bne.n	8008ec0 <__ssputs_r+0x5c>
 8008efe:	6921      	ldr	r1, [r4, #16]
 8008f00:	4650      	mov	r0, sl
 8008f02:	f7fe fb81 	bl	8007608 <_free_r>
 8008f06:	230c      	movs	r3, #12
 8008f08:	f8ca 3000 	str.w	r3, [sl]
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e7e9      	b.n	8008eee <__ssputs_r+0x8a>
	...

08008f1c <_svfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4698      	mov	r8, r3
 8008f22:	898b      	ldrh	r3, [r1, #12]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	b09d      	sub	sp, #116	@ 0x74
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	d510      	bpl.n	8008f52 <_svfiprintf_r+0x36>
 8008f30:	690b      	ldr	r3, [r1, #16]
 8008f32:	b973      	cbnz	r3, 8008f52 <_svfiprintf_r+0x36>
 8008f34:	2140      	movs	r1, #64	@ 0x40
 8008f36:	f7fe fbdb 	bl	80076f0 <_malloc_r>
 8008f3a:	6028      	str	r0, [r5, #0]
 8008f3c:	6128      	str	r0, [r5, #16]
 8008f3e:	b930      	cbnz	r0, 8008f4e <_svfiprintf_r+0x32>
 8008f40:	230c      	movs	r3, #12
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	b01d      	add	sp, #116	@ 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	2340      	movs	r3, #64	@ 0x40
 8008f50:	616b      	str	r3, [r5, #20]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f56:	2320      	movs	r3, #32
 8008f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f60:	2330      	movs	r3, #48	@ 0x30
 8008f62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009100 <_svfiprintf_r+0x1e4>
 8008f66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f6a:	f04f 0901 	mov.w	r9, #1
 8008f6e:	4623      	mov	r3, r4
 8008f70:	469a      	mov	sl, r3
 8008f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f76:	b10a      	cbz	r2, 8008f7c <_svfiprintf_r+0x60>
 8008f78:	2a25      	cmp	r2, #37	@ 0x25
 8008f7a:	d1f9      	bne.n	8008f70 <_svfiprintf_r+0x54>
 8008f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f80:	d00b      	beq.n	8008f9a <_svfiprintf_r+0x7e>
 8008f82:	465b      	mov	r3, fp
 8008f84:	4622      	mov	r2, r4
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ff6b 	bl	8008e64 <__ssputs_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f000 80a7 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f96:	445a      	add	r2, fp
 8008f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 809f 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fae:	f10a 0a01 	add.w	sl, sl, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fbc:	4654      	mov	r4, sl
 8008fbe:	2205      	movs	r2, #5
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	484e      	ldr	r0, [pc, #312]	@ (8009100 <_svfiprintf_r+0x1e4>)
 8008fc6:	f7f7 f913 	bl	80001f0 <memchr>
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	b9d8      	cbnz	r0, 8009006 <_svfiprintf_r+0xea>
 8008fce:	06d0      	lsls	r0, r2, #27
 8008fd0:	bf44      	itt	mi
 8008fd2:	2320      	movmi	r3, #32
 8008fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd8:	0711      	lsls	r1, r2, #28
 8008fda:	bf44      	itt	mi
 8008fdc:	232b      	movmi	r3, #43	@ 0x2b
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe8:	d015      	beq.n	8009016 <_svfiprintf_r+0xfa>
 8008fea:	9a07      	ldr	r2, [sp, #28]
 8008fec:	4654      	mov	r4, sl
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffa:	3b30      	subs	r3, #48	@ 0x30
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	d94b      	bls.n	8009098 <_svfiprintf_r+0x17c>
 8009000:	b1b0      	cbz	r0, 8009030 <_svfiprintf_r+0x114>
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	e014      	b.n	8009030 <_svfiprintf_r+0x114>
 8009006:	eba0 0308 	sub.w	r3, r0, r8
 800900a:	fa09 f303 	lsl.w	r3, r9, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	46a2      	mov	sl, r4
 8009014:	e7d2      	b.n	8008fbc <_svfiprintf_r+0xa0>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfbb      	ittet	lt
 8009022:	425b      	neglt	r3, r3
 8009024:	f042 0202 	orrlt.w	r2, r2, #2
 8009028:	9307      	strge	r3, [sp, #28]
 800902a:	9307      	strlt	r3, [sp, #28]
 800902c:	bfb8      	it	lt
 800902e:	9204      	strlt	r2, [sp, #16]
 8009030:	7823      	ldrb	r3, [r4, #0]
 8009032:	2b2e      	cmp	r3, #46	@ 0x2e
 8009034:	d10a      	bne.n	800904c <_svfiprintf_r+0x130>
 8009036:	7863      	ldrb	r3, [r4, #1]
 8009038:	2b2a      	cmp	r3, #42	@ 0x2a
 800903a:	d132      	bne.n	80090a2 <_svfiprintf_r+0x186>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	1d1a      	adds	r2, r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009048:	3402      	adds	r4, #2
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009110 <_svfiprintf_r+0x1f4>
 8009050:	7821      	ldrb	r1, [r4, #0]
 8009052:	2203      	movs	r2, #3
 8009054:	4650      	mov	r0, sl
 8009056:	f7f7 f8cb 	bl	80001f0 <memchr>
 800905a:	b138      	cbz	r0, 800906c <_svfiprintf_r+0x150>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	eba0 000a 	sub.w	r0, r0, sl
 8009062:	2240      	movs	r2, #64	@ 0x40
 8009064:	4082      	lsls	r2, r0
 8009066:	4313      	orrs	r3, r2
 8009068:	3401      	adds	r4, #1
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	4824      	ldr	r0, [pc, #144]	@ (8009104 <_svfiprintf_r+0x1e8>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009076:	2206      	movs	r2, #6
 8009078:	f7f7 f8ba 	bl	80001f0 <memchr>
 800907c:	2800      	cmp	r0, #0
 800907e:	d036      	beq.n	80090ee <_svfiprintf_r+0x1d2>
 8009080:	4b21      	ldr	r3, [pc, #132]	@ (8009108 <_svfiprintf_r+0x1ec>)
 8009082:	bb1b      	cbnz	r3, 80090cc <_svfiprintf_r+0x1b0>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	3307      	adds	r3, #7
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	3308      	adds	r3, #8
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009092:	4433      	add	r3, r6
 8009094:	9309      	str	r3, [sp, #36]	@ 0x24
 8009096:	e76a      	b.n	8008f6e <_svfiprintf_r+0x52>
 8009098:	fb0c 3202 	mla	r2, ip, r2, r3
 800909c:	460c      	mov	r4, r1
 800909e:	2001      	movs	r0, #1
 80090a0:	e7a8      	b.n	8008ff4 <_svfiprintf_r+0xd8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	3401      	adds	r4, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b4:	3a30      	subs	r2, #48	@ 0x30
 80090b6:	2a09      	cmp	r2, #9
 80090b8:	d903      	bls.n	80090c2 <_svfiprintf_r+0x1a6>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0c6      	beq.n	800904c <_svfiprintf_r+0x130>
 80090be:	9105      	str	r1, [sp, #20]
 80090c0:	e7c4      	b.n	800904c <_svfiprintf_r+0x130>
 80090c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c6:	4604      	mov	r4, r0
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7f0      	b.n	80090ae <_svfiprintf_r+0x192>
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b0e      	ldr	r3, [pc, #56]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4638      	mov	r0, r7
 80090d8:	f7fc f9fc 	bl	80054d4 <_printf_float>
 80090dc:	1c42      	adds	r2, r0, #1
 80090de:	4606      	mov	r6, r0
 80090e0:	d1d6      	bne.n	8009090 <_svfiprintf_r+0x174>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	065b      	lsls	r3, r3, #25
 80090e6:	f53f af2d 	bmi.w	8008f44 <_svfiprintf_r+0x28>
 80090ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ec:	e72c      	b.n	8008f48 <_svfiprintf_r+0x2c>
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4b05      	ldr	r3, [pc, #20]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090f6:	a904      	add	r1, sp, #16
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7fc fc83 	bl	8005a04 <_printf_i>
 80090fe:	e7ed      	b.n	80090dc <_svfiprintf_r+0x1c0>
 8009100:	0800a0e1 	.word	0x0800a0e1
 8009104:	0800a0eb 	.word	0x0800a0eb
 8009108:	080054d5 	.word	0x080054d5
 800910c:	08008e65 	.word	0x08008e65
 8009110:	0800a0e7 	.word	0x0800a0e7

08009114 <__sfputc_r>:
 8009114:	6893      	ldr	r3, [r2, #8]
 8009116:	3b01      	subs	r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	b410      	push	{r4}
 800911c:	6093      	str	r3, [r2, #8]
 800911e:	da08      	bge.n	8009132 <__sfputc_r+0x1e>
 8009120:	6994      	ldr	r4, [r2, #24]
 8009122:	42a3      	cmp	r3, r4
 8009124:	db01      	blt.n	800912a <__sfputc_r+0x16>
 8009126:	290a      	cmp	r1, #10
 8009128:	d103      	bne.n	8009132 <__sfputc_r+0x1e>
 800912a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800912e:	f7fd ba78 	b.w	8006622 <__swbuf_r>
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	1c58      	adds	r0, r3, #1
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	7019      	strb	r1, [r3, #0]
 800913a:	4608      	mov	r0, r1
 800913c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009140:	4770      	bx	lr

08009142 <__sfputs_r>:
 8009142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009144:	4606      	mov	r6, r0
 8009146:	460f      	mov	r7, r1
 8009148:	4614      	mov	r4, r2
 800914a:	18d5      	adds	r5, r2, r3
 800914c:	42ac      	cmp	r4, r5
 800914e:	d101      	bne.n	8009154 <__sfputs_r+0x12>
 8009150:	2000      	movs	r0, #0
 8009152:	e007      	b.n	8009164 <__sfputs_r+0x22>
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	463a      	mov	r2, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ffda 	bl	8009114 <__sfputc_r>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d1f3      	bne.n	800914c <__sfputs_r+0xa>
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009168 <_vfiprintf_r>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	b09d      	sub	sp, #116	@ 0x74
 8009170:	4614      	mov	r4, r2
 8009172:	4698      	mov	r8, r3
 8009174:	4606      	mov	r6, r0
 8009176:	b118      	cbz	r0, 8009180 <_vfiprintf_r+0x18>
 8009178:	6a03      	ldr	r3, [r0, #32]
 800917a:	b90b      	cbnz	r3, 8009180 <_vfiprintf_r+0x18>
 800917c:	f7fd f86a 	bl	8006254 <__sinit>
 8009180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009182:	07d9      	lsls	r1, r3, #31
 8009184:	d405      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	059a      	lsls	r2, r3, #22
 800918a:	d402      	bmi.n	8009192 <_vfiprintf_r+0x2a>
 800918c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800918e:	f7fd fbca 	bl	8006926 <__retarget_lock_acquire_recursive>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	071b      	lsls	r3, r3, #28
 8009196:	d501      	bpl.n	800919c <_vfiprintf_r+0x34>
 8009198:	692b      	ldr	r3, [r5, #16]
 800919a:	b99b      	cbnz	r3, 80091c4 <_vfiprintf_r+0x5c>
 800919c:	4629      	mov	r1, r5
 800919e:	4630      	mov	r0, r6
 80091a0:	f7fd fa7e 	bl	80066a0 <__swsetup_r>
 80091a4:	b170      	cbz	r0, 80091c4 <_vfiprintf_r+0x5c>
 80091a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091a8:	07dc      	lsls	r4, r3, #31
 80091aa:	d504      	bpl.n	80091b6 <_vfiprintf_r+0x4e>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	0598      	lsls	r0, r3, #22
 80091ba:	d4f7      	bmi.n	80091ac <_vfiprintf_r+0x44>
 80091bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091be:	f7fd fbb3 	bl	8006928 <__retarget_lock_release_recursive>
 80091c2:	e7f3      	b.n	80091ac <_vfiprintf_r+0x44>
 80091c4:	2300      	movs	r3, #0
 80091c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80091c8:	2320      	movs	r3, #32
 80091ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d2:	2330      	movs	r3, #48	@ 0x30
 80091d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009384 <_vfiprintf_r+0x21c>
 80091d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091dc:	f04f 0901 	mov.w	r9, #1
 80091e0:	4623      	mov	r3, r4
 80091e2:	469a      	mov	sl, r3
 80091e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e8:	b10a      	cbz	r2, 80091ee <_vfiprintf_r+0x86>
 80091ea:	2a25      	cmp	r2, #37	@ 0x25
 80091ec:	d1f9      	bne.n	80091e2 <_vfiprintf_r+0x7a>
 80091ee:	ebba 0b04 	subs.w	fp, sl, r4
 80091f2:	d00b      	beq.n	800920c <_vfiprintf_r+0xa4>
 80091f4:	465b      	mov	r3, fp
 80091f6:	4622      	mov	r2, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ffa1 	bl	8009142 <__sfputs_r>
 8009200:	3001      	adds	r0, #1
 8009202:	f000 80a7 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009208:	445a      	add	r2, fp
 800920a:	9209      	str	r2, [sp, #36]	@ 0x24
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 809f 	beq.w	8009354 <_vfiprintf_r+0x1ec>
 8009216:	2300      	movs	r3, #0
 8009218:	f04f 32ff 	mov.w	r2, #4294967295
 800921c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009220:	f10a 0a01 	add.w	sl, sl, #1
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	9307      	str	r3, [sp, #28]
 8009228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800922c:	931a      	str	r3, [sp, #104]	@ 0x68
 800922e:	4654      	mov	r4, sl
 8009230:	2205      	movs	r2, #5
 8009232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009236:	4853      	ldr	r0, [pc, #332]	@ (8009384 <_vfiprintf_r+0x21c>)
 8009238:	f7f6 ffda 	bl	80001f0 <memchr>
 800923c:	9a04      	ldr	r2, [sp, #16]
 800923e:	b9d8      	cbnz	r0, 8009278 <_vfiprintf_r+0x110>
 8009240:	06d1      	lsls	r1, r2, #27
 8009242:	bf44      	itt	mi
 8009244:	2320      	movmi	r3, #32
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	0713      	lsls	r3, r2, #28
 800924c:	bf44      	itt	mi
 800924e:	232b      	movmi	r3, #43	@ 0x2b
 8009250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009254:	f89a 3000 	ldrb.w	r3, [sl]
 8009258:	2b2a      	cmp	r3, #42	@ 0x2a
 800925a:	d015      	beq.n	8009288 <_vfiprintf_r+0x120>
 800925c:	9a07      	ldr	r2, [sp, #28]
 800925e:	4654      	mov	r4, sl
 8009260:	2000      	movs	r0, #0
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4621      	mov	r1, r4
 8009268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926c:	3b30      	subs	r3, #48	@ 0x30
 800926e:	2b09      	cmp	r3, #9
 8009270:	d94b      	bls.n	800930a <_vfiprintf_r+0x1a2>
 8009272:	b1b0      	cbz	r0, 80092a2 <_vfiprintf_r+0x13a>
 8009274:	9207      	str	r2, [sp, #28]
 8009276:	e014      	b.n	80092a2 <_vfiprintf_r+0x13a>
 8009278:	eba0 0308 	sub.w	r3, r0, r8
 800927c:	fa09 f303 	lsl.w	r3, r9, r3
 8009280:	4313      	orrs	r3, r2
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	46a2      	mov	sl, r4
 8009286:	e7d2      	b.n	800922e <_vfiprintf_r+0xc6>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	1d19      	adds	r1, r3, #4
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	9103      	str	r1, [sp, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfbb      	ittet	lt
 8009294:	425b      	neglt	r3, r3
 8009296:	f042 0202 	orrlt.w	r2, r2, #2
 800929a:	9307      	strge	r3, [sp, #28]
 800929c:	9307      	strlt	r3, [sp, #28]
 800929e:	bfb8      	it	lt
 80092a0:	9204      	strlt	r2, [sp, #16]
 80092a2:	7823      	ldrb	r3, [r4, #0]
 80092a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80092a6:	d10a      	bne.n	80092be <_vfiprintf_r+0x156>
 80092a8:	7863      	ldrb	r3, [r4, #1]
 80092aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ac:	d132      	bne.n	8009314 <_vfiprintf_r+0x1ac>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9203      	str	r2, [sp, #12]
 80092b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ba:	3402      	adds	r4, #2
 80092bc:	9305      	str	r3, [sp, #20]
 80092be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009394 <_vfiprintf_r+0x22c>
 80092c2:	7821      	ldrb	r1, [r4, #0]
 80092c4:	2203      	movs	r2, #3
 80092c6:	4650      	mov	r0, sl
 80092c8:	f7f6 ff92 	bl	80001f0 <memchr>
 80092cc:	b138      	cbz	r0, 80092de <_vfiprintf_r+0x176>
 80092ce:	9b04      	ldr	r3, [sp, #16]
 80092d0:	eba0 000a 	sub.w	r0, r0, sl
 80092d4:	2240      	movs	r2, #64	@ 0x40
 80092d6:	4082      	lsls	r2, r0
 80092d8:	4313      	orrs	r3, r2
 80092da:	3401      	adds	r4, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	4829      	ldr	r0, [pc, #164]	@ (8009388 <_vfiprintf_r+0x220>)
 80092e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092e8:	2206      	movs	r2, #6
 80092ea:	f7f6 ff81 	bl	80001f0 <memchr>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d03f      	beq.n	8009372 <_vfiprintf_r+0x20a>
 80092f2:	4b26      	ldr	r3, [pc, #152]	@ (800938c <_vfiprintf_r+0x224>)
 80092f4:	bb1b      	cbnz	r3, 800933e <_vfiprintf_r+0x1d6>
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	3307      	adds	r3, #7
 80092fa:	f023 0307 	bic.w	r3, r3, #7
 80092fe:	3308      	adds	r3, #8
 8009300:	9303      	str	r3, [sp, #12]
 8009302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009304:	443b      	add	r3, r7
 8009306:	9309      	str	r3, [sp, #36]	@ 0x24
 8009308:	e76a      	b.n	80091e0 <_vfiprintf_r+0x78>
 800930a:	fb0c 3202 	mla	r2, ip, r2, r3
 800930e:	460c      	mov	r4, r1
 8009310:	2001      	movs	r0, #1
 8009312:	e7a8      	b.n	8009266 <_vfiprintf_r+0xfe>
 8009314:	2300      	movs	r3, #0
 8009316:	3401      	adds	r4, #1
 8009318:	9305      	str	r3, [sp, #20]
 800931a:	4619      	mov	r1, r3
 800931c:	f04f 0c0a 	mov.w	ip, #10
 8009320:	4620      	mov	r0, r4
 8009322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009326:	3a30      	subs	r2, #48	@ 0x30
 8009328:	2a09      	cmp	r2, #9
 800932a:	d903      	bls.n	8009334 <_vfiprintf_r+0x1cc>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0c6      	beq.n	80092be <_vfiprintf_r+0x156>
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	e7c4      	b.n	80092be <_vfiprintf_r+0x156>
 8009334:	fb0c 2101 	mla	r1, ip, r1, r2
 8009338:	4604      	mov	r4, r0
 800933a:	2301      	movs	r3, #1
 800933c:	e7f0      	b.n	8009320 <_vfiprintf_r+0x1b8>
 800933e:	ab03      	add	r3, sp, #12
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	462a      	mov	r2, r5
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <_vfiprintf_r+0x228>)
 8009346:	a904      	add	r1, sp, #16
 8009348:	4630      	mov	r0, r6
 800934a:	f7fc f8c3 	bl	80054d4 <_printf_float>
 800934e:	4607      	mov	r7, r0
 8009350:	1c78      	adds	r0, r7, #1
 8009352:	d1d6      	bne.n	8009302 <_vfiprintf_r+0x19a>
 8009354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009356:	07d9      	lsls	r1, r3, #31
 8009358:	d405      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 800935a:	89ab      	ldrh	r3, [r5, #12]
 800935c:	059a      	lsls	r2, r3, #22
 800935e:	d402      	bmi.n	8009366 <_vfiprintf_r+0x1fe>
 8009360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009362:	f7fd fae1 	bl	8006928 <__retarget_lock_release_recursive>
 8009366:	89ab      	ldrh	r3, [r5, #12]
 8009368:	065b      	lsls	r3, r3, #25
 800936a:	f53f af1f 	bmi.w	80091ac <_vfiprintf_r+0x44>
 800936e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009370:	e71e      	b.n	80091b0 <_vfiprintf_r+0x48>
 8009372:	ab03      	add	r3, sp, #12
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	462a      	mov	r2, r5
 8009378:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <_vfiprintf_r+0x228>)
 800937a:	a904      	add	r1, sp, #16
 800937c:	4630      	mov	r0, r6
 800937e:	f7fc fb41 	bl	8005a04 <_printf_i>
 8009382:	e7e4      	b.n	800934e <_vfiprintf_r+0x1e6>
 8009384:	0800a0e1 	.word	0x0800a0e1
 8009388:	0800a0eb 	.word	0x0800a0eb
 800938c:	080054d5 	.word	0x080054d5
 8009390:	08009143 	.word	0x08009143
 8009394:	0800a0e7 	.word	0x0800a0e7

08009398 <__sflush_r>:
 8009398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	0716      	lsls	r6, r2, #28
 80093a2:	4605      	mov	r5, r0
 80093a4:	460c      	mov	r4, r1
 80093a6:	d454      	bmi.n	8009452 <__sflush_r+0xba>
 80093a8:	684b      	ldr	r3, [r1, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	dc02      	bgt.n	80093b4 <__sflush_r+0x1c>
 80093ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dd48      	ble.n	8009446 <__sflush_r+0xae>
 80093b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	d045      	beq.n	8009446 <__sflush_r+0xae>
 80093ba:	2300      	movs	r3, #0
 80093bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093c0:	682f      	ldr	r7, [r5, #0]
 80093c2:	6a21      	ldr	r1, [r4, #32]
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	d030      	beq.n	800942a <__sflush_r+0x92>
 80093c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	0759      	lsls	r1, r3, #29
 80093ce:	d505      	bpl.n	80093dc <__sflush_r+0x44>
 80093d0:	6863      	ldr	r3, [r4, #4]
 80093d2:	1ad2      	subs	r2, r2, r3
 80093d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093d6:	b10b      	cbz	r3, 80093dc <__sflush_r+0x44>
 80093d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	2300      	movs	r3, #0
 80093de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e0:	6a21      	ldr	r1, [r4, #32]
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b0      	blx	r6
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	d106      	bne.n	80093fa <__sflush_r+0x62>
 80093ec:	6829      	ldr	r1, [r5, #0]
 80093ee:	291d      	cmp	r1, #29
 80093f0:	d82b      	bhi.n	800944a <__sflush_r+0xb2>
 80093f2:	4a2a      	ldr	r2, [pc, #168]	@ (800949c <__sflush_r+0x104>)
 80093f4:	40ca      	lsrs	r2, r1
 80093f6:	07d6      	lsls	r6, r2, #31
 80093f8:	d527      	bpl.n	800944a <__sflush_r+0xb2>
 80093fa:	2200      	movs	r2, #0
 80093fc:	6062      	str	r2, [r4, #4]
 80093fe:	04d9      	lsls	r1, r3, #19
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	6022      	str	r2, [r4, #0]
 8009404:	d504      	bpl.n	8009410 <__sflush_r+0x78>
 8009406:	1c42      	adds	r2, r0, #1
 8009408:	d101      	bne.n	800940e <__sflush_r+0x76>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b903      	cbnz	r3, 8009410 <__sflush_r+0x78>
 800940e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009412:	602f      	str	r7, [r5, #0]
 8009414:	b1b9      	cbz	r1, 8009446 <__sflush_r+0xae>
 8009416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800941a:	4299      	cmp	r1, r3
 800941c:	d002      	beq.n	8009424 <__sflush_r+0x8c>
 800941e:	4628      	mov	r0, r5
 8009420:	f7fe f8f2 	bl	8007608 <_free_r>
 8009424:	2300      	movs	r3, #0
 8009426:	6363      	str	r3, [r4, #52]	@ 0x34
 8009428:	e00d      	b.n	8009446 <__sflush_r+0xae>
 800942a:	2301      	movs	r3, #1
 800942c:	4628      	mov	r0, r5
 800942e:	47b0      	blx	r6
 8009430:	4602      	mov	r2, r0
 8009432:	1c50      	adds	r0, r2, #1
 8009434:	d1c9      	bne.n	80093ca <__sflush_r+0x32>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c6      	beq.n	80093ca <__sflush_r+0x32>
 800943c:	2b1d      	cmp	r3, #29
 800943e:	d001      	beq.n	8009444 <__sflush_r+0xac>
 8009440:	2b16      	cmp	r3, #22
 8009442:	d11e      	bne.n	8009482 <__sflush_r+0xea>
 8009444:	602f      	str	r7, [r5, #0]
 8009446:	2000      	movs	r0, #0
 8009448:	e022      	b.n	8009490 <__sflush_r+0xf8>
 800944a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800944e:	b21b      	sxth	r3, r3
 8009450:	e01b      	b.n	800948a <__sflush_r+0xf2>
 8009452:	690f      	ldr	r7, [r1, #16]
 8009454:	2f00      	cmp	r7, #0
 8009456:	d0f6      	beq.n	8009446 <__sflush_r+0xae>
 8009458:	0793      	lsls	r3, r2, #30
 800945a:	680e      	ldr	r6, [r1, #0]
 800945c:	bf08      	it	eq
 800945e:	694b      	ldreq	r3, [r1, #20]
 8009460:	600f      	str	r7, [r1, #0]
 8009462:	bf18      	it	ne
 8009464:	2300      	movne	r3, #0
 8009466:	eba6 0807 	sub.w	r8, r6, r7
 800946a:	608b      	str	r3, [r1, #8]
 800946c:	f1b8 0f00 	cmp.w	r8, #0
 8009470:	dde9      	ble.n	8009446 <__sflush_r+0xae>
 8009472:	6a21      	ldr	r1, [r4, #32]
 8009474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009476:	4643      	mov	r3, r8
 8009478:	463a      	mov	r2, r7
 800947a:	4628      	mov	r0, r5
 800947c:	47b0      	blx	r6
 800947e:	2800      	cmp	r0, #0
 8009480:	dc08      	bgt.n	8009494 <__sflush_r+0xfc>
 8009482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	4407      	add	r7, r0
 8009496:	eba8 0800 	sub.w	r8, r8, r0
 800949a:	e7e7      	b.n	800946c <__sflush_r+0xd4>
 800949c:	20400001 	.word	0x20400001

080094a0 <_fflush_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	690b      	ldr	r3, [r1, #16]
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b913      	cbnz	r3, 80094b0 <_fflush_r+0x10>
 80094aa:	2500      	movs	r5, #0
 80094ac:	4628      	mov	r0, r5
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	b118      	cbz	r0, 80094ba <_fflush_r+0x1a>
 80094b2:	6a03      	ldr	r3, [r0, #32]
 80094b4:	b90b      	cbnz	r3, 80094ba <_fflush_r+0x1a>
 80094b6:	f7fc fecd 	bl	8006254 <__sinit>
 80094ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0f3      	beq.n	80094aa <_fflush_r+0xa>
 80094c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094c4:	07d0      	lsls	r0, r2, #31
 80094c6:	d404      	bmi.n	80094d2 <_fflush_r+0x32>
 80094c8:	0599      	lsls	r1, r3, #22
 80094ca:	d402      	bmi.n	80094d2 <_fflush_r+0x32>
 80094cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ce:	f7fd fa2a 	bl	8006926 <__retarget_lock_acquire_recursive>
 80094d2:	4628      	mov	r0, r5
 80094d4:	4621      	mov	r1, r4
 80094d6:	f7ff ff5f 	bl	8009398 <__sflush_r>
 80094da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094dc:	07da      	lsls	r2, r3, #31
 80094de:	4605      	mov	r5, r0
 80094e0:	d4e4      	bmi.n	80094ac <_fflush_r+0xc>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	059b      	lsls	r3, r3, #22
 80094e6:	d4e1      	bmi.n	80094ac <_fflush_r+0xc>
 80094e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ea:	f7fd fa1d 	bl	8006928 <__retarget_lock_release_recursive>
 80094ee:	e7dd      	b.n	80094ac <_fflush_r+0xc>

080094f0 <__swhatbuf_r>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	460c      	mov	r4, r1
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	2900      	cmp	r1, #0
 80094fa:	b096      	sub	sp, #88	@ 0x58
 80094fc:	4615      	mov	r5, r2
 80094fe:	461e      	mov	r6, r3
 8009500:	da0d      	bge.n	800951e <__swhatbuf_r+0x2e>
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009508:	f04f 0100 	mov.w	r1, #0
 800950c:	bf14      	ite	ne
 800950e:	2340      	movne	r3, #64	@ 0x40
 8009510:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009514:	2000      	movs	r0, #0
 8009516:	6031      	str	r1, [r6, #0]
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	b016      	add	sp, #88	@ 0x58
 800951c:	bd70      	pop	{r4, r5, r6, pc}
 800951e:	466a      	mov	r2, sp
 8009520:	f000 f874 	bl	800960c <_fstat_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	dbec      	blt.n	8009502 <__swhatbuf_r+0x12>
 8009528:	9901      	ldr	r1, [sp, #4]
 800952a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800952e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009532:	4259      	negs	r1, r3
 8009534:	4159      	adcs	r1, r3
 8009536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800953a:	e7eb      	b.n	8009514 <__swhatbuf_r+0x24>

0800953c <__smakebuf_r>:
 800953c:	898b      	ldrh	r3, [r1, #12]
 800953e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009540:	079d      	lsls	r5, r3, #30
 8009542:	4606      	mov	r6, r0
 8009544:	460c      	mov	r4, r1
 8009546:	d507      	bpl.n	8009558 <__smakebuf_r+0x1c>
 8009548:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	2301      	movs	r3, #1
 8009552:	6163      	str	r3, [r4, #20]
 8009554:	b003      	add	sp, #12
 8009556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009558:	ab01      	add	r3, sp, #4
 800955a:	466a      	mov	r2, sp
 800955c:	f7ff ffc8 	bl	80094f0 <__swhatbuf_r>
 8009560:	9f00      	ldr	r7, [sp, #0]
 8009562:	4605      	mov	r5, r0
 8009564:	4639      	mov	r1, r7
 8009566:	4630      	mov	r0, r6
 8009568:	f7fe f8c2 	bl	80076f0 <_malloc_r>
 800956c:	b948      	cbnz	r0, 8009582 <__smakebuf_r+0x46>
 800956e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009572:	059a      	lsls	r2, r3, #22
 8009574:	d4ee      	bmi.n	8009554 <__smakebuf_r+0x18>
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	f043 0302 	orr.w	r3, r3, #2
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	e7e2      	b.n	8009548 <__smakebuf_r+0xc>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	6020      	str	r0, [r4, #0]
 8009586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	9b01      	ldr	r3, [sp, #4]
 800958e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009592:	b15b      	cbz	r3, 80095ac <__smakebuf_r+0x70>
 8009594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009598:	4630      	mov	r0, r6
 800959a:	f000 f849 	bl	8009630 <_isatty_r>
 800959e:	b128      	cbz	r0, 80095ac <__smakebuf_r+0x70>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f023 0303 	bic.w	r3, r3, #3
 80095a6:	f043 0301 	orr.w	r3, r3, #1
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	431d      	orrs	r5, r3
 80095b0:	81a5      	strh	r5, [r4, #12]
 80095b2:	e7cf      	b.n	8009554 <__smakebuf_r+0x18>

080095b4 <memmove>:
 80095b4:	4288      	cmp	r0, r1
 80095b6:	b510      	push	{r4, lr}
 80095b8:	eb01 0402 	add.w	r4, r1, r2
 80095bc:	d902      	bls.n	80095c4 <memmove+0x10>
 80095be:	4284      	cmp	r4, r0
 80095c0:	4623      	mov	r3, r4
 80095c2:	d807      	bhi.n	80095d4 <memmove+0x20>
 80095c4:	1e43      	subs	r3, r0, #1
 80095c6:	42a1      	cmp	r1, r4
 80095c8:	d008      	beq.n	80095dc <memmove+0x28>
 80095ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095d2:	e7f8      	b.n	80095c6 <memmove+0x12>
 80095d4:	4402      	add	r2, r0
 80095d6:	4601      	mov	r1, r0
 80095d8:	428a      	cmp	r2, r1
 80095da:	d100      	bne.n	80095de <memmove+0x2a>
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095e6:	e7f7      	b.n	80095d8 <memmove+0x24>

080095e8 <strncmp>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	b16a      	cbz	r2, 8009608 <strncmp+0x20>
 80095ec:	3901      	subs	r1, #1
 80095ee:	1884      	adds	r4, r0, r2
 80095f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d103      	bne.n	8009604 <strncmp+0x1c>
 80095fc:	42a0      	cmp	r0, r4
 80095fe:	d001      	beq.n	8009604 <strncmp+0x1c>
 8009600:	2a00      	cmp	r2, #0
 8009602:	d1f5      	bne.n	80095f0 <strncmp+0x8>
 8009604:	1ad0      	subs	r0, r2, r3
 8009606:	bd10      	pop	{r4, pc}
 8009608:	4610      	mov	r0, r2
 800960a:	e7fc      	b.n	8009606 <strncmp+0x1e>

0800960c <_fstat_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d07      	ldr	r5, [pc, #28]	@ (800962c <_fstat_r+0x20>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	602b      	str	r3, [r5, #0]
 800961a:	f7f8 f870 	bl	80016fe <_fstat>
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	d102      	bne.n	8009628 <_fstat_r+0x1c>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	b103      	cbz	r3, 8009628 <_fstat_r+0x1c>
 8009626:	6023      	str	r3, [r4, #0]
 8009628:	bd38      	pop	{r3, r4, r5, pc}
 800962a:	bf00      	nop
 800962c:	200043d0 	.word	0x200043d0

08009630 <_isatty_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d06      	ldr	r5, [pc, #24]	@ (800964c <_isatty_r+0x1c>)
 8009634:	2300      	movs	r3, #0
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	f7f8 f86f 	bl	800171e <_isatty>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_isatty_r+0x1a>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_isatty_r+0x1a>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	200043d0 	.word	0x200043d0

08009650 <_sbrk_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d06      	ldr	r5, [pc, #24]	@ (800966c <_sbrk_r+0x1c>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f8 f878 	bl	8001750 <_sbrk>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_sbrk_r+0x1a>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_sbrk_r+0x1a>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	200043d0 	.word	0x200043d0

08009670 <nan>:
 8009670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009678 <nan+0x8>
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	00000000 	.word	0x00000000
 800967c:	7ff80000 	.word	0x7ff80000

08009680 <__assert_func>:
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <__assert_func+0x2c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	68d8      	ldr	r0, [r3, #12]
 800968e:	b14c      	cbz	r4, 80096a4 <__assert_func+0x24>
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <__assert_func+0x30>)
 8009692:	9100      	str	r1, [sp, #0]
 8009694:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009698:	4906      	ldr	r1, [pc, #24]	@ (80096b4 <__assert_func+0x34>)
 800969a:	462b      	mov	r3, r5
 800969c:	f7fc fdf2 	bl	8006284 <fiprintf>
 80096a0:	f000 fba6 	bl	8009df0 <abort>
 80096a4:	4b04      	ldr	r3, [pc, #16]	@ (80096b8 <__assert_func+0x38>)
 80096a6:	461c      	mov	r4, r3
 80096a8:	e7f3      	b.n	8009692 <__assert_func+0x12>
 80096aa:	bf00      	nop
 80096ac:	2000001c 	.word	0x2000001c
 80096b0:	0800a0fa 	.word	0x0800a0fa
 80096b4:	0800a107 	.word	0x0800a107
 80096b8:	0800a135 	.word	0x0800a135

080096bc <_calloc_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	fba1 5402 	umull	r5, r4, r1, r2
 80096c2:	b934      	cbnz	r4, 80096d2 <_calloc_r+0x16>
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7fe f813 	bl	80076f0 <_malloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	b928      	cbnz	r0, 80096da <_calloc_r+0x1e>
 80096ce:	4630      	mov	r0, r6
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	220c      	movs	r2, #12
 80096d4:	6002      	str	r2, [r0, #0]
 80096d6:	2600      	movs	r6, #0
 80096d8:	e7f9      	b.n	80096ce <_calloc_r+0x12>
 80096da:	462a      	mov	r2, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7fd f835 	bl	800674c <memset>
 80096e2:	e7f4      	b.n	80096ce <_calloc_r+0x12>

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f2:	f100 0414 	add.w	r4, r0, #20
 80096f6:	dd45      	ble.n	8009784 <rshift+0xa0>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	f100 0710 	add.w	r7, r0, #16
 800970a:	4629      	mov	r1, r5
 800970c:	42b1      	cmp	r1, r6
 800970e:	d334      	bcc.n	800977a <rshift+0x96>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009724:	f1c1 0820 	rsb	r8, r1, #32
 8009728:	40cf      	lsrs	r7, r1
 800972a:	f105 0e04 	add.w	lr, r5, #4
 800972e:	46a1      	mov	r9, r4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d815      	bhi.n	8009762 <rshift+0x7e>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	1b1a      	subs	r2, r3, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009754:	bf08      	it	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6102      	str	r2, [r0, #16]
 800975a:	bf08      	it	eq
 800975c:	6143      	streq	r3, [r0, #20]
 800975e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009762:	f8dc c000 	ldr.w	ip, [ip]
 8009766:	fa0c fc08 	lsl.w	ip, ip, r8
 800976a:	ea4c 0707 	orr.w	r7, ip, r7
 800976e:	f849 7b04 	str.w	r7, [r9], #4
 8009772:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009776:	40cf      	lsrs	r7, r1
 8009778:	e7da      	b.n	8009730 <rshift+0x4c>
 800977a:	f851 cb04 	ldr.w	ip, [r1], #4
 800977e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009782:	e7c3      	b.n	800970c <rshift+0x28>
 8009784:	4623      	mov	r3, r4
 8009786:	e7e1      	b.n	800974c <rshift+0x68>

08009788 <__hexdig_fun>:
 8009788:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d802      	bhi.n	8009796 <__hexdig_fun+0xe>
 8009790:	3820      	subs	r0, #32
 8009792:	b2c0      	uxtb	r0, r0
 8009794:	4770      	bx	lr
 8009796:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800979a:	2b05      	cmp	r3, #5
 800979c:	d801      	bhi.n	80097a2 <__hexdig_fun+0x1a>
 800979e:	3847      	subs	r0, #71	@ 0x47
 80097a0:	e7f7      	b.n	8009792 <__hexdig_fun+0xa>
 80097a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d801      	bhi.n	80097ae <__hexdig_fun+0x26>
 80097aa:	3827      	subs	r0, #39	@ 0x27
 80097ac:	e7f1      	b.n	8009792 <__hexdig_fun+0xa>
 80097ae:	2000      	movs	r0, #0
 80097b0:	4770      	bx	lr
	...

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	b085      	sub	sp, #20
 80097ba:	468a      	mov	sl, r1
 80097bc:	9302      	str	r3, [sp, #8]
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	9001      	str	r0, [sp, #4]
 80097c2:	4690      	mov	r8, r2
 80097c4:	1c9c      	adds	r4, r3, #2
 80097c6:	46a1      	mov	r9, r4
 80097c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097cc:	2830      	cmp	r0, #48	@ 0x30
 80097ce:	d0fa      	beq.n	80097c6 <__gethex+0x12>
 80097d0:	eba9 0303 	sub.w	r3, r9, r3
 80097d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80097d8:	f7ff ffd6 	bl	8009788 <__hexdig_fun>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d168      	bne.n	80098b4 <__gethex+0x100>
 80097e2:	49a0      	ldr	r1, [pc, #640]	@ (8009a64 <__gethex+0x2b0>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	4648      	mov	r0, r9
 80097e8:	f7ff fefe 	bl	80095e8 <strncmp>
 80097ec:	4607      	mov	r7, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d167      	bne.n	80098c2 <__gethex+0x10e>
 80097f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097f6:	4626      	mov	r6, r4
 80097f8:	f7ff ffc6 	bl	8009788 <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d062      	beq.n	80098c6 <__gethex+0x112>
 8009800:	4623      	mov	r3, r4
 8009802:	7818      	ldrb	r0, [r3, #0]
 8009804:	2830      	cmp	r0, #48	@ 0x30
 8009806:	4699      	mov	r9, r3
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	d0f9      	beq.n	8009802 <__gethex+0x4e>
 800980e:	f7ff ffbb 	bl	8009788 <__hexdig_fun>
 8009812:	fab0 f580 	clz	r5, r0
 8009816:	096d      	lsrs	r5, r5, #5
 8009818:	f04f 0b01 	mov.w	fp, #1
 800981c:	464a      	mov	r2, r9
 800981e:	4616      	mov	r6, r2
 8009820:	3201      	adds	r2, #1
 8009822:	7830      	ldrb	r0, [r6, #0]
 8009824:	f7ff ffb0 	bl	8009788 <__hexdig_fun>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f8      	bne.n	800981e <__gethex+0x6a>
 800982c:	498d      	ldr	r1, [pc, #564]	@ (8009a64 <__gethex+0x2b0>)
 800982e:	2201      	movs	r2, #1
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff fed9 	bl	80095e8 <strncmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	d13f      	bne.n	80098ba <__gethex+0x106>
 800983a:	b944      	cbnz	r4, 800984e <__gethex+0x9a>
 800983c:	1c74      	adds	r4, r6, #1
 800983e:	4622      	mov	r2, r4
 8009840:	4616      	mov	r6, r2
 8009842:	3201      	adds	r2, #1
 8009844:	7830      	ldrb	r0, [r6, #0]
 8009846:	f7ff ff9f 	bl	8009788 <__hexdig_fun>
 800984a:	2800      	cmp	r0, #0
 800984c:	d1f8      	bne.n	8009840 <__gethex+0x8c>
 800984e:	1ba4      	subs	r4, r4, r6
 8009850:	00a7      	lsls	r7, r4, #2
 8009852:	7833      	ldrb	r3, [r6, #0]
 8009854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009858:	2b50      	cmp	r3, #80	@ 0x50
 800985a:	d13e      	bne.n	80098da <__gethex+0x126>
 800985c:	7873      	ldrb	r3, [r6, #1]
 800985e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009860:	d033      	beq.n	80098ca <__gethex+0x116>
 8009862:	2b2d      	cmp	r3, #45	@ 0x2d
 8009864:	d034      	beq.n	80098d0 <__gethex+0x11c>
 8009866:	1c71      	adds	r1, r6, #1
 8009868:	2400      	movs	r4, #0
 800986a:	7808      	ldrb	r0, [r1, #0]
 800986c:	f7ff ff8c 	bl	8009788 <__hexdig_fun>
 8009870:	1e43      	subs	r3, r0, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b18      	cmp	r3, #24
 8009876:	d830      	bhi.n	80098da <__gethex+0x126>
 8009878:	f1a0 0210 	sub.w	r2, r0, #16
 800987c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009880:	f7ff ff82 	bl	8009788 <__hexdig_fun>
 8009884:	f100 3cff 	add.w	ip, r0, #4294967295
 8009888:	fa5f fc8c 	uxtb.w	ip, ip
 800988c:	f1bc 0f18 	cmp.w	ip, #24
 8009890:	f04f 030a 	mov.w	r3, #10
 8009894:	d91e      	bls.n	80098d4 <__gethex+0x120>
 8009896:	b104      	cbz	r4, 800989a <__gethex+0xe6>
 8009898:	4252      	negs	r2, r2
 800989a:	4417      	add	r7, r2
 800989c:	f8ca 1000 	str.w	r1, [sl]
 80098a0:	b1ed      	cbz	r5, 80098de <__gethex+0x12a>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	bf0c      	ite	eq
 80098a8:	2506      	moveq	r5, #6
 80098aa:	2500      	movne	r5, #0
 80098ac:	4628      	mov	r0, r5
 80098ae:	b005      	add	sp, #20
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	2500      	movs	r5, #0
 80098b6:	462c      	mov	r4, r5
 80098b8:	e7b0      	b.n	800981c <__gethex+0x68>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d1c7      	bne.n	800984e <__gethex+0x9a>
 80098be:	4627      	mov	r7, r4
 80098c0:	e7c7      	b.n	8009852 <__gethex+0x9e>
 80098c2:	464e      	mov	r6, r9
 80098c4:	462f      	mov	r7, r5
 80098c6:	2501      	movs	r5, #1
 80098c8:	e7c3      	b.n	8009852 <__gethex+0x9e>
 80098ca:	2400      	movs	r4, #0
 80098cc:	1cb1      	adds	r1, r6, #2
 80098ce:	e7cc      	b.n	800986a <__gethex+0xb6>
 80098d0:	2401      	movs	r4, #1
 80098d2:	e7fb      	b.n	80098cc <__gethex+0x118>
 80098d4:	fb03 0002 	mla	r0, r3, r2, r0
 80098d8:	e7ce      	b.n	8009878 <__gethex+0xc4>
 80098da:	4631      	mov	r1, r6
 80098dc:	e7de      	b.n	800989c <__gethex+0xe8>
 80098de:	eba6 0309 	sub.w	r3, r6, r9
 80098e2:	3b01      	subs	r3, #1
 80098e4:	4629      	mov	r1, r5
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	dc0a      	bgt.n	8009900 <__gethex+0x14c>
 80098ea:	9801      	ldr	r0, [sp, #4]
 80098ec:	f7fd ff8c 	bl	8007808 <_Balloc>
 80098f0:	4604      	mov	r4, r0
 80098f2:	b940      	cbnz	r0, 8009906 <__gethex+0x152>
 80098f4:	4b5c      	ldr	r3, [pc, #368]	@ (8009a68 <__gethex+0x2b4>)
 80098f6:	4602      	mov	r2, r0
 80098f8:	21e4      	movs	r1, #228	@ 0xe4
 80098fa:	485c      	ldr	r0, [pc, #368]	@ (8009a6c <__gethex+0x2b8>)
 80098fc:	f7ff fec0 	bl	8009680 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	105b      	asrs	r3, r3, #1
 8009904:	e7ef      	b.n	80098e6 <__gethex+0x132>
 8009906:	f100 0a14 	add.w	sl, r0, #20
 800990a:	2300      	movs	r3, #0
 800990c:	4655      	mov	r5, sl
 800990e:	469b      	mov	fp, r3
 8009910:	45b1      	cmp	r9, r6
 8009912:	d337      	bcc.n	8009984 <__gethex+0x1d0>
 8009914:	f845 bb04 	str.w	fp, [r5], #4
 8009918:	eba5 050a 	sub.w	r5, r5, sl
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	6125      	str	r5, [r4, #16]
 8009920:	4658      	mov	r0, fp
 8009922:	f7fe f863 	bl	80079ec <__hi0bits>
 8009926:	016d      	lsls	r5, r5, #5
 8009928:	f8d8 6000 	ldr.w	r6, [r8]
 800992c:	1a2d      	subs	r5, r5, r0
 800992e:	42b5      	cmp	r5, r6
 8009930:	dd54      	ble.n	80099dc <__gethex+0x228>
 8009932:	1bad      	subs	r5, r5, r6
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe fbef 	bl	800811a <__any_on>
 800993c:	4681      	mov	r9, r0
 800993e:	b178      	cbz	r0, 8009960 <__gethex+0x1ac>
 8009940:	1e6b      	subs	r3, r5, #1
 8009942:	1159      	asrs	r1, r3, #5
 8009944:	f003 021f 	and.w	r2, r3, #31
 8009948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800994c:	f04f 0901 	mov.w	r9, #1
 8009950:	fa09 f202 	lsl.w	r2, r9, r2
 8009954:	420a      	tst	r2, r1
 8009956:	d003      	beq.n	8009960 <__gethex+0x1ac>
 8009958:	454b      	cmp	r3, r9
 800995a:	dc36      	bgt.n	80099ca <__gethex+0x216>
 800995c:	f04f 0902 	mov.w	r9, #2
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff febe 	bl	80096e4 <rshift>
 8009968:	442f      	add	r7, r5
 800996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800996e:	42bb      	cmp	r3, r7
 8009970:	da42      	bge.n	80099f8 <__gethex+0x244>
 8009972:	9801      	ldr	r0, [sp, #4]
 8009974:	4621      	mov	r1, r4
 8009976:	f7fd ff87 	bl	8007888 <_Bfree>
 800997a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800997c:	2300      	movs	r3, #0
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	25a3      	movs	r5, #163	@ 0xa3
 8009982:	e793      	b.n	80098ac <__gethex+0xf8>
 8009984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009988:	2a2e      	cmp	r2, #46	@ 0x2e
 800998a:	d012      	beq.n	80099b2 <__gethex+0x1fe>
 800998c:	2b20      	cmp	r3, #32
 800998e:	d104      	bne.n	800999a <__gethex+0x1e6>
 8009990:	f845 bb04 	str.w	fp, [r5], #4
 8009994:	f04f 0b00 	mov.w	fp, #0
 8009998:	465b      	mov	r3, fp
 800999a:	7830      	ldrb	r0, [r6, #0]
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	f7ff fef3 	bl	8009788 <__hexdig_fun>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f000 000f 	and.w	r0, r0, #15
 80099a8:	4098      	lsls	r0, r3
 80099aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80099ae:	3304      	adds	r3, #4
 80099b0:	e7ae      	b.n	8009910 <__gethex+0x15c>
 80099b2:	45b1      	cmp	r9, r6
 80099b4:	d8ea      	bhi.n	800998c <__gethex+0x1d8>
 80099b6:	492b      	ldr	r1, [pc, #172]	@ (8009a64 <__gethex+0x2b0>)
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff fe13 	bl	80095e8 <strncmp>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e1      	bne.n	800998c <__gethex+0x1d8>
 80099c8:	e7a2      	b.n	8009910 <__gethex+0x15c>
 80099ca:	1ea9      	subs	r1, r5, #2
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7fe fba4 	bl	800811a <__any_on>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0c2      	beq.n	800995c <__gethex+0x1a8>
 80099d6:	f04f 0903 	mov.w	r9, #3
 80099da:	e7c1      	b.n	8009960 <__gethex+0x1ac>
 80099dc:	da09      	bge.n	80099f2 <__gethex+0x23e>
 80099de:	1b75      	subs	r5, r6, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	9801      	ldr	r0, [sp, #4]
 80099e4:	462a      	mov	r2, r5
 80099e6:	f7fe f95f 	bl	8007ca8 <__lshift>
 80099ea:	1b7f      	subs	r7, r7, r5
 80099ec:	4604      	mov	r4, r0
 80099ee:	f100 0a14 	add.w	sl, r0, #20
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	e7b8      	b.n	800996a <__gethex+0x1b6>
 80099f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099fc:	42bd      	cmp	r5, r7
 80099fe:	dd6f      	ble.n	8009ae0 <__gethex+0x32c>
 8009a00:	1bed      	subs	r5, r5, r7
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	dc34      	bgt.n	8009a70 <__gethex+0x2bc>
 8009a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d022      	beq.n	8009a54 <__gethex+0x2a0>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d024      	beq.n	8009a5c <__gethex+0x2a8>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d115      	bne.n	8009a42 <__gethex+0x28e>
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	d113      	bne.n	8009a42 <__gethex+0x28e>
 8009a1a:	2e01      	cmp	r6, #1
 8009a1c:	d10b      	bne.n	8009a36 <__gethex+0x282>
 8009a1e:	9a02      	ldr	r2, [sp, #8]
 8009a20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	2301      	movs	r3, #1
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	f8ca 3000 	str.w	r3, [sl]
 8009a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a30:	2562      	movs	r5, #98	@ 0x62
 8009a32:	601c      	str	r4, [r3, #0]
 8009a34:	e73a      	b.n	80098ac <__gethex+0xf8>
 8009a36:	1e71      	subs	r1, r6, #1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7fe fb6e 	bl	800811a <__any_on>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1ed      	bne.n	8009a1e <__gethex+0x26a>
 8009a42:	9801      	ldr	r0, [sp, #4]
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fd ff1f 	bl	8007888 <_Bfree>
 8009a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	2550      	movs	r5, #80	@ 0x50
 8009a52:	e72b      	b.n	80098ac <__gethex+0xf8>
 8009a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f3      	bne.n	8009a42 <__gethex+0x28e>
 8009a5a:	e7e0      	b.n	8009a1e <__gethex+0x26a>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1dd      	bne.n	8009a1e <__gethex+0x26a>
 8009a62:	e7ee      	b.n	8009a42 <__gethex+0x28e>
 8009a64:	0800a0df 	.word	0x0800a0df
 8009a68:	0800a075 	.word	0x0800a075
 8009a6c:	0800a136 	.word	0x0800a136
 8009a70:	1e6f      	subs	r7, r5, #1
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d130      	bne.n	8009ada <__gethex+0x326>
 8009a78:	b127      	cbz	r7, 8009a84 <__gethex+0x2d0>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fe fb4c 	bl	800811a <__any_on>
 8009a82:	4681      	mov	r9, r0
 8009a84:	117a      	asrs	r2, r7, #5
 8009a86:	2301      	movs	r3, #1
 8009a88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a8c:	f007 071f 	and.w	r7, r7, #31
 8009a90:	40bb      	lsls	r3, r7
 8009a92:	4213      	tst	r3, r2
 8009a94:	4629      	mov	r1, r5
 8009a96:	4620      	mov	r0, r4
 8009a98:	bf18      	it	ne
 8009a9a:	f049 0902 	orrne.w	r9, r9, #2
 8009a9e:	f7ff fe21 	bl	80096e4 <rshift>
 8009aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009aa6:	1b76      	subs	r6, r6, r5
 8009aa8:	2502      	movs	r5, #2
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	d047      	beq.n	8009b40 <__gethex+0x38c>
 8009ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d015      	beq.n	8009ae4 <__gethex+0x330>
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d017      	beq.n	8009aec <__gethex+0x338>
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d109      	bne.n	8009ad4 <__gethex+0x320>
 8009ac0:	f019 0f02 	tst.w	r9, #2
 8009ac4:	d006      	beq.n	8009ad4 <__gethex+0x320>
 8009ac6:	f8da 3000 	ldr.w	r3, [sl]
 8009aca:	ea49 0903 	orr.w	r9, r9, r3
 8009ace:	f019 0f01 	tst.w	r9, #1
 8009ad2:	d10e      	bne.n	8009af2 <__gethex+0x33e>
 8009ad4:	f045 0510 	orr.w	r5, r5, #16
 8009ad8:	e032      	b.n	8009b40 <__gethex+0x38c>
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	e7d1      	b.n	8009a84 <__gethex+0x2d0>
 8009ae0:	2501      	movs	r5, #1
 8009ae2:	e7e2      	b.n	8009aaa <__gethex+0x2f6>
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae6:	f1c3 0301 	rsb	r3, r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f0      	beq.n	8009ad4 <__gethex+0x320>
 8009af2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009af6:	f104 0314 	add.w	r3, r4, #20
 8009afa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009afe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b02:	f04f 0c00 	mov.w	ip, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b10:	d01b      	beq.n	8009b4a <__gethex+0x396>
 8009b12:	3201      	adds	r2, #1
 8009b14:	6002      	str	r2, [r0, #0]
 8009b16:	2d02      	cmp	r5, #2
 8009b18:	f104 0314 	add.w	r3, r4, #20
 8009b1c:	d13c      	bne.n	8009b98 <__gethex+0x3e4>
 8009b1e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	42b2      	cmp	r2, r6
 8009b26:	d109      	bne.n	8009b3c <__gethex+0x388>
 8009b28:	1171      	asrs	r1, r6, #5
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b30:	f006 061f 	and.w	r6, r6, #31
 8009b34:	fa02 f606 	lsl.w	r6, r2, r6
 8009b38:	421e      	tst	r6, r3
 8009b3a:	d13a      	bne.n	8009bb2 <__gethex+0x3fe>
 8009b3c:	f045 0520 	orr.w	r5, r5, #32
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	601c      	str	r4, [r3, #0]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	601f      	str	r7, [r3, #0]
 8009b48:	e6b0      	b.n	80098ac <__gethex+0xf8>
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b50:	d8d9      	bhi.n	8009b06 <__gethex+0x352>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	459b      	cmp	fp, r3
 8009b56:	db17      	blt.n	8009b88 <__gethex+0x3d4>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	9801      	ldr	r0, [sp, #4]
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7fd fe53 	bl	8007808 <_Balloc>
 8009b62:	4681      	mov	r9, r0
 8009b64:	b918      	cbnz	r0, 8009b6e <__gethex+0x3ba>
 8009b66:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <__gethex+0x41c>)
 8009b68:	4602      	mov	r2, r0
 8009b6a:	2184      	movs	r1, #132	@ 0x84
 8009b6c:	e6c5      	b.n	80098fa <__gethex+0x146>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	3202      	adds	r2, #2
 8009b72:	f104 010c 	add.w	r1, r4, #12
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7fc fed6 	bl	800692a <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	9801      	ldr	r0, [sp, #4]
 8009b82:	f7fd fe81 	bl	8007888 <_Bfree>
 8009b86:	464c      	mov	r4, r9
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b90:	6122      	str	r2, [r4, #16]
 8009b92:	2201      	movs	r2, #1
 8009b94:	615a      	str	r2, [r3, #20]
 8009b96:	e7be      	b.n	8009b16 <__gethex+0x362>
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	455a      	cmp	r2, fp
 8009b9c:	dd0b      	ble.n	8009bb6 <__gethex+0x402>
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff fd9f 	bl	80096e4 <rshift>
 8009ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009baa:	3701      	adds	r7, #1
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	f6ff aee0 	blt.w	8009972 <__gethex+0x1be>
 8009bb2:	2501      	movs	r5, #1
 8009bb4:	e7c2      	b.n	8009b3c <__gethex+0x388>
 8009bb6:	f016 061f 	ands.w	r6, r6, #31
 8009bba:	d0fa      	beq.n	8009bb2 <__gethex+0x3fe>
 8009bbc:	4453      	add	r3, sl
 8009bbe:	f1c6 0620 	rsb	r6, r6, #32
 8009bc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bc6:	f7fd ff11 	bl	80079ec <__hi0bits>
 8009bca:	42b0      	cmp	r0, r6
 8009bcc:	dbe7      	blt.n	8009b9e <__gethex+0x3ea>
 8009bce:	e7f0      	b.n	8009bb2 <__gethex+0x3fe>
 8009bd0:	0800a075 	.word	0x0800a075

08009bd4 <L_shift>:
 8009bd4:	f1c2 0208 	rsb	r2, r2, #8
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	f1c2 0620 	rsb	r6, r2, #32
 8009be0:	6843      	ldr	r3, [r0, #4]
 8009be2:	6804      	ldr	r4, [r0, #0]
 8009be4:	fa03 f506 	lsl.w	r5, r3, r6
 8009be8:	432c      	orrs	r4, r5
 8009bea:	40d3      	lsrs	r3, r2
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bf2:	4288      	cmp	r0, r1
 8009bf4:	d3f4      	bcc.n	8009be0 <L_shift+0xc>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__match>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	b914      	cbnz	r4, 8009c0a <__match+0x12>
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	bd30      	pop	{r4, r5, pc}
 8009c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c12:	2d19      	cmp	r5, #25
 8009c14:	bf98      	it	ls
 8009c16:	3220      	addls	r2, #32
 8009c18:	42a2      	cmp	r2, r4
 8009c1a:	d0f0      	beq.n	8009bfe <__match+0x6>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f3      	b.n	8009c08 <__match+0x10>

08009c20 <__hexnan>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	6801      	ldr	r1, [r0, #0]
 8009c28:	115e      	asrs	r6, r3, #5
 8009c2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c2e:	f013 031f 	ands.w	r3, r3, #31
 8009c32:	b087      	sub	sp, #28
 8009c34:	bf18      	it	ne
 8009c36:	3604      	addne	r6, #4
 8009c38:	2500      	movs	r5, #0
 8009c3a:	1f37      	subs	r7, r6, #4
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	4690      	mov	r8, r2
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c46:	46b9      	mov	r9, r7
 8009c48:	463c      	mov	r4, r7
 8009c4a:	9502      	str	r5, [sp, #8]
 8009c4c:	46ab      	mov	fp, r5
 8009c4e:	784a      	ldrb	r2, [r1, #1]
 8009c50:	1c4b      	adds	r3, r1, #1
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	b342      	cbz	r2, 8009ca8 <__hexnan+0x88>
 8009c56:	4610      	mov	r0, r2
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	9204      	str	r2, [sp, #16]
 8009c5c:	f7ff fd94 	bl	8009788 <__hexdig_fun>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d151      	bne.n	8009d08 <__hexnan+0xe8>
 8009c64:	9a04      	ldr	r2, [sp, #16]
 8009c66:	9905      	ldr	r1, [sp, #20]
 8009c68:	2a20      	cmp	r2, #32
 8009c6a:	d818      	bhi.n	8009c9e <__hexnan+0x7e>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	459b      	cmp	fp, r3
 8009c70:	dd13      	ble.n	8009c9a <__hexnan+0x7a>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0x64>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0x64>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ffa8 	bl	8009bd4 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d952      	bls.n	8009d2e <__hexnan+0x10e>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c92:	f8cd b008 	str.w	fp, [sp, #8]
 8009c96:	464c      	mov	r4, r9
 8009c98:	461d      	mov	r5, r3
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	e7d7      	b.n	8009c4e <__hexnan+0x2e>
 8009c9e:	2a29      	cmp	r2, #41	@ 0x29
 8009ca0:	d157      	bne.n	8009d52 <__hexnan+0x132>
 8009ca2:	3102      	adds	r1, #2
 8009ca4:	f8ca 1000 	str.w	r1, [sl]
 8009ca8:	f1bb 0f00 	cmp.w	fp, #0
 8009cac:	d051      	beq.n	8009d52 <__hexnan+0x132>
 8009cae:	454c      	cmp	r4, r9
 8009cb0:	d206      	bcs.n	8009cc0 <__hexnan+0xa0>
 8009cb2:	2d07      	cmp	r5, #7
 8009cb4:	dc04      	bgt.n	8009cc0 <__hexnan+0xa0>
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ff8a 	bl	8009bd4 <L_shift>
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d936      	bls.n	8009d32 <__hexnan+0x112>
 8009cc4:	f1a8 0204 	sub.w	r2, r8, #4
 8009cc8:	4623      	mov	r3, r4
 8009cca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cce:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cd2:	429f      	cmp	r7, r3
 8009cd4:	d2f9      	bcs.n	8009cca <__hexnan+0xaa>
 8009cd6:	1b3b      	subs	r3, r7, r4
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	3401      	adds	r4, #1
 8009ce0:	3e03      	subs	r6, #3
 8009ce2:	42b4      	cmp	r4, r6
 8009ce4:	bf88      	it	hi
 8009ce6:	2304      	movhi	r3, #4
 8009ce8:	4443      	add	r3, r8
 8009cea:	2200      	movs	r2, #0
 8009cec:	f843 2b04 	str.w	r2, [r3], #4
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	d2fb      	bcs.n	8009cec <__hexnan+0xcc>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b91b      	cbnz	r3, 8009d00 <__hexnan+0xe0>
 8009cf8:	4547      	cmp	r7, r8
 8009cfa:	d128      	bne.n	8009d4e <__hexnan+0x12e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	2005      	movs	r0, #5
 8009d02:	b007      	add	sp, #28
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	3501      	adds	r5, #1
 8009d0a:	2d08      	cmp	r5, #8
 8009d0c:	f10b 0b01 	add.w	fp, fp, #1
 8009d10:	dd06      	ble.n	8009d20 <__hexnan+0x100>
 8009d12:	4544      	cmp	r4, r8
 8009d14:	d9c1      	bls.n	8009c9a <__hexnan+0x7a>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1c:	2501      	movs	r5, #1
 8009d1e:	3c04      	subs	r4, #4
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	f000 000f 	and.w	r0, r0, #15
 8009d26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	e7b5      	b.n	8009c9a <__hexnan+0x7a>
 8009d2e:	2508      	movs	r5, #8
 8009d30:	e7b3      	b.n	8009c9a <__hexnan+0x7a>
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0dd      	beq.n	8009cf4 <__hexnan+0xd4>
 8009d38:	f1c3 0320 	rsb	r3, r3, #32
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	40da      	lsrs	r2, r3
 8009d42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d46:	4013      	ands	r3, r2
 8009d48:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d4c:	e7d2      	b.n	8009cf4 <__hexnan+0xd4>
 8009d4e:	3f04      	subs	r7, #4
 8009d50:	e7d0      	b.n	8009cf4 <__hexnan+0xd4>
 8009d52:	2004      	movs	r0, #4
 8009d54:	e7d5      	b.n	8009d02 <__hexnan+0xe2>

08009d56 <__ascii_mbtowc>:
 8009d56:	b082      	sub	sp, #8
 8009d58:	b901      	cbnz	r1, 8009d5c <__ascii_mbtowc+0x6>
 8009d5a:	a901      	add	r1, sp, #4
 8009d5c:	b142      	cbz	r2, 8009d70 <__ascii_mbtowc+0x1a>
 8009d5e:	b14b      	cbz	r3, 8009d74 <__ascii_mbtowc+0x1e>
 8009d60:	7813      	ldrb	r3, [r2, #0]
 8009d62:	600b      	str	r3, [r1, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	1e10      	subs	r0, r2, #0
 8009d68:	bf18      	it	ne
 8009d6a:	2001      	movne	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr
 8009d70:	4610      	mov	r0, r2
 8009d72:	e7fb      	b.n	8009d6c <__ascii_mbtowc+0x16>
 8009d74:	f06f 0001 	mvn.w	r0, #1
 8009d78:	e7f8      	b.n	8009d6c <__ascii_mbtowc+0x16>

08009d7a <_realloc_r>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	4607      	mov	r7, r0
 8009d80:	4614      	mov	r4, r2
 8009d82:	460d      	mov	r5, r1
 8009d84:	b921      	cbnz	r1, 8009d90 <_realloc_r+0x16>
 8009d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	f7fd bcb0 	b.w	80076f0 <_malloc_r>
 8009d90:	b92a      	cbnz	r2, 8009d9e <_realloc_r+0x24>
 8009d92:	f7fd fc39 	bl	8007608 <_free_r>
 8009d96:	4625      	mov	r5, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	f000 f82e 	bl	8009dfe <_malloc_usable_size_r>
 8009da2:	4284      	cmp	r4, r0
 8009da4:	4606      	mov	r6, r0
 8009da6:	d802      	bhi.n	8009dae <_realloc_r+0x34>
 8009da8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dac:	d8f4      	bhi.n	8009d98 <_realloc_r+0x1e>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7fd fc9d 	bl	80076f0 <_malloc_r>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b908      	cbnz	r0, 8009dbe <_realloc_r+0x44>
 8009dba:	4645      	mov	r5, r8
 8009dbc:	e7ec      	b.n	8009d98 <_realloc_r+0x1e>
 8009dbe:	42b4      	cmp	r4, r6
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	bf28      	it	cs
 8009dc6:	4632      	movcs	r2, r6
 8009dc8:	f7fc fdaf 	bl	800692a <memcpy>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7fd fc1a 	bl	8007608 <_free_r>
 8009dd4:	e7f1      	b.n	8009dba <_realloc_r+0x40>

08009dd6 <__ascii_wctomb>:
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	b141      	cbz	r1, 8009dee <__ascii_wctomb+0x18>
 8009ddc:	2aff      	cmp	r2, #255	@ 0xff
 8009dde:	d904      	bls.n	8009dea <__ascii_wctomb+0x14>
 8009de0:	228a      	movs	r2, #138	@ 0x8a
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	4770      	bx	lr
 8009dea:	700a      	strb	r2, [r1, #0]
 8009dec:	2001      	movs	r0, #1
 8009dee:	4770      	bx	lr

08009df0 <abort>:
 8009df0:	b508      	push	{r3, lr}
 8009df2:	2006      	movs	r0, #6
 8009df4:	f000 f834 	bl	8009e60 <raise>
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f7f7 fc69 	bl	80016d0 <_exit>

08009dfe <_malloc_usable_size_r>:
 8009dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e02:	1f18      	subs	r0, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bfbc      	itt	lt
 8009e08:	580b      	ldrlt	r3, [r1, r0]
 8009e0a:	18c0      	addlt	r0, r0, r3
 8009e0c:	4770      	bx	lr

08009e0e <_raise_r>:
 8009e0e:	291f      	cmp	r1, #31
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4605      	mov	r5, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	d904      	bls.n	8009e22 <_raise_r+0x14>
 8009e18:	2316      	movs	r3, #22
 8009e1a:	6003      	str	r3, [r0, #0]
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e24:	b112      	cbz	r2, 8009e2c <_raise_r+0x1e>
 8009e26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e2a:	b94b      	cbnz	r3, 8009e40 <_raise_r+0x32>
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f000 f831 	bl	8009e94 <_getpid_r>
 8009e32:	4622      	mov	r2, r4
 8009e34:	4601      	mov	r1, r0
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3c:	f000 b818 	b.w	8009e70 <_kill_r>
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d00a      	beq.n	8009e5a <_raise_r+0x4c>
 8009e44:	1c59      	adds	r1, r3, #1
 8009e46:	d103      	bne.n	8009e50 <_raise_r+0x42>
 8009e48:	2316      	movs	r3, #22
 8009e4a:	6003      	str	r3, [r0, #0]
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	e7e7      	b.n	8009e20 <_raise_r+0x12>
 8009e50:	2100      	movs	r1, #0
 8009e52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e56:	4620      	mov	r0, r4
 8009e58:	4798      	blx	r3
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e7e0      	b.n	8009e20 <_raise_r+0x12>
	...

08009e60 <raise>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	@ (8009e6c <raise+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f7ff bfd2 	b.w	8009e0e <_raise_r>
 8009e6a:	bf00      	nop
 8009e6c:	2000001c 	.word	0x2000001c

08009e70 <_kill_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	@ (8009e90 <_kill_r+0x20>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	f7f7 fc17 	bl	80016b0 <_kill>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d102      	bne.n	8009e8c <_kill_r+0x1c>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	b103      	cbz	r3, 8009e8c <_kill_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	200043d0 	.word	0x200043d0

08009e94 <_getpid_r>:
 8009e94:	f7f7 bc04 	b.w	80016a0 <_getpid>

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
