
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005724  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          00004214  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004280  20004280  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001338f  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf3  00000000  00000000  0001a42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  0001d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d57  00000000  00000000  0001e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239b6  00000000  00000000  0001efaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013158  00000000  00000000  00042965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5aa3  00000000  00000000  00055abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b560  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005180  00000000  00000000  0012b5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00130724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005508 	.word	0x08005508

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005508 	.word	0x08005508

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088
 80005cc:	20000128 	.word	0x20000128

080005d0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	if(file==STDERR_FILENO)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d116      	bne.n	8000610 <_write+0x40>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)RED, strlen(RED) , HAL_MAX_DELAY);
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2205      	movs	r2, #5
 80005e8:	491d      	ldr	r1, [pc, #116]	@ (8000660 <_write+0x90>)
 80005ea:	481e      	ldr	r0, [pc, #120]	@ (8000664 <_write+0x94>)
 80005ec:	f001 fd90 	bl	8002110 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	481a      	ldr	r0, [pc, #104]	@ (8000664 <_write+0x94>)
 80005fc:	f001 fd88 	bl	8002110 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(RST) , HAL_MAX_DELAY);
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2204      	movs	r2, #4
 8000606:	4918      	ldr	r1, [pc, #96]	@ (8000668 <_write+0x98>)
 8000608:	4816      	ldr	r0, [pc, #88]	@ (8000664 <_write+0x94>)
 800060a:	f001 fd81 	bl	8002110 <HAL_UART_Transmit>
 800060e:	e021      	b.n	8000654 <_write+0x84>
	}

	else if(file==STDOUT_FILENO)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d116      	bne.n	8000644 <_write+0x74>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)GRN, strlen(GRN) , HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2205      	movs	r2, #5
 800061c:	4913      	ldr	r1, [pc, #76]	@ (800066c <_write+0x9c>)
 800061e:	4811      	ldr	r0, [pc, #68]	@ (8000664 <_write+0x94>)
 8000620:	f001 fd76 	bl	8002110 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29a      	uxth	r2, r3
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	480d      	ldr	r0, [pc, #52]	@ (8000664 <_write+0x94>)
 8000630:	f001 fd6e 	bl	8002110 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)RST, strlen(GRN) , HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2205      	movs	r2, #5
 800063a:	490b      	ldr	r1, [pc, #44]	@ (8000668 <_write+0x98>)
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <_write+0x94>)
 800063e:	f001 fd67 	bl	8002110 <HAL_UART_Transmit>
 8000642:	e007      	b.n	8000654 <_write+0x84>
	}
	else
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	68b9      	ldr	r1, [r7, #8]
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <_write+0x94>)
 8000650:	f001 fd5e 	bl	8002110 <HAL_UART_Transmit>

	}
	return len;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08005520 	.word	0x08005520
 8000664:	2000032c 	.word	0x2000032c
 8000668:	08005528 	.word	0x08005528
 800066c:	08005530 	.word	0x08005530

08000670 <_read>:

int _read(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
	if(file==STDIN_FILENO)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b03      	cmp	r3, #3
 8000680:	d106      	bne.n	8000690 <_read+0x20>
	{
		HAL_UART_Receive(&huart2, (uint8_t*)rxData, 1, 1000);
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	2201      	movs	r2, #1
 8000688:	4904      	ldr	r1, [pc, #16]	@ (800069c <_read+0x2c>)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <_read+0x30>)
 800068c:	f001 fdcb 	bl	8002226 <HAL_UART_Receive>
	}

	return len;
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000037c 	.word	0x2000037c
 80006a0:	2000032c 	.word	0x2000032c

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b08e      	sub	sp, #56	@ 0x38
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fafb 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f835 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 f8bb 	bl	800082c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 f88f 	bl	80007d8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <main+0x68>)
 80006bc:	f107 041c 	add.w	r4, r7, #28
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 f98c 	bl	80029f2 <osThreadCreate>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000710 <main+0x6c>)
 80006de:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <main+0x70>)
 80006e2:	463c      	mov	r4, r7
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80006f2:	463b      	mov	r3, r7
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f97b 	bl	80029f2 <osThreadCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <main+0x74>)
 8000700:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000702:	f002 f96f 	bl	80029e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000706:	bf00      	nop
 8000708:	e7fd      	b.n	8000706 <main+0x62>
 800070a:	bf00      	nop
 800070c:	08005540 	.word	0x08005540
 8000710:	20000374 	.word	0x20000374
 8000714:	08005564 	.word	0x08005564
 8000718:	20000378 	.word	0x20000378

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	@ 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fe36 	bl	800439c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <SystemClock_Config+0xb4>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a21      	ldr	r2, [pc, #132]	@ (80007d0 <SystemClock_Config+0xb4>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <SystemClock_Config+0xb4>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <SystemClock_Config+0xb8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1b      	ldr	r2, [pc, #108]	@ (80007d4 <SystemClock_Config+0xb8>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <SystemClock_Config+0xb8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000780:	2310      	movs	r3, #16
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000784:	2300      	movs	r3, #0
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fd49 	bl	8001224 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000798:	f000 f8cc 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 ffac 	bl	8001714 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007c2:	f000 f8b7 	bl	8000934 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	@ 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_USART2_UART_Init+0x50>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_USART2_UART_Init+0x4c>)
 8000810:	f001 fc2e 	bl	8002070 <HAL_UART_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081a:	f000 f88b 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000032c 	.word	0x2000032c
 8000828:	40004400 	.word	0x40004400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_GPIO_Init+0x30>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <MX_GPIO_Init+0x30>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_GPIO_Init+0x30>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	fprintf(stdout,"system initialized\r\n");
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <gorev2+0x6c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2214      	movs	r2, #20
 8000870:	2101      	movs	r1, #1
 8000872:	4817      	ldr	r0, [pc, #92]	@ (80008d0 <gorev2+0x70>)
 8000874:	f003 fc4e 	bl	8004114 <fwrite>

	fprintf(stderr, "error\r\n");
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <gorev2+0x6c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	2207      	movs	r2, #7
 8000880:	2101      	movs	r1, #1
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <gorev2+0x74>)
 8000884:	f003 fc46 	bl	8004114 <fwrite>

  /* Infinite loop */
  for(;;)
  {
	  printf(CLR_LINE  "running\r\n");
 8000888:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <gorev2+0x78>)
 800088a:	f003 fca7 	bl	80041dc <puts>
	  osDelay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f002 f8fa 	bl	8002a8a <osDelay>

	  fscanf(stdin,	"%s",rxData);
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <gorev2+0x6c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <gorev2+0x7c>)
 800089e:	4910      	ldr	r1, [pc, #64]	@ (80008e0 <gorev2+0x80>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 fbbb 	bl	800401c <fiscanf>

	  if ((rxData) == "sa")
	  {
	      fprintf(stdout ,"receive chr: %c\r\n", ch);
	  }
	  else if (HAL_UART_Receive(&huart2, &ch, 20, 1000) != HAL_OK)
 80008a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008aa:	2214      	movs	r2, #20
 80008ac:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <gorev2+0x84>)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <gorev2+0x88>)
 80008b0:	f001 fcb9 	bl	8002226 <HAL_UART_Receive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0e6      	beq.n	8000888 <gorev2+0x28>
	  {
	      fprintf(stderr, "failed!\r\n");
 80008ba:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <gorev2+0x6c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2209      	movs	r2, #9
 80008c2:	2101      	movs	r1, #1
 80008c4:	4809      	ldr	r0, [pc, #36]	@ (80008ec <gorev2+0x8c>)
 80008c6:	f003 fc25 	bl	8004114 <fwrite>
	  printf(CLR_LINE  "running\r\n");
 80008ca:	e7dd      	b.n	8000888 <gorev2+0x28>
 80008cc:	2000001c 	.word	0x2000001c
 80008d0:	08005580 	.word	0x08005580
 80008d4:	08005598 	.word	0x08005598
 80008d8:	080055a0 	.word	0x080055a0
 80008dc:	2000037c 	.word	0x2000037c
 80008e0:	080055b0 	.word	0x080055b0
 80008e4:	20000328 	.word	0x20000328
 80008e8:	2000032c 	.word	0x2000032c
 80008ec:	080055b4 	.word	0x080055b4

080008f0 <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gorev1 */
  /* Infinite loop */
  for(;;)
  {

	  printf("yasin\r\n");
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <gorev1+0x1c>)
 80008fa:	f003 fc6f 	bl	80041dc <puts>
	  osDelay(500);
 80008fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000902:	f002 f8c2 	bl	8002a8a <osDelay>
	  printf("yasin\r\n");
 8000906:	bf00      	nop
 8000908:	e7f6      	b.n	80008f8 <gorev1+0x8>
 800090a:	bf00      	nop
 800090c:	080055c0 	.word	0x080055c0

08000910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d101      	bne.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000922:	f000 f9e1 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40010000 	.word	0x40010000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	4a11      	ldr	r2, [pc, #68]	@ (8000994 <HAL_MspInit+0x54>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000954:	6453      	str	r3, [r2, #68]	@ 0x44
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <HAL_MspInit+0x54>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <HAL_MspInit+0x54>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	210f      	movs	r1, #15
 8000982:	f06f 0001 	mvn.w	r0, #1
 8000986:	f000 fa87 	bl	8000e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	@ (8000a1c <HAL_UART_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12b      	bne.n	8000a12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f2:	230c      	movs	r3, #12
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <HAL_UART_MspInit+0x8c>)
 8000a0e:	f000 fa6d 	bl	8000eec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	@ 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	@ 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <HAL_InitTick+0xd0>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a40:	4a2d      	ldr	r2, [pc, #180]	@ (8000af8 <HAL_InitTick+0xd0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a48:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <HAL_InitTick+0xd0>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a54:	f107 020c 	add.w	r2, r7, #12
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f838 	bl	8001ad4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a64:	f001 f822 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 8000a68:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6c:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <HAL_InitTick+0xd4>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	3b01      	subs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a7a:	4a22      	ldr	r2, [pc, #136]	@ (8000b04 <HAL_InitTick+0xdc>)
 8000a7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a84:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a86:	4a1e      	ldr	r2, [pc, #120]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a9e:	4818      	ldr	r0, [pc, #96]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000aa0:	f001 f84a 	bl	8001b38 <HAL_TIM_Base_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11b      	bne.n	8000aea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ab2:	4813      	ldr	r0, [pc, #76]	@ (8000b00 <HAL_InitTick+0xd8>)
 8000ab4:	f001 f89a 	bl	8001bec <HAL_TIM_Base_Start_IT>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d111      	bne.n	8000aea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ac6:	2019      	movs	r0, #25
 8000ac8:	f000 fa02 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	d808      	bhi.n	8000ae4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	6879      	ldr	r1, [r7, #4]
 8000ad6:	2019      	movs	r0, #25
 8000ad8:	f000 f9de 	bl	8000e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_InitTick+0xe0>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	e002      	b.n	8000aea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3730      	adds	r7, #48	@ 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	20000390 	.word	0x20000390
 8000b04:	40010000 	.word	0x40010000
 8000b08:	20000004 	.word	0x20000004

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b4a:	f001 f8bf 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000390 	.word	0x20000390

08000b58 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b80:	605a      	str	r2, [r3, #4]
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_isatty>:

int _isatty(int file)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_sbrk>:
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
 8000bf0:	f003 fc80 	bl	80044f4 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20020000 	.word	0x20020000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200003d8 	.word	0x200003d8
 8000c28:	20004280 	.word	0x20004280

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 fc3f 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fd0f 	bl	80006a4 <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c94:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 8000c98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c9c:	20004280 	.word	0x20004280

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f8d8 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f7ff fea8 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe32 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200003dc 	.word	0x200003dc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200003dc 	.word	0x200003dc

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e16b      	b.n	80011e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 815a 	bne.w	80011da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80b4 	beq.w	80011da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d02b      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	@ (8001204 <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	@ (8001208 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	@ (800120c <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001210 <HAL_GPIO_Init+0x324>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <HAL_GPIO_Init+0x328>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001218 <HAL_GPIO_Init+0x32c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <HAL_GPIO_Init+0x330>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x20a>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00e      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a32      	ldr	r2, [pc, #200]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae90 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e267      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d075      	beq.n	800132e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001242:	4b88      	ldr	r3, [pc, #544]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00c      	beq.n	8001268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124e:	4b85      	ldr	r3, [pc, #532]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001256:	2b08      	cmp	r3, #8
 8001258:	d112      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b82      	ldr	r3, [pc, #520]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001266:	d10b      	bne.n	8001280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	4b7e      	ldr	r3, [pc, #504]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d05b      	beq.n	800132c <HAL_RCC_OscConfig+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d157      	bne.n	800132c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e242      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d106      	bne.n	8001298 <HAL_RCC_OscConfig+0x74>
 800128a:	4b76      	ldr	r3, [pc, #472]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a75      	ldr	r2, [pc, #468]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01d      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a0:	d10c      	bne.n	80012bc <HAL_RCC_OscConfig+0x98>
 80012a2:	4b70      	ldr	r3, [pc, #448]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6c      	ldr	r2, [pc, #432]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e00b      	b.n	80012d4 <HAL_RCC_OscConfig+0xb0>
 80012bc:	4b69      	ldr	r3, [pc, #420]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a68      	ldr	r2, [pc, #416]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b66      	ldr	r3, [pc, #408]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a65      	ldr	r2, [pc, #404]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fd18 	bl	8000d10 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fd14 	bl	8000d10 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	@ 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e207      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0xc0>
 8001302:	e014      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fd04 	bl	8000d10 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fd00 	bl	8000d10 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1f3      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0xe8>
 800132a:	e000      	b.n	800132e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d063      	beq.n	8001402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800133a:	4b4a      	ldr	r3, [pc, #296]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00b      	beq.n	800135e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800134e:	2b08      	cmp	r3, #8
 8001350:	d11c      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1c7      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4937      	ldr	r1, [pc, #220]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	e03a      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d020      	beq.n	80013d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001394:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <HAL_RCC_OscConfig+0x244>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fcb9 	bl	8000d10 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fcb5 	bl	8000d10 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1a8      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4925      	ldr	r1, [pc, #148]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <HAL_RCC_OscConfig+0x244>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc98 	bl	8000d10 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc94 	bl	8000d10 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e187      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d036      	beq.n	800147c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d016      	beq.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_RCC_OscConfig+0x248>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fc78 	bl	8000d10 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fc74 	bl	8000d10 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e167      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_RCC_OscConfig+0x240>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x200>
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_RCC_OscConfig+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fc61 	bl	8000d10 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	e00e      	b.n	8001470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fc5d 	bl	8000d10 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d907      	bls.n	8001470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e150      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001464:	40023800 	.word	0x40023800
 8001468:	42470000 	.word	0x42470000
 800146c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b88      	ldr	r3, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ea      	bne.n	8001452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 8097 	beq.w	80015b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b81      	ldr	r3, [pc, #516]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10f      	bne.n	80014ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b7d      	ldr	r3, [pc, #500]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a7c      	ldr	r2, [pc, #496]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	4b77      	ldr	r3, [pc, #476]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c6:	4b74      	ldr	r3, [pc, #464]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a73      	ldr	r2, [pc, #460]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc1d 	bl	8000d10 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff fc19 	bl	8000d10 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e10c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001698 <HAL_RCC_OscConfig+0x474>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <HAL_RCC_OscConfig+0x2ea>
 8001500:	4b64      	ldr	r3, [pc, #400]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001504:	4a63      	ldr	r2, [pc, #396]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6713      	str	r3, [r2, #112]	@ 0x70
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x30c>
 8001516:	4b5f      	ldr	r3, [pc, #380]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800151a:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	@ 0x70
 8001522:	4b5c      	ldr	r3, [pc, #368]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001526:	4a5b      	ldr	r2, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	@ 0x70
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x324>
 8001530:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001534:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	@ 0x70
 800153c:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001540:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d015      	beq.n	800157c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fbde 	bl	8000d10 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff fbda 	bl	8000d10 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0cb      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4b49      	ldr	r3, [pc, #292]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0ee      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fbc8 	bl	8000d10 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fbc4 	bl	8000d10 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0b5      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ee      	bne.n	8001584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a38      	ldr	r2, [pc, #224]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a1 	beq.w	8001704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015c2:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d05c      	beq.n	8001688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d141      	bne.n	800165a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb98 	bl	8000d10 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb94 	bl	8000d10 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e087      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	491b      	ldr	r1, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fb6d 	bl	8000d10 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff fb69 	bl	8000d10 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e05c      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x416>
 8001658:	e054      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x478>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fb56 	bl	8000d10 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fb52 	bl	8000d10 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e045      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_RCC_OscConfig+0x470>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x444>
 8001686:	e03d      	b.n	8001704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e038      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000
 800169c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x4ec>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d028      	beq.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d121      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11a      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	4293      	cmp	r3, r2
 80016da:	d111      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0cc      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b68      	ldr	r3, [pc, #416]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d90c      	bls.n	8001750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d044      	beq.n	8001834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d003      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d109      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 0203 	bic.w	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4934      	ldr	r1, [pc, #208]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001804:	f7ff fa84 	bl	8000d10 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff fa80 	bl	8000d10 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e04f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 020c 	and.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	429a      	cmp	r2, r3
 8001832:	d1eb      	bne.n	800180c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001834:	4b25      	ldr	r3, [pc, #148]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20c      	bcs.n	800185c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001886:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	@ (80018d4 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f8b4 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	080055dc 	.word	0x080055dc
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b090      	sub	sp, #64	@ 0x40
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d00d      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x40>
 8001904:	2b08      	cmp	r3, #8
 8001906:	f200 80a1 	bhi.w	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x34>
 800190e:	2b04      	cmp	r3, #4
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x3a>
 8001912:	e09b      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001918:	e09b      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191a:	4b53      	ldr	r3, [pc, #332]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800191c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800191e:	e098      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001920:	4b4f      	ldr	r3, [pc, #316]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d028      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	2200      	movs	r2, #0
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	627a      	str	r2, [r7, #36]	@ 0x24
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001948:	2100      	movs	r1, #0
 800194a:	4b47      	ldr	r3, [pc, #284]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800194c:	fb03 f201 	mul.w	r2, r3, r1
 8001950:	2300      	movs	r3, #0
 8001952:	fb00 f303 	mul.w	r3, r0, r3
 8001956:	4413      	add	r3, r2
 8001958:	4a43      	ldr	r2, [pc, #268]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x188>)
 800195a:	fba0 1202 	umull	r1, r2, r0, r2
 800195e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001960:	460a      	mov	r2, r1
 8001962:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001966:	4413      	add	r3, r2
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196c:	2200      	movs	r2, #0
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	61fa      	str	r2, [r7, #28]
 8001972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800197a:	f7fe fc79 	bl	8000270 <__aeabi_uldivmod>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4613      	mov	r3, r2
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001986:	e053      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	2200      	movs	r2, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	617a      	str	r2, [r7, #20]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800199a:	f04f 0b00 	mov.w	fp, #0
 800199e:	4652      	mov	r2, sl
 80019a0:	465b      	mov	r3, fp
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	0159      	lsls	r1, r3, #5
 80019ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b0:	0150      	lsls	r0, r2, #5
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ba:	eb63 090b 	sbc.w	r9, r3, fp
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019d2:	ebb2 0408 	subs.w	r4, r2, r8
 80019d6:	eb63 0509 	sbc.w	r5, r3, r9
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	00eb      	lsls	r3, r5, #3
 80019e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019e8:	00e2      	lsls	r2, r4, #3
 80019ea:	4614      	mov	r4, r2
 80019ec:	461d      	mov	r5, r3
 80019ee:	eb14 030a 	adds.w	r3, r4, sl
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	eb45 030b 	adc.w	r3, r5, fp
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a06:	4629      	mov	r1, r5
 8001a08:	028b      	lsls	r3, r1, #10
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a10:	4621      	mov	r1, r4
 8001a12:	028a      	lsls	r2, r1, #10
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a24:	f7fe fc24 	bl	8000270 <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3740      	adds	r7, #64	@ 0x40
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	00f42400 	.word	0x00f42400
 8001a68:	017d7840 	.word	0x017d7840

08001a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a88:	f7ff fff0 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	0a9b      	lsrs	r3, r3, #10
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	4903      	ldr	r1, [pc, #12]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080055ec 	.word	0x080055ec

08001aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab0:	f7ff ffdc 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0b5b      	lsrs	r3, r3, #13
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	080055ec 	.word	0x080055ec

08001ad4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_RCC_GetClockConfig+0x60>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e041      	b.n	8001bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f839 	bl	8001bd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3304      	adds	r3, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f000 f9c0 	bl	8001efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e04e      	b.n	8001ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d022      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2e:	d01d      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d018      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00e      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d009      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d010      	beq.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8e:	e007      	b.n	8001ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00
 8001cc0:	40010400 	.word	0x40010400
 8001cc4:	40014000 	.word	0x40014000
 8001cc8:	40001800 	.word	0x40001800

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0202 	mvn.w	r2, #2
 8001d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8d2 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8c4 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f8d5 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0204 	mvn.w	r2, #4
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8ac 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f89e 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8af 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0208 	mvn.w	r2, #8
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f886 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f878 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f889 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0210 	mvn.w	r2, #16
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2208      	movs	r2, #8
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f860 	bl	8001ec0 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f852 	bl	8001eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f863 	bl	8001ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0201 	mvn.w	r2, #1
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fd6c 	bl	8000910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f900 	bl	800205c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f834 	bl	8001ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0220 	mvn.w	r2, #32
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8d2 	bl	8002048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a43      	ldr	r2, [pc, #268]	@ (800201c <TIM_Base_SetConfig+0x120>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d013      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f1a:	d00f      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a40      	ldr	r2, [pc, #256]	@ (8002020 <TIM_Base_SetConfig+0x124>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3f      	ldr	r2, [pc, #252]	@ (8002024 <TIM_Base_SetConfig+0x128>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3e      	ldr	r2, [pc, #248]	@ (8002028 <TIM_Base_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d003      	beq.n	8001f3c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	@ (800202c <TIM_Base_SetConfig+0x130>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d108      	bne.n	8001f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a32      	ldr	r2, [pc, #200]	@ (800201c <TIM_Base_SetConfig+0x120>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d02b      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5c:	d027      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2f      	ldr	r2, [pc, #188]	@ (8002020 <TIM_Base_SetConfig+0x124>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d023      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <TIM_Base_SetConfig+0x128>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01f      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2d      	ldr	r2, [pc, #180]	@ (8002028 <TIM_Base_SetConfig+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01b      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2c      	ldr	r2, [pc, #176]	@ (800202c <TIM_Base_SetConfig+0x130>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d017      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	@ (8002030 <TIM_Base_SetConfig+0x134>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <TIM_Base_SetConfig+0x138>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00f      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a29      	ldr	r2, [pc, #164]	@ (8002038 <TIM_Base_SetConfig+0x13c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00b      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a28      	ldr	r2, [pc, #160]	@ (800203c <TIM_Base_SetConfig+0x140>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <TIM_Base_SetConfig+0x144>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a26      	ldr	r2, [pc, #152]	@ (8002044 <TIM_Base_SetConfig+0x148>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <TIM_Base_SetConfig+0x120>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0xf2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a10      	ldr	r2, [pc, #64]	@ (800202c <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d103      	bne.n	8001ff6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f043 0204 	orr.w	r2, r3, #4
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	40000400 	.word	0x40000400
 8002024:	40000800 	.word	0x40000800
 8002028:	40000c00 	.word	0x40000c00
 800202c:	40010400 	.word	0x40010400
 8002030:	40014000 	.word	0x40014000
 8002034:	40014400 	.word	0x40014400
 8002038:	40014800 	.word	0x40014800
 800203c:	40001800 	.word	0x40001800
 8002040:	40001c00 	.word	0x40001c00
 8002044:	40002000 	.word	0x40002000

08002048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e042      	b.n	8002108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fc7e 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	@ 0x24
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fa09 	bl	80024cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b20      	cmp	r3, #32
 800212e:	d175      	bne.n	800221c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_UART_Transmit+0x2c>
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e06e      	b.n	800221e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2221      	movs	r2, #33	@ 0x21
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800214e:	f7fe fddf 	bl	8000d10 <HAL_GetTick>
 8002152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	88fa      	ldrh	r2, [r7, #6]
 800215e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002168:	d108      	bne.n	800217c <HAL_UART_Transmit+0x6c>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d104      	bne.n	800217c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e003      	b.n	8002184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002184:	e02e      	b.n	80021e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f8df 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03a      	b.n	800221e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3302      	adds	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e007      	b.n	80021d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3301      	adds	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1cb      	bne.n	8002186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2140      	movs	r1, #64	@ 0x40
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f8ab 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	e000      	b.n	800221e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800221c:	2302      	movs	r3, #2
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b08a      	sub	sp, #40	@ 0x28
 800222a:	af02      	add	r7, sp, #8
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	f040 8081 	bne.w	800234a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Receive+0x2e>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e079      	b.n	800234c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2222      	movs	r2, #34	@ 0x22
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800226c:	f7fe fd50 	bl	8000d10 <HAL_GetTick>
 8002270:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002286:	d108      	bne.n	800229a <HAL_UART_Receive+0x74>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d104      	bne.n	800229a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e003      	b.n	80022a2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022a2:	e047      	b.n	8002334 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2120      	movs	r1, #32
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f850 	bl	8002354 <UART_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e042      	b.n	800234c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10c      	bne.n	80022e6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d8:	b29a      	uxth	r2, r3
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e01f      	b.n	8002326 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ee:	d007      	beq.n	8002300 <HAL_UART_Receive+0xda>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <HAL_UART_Receive+0xe8>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e008      	b.n	8002320 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800231a:	b2da      	uxtb	r2, r3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3301      	adds	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1b2      	bne.n	80022a4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002364:	e03b      	b.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d037      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7fe fccf 	bl	8000d10 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <UART_WaitOnFlagUntilTimeout+0x30>
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03a      	b.n	80023fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d023      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b80      	cmp	r3, #128	@ 0x80
 800239a:	d020      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b40      	cmp	r3, #64	@ 0x40
 80023a0:	d01d      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d116      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f81d 	bl	8002406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2208      	movs	r2, #8
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d0b4      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002406:	b480      	push	{r7}
 8002408:	b095      	sub	sp, #84	@ 0x54
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800242e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e5      	bne.n	800240e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	61fb      	str	r3, [r7, #28]
   return(result);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3314      	adds	r3, #20
 8002460:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002462:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002464:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002466:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e5      	bne.n	8002442 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	2b01      	cmp	r3, #1
 800247c:	d119      	bne.n	80024b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	330c      	adds	r3, #12
 8002484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	e853 3f00 	ldrex	r3, [r3]
 800248c:	60bb      	str	r3, [r7, #8]
   return(result);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f023 0310 	bic.w	r3, r3, #16
 8002494:	647b      	str	r3, [r7, #68]	@ 0x44
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800249e:	61ba      	str	r2, [r7, #24]
 80024a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	e841 2300 	strex	r3, r2, [r1]
 80024aa:	613b      	str	r3, [r7, #16]
   return(result);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1e5      	bne.n	800247e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024c0:	bf00      	nop
 80024c2:	3754      	adds	r7, #84	@ 0x54
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b0c0      	sub	sp, #256	@ 0x100
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	ea40 0301 	orr.w	r3, r0, r1
 80024f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	431a      	orrs	r2, r3
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	431a      	orrs	r2, r3
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002524:	f021 010c 	bic.w	r1, r1, #12
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002532:	430b      	orrs	r3, r1
 8002534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002546:	6999      	ldr	r1, [r3, #24]
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	ea40 0301 	orr.w	r3, r0, r1
 8002552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <UART_SetConfig+0x2cc>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d005      	beq.n	800256c <UART_SetConfig+0xa0>
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <UART_SetConfig+0x2d0>)
 8002568:	429a      	cmp	r2, r3
 800256a:	d104      	bne.n	8002576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800256c:	f7ff fa9e 	bl	8001aac <HAL_RCC_GetPCLK2Freq>
 8002570:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002574:	e003      	b.n	800257e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002576:	f7ff fa85 	bl	8001a84 <HAL_RCC_GetPCLK1Freq>
 800257a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002588:	f040 810c 	bne.w	80027a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800258c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002596:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800259a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025a6:	415b      	adcs	r3, r3
 80025a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025ae:	4621      	mov	r1, r4
 80025b0:	eb12 0801 	adds.w	r8, r2, r1
 80025b4:	4629      	mov	r1, r5
 80025b6:	eb43 0901 	adc.w	r9, r3, r1
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ce:	4690      	mov	r8, r2
 80025d0:	4699      	mov	r9, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	eb18 0303 	adds.w	r3, r8, r3
 80025d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025dc:	462b      	mov	r3, r5
 80025de:	eb49 0303 	adc.w	r3, r9, r3
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025fa:	460b      	mov	r3, r1
 80025fc:	18db      	adds	r3, r3, r3
 80025fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002600:	4613      	mov	r3, r2
 8002602:	eb42 0303 	adc.w	r3, r2, r3
 8002606:	657b      	str	r3, [r7, #84]	@ 0x54
 8002608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800260c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002610:	f7fd fe2e 	bl	8000270 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <UART_SetConfig+0x2d4>)
 800261a:	fba3 2302 	umull	r2, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	011c      	lsls	r4, r3, #4
 8002622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800262c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	1891      	adds	r1, r2, r2
 800263a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800263c:	415b      	adcs	r3, r3
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002644:	4641      	mov	r1, r8
 8002646:	eb12 0a01 	adds.w	sl, r2, r1
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0b01 	adc.w	fp, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800265c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002664:	4692      	mov	sl, r2
 8002666:	469b      	mov	fp, r3
 8002668:	4643      	mov	r3, r8
 800266a:	eb1a 0303 	adds.w	r3, sl, r3
 800266e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002672:	464b      	mov	r3, r9
 8002674:	eb4b 0303 	adc.w	r3, fp, r3
 8002678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002688:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800268c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002690:	460b      	mov	r3, r1
 8002692:	18db      	adds	r3, r3, r3
 8002694:	643b      	str	r3, [r7, #64]	@ 0x40
 8002696:	4613      	mov	r3, r2
 8002698:	eb42 0303 	adc.w	r3, r2, r3
 800269c:	647b      	str	r3, [r7, #68]	@ 0x44
 800269e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026a6:	f7fd fde3 	bl	8000270 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <UART_SetConfig+0x2d4>)
 80026b2:	fba3 2301 	umull	r2, r3, r3, r1
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2264      	movs	r2, #100	@ 0x64
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <UART_SetConfig+0x2d4>)
 80026c8:	fba3 2302 	umull	r2, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026d4:	441c      	add	r4, r3
 80026d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	1891      	adds	r1, r2, r2
 80026ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026f0:	415b      	adcs	r3, r3
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026f8:	4641      	mov	r1, r8
 80026fa:	1851      	adds	r1, r2, r1
 80026fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80026fe:	4649      	mov	r1, r9
 8002700:	414b      	adcs	r3, r1
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002710:	4659      	mov	r1, fp
 8002712:	00cb      	lsls	r3, r1, #3
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271a:	4651      	mov	r1, sl
 800271c:	00ca      	lsls	r2, r1, #3
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	4603      	mov	r3, r0
 8002724:	4642      	mov	r2, r8
 8002726:	189b      	adds	r3, r3, r2
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800272c:	464b      	mov	r3, r9
 800272e:	460a      	mov	r2, r1
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002744:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800274c:	460b      	mov	r3, r1
 800274e:	18db      	adds	r3, r3, r3
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002752:	4613      	mov	r3, r2
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800275a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800275e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002762:	f7fd fd85 	bl	8000270 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <UART_SetConfig+0x2d4>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	@ 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	@ 0x32
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <UART_SetConfig+0x2d4>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4422      	add	r2, r4
 8002792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002794:	e106      	b.n	80029a4 <UART_SetConfig+0x4d8>
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027b6:	4642      	mov	r2, r8
 80027b8:	464b      	mov	r3, r9
 80027ba:	1891      	adds	r1, r2, r2
 80027bc:	6239      	str	r1, [r7, #32]
 80027be:	415b      	adcs	r3, r3
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027c6:	4641      	mov	r1, r8
 80027c8:	1854      	adds	r4, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0501 	adc.w	r5, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027ec:	464b      	mov	r3, r9
 80027ee:	eb45 0303 	adc.w	r3, r5, r3
 80027f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002812:	4629      	mov	r1, r5
 8002814:	008b      	lsls	r3, r1, #2
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281c:	4621      	mov	r1, r4
 800281e:	008a      	lsls	r2, r1, #2
 8002820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002824:	f7fd fd24 	bl	8000270 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4b60      	ldr	r3, [pc, #384]	@ (80029b0 <UART_SetConfig+0x4e4>)
 800282e:	fba3 2302 	umull	r2, r3, r3, r2
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	011c      	lsls	r4, r3, #4
 8002836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	61b9      	str	r1, [r7, #24]
 8002850:	415b      	adcs	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	6139      	str	r1, [r7, #16]
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028b0:	4649      	mov	r1, r9
 80028b2:	008b      	lsls	r3, r1, #2
 80028b4:	4641      	mov	r1, r8
 80028b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ba:	4641      	mov	r1, r8
 80028bc:	008a      	lsls	r2, r1, #2
 80028be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028c2:	f7fd fcd5 	bl	8000270 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <UART_SetConfig+0x4e4>)
 80028ce:	fba3 2301 	umull	r2, r3, r3, r1
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2264      	movs	r2, #100	@ 0x64
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	1acb      	subs	r3, r1, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3332      	adds	r3, #50	@ 0x32
 80028e0:	4a33      	ldr	r2, [pc, #204]	@ (80029b0 <UART_SetConfig+0x4e4>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ec:	441c      	add	r4, r3
 80028ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f2:	2200      	movs	r2, #0
 80028f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80028f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028fc:	4642      	mov	r2, r8
 80028fe:	464b      	mov	r3, r9
 8002900:	1891      	adds	r1, r2, r2
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	415b      	adcs	r3, r3
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800290c:	4641      	mov	r1, r8
 800290e:	1851      	adds	r1, r2, r1
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	4649      	mov	r1, r9
 8002914:	414b      	adcs	r3, r1
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002924:	4659      	mov	r1, fp
 8002926:	00cb      	lsls	r3, r1, #3
 8002928:	4651      	mov	r1, sl
 800292a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800292e:	4651      	mov	r1, sl
 8002930:	00ca      	lsls	r2, r1, #3
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	4603      	mov	r3, r0
 8002938:	4642      	mov	r2, r8
 800293a:	189b      	adds	r3, r3, r2
 800293c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800293e:	464b      	mov	r3, r9
 8002940:	460a      	mov	r2, r1
 8002942:	eb42 0303 	adc.w	r3, r2, r3
 8002946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	663b      	str	r3, [r7, #96]	@ 0x60
 8002952:	667a      	str	r2, [r7, #100]	@ 0x64
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002960:	4649      	mov	r1, r9
 8002962:	008b      	lsls	r3, r1, #2
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800296a:	4641      	mov	r1, r8
 800296c:	008a      	lsls	r2, r1, #2
 800296e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002972:	f7fd fc7d 	bl	8000270 <__aeabi_uldivmod>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <UART_SetConfig+0x4e4>)
 800297c:	fba3 1302 	umull	r1, r3, r3, r2
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2164      	movs	r1, #100	@ 0x64
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	@ 0x32
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <UART_SetConfig+0x4e4>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4422      	add	r2, r4
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029aa:	46bd      	mov	sp, r7
 80029ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	2b84      	cmp	r3, #132	@ 0x84
 80029c8:	d005      	beq.n	80029d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	3303      	adds	r3, #3
 80029d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029e8:	f000 fafc 	bl	8002fe4 <vTaskStartScheduler>
  
  return osOK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f4:	b089      	sub	sp, #36	@ 0x24
 80029f6:	af04      	add	r7, sp, #16
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <osThreadCreate+0x54>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01c      	beq.n	8002a46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685c      	ldr	r4, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691e      	ldr	r6, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffc8 	bl	80029b4 <makeFreeRtosPriority>
 8002a24:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a2e:	9202      	str	r2, [sp, #8]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	9100      	str	r1, [sp, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4632      	mov	r2, r6
 8002a38:	4629      	mov	r1, r5
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 f8ed 	bl	8002c1a <xTaskCreateStatic>
 8002a40:	4603      	mov	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e01c      	b.n	8002a80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685c      	ldr	r4, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a52:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ffaa 	bl	80029b4 <makeFreeRtosPriority>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	4632      	mov	r2, r6
 8002a6e:	4629      	mov	r1, r5
 8002a70:	4620      	mov	r0, r4
 8002a72:	f000 f932 	bl	8002cda <xTaskCreate>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <osDelay+0x16>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	e000      	b.n	8002aa2 <osDelay+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fa68 	bl	8002f78 <vTaskDelay>
  
  return osOK;
 8002aa8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f103 0208 	add.w	r2, r3, #8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f103 0208 	add.w	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f103 0208 	add.w	r2, r3, #8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	601a      	str	r2, [r3, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d103      	bne.n	8002b74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e00c      	b.n	8002b8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3308      	adds	r3, #8
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e002      	b.n	8002b82 <vListInsert+0x2e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d2f6      	bcs.n	8002b7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6892      	ldr	r2, [r2, #8]
 8002bdc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6852      	ldr	r2, [r2, #4]
 8002be6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d103      	bne.n	8002bfa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b08e      	sub	sp, #56	@ 0x38
 8002c1e:	af04      	add	r7, sp, #16
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10b      	bne.n	8002c64 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	61fb      	str	r3, [r7, #28]
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c64:	23a0      	movs	r3, #160	@ 0xa0
 8002c66:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c6c:	d00b      	beq.n	8002c86 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	61bb      	str	r3, [r7, #24]
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	e7fd      	b.n	8002c82 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01e      	beq.n	8002ccc <xTaskCreateStatic+0xb2>
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9303      	str	r3, [sp, #12]
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	9302      	str	r3, [sp, #8]
 8002cae:	f107 0314 	add.w	r3, r7, #20
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f850 	bl	8002d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cc6:	f000 f8ed 	bl	8002ea4 <prvAddNewTaskToReadyList>
 8002cca:	e001      	b.n	8002cd0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cd0:	697b      	ldr	r3, [r7, #20]
	}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3728      	adds	r7, #40	@ 0x28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08c      	sub	sp, #48	@ 0x30
 8002cde:	af04      	add	r7, sp, #16
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 ff02 	bl	8003af8 <pvPortMalloc>
 8002cf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cfc:	20a0      	movs	r0, #160	@ 0xa0
 8002cfe:	f000 fefb 	bl	8003af8 <pvPortMalloc>
 8002d02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d10:	e005      	b.n	8002d1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f000 ffbe 	bl	8003c94 <vPortFree>
 8002d18:	e001      	b.n	8002d1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9303      	str	r3, [sp, #12]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	9302      	str	r3, [sp, #8]
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f80e 	bl	8002d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d48:	69f8      	ldr	r0, [r7, #28]
 8002d4a:	f000 f8ab 	bl	8002ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e002      	b.n	8002d5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	617b      	str	r3, [r7, #20]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01f      	beq.n	8002df4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e012      	b.n	8002de0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	7819      	ldrb	r1, [r3, #0]
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3334      	adds	r3, #52	@ 0x34
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d9e9      	bls.n	8002dba <prvInitialiseNewTask+0x56>
 8002de6:	e000      	b.n	8002dea <prvInitialiseNewTask+0x86>
			{
				break;
 8002de8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002df2:	e003      	b.n	8002dfc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d901      	bls.n	8002e06 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e02:	2306      	movs	r3, #6
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	2200      	movs	r2, #0
 8002e16:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fe68 	bl	8002af2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	3318      	adds	r3, #24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fe63 	bl	8002af2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	f1c3 0207 	rsb	r2, r3, #7
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	334c      	adds	r3, #76	@ 0x4c
 8002e56:	224c      	movs	r2, #76	@ 0x4c
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fa9e 	bl	800439c <memset>
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <prvInitialiseNewTask+0x134>)
 8002e64:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	4a0c      	ldr	r2, [pc, #48]	@ (8002e9c <prvInitialiseNewTask+0x138>)
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <prvInitialiseNewTask+0x13c>)
 8002e70:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	68f9      	ldr	r1, [r7, #12]
 8002e76:	69b8      	ldr	r0, [r7, #24]
 8002e78:	f000 fc2a 	bl	80036d0 <pxPortInitialiseStack>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e8e:	bf00      	nop
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20004134 	.word	0x20004134
 8002e9c:	2000419c 	.word	0x2000419c
 8002ea0:	20004204 	.word	0x20004204

08002ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eac:	f000 fd44 	bl	8003938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f5c <prvAddNewTaskToReadyList+0xb8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <prvAddNewTaskToReadyList+0xb8>)
 8002eb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002eba:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <prvAddNewTaskToReadyList+0xbc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ec2:	4a27      	ldr	r2, [pc, #156]	@ (8002f60 <prvAddNewTaskToReadyList+0xbc>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <prvAddNewTaskToReadyList+0xb8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d110      	bne.n	8002ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ed0:	f000 fad4 	bl	800347c <prvInitialiseTaskLists>
 8002ed4:	e00d      	b.n	8002ef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ed6:	4b23      	ldr	r3, [pc, #140]	@ (8002f64 <prvAddNewTaskToReadyList+0xc0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <prvAddNewTaskToReadyList+0xbc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d802      	bhi.n	8002ef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002eec:	4a1c      	ldr	r2, [pc, #112]	@ (8002f60 <prvAddNewTaskToReadyList+0xbc>)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <prvAddNewTaskToReadyList+0xc4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <prvAddNewTaskToReadyList+0xc4>)
 8002efa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <prvAddNewTaskToReadyList+0xc8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <prvAddNewTaskToReadyList+0xc8>)
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <prvAddNewTaskToReadyList+0xcc>)
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7ff fdf1 	bl	8002b0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f2a:	f000 fd37 	bl	800399c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f64 <prvAddNewTaskToReadyList+0xc0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00e      	beq.n	8002f54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f36:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <prvAddNewTaskToReadyList+0xbc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d207      	bcs.n	8002f54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <prvAddNewTaskToReadyList+0xd0>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	200004e0 	.word	0x200004e0
 8002f60:	200003e0 	.word	0x200003e0
 8002f64:	200004ec 	.word	0x200004ec
 8002f68:	200004fc 	.word	0x200004fc
 8002f6c:	200004e8 	.word	0x200004e8
 8002f70:	200003e4 	.word	0x200003e4
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d018      	beq.n	8002fbc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f8a:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <vTaskDelay+0x64>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <vTaskDelay+0x32>
	__asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	60bb      	str	r3, [r7, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	e7fd      	b.n	8002fa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002faa:	f000 f885 	bl	80030b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fb27 	bl	8003604 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fb6:	f000 f88d 	bl	80030d4 <xTaskResumeAll>
 8002fba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <vTaskDelay+0x68>)
 8002fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000508 	.word	0x20000508
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ff2:	463a      	mov	r2, r7
 8002ff4:	1d39      	adds	r1, r7, #4
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd face 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	9202      	str	r2, [sp, #8]
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	2300      	movs	r3, #0
 8003010:	460a      	mov	r2, r1
 8003012:	4921      	ldr	r1, [pc, #132]	@ (8003098 <vTaskStartScheduler+0xb4>)
 8003014:	4821      	ldr	r0, [pc, #132]	@ (800309c <vTaskStartScheduler+0xb8>)
 8003016:	f7ff fe00 	bl	8002c1a <xTaskCreateStatic>
 800301a:	4603      	mov	r3, r0
 800301c:	4a20      	ldr	r2, [pc, #128]	@ (80030a0 <vTaskStartScheduler+0xbc>)
 800301e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003020:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <vTaskStartScheduler+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e001      	b.n	8003032 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d11b      	bne.n	8003070 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	613b      	str	r3, [r7, #16]
}
 800304a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800304c:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <vTaskStartScheduler+0xc0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	334c      	adds	r3, #76	@ 0x4c
 8003052:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <vTaskStartScheduler+0xc4>)
 8003054:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <vTaskStartScheduler+0xc8>)
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800305e:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <vTaskStartScheduler+0xcc>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003064:	4b13      	ldr	r3, [pc, #76]	@ (80030b4 <vTaskStartScheduler+0xd0>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800306a:	f000 fbc1 	bl	80037f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800306e:	e00f      	b.n	8003090 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d10b      	bne.n	8003090 <vTaskStartScheduler+0xac>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60fb      	str	r3, [r7, #12]
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <vTaskStartScheduler+0xa8>
}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	080055c8 	.word	0x080055c8
 800309c:	0800344d 	.word	0x0800344d
 80030a0:	20000504 	.word	0x20000504
 80030a4:	200003e0 	.word	0x200003e0
 80030a8:	2000001c 	.word	0x2000001c
 80030ac:	20000500 	.word	0x20000500
 80030b0:	200004ec 	.word	0x200004ec
 80030b4:	200004e4 	.word	0x200004e4

080030b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <vTaskSuspendAll+0x18>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a03      	ldr	r2, [pc, #12]	@ (80030d0 <vTaskSuspendAll+0x18>)
 80030c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000508 	.word	0x20000508

080030d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <xTaskResumeAll+0x118>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <xTaskResumeAll+0x2e>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	603b      	str	r3, [r7, #0]
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003102:	f000 fc19 	bl	8003938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003106:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <xTaskResumeAll+0x118>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3b01      	subs	r3, #1
 800310c:	4a37      	ldr	r2, [pc, #220]	@ (80031ec <xTaskResumeAll+0x118>)
 800310e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003110:	4b36      	ldr	r3, [pc, #216]	@ (80031ec <xTaskResumeAll+0x118>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d161      	bne.n	80031dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003118:	4b35      	ldr	r3, [pc, #212]	@ (80031f0 <xTaskResumeAll+0x11c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05d      	beq.n	80031dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003120:	e02e      	b.n	8003180 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <xTaskResumeAll+0x120>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3318      	adds	r3, #24
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fd49 	bl	8002bc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3304      	adds	r3, #4
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd44 	bl	8002bc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	4b2c      	ldr	r3, [pc, #176]	@ (80031f8 <xTaskResumeAll+0x124>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <xTaskResumeAll+0x124>)
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4a27      	ldr	r2, [pc, #156]	@ (80031fc <xTaskResumeAll+0x128>)
 800315e:	441a      	add	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3304      	adds	r3, #4
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f7ff fcd0 	bl	8002b0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003170:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <xTaskResumeAll+0x12c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800317a:	4b22      	ldr	r3, [pc, #136]	@ (8003204 <xTaskResumeAll+0x130>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003180:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <xTaskResumeAll+0x120>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cc      	bne.n	8003122 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800318e:	f000 fa19 	bl	80035c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003192:	4b1d      	ldr	r3, [pc, #116]	@ (8003208 <xTaskResumeAll+0x134>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800319e:	f000 f837 	bl	8003210 <xTaskIncrementTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031a8:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <xTaskResumeAll+0x130>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f1      	bne.n	800319e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80031ba:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <xTaskResumeAll+0x134>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80031c0:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <xTaskResumeAll+0x130>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031cc:	4b0f      	ldr	r3, [pc, #60]	@ (800320c <xTaskResumeAll+0x138>)
 80031ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031dc:	f000 fbde 	bl	800399c <vPortExitCritical>

	return xAlreadyYielded;
 80031e0:	68bb      	ldr	r3, [r7, #8]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000508 	.word	0x20000508
 80031f0:	200004e0 	.word	0x200004e0
 80031f4:	200004a0 	.word	0x200004a0
 80031f8:	200004e8 	.word	0x200004e8
 80031fc:	200003e4 	.word	0x200003e4
 8003200:	200003e0 	.word	0x200003e0
 8003204:	200004f4 	.word	0x200004f4
 8003208:	200004f0 	.word	0x200004f0
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321a:	4b4f      	ldr	r3, [pc, #316]	@ (8003358 <xTaskIncrementTick+0x148>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 808f 	bne.w	8003342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003224:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <xTaskIncrementTick+0x14c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <xTaskIncrementTick+0x14c>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d121      	bne.n	800327c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003238:	4b49      	ldr	r3, [pc, #292]	@ (8003360 <xTaskIncrementTick+0x150>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	603b      	str	r3, [r7, #0]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <xTaskIncrementTick+0x46>
 800325a:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <xTaskIncrementTick+0x150>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <xTaskIncrementTick+0x154>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3e      	ldr	r2, [pc, #248]	@ (8003360 <xTaskIncrementTick+0x150>)
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <xTaskIncrementTick+0x154>)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b3e      	ldr	r3, [pc, #248]	@ (8003368 <xTaskIncrementTick+0x158>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a3c      	ldr	r2, [pc, #240]	@ (8003368 <xTaskIncrementTick+0x158>)
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	f000 f9a4 	bl	80035c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800327c:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <xTaskIncrementTick+0x15c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	429a      	cmp	r2, r3
 8003284:	d348      	bcc.n	8003318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <xTaskIncrementTick+0x150>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <xTaskIncrementTick+0x15c>)
 8003292:	f04f 32ff 	mov.w	r2, #4294967295
 8003296:	601a      	str	r2, [r3, #0]
					break;
 8003298:	e03e      	b.n	8003318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800329a:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <xTaskIncrementTick+0x150>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d203      	bcs.n	80032ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032b2:	4a2e      	ldr	r2, [pc, #184]	@ (800336c <xTaskIncrementTick+0x15c>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80032b8:	e02e      	b.n	8003318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3304      	adds	r3, #4
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fc81 	bl	8002bc6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3318      	adds	r3, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc78 	bl	8002bc6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	4b24      	ldr	r3, [pc, #144]	@ (8003370 <xTaskIncrementTick+0x160>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	4a22      	ldr	r2, [pc, #136]	@ (8003370 <xTaskIncrementTick+0x160>)
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003374 <xTaskIncrementTick+0x164>)
 80032f6:	441a      	add	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7ff fc04 	bl	8002b0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003308:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <xTaskIncrementTick+0x168>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	429a      	cmp	r2, r3
 8003310:	d3b9      	bcc.n	8003286 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003316:	e7b6      	b.n	8003286 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003318:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <xTaskIncrementTick+0x168>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331e:	4915      	ldr	r1, [pc, #84]	@ (8003374 <xTaskIncrementTick+0x164>)
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d901      	bls.n	8003334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003330:	2301      	movs	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <xTaskIncrementTick+0x16c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e004      	b.n	800334c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003342:	4b0f      	ldr	r3, [pc, #60]	@ (8003380 <xTaskIncrementTick+0x170>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <xTaskIncrementTick+0x170>)
 800334a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800334c:	697b      	ldr	r3, [r7, #20]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000508 	.word	0x20000508
 800335c:	200004e4 	.word	0x200004e4
 8003360:	20000498 	.word	0x20000498
 8003364:	2000049c 	.word	0x2000049c
 8003368:	200004f8 	.word	0x200004f8
 800336c:	20000500 	.word	0x20000500
 8003370:	200004e8 	.word	0x200004e8
 8003374:	200003e4 	.word	0x200003e4
 8003378:	200003e0 	.word	0x200003e0
 800337c:	200004f4 	.word	0x200004f4
 8003380:	200004f0 	.word	0x200004f0

08003384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800338a:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <vTaskSwitchContext+0xb0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003392:	4b29      	ldr	r3, [pc, #164]	@ (8003438 <vTaskSwitchContext+0xb4>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003398:	e045      	b.n	8003426 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800339a:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <vTaskSwitchContext+0xb4>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a0:	4b26      	ldr	r3, [pc, #152]	@ (800343c <vTaskSwitchContext+0xb8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	f1c3 031f 	rsb	r3, r3, #31
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	4922      	ldr	r1, [pc, #136]	@ (8003440 <vTaskSwitchContext+0xbc>)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	607b      	str	r3, [r7, #4]
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	e7fd      	b.n	80033de <vTaskSwitchContext+0x5a>
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <vTaskSwitchContext+0xbc>)
 80033ee:	4413      	add	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3308      	adds	r3, #8
 8003404:	429a      	cmp	r2, r3
 8003406:	d104      	bne.n	8003412 <vTaskSwitchContext+0x8e>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <vTaskSwitchContext+0xc0>)
 800341a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <vTaskSwitchContext+0xc0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	334c      	adds	r3, #76	@ 0x4c
 8003422:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <vTaskSwitchContext+0xc4>)
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000508 	.word	0x20000508
 8003438:	200004f4 	.word	0x200004f4
 800343c:	200004e8 	.word	0x200004e8
 8003440:	200003e4 	.word	0x200003e4
 8003444:	200003e0 	.word	0x200003e0
 8003448:	2000001c 	.word	0x2000001c

0800344c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003454:	f000 f852 	bl	80034fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <prvIdleTask+0x28>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d9f9      	bls.n	8003454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003460:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <prvIdleTask+0x2c>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003470:	e7f0      	b.n	8003454 <prvIdleTask+0x8>
 8003472:	bf00      	nop
 8003474:	200003e4 	.word	0x200003e4
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	e00c      	b.n	80034a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <prvInitialiseTaskLists+0x60>)
 8003494:	4413      	add	r3, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fb0b 	bl	8002ab2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3301      	adds	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d9ef      	bls.n	8003488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034a8:	480d      	ldr	r0, [pc, #52]	@ (80034e0 <prvInitialiseTaskLists+0x64>)
 80034aa:	f7ff fb02 	bl	8002ab2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ae:	480d      	ldr	r0, [pc, #52]	@ (80034e4 <prvInitialiseTaskLists+0x68>)
 80034b0:	f7ff faff 	bl	8002ab2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <prvInitialiseTaskLists+0x6c>)
 80034b6:	f7ff fafc 	bl	8002ab2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034ba:	480c      	ldr	r0, [pc, #48]	@ (80034ec <prvInitialiseTaskLists+0x70>)
 80034bc:	f7ff faf9 	bl	8002ab2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034c0:	480b      	ldr	r0, [pc, #44]	@ (80034f0 <prvInitialiseTaskLists+0x74>)
 80034c2:	f7ff faf6 	bl	8002ab2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034c6:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <prvInitialiseTaskLists+0x78>)
 80034c8:	4a05      	ldr	r2, [pc, #20]	@ (80034e0 <prvInitialiseTaskLists+0x64>)
 80034ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <prvInitialiseTaskLists+0x7c>)
 80034ce:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <prvInitialiseTaskLists+0x68>)
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200003e4 	.word	0x200003e4
 80034e0:	20000470 	.word	0x20000470
 80034e4:	20000484 	.word	0x20000484
 80034e8:	200004a0 	.word	0x200004a0
 80034ec:	200004b4 	.word	0x200004b4
 80034f0:	200004cc 	.word	0x200004cc
 80034f4:	20000498 	.word	0x20000498
 80034f8:	2000049c 	.word	0x2000049c

080034fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003502:	e019      	b.n	8003538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003504:	f000 fa18 	bl	8003938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003508:	4b10      	ldr	r3, [pc, #64]	@ (800354c <prvCheckTasksWaitingTermination+0x50>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fb56 	bl	8002bc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <prvCheckTasksWaitingTermination+0x54>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	4a0b      	ldr	r2, [pc, #44]	@ (8003550 <prvCheckTasksWaitingTermination+0x54>)
 8003522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <prvCheckTasksWaitingTermination+0x58>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <prvCheckTasksWaitingTermination+0x58>)
 800352c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800352e:	f000 fa35 	bl	800399c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f810 	bl	8003558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <prvCheckTasksWaitingTermination+0x58>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e1      	bne.n	8003504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200004b4 	.word	0x200004b4
 8003550:	200004e0 	.word	0x200004e0
 8003554:	200004c8 	.word	0x200004c8

08003558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	334c      	adds	r3, #76	@ 0x4c
 8003564:	4618      	mov	r0, r3
 8003566:	f000 ff31 	bl	80043cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003570:	2b00      	cmp	r3, #0
 8003572:	d108      	bne.n	8003586 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fb8b 	bl	8003c94 <vPortFree>
				vPortFree( pxTCB );
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fb88 	bl	8003c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003584:	e019      	b.n	80035ba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800358c:	2b01      	cmp	r3, #1
 800358e:	d103      	bne.n	8003598 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fb7f 	bl	8003c94 <vPortFree>
	}
 8003596:	e010      	b.n	80035ba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d00b      	beq.n	80035ba <prvDeleteTCB+0x62>
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
}
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	e7fd      	b.n	80035b6 <prvDeleteTCB+0x5e>
	}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ca:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <prvResetNextTaskUnblockTime+0x38>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <prvResetNextTaskUnblockTime+0x3c>)
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035dc:	e008      	b.n	80035f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <prvResetNextTaskUnblockTime+0x38>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <prvResetNextTaskUnblockTime+0x3c>)
 80035ee:	6013      	str	r3, [r2, #0]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20000498 	.word	0x20000498
 8003600:	20000500 	.word	0x20000500

08003604 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800360e:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003614:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3304      	adds	r3, #4
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fad3 	bl	8002bc6 <uxListRemove>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4013      	ands	r3, r2
 800363a:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800363c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d10a      	bne.n	800365c <prvAddCurrentTaskToDelayedList+0x58>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800364c:	4b1a      	ldr	r3, [pc, #104]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3304      	adds	r3, #4
 8003652:	4619      	mov	r1, r3
 8003654:	481a      	ldr	r0, [pc, #104]	@ (80036c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003656:	f7ff fa59 	bl	8002b0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800365a:	e026      	b.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003664:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	429a      	cmp	r2, r3
 8003672:	d209      	bcs.n	8003688 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b0f      	ldr	r3, [pc, #60]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7ff fa67 	bl	8002b54 <vListInsert>
}
 8003686:	e010      	b.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003688:	4b0f      	ldr	r3, [pc, #60]	@ (80036c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7ff fa5d 	bl	8002b54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d202      	bcs.n	80036aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036a4:	4a09      	ldr	r2, [pc, #36]	@ (80036cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200004e4 	.word	0x200004e4
 80036b8:	200003e0 	.word	0x200003e0
 80036bc:	200004e8 	.word	0x200004e8
 80036c0:	200004cc 	.word	0x200004cc
 80036c4:	2000049c 	.word	0x2000049c
 80036c8:	20000498 	.word	0x20000498
 80036cc:	20000500 	.word	0x20000500

080036d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3b04      	subs	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3b04      	subs	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b04      	subs	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003700:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <pxPortInitialiseStack+0x64>)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b14      	subs	r3, #20
 800370a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3b04      	subs	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f06f 0202 	mvn.w	r2, #2
 800371e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b20      	subs	r3, #32
 8003724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	08003739 	.word	0x08003739

08003738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003742:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <prvTaskExitError+0x58>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374a:	d00b      	beq.n	8003764 <prvTaskExitError+0x2c>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
}
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <prvTaskExitError+0x28>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60bb      	str	r3, [r7, #8]
}
 8003776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003778:	bf00      	nop
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0fc      	beq.n	800377a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	2000000c 	.word	0x2000000c
	...

080037a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <pxCurrentTCBConst2>)
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	6808      	ldr	r0, [r1, #0]
 80037a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037aa:	f380 8809 	msr	PSP, r0
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f04f 0000 	mov.w	r0, #0
 80037b6:	f380 8811 	msr	BASEPRI, r0
 80037ba:	4770      	bx	lr
 80037bc:	f3af 8000 	nop.w

080037c0 <pxCurrentTCBConst2>:
 80037c0:	200003e0 	.word	0x200003e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop

080037c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037c8:	4808      	ldr	r0, [pc, #32]	@ (80037ec <prvPortStartFirstTask+0x24>)
 80037ca:	6800      	ldr	r0, [r0, #0]
 80037cc:	6800      	ldr	r0, [r0, #0]
 80037ce:	f380 8808 	msr	MSP, r0
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8814 	msr	CONTROL, r0
 80037da:	b662      	cpsie	i
 80037dc:	b661      	cpsie	f
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	df00      	svc	0
 80037e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037ea:	bf00      	nop
 80037ec:	e000ed08 	.word	0xe000ed08

080037f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037f6:	4b47      	ldr	r3, [pc, #284]	@ (8003914 <xPortStartScheduler+0x124>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a47      	ldr	r2, [pc, #284]	@ (8003918 <xPortStartScheduler+0x128>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10b      	bne.n	8003818 <xPortStartScheduler+0x28>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	60fb      	str	r3, [r7, #12]
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003818:	4b3e      	ldr	r3, [pc, #248]	@ (8003914 <xPortStartScheduler+0x124>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3f      	ldr	r2, [pc, #252]	@ (800391c <xPortStartScheduler+0x12c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d10b      	bne.n	800383a <xPortStartScheduler+0x4a>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	613b      	str	r3, [r7, #16]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800383a:	4b39      	ldr	r3, [pc, #228]	@ (8003920 <xPortStartScheduler+0x130>)
 800383c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b31      	ldr	r3, [pc, #196]	@ (8003924 <xPortStartScheduler+0x134>)
 8003860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003862:	4b31      	ldr	r3, [pc, #196]	@ (8003928 <xPortStartScheduler+0x138>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003868:	e009      	b.n	800387e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800386a:	4b2f      	ldr	r3, [pc, #188]	@ (8003928 <xPortStartScheduler+0x138>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3b01      	subs	r3, #1
 8003870:	4a2d      	ldr	r2, [pc, #180]	@ (8003928 <xPortStartScheduler+0x138>)
 8003872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b80      	cmp	r3, #128	@ 0x80
 8003888:	d0ef      	beq.n	800386a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <xPortStartScheduler+0x138>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00b      	beq.n	80038ae <xPortStartScheduler+0xbe>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	60bb      	str	r3, [r7, #8]
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	e7fd      	b.n	80038aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <xPortStartScheduler+0x138>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003928 <xPortStartScheduler+0x138>)
 80038b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <xPortStartScheduler+0x138>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038c0:	4a19      	ldr	r2, [pc, #100]	@ (8003928 <xPortStartScheduler+0x138>)
 80038c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038cc:	4b17      	ldr	r3, [pc, #92]	@ (800392c <xPortStartScheduler+0x13c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <xPortStartScheduler+0x13c>)
 80038d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <xPortStartScheduler+0x13c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <xPortStartScheduler+0x13c>)
 80038de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80038e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038e4:	f000 f8da 	bl	8003a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <xPortStartScheduler+0x140>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038ee:	f000 f8f9 	bl	8003ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <xPortStartScheduler+0x144>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <xPortStartScheduler+0x144>)
 80038f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80038fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038fe:	f7ff ff63 	bl	80037c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003902:	f7ff fd3f 	bl	8003384 <vTaskSwitchContext>
	prvTaskExitError();
 8003906:	f7ff ff17 	bl	8003738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	e000ed00 	.word	0xe000ed00
 8003918:	410fc271 	.word	0x410fc271
 800391c:	410fc270 	.word	0x410fc270
 8003920:	e000e400 	.word	0xe000e400
 8003924:	2000050c 	.word	0x2000050c
 8003928:	20000510 	.word	0x20000510
 800392c:	e000ed20 	.word	0xe000ed20
 8003930:	2000000c 	.word	0x2000000c
 8003934:	e000ef34 	.word	0xe000ef34

08003938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	607b      	str	r3, [r7, #4]
}
 8003950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <vPortEnterCritical+0x5c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a0e      	ldr	r2, [pc, #56]	@ (8003994 <vPortEnterCritical+0x5c>)
 800395a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800395c:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <vPortEnterCritical+0x5c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d110      	bne.n	8003986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003964:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <vPortEnterCritical+0x60>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <vPortEnterCritical+0x4e>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	603b      	str	r3, [r7, #0]
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	e7fd      	b.n	8003982 <vPortEnterCritical+0x4a>
	}
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	2000000c 	.word	0x2000000c
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039a2:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <vPortExitCritical+0x50>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <vPortExitCritical+0x26>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	607b      	str	r3, [r7, #4]
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	e7fd      	b.n	80039be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	@ (80039ec <vPortExitCritical+0x50>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	4a08      	ldr	r2, [pc, #32]	@ (80039ec <vPortExitCritical+0x50>)
 80039ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039cc:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <vPortExitCritical+0x50>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <vPortExitCritical+0x44>
 80039d4:	2300      	movs	r3, #0
 80039d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80039de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039f0:	f3ef 8009 	mrs	r0, PSP
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <pxCurrentTCBConst>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f01e 0f10 	tst.w	lr, #16
 8003a00:	bf08      	it	eq
 8003a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003a14:	f380 8811 	msr	BASEPRI, r0
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f7ff fcb0 	bl	8003384 <vTaskSwitchContext>
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f380 8811 	msr	BASEPRI, r0
 8003a2c:	bc09      	pop	{r0, r3}
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	6808      	ldr	r0, [r1, #0]
 8003a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a36:	f01e 0f10 	tst.w	lr, #16
 8003a3a:	bf08      	it	eq
 8003a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a40:	f380 8809 	msr	PSP, r0
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	f3af 8000 	nop.w

08003a50 <pxCurrentTCBConst>:
 8003a50:	200003e0 	.word	0x200003e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	607b      	str	r3, [r7, #4]
}
 8003a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a72:	f7ff fbcd 	bl	8003210 <xTaskIncrementTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <SysTick_Handler+0x40>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f383 8811 	msr	BASEPRI, r3
}
 8003a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <vPortSetupTimerInterrupt+0x34>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <vPortSetupTimerInterrupt+0x38>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <vPortSetupTimerInterrupt+0x3c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8003adc <vPortSetupTimerInterrupt+0x40>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <vPortSetupTimerInterrupt+0x44>)
 8003aba:	3b01      	subs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003abe:	4b04      	ldr	r3, [pc, #16]	@ (8003ad0 <vPortSetupTimerInterrupt+0x34>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010
 8003ad4:	e000e018 	.word	0xe000e018
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	10624dd3 	.word	0x10624dd3
 8003ae0:	e000e014 	.word	0xe000e014

08003ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003af4 <vPortEnableVFP+0x10>
 8003ae8:	6801      	ldr	r1, [r0, #0]
 8003aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003aee:	6001      	str	r1, [r0, #0]
 8003af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003af2:	bf00      	nop
 8003af4:	e000ed88 	.word	0xe000ed88

08003af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	@ 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b04:	f7ff fad8 	bl	80030b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b08:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <pvPortMalloc+0x184>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b10:	f000 f924 	bl	8003d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b14:	4b5a      	ldr	r3, [pc, #360]	@ (8003c80 <pvPortMalloc+0x188>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f040 8095 	bne.w	8003c4c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01e      	beq.n	8003b66 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003b28:	2208      	movs	r2, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <pvPortMalloc+0x6e>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	617b      	str	r3, [r7, #20]
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	e7fd      	b.n	8003b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d06f      	beq.n	8003c4c <pvPortMalloc+0x154>
 8003b6c:	4b45      	ldr	r3, [pc, #276]	@ (8003c84 <pvPortMalloc+0x18c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d86a      	bhi.n	8003c4c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b76:	4b44      	ldr	r3, [pc, #272]	@ (8003c88 <pvPortMalloc+0x190>)
 8003b78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b7a:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <pvPortMalloc+0x190>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b80:	e004      	b.n	8003b8c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d903      	bls.n	8003b9e <pvPortMalloc+0xa6>
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f1      	bne.n	8003b82 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b9e:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <pvPortMalloc+0x184>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d051      	beq.n	8003c4c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4413      	add	r3, r2
 8003bb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d920      	bls.n	8003c0c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00b      	beq.n	8003bf4 <pvPortMalloc+0xfc>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	613b      	str	r3, [r7, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad2      	subs	r2, r2, r3
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c06:	69b8      	ldr	r0, [r7, #24]
 8003c08:	f000 f90a 	bl	8003e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <pvPortMalloc+0x18c>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <pvPortMalloc+0x18c>)
 8003c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <pvPortMalloc+0x18c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c8c <pvPortMalloc+0x194>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d203      	bcs.n	8003c2e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c26:	4b17      	ldr	r3, [pc, #92]	@ (8003c84 <pvPortMalloc+0x18c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <pvPortMalloc+0x194>)
 8003c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <pvPortMalloc+0x188>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c42:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <pvPortMalloc+0x198>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	4a11      	ldr	r2, [pc, #68]	@ (8003c90 <pvPortMalloc+0x198>)
 8003c4a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c4c:	f7ff fa42 	bl	80030d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <pvPortMalloc+0x17a>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60fb      	str	r3, [r7, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <pvPortMalloc+0x176>
	return pvReturn;
 8003c72:	69fb      	ldr	r3, [r7, #28]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3728      	adds	r7, #40	@ 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000411c 	.word	0x2000411c
 8003c80:	20004130 	.word	0x20004130
 8003c84:	20004120 	.word	0x20004120
 8003c88:	20004114 	.word	0x20004114
 8003c8c:	20004124 	.word	0x20004124
 8003c90:	20004128 	.word	0x20004128

08003c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04f      	beq.n	8003d46 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	425b      	negs	r3, r3
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4b25      	ldr	r3, [pc, #148]	@ (8003d50 <vPortFree+0xbc>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <vPortFree+0x46>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60fb      	str	r3, [r7, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	e7fd      	b.n	8003cd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <vPortFree+0x66>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	60bb      	str	r3, [r7, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	e7fd      	b.n	8003cf6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <vPortFree+0xbc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01e      	beq.n	8003d46 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11a      	bne.n	8003d46 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <vPortFree+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d20:	f7ff f9ca 	bl	80030b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <vPortFree+0xc0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a09      	ldr	r2, [pc, #36]	@ (8003d54 <vPortFree+0xc0>)
 8003d30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d32:	6938      	ldr	r0, [r7, #16]
 8003d34:	f000 f874 	bl	8003e20 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d38:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <vPortFree+0xc4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a06      	ldr	r2, [pc, #24]	@ (8003d58 <vPortFree+0xc4>)
 8003d40:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d42:	f7ff f9c7 	bl	80030d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20004130 	.word	0x20004130
 8003d54:	20004120 	.word	0x20004120
 8003d58:	2000412c 	.word	0x2000412c

08003d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d62:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d68:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <prvHeapInit+0xac>)
 8003d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3307      	adds	r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e08 <prvHeapInit+0xac>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <prvHeapInit+0xb0>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <prvHeapInit+0xb0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003da8:	2208      	movs	r2, #8
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <prvHeapInit+0xb4>)
 8003dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	@ (8003e10 <prvHeapInit+0xb4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e10 <prvHeapInit+0xb4>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a0a      	ldr	r2, [pc, #40]	@ (8003e14 <prvHeapInit+0xb8>)
 8003dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <prvHeapInit+0xbc>)
 8003df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003df4:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <prvHeapInit+0xc0>)
 8003df6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000514 	.word	0x20000514
 8003e0c:	20004114 	.word	0x20004114
 8003e10:	2000411c 	.word	0x2000411c
 8003e14:	20004124 	.word	0x20004124
 8003e18:	20004120 	.word	0x20004120
 8003e1c:	20004130 	.word	0x20004130

08003e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e28:	4b28      	ldr	r3, [pc, #160]	@ (8003ecc <prvInsertBlockIntoFreeList+0xac>)
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e002      	b.n	8003e34 <prvInsertBlockIntoFreeList+0x14>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d8f7      	bhi.n	8003e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	4413      	add	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d108      	bne.n	8003e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	441a      	add	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d118      	bne.n	8003ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d00d      	beq.n	8003e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e008      	b.n	8003eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e003      	b.n	8003eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d002      	beq.n	8003ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20004114 	.word	0x20004114
 8003ed0:	2000411c 	.word	0x2000411c

08003ed4 <std>:
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	4604      	mov	r4, r0
 8003eda:	e9c0 3300 	strd	r3, r3, [r0]
 8003ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ee2:	6083      	str	r3, [r0, #8]
 8003ee4:	8181      	strh	r1, [r0, #12]
 8003ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ee8:	81c2      	strh	r2, [r0, #14]
 8003eea:	6183      	str	r3, [r0, #24]
 8003eec:	4619      	mov	r1, r3
 8003eee:	2208      	movs	r2, #8
 8003ef0:	305c      	adds	r0, #92	@ 0x5c
 8003ef2:	f000 fa53 	bl	800439c <memset>
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <std+0x58>)
 8003ef8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003efa:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <std+0x5c>)
 8003efc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <std+0x60>)
 8003f00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <std+0x64>)
 8003f04:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <std+0x68>)
 8003f08:	6224      	str	r4, [r4, #32]
 8003f0a:	429c      	cmp	r4, r3
 8003f0c:	d006      	beq.n	8003f1c <std+0x48>
 8003f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f12:	4294      	cmp	r4, r2
 8003f14:	d002      	beq.n	8003f1c <std+0x48>
 8003f16:	33d0      	adds	r3, #208	@ 0xd0
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	d105      	bne.n	8003f28 <std+0x54>
 8003f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f24:	f000 bb10 	b.w	8004548 <__retarget_lock_init_recursive>
 8003f28:	bd10      	pop	{r4, pc}
 8003f2a:	bf00      	nop
 8003f2c:	080041ed 	.word	0x080041ed
 8003f30:	0800420f 	.word	0x0800420f
 8003f34:	08004247 	.word	0x08004247
 8003f38:	0800426b 	.word	0x0800426b
 8003f3c:	20004134 	.word	0x20004134

08003f40 <stdio_exit_handler>:
 8003f40:	4a02      	ldr	r2, [pc, #8]	@ (8003f4c <stdio_exit_handler+0xc>)
 8003f42:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <stdio_exit_handler+0x10>)
 8003f44:	4803      	ldr	r0, [pc, #12]	@ (8003f54 <stdio_exit_handler+0x14>)
 8003f46:	f000 b87b 	b.w	8004040 <_fwalk_sglue>
 8003f4a:	bf00      	nop
 8003f4c:	20000010 	.word	0x20000010
 8003f50:	08004e65 	.word	0x08004e65
 8003f54:	20000020 	.word	0x20000020

08003f58 <cleanup_stdio>:
 8003f58:	6841      	ldr	r1, [r0, #4]
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <cleanup_stdio+0x34>)
 8003f5c:	4299      	cmp	r1, r3
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	4604      	mov	r4, r0
 8003f62:	d001      	beq.n	8003f68 <cleanup_stdio+0x10>
 8003f64:	f000 ff7e 	bl	8004e64 <_fflush_r>
 8003f68:	68a1      	ldr	r1, [r4, #8]
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <cleanup_stdio+0x38>)
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d002      	beq.n	8003f76 <cleanup_stdio+0x1e>
 8003f70:	4620      	mov	r0, r4
 8003f72:	f000 ff77 	bl	8004e64 <_fflush_r>
 8003f76:	68e1      	ldr	r1, [r4, #12]
 8003f78:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <cleanup_stdio+0x3c>)
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d004      	beq.n	8003f88 <cleanup_stdio+0x30>
 8003f7e:	4620      	mov	r0, r4
 8003f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f84:	f000 bf6e 	b.w	8004e64 <_fflush_r>
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20004134 	.word	0x20004134
 8003f90:	2000419c 	.word	0x2000419c
 8003f94:	20004204 	.word	0x20004204

08003f98 <global_stdio_init.part.0>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <global_stdio_init.part.0+0x30>)
 8003f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fcc <global_stdio_init.part.0+0x34>)
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd0 <global_stdio_init.part.0+0x38>)
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2104      	movs	r1, #4
 8003fa8:	f7ff ff94 	bl	8003ed4 <std>
 8003fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2109      	movs	r1, #9
 8003fb4:	f7ff ff8e 	bl	8003ed4 <std>
 8003fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc2:	2112      	movs	r1, #18
 8003fc4:	f7ff bf86 	b.w	8003ed4 <std>
 8003fc8:	2000426c 	.word	0x2000426c
 8003fcc:	20004134 	.word	0x20004134
 8003fd0:	08003f41 	.word	0x08003f41

08003fd4 <__sfp_lock_acquire>:
 8003fd4:	4801      	ldr	r0, [pc, #4]	@ (8003fdc <__sfp_lock_acquire+0x8>)
 8003fd6:	f000 bab8 	b.w	800454a <__retarget_lock_acquire_recursive>
 8003fda:	bf00      	nop
 8003fdc:	20004275 	.word	0x20004275

08003fe0 <__sfp_lock_release>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	@ (8003fe8 <__sfp_lock_release+0x8>)
 8003fe2:	f000 bab3 	b.w	800454c <__retarget_lock_release_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	20004275 	.word	0x20004275

08003fec <__sinit>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	4604      	mov	r4, r0
 8003ff0:	f7ff fff0 	bl	8003fd4 <__sfp_lock_acquire>
 8003ff4:	6a23      	ldr	r3, [r4, #32]
 8003ff6:	b11b      	cbz	r3, 8004000 <__sinit+0x14>
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffc:	f7ff bff0 	b.w	8003fe0 <__sfp_lock_release>
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <__sinit+0x28>)
 8004002:	6223      	str	r3, [r4, #32]
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <__sinit+0x2c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f5      	bne.n	8003ff8 <__sinit+0xc>
 800400c:	f7ff ffc4 	bl	8003f98 <global_stdio_init.part.0>
 8004010:	e7f2      	b.n	8003ff8 <__sinit+0xc>
 8004012:	bf00      	nop
 8004014:	08003f59 	.word	0x08003f59
 8004018:	2000426c 	.word	0x2000426c

0800401c <fiscanf>:
 800401c:	b40e      	push	{r1, r2, r3}
 800401e:	b503      	push	{r0, r1, lr}
 8004020:	4601      	mov	r1, r0
 8004022:	ab03      	add	r3, sp, #12
 8004024:	4805      	ldr	r0, [pc, #20]	@ (800403c <fiscanf+0x20>)
 8004026:	f853 2b04 	ldr.w	r2, [r3], #4
 800402a:	6800      	ldr	r0, [r0, #0]
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	f000 fd33 	bl	8004a98 <_vfiscanf_r>
 8004032:	b002      	add	sp, #8
 8004034:	f85d eb04 	ldr.w	lr, [sp], #4
 8004038:	b003      	add	sp, #12
 800403a:	4770      	bx	lr
 800403c:	2000001c 	.word	0x2000001c

08004040 <_fwalk_sglue>:
 8004040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004044:	4607      	mov	r7, r0
 8004046:	4688      	mov	r8, r1
 8004048:	4614      	mov	r4, r2
 800404a:	2600      	movs	r6, #0
 800404c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004050:	f1b9 0901 	subs.w	r9, r9, #1
 8004054:	d505      	bpl.n	8004062 <_fwalk_sglue+0x22>
 8004056:	6824      	ldr	r4, [r4, #0]
 8004058:	2c00      	cmp	r4, #0
 800405a:	d1f7      	bne.n	800404c <_fwalk_sglue+0xc>
 800405c:	4630      	mov	r0, r6
 800405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004062:	89ab      	ldrh	r3, [r5, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d907      	bls.n	8004078 <_fwalk_sglue+0x38>
 8004068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800406c:	3301      	adds	r3, #1
 800406e:	d003      	beq.n	8004078 <_fwalk_sglue+0x38>
 8004070:	4629      	mov	r1, r5
 8004072:	4638      	mov	r0, r7
 8004074:	47c0      	blx	r8
 8004076:	4306      	orrs	r6, r0
 8004078:	3568      	adds	r5, #104	@ 0x68
 800407a:	e7e9      	b.n	8004050 <_fwalk_sglue+0x10>

0800407c <_fwrite_r>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	9c08      	ldr	r4, [sp, #32]
 8004082:	468a      	mov	sl, r1
 8004084:	4690      	mov	r8, r2
 8004086:	fb02 f903 	mul.w	r9, r2, r3
 800408a:	4606      	mov	r6, r0
 800408c:	b118      	cbz	r0, 8004096 <_fwrite_r+0x1a>
 800408e:	6a03      	ldr	r3, [r0, #32]
 8004090:	b90b      	cbnz	r3, 8004096 <_fwrite_r+0x1a>
 8004092:	f7ff ffab 	bl	8003fec <__sinit>
 8004096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004098:	07dd      	lsls	r5, r3, #31
 800409a:	d405      	bmi.n	80040a8 <_fwrite_r+0x2c>
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	0598      	lsls	r0, r3, #22
 80040a0:	d402      	bmi.n	80040a8 <_fwrite_r+0x2c>
 80040a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040a4:	f000 fa51 	bl	800454a <__retarget_lock_acquire_recursive>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	0719      	lsls	r1, r3, #28
 80040ac:	d516      	bpl.n	80040dc <_fwrite_r+0x60>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b1a3      	cbz	r3, 80040dc <_fwrite_r+0x60>
 80040b2:	2500      	movs	r5, #0
 80040b4:	454d      	cmp	r5, r9
 80040b6:	d01f      	beq.n	80040f8 <_fwrite_r+0x7c>
 80040b8:	68a7      	ldr	r7, [r4, #8]
 80040ba:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80040be:	3f01      	subs	r7, #1
 80040c0:	2f00      	cmp	r7, #0
 80040c2:	60a7      	str	r7, [r4, #8]
 80040c4:	da04      	bge.n	80040d0 <_fwrite_r+0x54>
 80040c6:	69a3      	ldr	r3, [r4, #24]
 80040c8:	429f      	cmp	r7, r3
 80040ca:	db0f      	blt.n	80040ec <_fwrite_r+0x70>
 80040cc:	290a      	cmp	r1, #10
 80040ce:	d00d      	beq.n	80040ec <_fwrite_r+0x70>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	7019      	strb	r1, [r3, #0]
 80040d8:	3501      	adds	r5, #1
 80040da:	e7eb      	b.n	80040b4 <_fwrite_r+0x38>
 80040dc:	4621      	mov	r1, r4
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 f906 	bl	80042f0 <__swsetup_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d0e4      	beq.n	80040b2 <_fwrite_r+0x36>
 80040e8:	2500      	movs	r5, #0
 80040ea:	e005      	b.n	80040f8 <_fwrite_r+0x7c>
 80040ec:	4622      	mov	r2, r4
 80040ee:	4630      	mov	r0, r6
 80040f0:	f000 f8bf 	bl	8004272 <__swbuf_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1ef      	bne.n	80040d8 <_fwrite_r+0x5c>
 80040f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040fa:	07da      	lsls	r2, r3, #31
 80040fc:	d405      	bmi.n	800410a <_fwrite_r+0x8e>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	059b      	lsls	r3, r3, #22
 8004102:	d402      	bmi.n	800410a <_fwrite_r+0x8e>
 8004104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004106:	f000 fa21 	bl	800454c <__retarget_lock_release_recursive>
 800410a:	fbb5 f0f8 	udiv	r0, r5, r8
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004114 <fwrite>:
 8004114:	b507      	push	{r0, r1, r2, lr}
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	460a      	mov	r2, r1
 800411c:	4601      	mov	r1, r0
 800411e:	4803      	ldr	r0, [pc, #12]	@ (800412c <fwrite+0x18>)
 8004120:	6800      	ldr	r0, [r0, #0]
 8004122:	f7ff ffab 	bl	800407c <_fwrite_r>
 8004126:	b003      	add	sp, #12
 8004128:	f85d fb04 	ldr.w	pc, [sp], #4
 800412c:	2000001c 	.word	0x2000001c

08004130 <_puts_r>:
 8004130:	6a03      	ldr	r3, [r0, #32]
 8004132:	b570      	push	{r4, r5, r6, lr}
 8004134:	6884      	ldr	r4, [r0, #8]
 8004136:	4605      	mov	r5, r0
 8004138:	460e      	mov	r6, r1
 800413a:	b90b      	cbnz	r3, 8004140 <_puts_r+0x10>
 800413c:	f7ff ff56 	bl	8003fec <__sinit>
 8004140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004142:	07db      	lsls	r3, r3, #31
 8004144:	d405      	bmi.n	8004152 <_puts_r+0x22>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	0598      	lsls	r0, r3, #22
 800414a:	d402      	bmi.n	8004152 <_puts_r+0x22>
 800414c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800414e:	f000 f9fc 	bl	800454a <__retarget_lock_acquire_recursive>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	0719      	lsls	r1, r3, #28
 8004156:	d502      	bpl.n	800415e <_puts_r+0x2e>
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d135      	bne.n	80041ca <_puts_r+0x9a>
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f000 f8c5 	bl	80042f0 <__swsetup_r>
 8004166:	b380      	cbz	r0, 80041ca <_puts_r+0x9a>
 8004168:	f04f 35ff 	mov.w	r5, #4294967295
 800416c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800416e:	07da      	lsls	r2, r3, #31
 8004170:	d405      	bmi.n	800417e <_puts_r+0x4e>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	059b      	lsls	r3, r3, #22
 8004176:	d402      	bmi.n	800417e <_puts_r+0x4e>
 8004178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800417a:	f000 f9e7 	bl	800454c <__retarget_lock_release_recursive>
 800417e:	4628      	mov	r0, r5
 8004180:	bd70      	pop	{r4, r5, r6, pc}
 8004182:	2b00      	cmp	r3, #0
 8004184:	da04      	bge.n	8004190 <_puts_r+0x60>
 8004186:	69a2      	ldr	r2, [r4, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	dc17      	bgt.n	80041bc <_puts_r+0x8c>
 800418c:	290a      	cmp	r1, #10
 800418e:	d015      	beq.n	80041bc <_puts_r+0x8c>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	6022      	str	r2, [r4, #0]
 8004196:	7019      	strb	r1, [r3, #0]
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800419e:	3b01      	subs	r3, #1
 80041a0:	60a3      	str	r3, [r4, #8]
 80041a2:	2900      	cmp	r1, #0
 80041a4:	d1ed      	bne.n	8004182 <_puts_r+0x52>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da11      	bge.n	80041ce <_puts_r+0x9e>
 80041aa:	4622      	mov	r2, r4
 80041ac:	210a      	movs	r1, #10
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f85f 	bl	8004272 <__swbuf_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d0d7      	beq.n	8004168 <_puts_r+0x38>
 80041b8:	250a      	movs	r5, #10
 80041ba:	e7d7      	b.n	800416c <_puts_r+0x3c>
 80041bc:	4622      	mov	r2, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 f857 	bl	8004272 <__swbuf_r>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1e7      	bne.n	8004198 <_puts_r+0x68>
 80041c8:	e7ce      	b.n	8004168 <_puts_r+0x38>
 80041ca:	3e01      	subs	r6, #1
 80041cc:	e7e4      	b.n	8004198 <_puts_r+0x68>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	6022      	str	r2, [r4, #0]
 80041d4:	220a      	movs	r2, #10
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e7ee      	b.n	80041b8 <_puts_r+0x88>
	...

080041dc <puts>:
 80041dc:	4b02      	ldr	r3, [pc, #8]	@ (80041e8 <puts+0xc>)
 80041de:	4601      	mov	r1, r0
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f7ff bfa5 	b.w	8004130 <_puts_r>
 80041e6:	bf00      	nop
 80041e8:	2000001c 	.word	0x2000001c

080041ec <__sread>:
 80041ec:	b510      	push	{r4, lr}
 80041ee:	460c      	mov	r4, r1
 80041f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f4:	f000 f95a 	bl	80044ac <_read_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	bfab      	itete	ge
 80041fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004200:	181b      	addge	r3, r3, r0
 8004202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004206:	bfac      	ite	ge
 8004208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800420a:	81a3      	strhlt	r3, [r4, #12]
 800420c:	bd10      	pop	{r4, pc}

0800420e <__swrite>:
 800420e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004212:	461f      	mov	r7, r3
 8004214:	898b      	ldrh	r3, [r1, #12]
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	4605      	mov	r5, r0
 800421a:	460c      	mov	r4, r1
 800421c:	4616      	mov	r6, r2
 800421e:	d505      	bpl.n	800422c <__swrite+0x1e>
 8004220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004224:	2302      	movs	r3, #2
 8004226:	2200      	movs	r2, #0
 8004228:	f000 f92e 	bl	8004488 <_lseek_r>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	4628      	mov	r0, r5
 800423e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004242:	f000 b945 	b.w	80044d0 <_write_r>

08004246 <__sseek>:
 8004246:	b510      	push	{r4, lr}
 8004248:	460c      	mov	r4, r1
 800424a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800424e:	f000 f91b 	bl	8004488 <_lseek_r>
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	bf15      	itete	ne
 8004258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800425a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800425e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004262:	81a3      	strheq	r3, [r4, #12]
 8004264:	bf18      	it	ne
 8004266:	81a3      	strhne	r3, [r4, #12]
 8004268:	bd10      	pop	{r4, pc}

0800426a <__sclose>:
 800426a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800426e:	f000 b89d 	b.w	80043ac <_close_r>

08004272 <__swbuf_r>:
 8004272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004274:	460e      	mov	r6, r1
 8004276:	4614      	mov	r4, r2
 8004278:	4605      	mov	r5, r0
 800427a:	b118      	cbz	r0, 8004284 <__swbuf_r+0x12>
 800427c:	6a03      	ldr	r3, [r0, #32]
 800427e:	b90b      	cbnz	r3, 8004284 <__swbuf_r+0x12>
 8004280:	f7ff feb4 	bl	8003fec <__sinit>
 8004284:	69a3      	ldr	r3, [r4, #24]
 8004286:	60a3      	str	r3, [r4, #8]
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	071a      	lsls	r2, r3, #28
 800428c:	d501      	bpl.n	8004292 <__swbuf_r+0x20>
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	b943      	cbnz	r3, 80042a4 <__swbuf_r+0x32>
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 f82b 	bl	80042f0 <__swsetup_r>
 800429a:	b118      	cbz	r0, 80042a4 <__swbuf_r+0x32>
 800429c:	f04f 37ff 	mov.w	r7, #4294967295
 80042a0:	4638      	mov	r0, r7
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	6922      	ldr	r2, [r4, #16]
 80042a8:	1a98      	subs	r0, r3, r2
 80042aa:	6963      	ldr	r3, [r4, #20]
 80042ac:	b2f6      	uxtb	r6, r6
 80042ae:	4283      	cmp	r3, r0
 80042b0:	4637      	mov	r7, r6
 80042b2:	dc05      	bgt.n	80042c0 <__swbuf_r+0x4e>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 fdd4 	bl	8004e64 <_fflush_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	d1ed      	bne.n	800429c <__swbuf_r+0x2a>
 80042c0:	68a3      	ldr	r3, [r4, #8]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	60a3      	str	r3, [r4, #8]
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	6022      	str	r2, [r4, #0]
 80042cc:	701e      	strb	r6, [r3, #0]
 80042ce:	6962      	ldr	r2, [r4, #20]
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d004      	beq.n	80042e0 <__swbuf_r+0x6e>
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	07db      	lsls	r3, r3, #31
 80042da:	d5e1      	bpl.n	80042a0 <__swbuf_r+0x2e>
 80042dc:	2e0a      	cmp	r6, #10
 80042de:	d1df      	bne.n	80042a0 <__swbuf_r+0x2e>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4628      	mov	r0, r5
 80042e4:	f000 fdbe 	bl	8004e64 <_fflush_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d0d9      	beq.n	80042a0 <__swbuf_r+0x2e>
 80042ec:	e7d6      	b.n	800429c <__swbuf_r+0x2a>
	...

080042f0 <__swsetup_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <__swsetup_r+0xa8>)
 80042f4:	4605      	mov	r5, r0
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	460c      	mov	r4, r1
 80042fa:	b118      	cbz	r0, 8004304 <__swsetup_r+0x14>
 80042fc:	6a03      	ldr	r3, [r0, #32]
 80042fe:	b90b      	cbnz	r3, 8004304 <__swsetup_r+0x14>
 8004300:	f7ff fe74 	bl	8003fec <__sinit>
 8004304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004308:	0719      	lsls	r1, r3, #28
 800430a:	d422      	bmi.n	8004352 <__swsetup_r+0x62>
 800430c:	06da      	lsls	r2, r3, #27
 800430e:	d407      	bmi.n	8004320 <__swsetup_r+0x30>
 8004310:	2209      	movs	r2, #9
 8004312:	602a      	str	r2, [r5, #0]
 8004314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	f04f 30ff 	mov.w	r0, #4294967295
 800431e:	e033      	b.n	8004388 <__swsetup_r+0x98>
 8004320:	0758      	lsls	r0, r3, #29
 8004322:	d512      	bpl.n	800434a <__swsetup_r+0x5a>
 8004324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004326:	b141      	cbz	r1, 800433a <__swsetup_r+0x4a>
 8004328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800432c:	4299      	cmp	r1, r3
 800432e:	d002      	beq.n	8004336 <__swsetup_r+0x46>
 8004330:	4628      	mov	r0, r5
 8004332:	f000 f91b 	bl	800456c <_free_r>
 8004336:	2300      	movs	r3, #0
 8004338:	6363      	str	r3, [r4, #52]	@ 0x34
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	2300      	movs	r3, #0
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f043 0308 	orr.w	r3, r3, #8
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	b94b      	cbnz	r3, 800436a <__swsetup_r+0x7a>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800435c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004360:	d003      	beq.n	800436a <__swsetup_r+0x7a>
 8004362:	4621      	mov	r1, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f000 fdcb 	bl	8004f00 <__smakebuf_r>
 800436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436e:	f013 0201 	ands.w	r2, r3, #1
 8004372:	d00a      	beq.n	800438a <__swsetup_r+0x9a>
 8004374:	2200      	movs	r2, #0
 8004376:	60a2      	str	r2, [r4, #8]
 8004378:	6962      	ldr	r2, [r4, #20]
 800437a:	4252      	negs	r2, r2
 800437c:	61a2      	str	r2, [r4, #24]
 800437e:	6922      	ldr	r2, [r4, #16]
 8004380:	b942      	cbnz	r2, 8004394 <__swsetup_r+0xa4>
 8004382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004386:	d1c5      	bne.n	8004314 <__swsetup_r+0x24>
 8004388:	bd38      	pop	{r3, r4, r5, pc}
 800438a:	0799      	lsls	r1, r3, #30
 800438c:	bf58      	it	pl
 800438e:	6962      	ldrpl	r2, [r4, #20]
 8004390:	60a2      	str	r2, [r4, #8]
 8004392:	e7f4      	b.n	800437e <__swsetup_r+0x8e>
 8004394:	2000      	movs	r0, #0
 8004396:	e7f7      	b.n	8004388 <__swsetup_r+0x98>
 8004398:	2000001c 	.word	0x2000001c

0800439c <memset>:
 800439c:	4402      	add	r2, r0
 800439e:	4603      	mov	r3, r0
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d100      	bne.n	80043a6 <memset+0xa>
 80043a4:	4770      	bx	lr
 80043a6:	f803 1b01 	strb.w	r1, [r3], #1
 80043aa:	e7f9      	b.n	80043a0 <memset+0x4>

080043ac <_close_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4d06      	ldr	r5, [pc, #24]	@ (80043c8 <_close_r+0x1c>)
 80043b0:	2300      	movs	r3, #0
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	f7fc fbce 	bl	8000b58 <_close>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_close_r+0x1a>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_close_r+0x1a>
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	20004270 	.word	0x20004270

080043cc <_reclaim_reent>:
 80043cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <_reclaim_reent+0xb8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4283      	cmp	r3, r0
 80043d2:	b570      	push	{r4, r5, r6, lr}
 80043d4:	4604      	mov	r4, r0
 80043d6:	d053      	beq.n	8004480 <_reclaim_reent+0xb4>
 80043d8:	69c3      	ldr	r3, [r0, #28]
 80043da:	b31b      	cbz	r3, 8004424 <_reclaim_reent+0x58>
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	b163      	cbz	r3, 80043fa <_reclaim_reent+0x2e>
 80043e0:	2500      	movs	r5, #0
 80043e2:	69e3      	ldr	r3, [r4, #28]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	5959      	ldr	r1, [r3, r5]
 80043e8:	b9b1      	cbnz	r1, 8004418 <_reclaim_reent+0x4c>
 80043ea:	3504      	adds	r5, #4
 80043ec:	2d80      	cmp	r5, #128	@ 0x80
 80043ee:	d1f8      	bne.n	80043e2 <_reclaim_reent+0x16>
 80043f0:	69e3      	ldr	r3, [r4, #28]
 80043f2:	4620      	mov	r0, r4
 80043f4:	68d9      	ldr	r1, [r3, #12]
 80043f6:	f000 f8b9 	bl	800456c <_free_r>
 80043fa:	69e3      	ldr	r3, [r4, #28]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	b111      	cbz	r1, 8004406 <_reclaim_reent+0x3a>
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f8b3 	bl	800456c <_free_r>
 8004406:	69e3      	ldr	r3, [r4, #28]
 8004408:	689d      	ldr	r5, [r3, #8]
 800440a:	b15d      	cbz	r5, 8004424 <_reclaim_reent+0x58>
 800440c:	4629      	mov	r1, r5
 800440e:	4620      	mov	r0, r4
 8004410:	682d      	ldr	r5, [r5, #0]
 8004412:	f000 f8ab 	bl	800456c <_free_r>
 8004416:	e7f8      	b.n	800440a <_reclaim_reent+0x3e>
 8004418:	680e      	ldr	r6, [r1, #0]
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f8a6 	bl	800456c <_free_r>
 8004420:	4631      	mov	r1, r6
 8004422:	e7e1      	b.n	80043e8 <_reclaim_reent+0x1c>
 8004424:	6961      	ldr	r1, [r4, #20]
 8004426:	b111      	cbz	r1, 800442e <_reclaim_reent+0x62>
 8004428:	4620      	mov	r0, r4
 800442a:	f000 f89f 	bl	800456c <_free_r>
 800442e:	69e1      	ldr	r1, [r4, #28]
 8004430:	b111      	cbz	r1, 8004438 <_reclaim_reent+0x6c>
 8004432:	4620      	mov	r0, r4
 8004434:	f000 f89a 	bl	800456c <_free_r>
 8004438:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800443a:	b111      	cbz	r1, 8004442 <_reclaim_reent+0x76>
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f895 	bl	800456c <_free_r>
 8004442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004444:	b111      	cbz	r1, 800444c <_reclaim_reent+0x80>
 8004446:	4620      	mov	r0, r4
 8004448:	f000 f890 	bl	800456c <_free_r>
 800444c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800444e:	b111      	cbz	r1, 8004456 <_reclaim_reent+0x8a>
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f88b 	bl	800456c <_free_r>
 8004456:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004458:	b111      	cbz	r1, 8004460 <_reclaim_reent+0x94>
 800445a:	4620      	mov	r0, r4
 800445c:	f000 f886 	bl	800456c <_free_r>
 8004460:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004462:	b111      	cbz	r1, 800446a <_reclaim_reent+0x9e>
 8004464:	4620      	mov	r0, r4
 8004466:	f000 f881 	bl	800456c <_free_r>
 800446a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800446c:	b111      	cbz	r1, 8004474 <_reclaim_reent+0xa8>
 800446e:	4620      	mov	r0, r4
 8004470:	f000 f87c 	bl	800456c <_free_r>
 8004474:	6a23      	ldr	r3, [r4, #32]
 8004476:	b11b      	cbz	r3, 8004480 <_reclaim_reent+0xb4>
 8004478:	4620      	mov	r0, r4
 800447a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800447e:	4718      	bx	r3
 8004480:	bd70      	pop	{r4, r5, r6, pc}
 8004482:	bf00      	nop
 8004484:	2000001c 	.word	0x2000001c

08004488 <_lseek_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d07      	ldr	r5, [pc, #28]	@ (80044a8 <_lseek_r+0x20>)
 800448c:	4604      	mov	r4, r0
 800448e:	4608      	mov	r0, r1
 8004490:	4611      	mov	r1, r2
 8004492:	2200      	movs	r2, #0
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	f7fc fb85 	bl	8000ba6 <_lseek>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_lseek_r+0x1e>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_lseek_r+0x1e>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20004270 	.word	0x20004270

080044ac <_read_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	@ (80044cc <_read_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fc f8d8 	bl	8000670 <_read>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_read_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_read_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	20004270 	.word	0x20004270

080044d0 <_write_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	@ (80044f0 <_write_r+0x20>)
 80044d4:	4604      	mov	r4, r0
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	602a      	str	r2, [r5, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fc f876 	bl	80005d0 <_write>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_write_r+0x1e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_write_r+0x1e>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	20004270 	.word	0x20004270

080044f4 <__errno>:
 80044f4:	4b01      	ldr	r3, [pc, #4]	@ (80044fc <__errno+0x8>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000001c 	.word	0x2000001c

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4d0d      	ldr	r5, [pc, #52]	@ (8004538 <__libc_init_array+0x38>)
 8004504:	4c0d      	ldr	r4, [pc, #52]	@ (800453c <__libc_init_array+0x3c>)
 8004506:	1b64      	subs	r4, r4, r5
 8004508:	10a4      	asrs	r4, r4, #2
 800450a:	2600      	movs	r6, #0
 800450c:	42a6      	cmp	r6, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	4d0b      	ldr	r5, [pc, #44]	@ (8004540 <__libc_init_array+0x40>)
 8004512:	4c0c      	ldr	r4, [pc, #48]	@ (8004544 <__libc_init_array+0x44>)
 8004514:	f000 fff8 	bl	8005508 <_init>
 8004518:	1b64      	subs	r4, r4, r5
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	2600      	movs	r6, #0
 800451e:	42a6      	cmp	r6, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	f855 3b04 	ldr.w	r3, [r5], #4
 8004528:	4798      	blx	r3
 800452a:	3601      	adds	r6, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004532:	4798      	blx	r3
 8004534:	3601      	adds	r6, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	0800571c 	.word	0x0800571c
 800453c:	0800571c 	.word	0x0800571c
 8004540:	0800571c 	.word	0x0800571c
 8004544:	08005720 	.word	0x08005720

08004548 <__retarget_lock_init_recursive>:
 8004548:	4770      	bx	lr

0800454a <__retarget_lock_acquire_recursive>:
 800454a:	4770      	bx	lr

0800454c <__retarget_lock_release_recursive>:
 800454c:	4770      	bx	lr

0800454e <memcpy>:
 800454e:	440a      	add	r2, r1
 8004550:	4291      	cmp	r1, r2
 8004552:	f100 33ff 	add.w	r3, r0, #4294967295
 8004556:	d100      	bne.n	800455a <memcpy+0xc>
 8004558:	4770      	bx	lr
 800455a:	b510      	push	{r4, lr}
 800455c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004564:	4291      	cmp	r1, r2
 8004566:	d1f9      	bne.n	800455c <memcpy+0xe>
 8004568:	bd10      	pop	{r4, pc}
	...

0800456c <_free_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4605      	mov	r5, r0
 8004570:	2900      	cmp	r1, #0
 8004572:	d041      	beq.n	80045f8 <_free_r+0x8c>
 8004574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004578:	1f0c      	subs	r4, r1, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	bfb8      	it	lt
 800457e:	18e4      	addlt	r4, r4, r3
 8004580:	f000 f8e0 	bl	8004744 <__malloc_lock>
 8004584:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <_free_r+0x90>)
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	b933      	cbnz	r3, 8004598 <_free_r+0x2c>
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	6014      	str	r4, [r2, #0]
 800458e:	4628      	mov	r0, r5
 8004590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004594:	f000 b8dc 	b.w	8004750 <__malloc_unlock>
 8004598:	42a3      	cmp	r3, r4
 800459a:	d908      	bls.n	80045ae <_free_r+0x42>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	1821      	adds	r1, r4, r0
 80045a0:	428b      	cmp	r3, r1
 80045a2:	bf01      	itttt	eq
 80045a4:	6819      	ldreq	r1, [r3, #0]
 80045a6:	685b      	ldreq	r3, [r3, #4]
 80045a8:	1809      	addeq	r1, r1, r0
 80045aa:	6021      	streq	r1, [r4, #0]
 80045ac:	e7ed      	b.n	800458a <_free_r+0x1e>
 80045ae:	461a      	mov	r2, r3
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	b10b      	cbz	r3, 80045b8 <_free_r+0x4c>
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	d9fa      	bls.n	80045ae <_free_r+0x42>
 80045b8:	6811      	ldr	r1, [r2, #0]
 80045ba:	1850      	adds	r0, r2, r1
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d10b      	bne.n	80045d8 <_free_r+0x6c>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	4401      	add	r1, r0
 80045c4:	1850      	adds	r0, r2, r1
 80045c6:	4283      	cmp	r3, r0
 80045c8:	6011      	str	r1, [r2, #0]
 80045ca:	d1e0      	bne.n	800458e <_free_r+0x22>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	6053      	str	r3, [r2, #4]
 80045d2:	4408      	add	r0, r1
 80045d4:	6010      	str	r0, [r2, #0]
 80045d6:	e7da      	b.n	800458e <_free_r+0x22>
 80045d8:	d902      	bls.n	80045e0 <_free_r+0x74>
 80045da:	230c      	movs	r3, #12
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	e7d6      	b.n	800458e <_free_r+0x22>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	1821      	adds	r1, r4, r0
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf04      	itt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	6063      	str	r3, [r4, #4]
 80045ee:	bf04      	itt	eq
 80045f0:	1809      	addeq	r1, r1, r0
 80045f2:	6021      	streq	r1, [r4, #0]
 80045f4:	6054      	str	r4, [r2, #4]
 80045f6:	e7ca      	b.n	800458e <_free_r+0x22>
 80045f8:	bd38      	pop	{r3, r4, r5, pc}
 80045fa:	bf00      	nop
 80045fc:	2000427c 	.word	0x2000427c

08004600 <sbrk_aligned>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4e0f      	ldr	r6, [pc, #60]	@ (8004640 <sbrk_aligned+0x40>)
 8004604:	460c      	mov	r4, r1
 8004606:	6831      	ldr	r1, [r6, #0]
 8004608:	4605      	mov	r5, r0
 800460a:	b911      	cbnz	r1, 8004612 <sbrk_aligned+0x12>
 800460c:	f000 fe4a 	bl	80052a4 <_sbrk_r>
 8004610:	6030      	str	r0, [r6, #0]
 8004612:	4621      	mov	r1, r4
 8004614:	4628      	mov	r0, r5
 8004616:	f000 fe45 	bl	80052a4 <_sbrk_r>
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	d103      	bne.n	8004626 <sbrk_aligned+0x26>
 800461e:	f04f 34ff 	mov.w	r4, #4294967295
 8004622:	4620      	mov	r0, r4
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	1cc4      	adds	r4, r0, #3
 8004628:	f024 0403 	bic.w	r4, r4, #3
 800462c:	42a0      	cmp	r0, r4
 800462e:	d0f8      	beq.n	8004622 <sbrk_aligned+0x22>
 8004630:	1a21      	subs	r1, r4, r0
 8004632:	4628      	mov	r0, r5
 8004634:	f000 fe36 	bl	80052a4 <_sbrk_r>
 8004638:	3001      	adds	r0, #1
 800463a:	d1f2      	bne.n	8004622 <sbrk_aligned+0x22>
 800463c:	e7ef      	b.n	800461e <sbrk_aligned+0x1e>
 800463e:	bf00      	nop
 8004640:	20004278 	.word	0x20004278

08004644 <_malloc_r>:
 8004644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004648:	1ccd      	adds	r5, r1, #3
 800464a:	f025 0503 	bic.w	r5, r5, #3
 800464e:	3508      	adds	r5, #8
 8004650:	2d0c      	cmp	r5, #12
 8004652:	bf38      	it	cc
 8004654:	250c      	movcc	r5, #12
 8004656:	2d00      	cmp	r5, #0
 8004658:	4606      	mov	r6, r0
 800465a:	db01      	blt.n	8004660 <_malloc_r+0x1c>
 800465c:	42a9      	cmp	r1, r5
 800465e:	d904      	bls.n	800466a <_malloc_r+0x26>
 8004660:	230c      	movs	r3, #12
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	2000      	movs	r0, #0
 8004666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800466a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004740 <_malloc_r+0xfc>
 800466e:	f000 f869 	bl	8004744 <__malloc_lock>
 8004672:	f8d8 3000 	ldr.w	r3, [r8]
 8004676:	461c      	mov	r4, r3
 8004678:	bb44      	cbnz	r4, 80046cc <_malloc_r+0x88>
 800467a:	4629      	mov	r1, r5
 800467c:	4630      	mov	r0, r6
 800467e:	f7ff ffbf 	bl	8004600 <sbrk_aligned>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	4604      	mov	r4, r0
 8004686:	d158      	bne.n	800473a <_malloc_r+0xf6>
 8004688:	f8d8 4000 	ldr.w	r4, [r8]
 800468c:	4627      	mov	r7, r4
 800468e:	2f00      	cmp	r7, #0
 8004690:	d143      	bne.n	800471a <_malloc_r+0xd6>
 8004692:	2c00      	cmp	r4, #0
 8004694:	d04b      	beq.n	800472e <_malloc_r+0xea>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	4639      	mov	r1, r7
 800469a:	4630      	mov	r0, r6
 800469c:	eb04 0903 	add.w	r9, r4, r3
 80046a0:	f000 fe00 	bl	80052a4 <_sbrk_r>
 80046a4:	4581      	cmp	r9, r0
 80046a6:	d142      	bne.n	800472e <_malloc_r+0xea>
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	1a6d      	subs	r5, r5, r1
 80046ac:	4629      	mov	r1, r5
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff ffa6 	bl	8004600 <sbrk_aligned>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d03a      	beq.n	800472e <_malloc_r+0xea>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	442b      	add	r3, r5
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	f8d8 3000 	ldr.w	r3, [r8]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	bb62      	cbnz	r2, 8004720 <_malloc_r+0xdc>
 80046c6:	f8c8 7000 	str.w	r7, [r8]
 80046ca:	e00f      	b.n	80046ec <_malloc_r+0xa8>
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	1b52      	subs	r2, r2, r5
 80046d0:	d420      	bmi.n	8004714 <_malloc_r+0xd0>
 80046d2:	2a0b      	cmp	r2, #11
 80046d4:	d917      	bls.n	8004706 <_malloc_r+0xc2>
 80046d6:	1961      	adds	r1, r4, r5
 80046d8:	42a3      	cmp	r3, r4
 80046da:	6025      	str	r5, [r4, #0]
 80046dc:	bf18      	it	ne
 80046de:	6059      	strne	r1, [r3, #4]
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	bf08      	it	eq
 80046e4:	f8c8 1000 	streq.w	r1, [r8]
 80046e8:	5162      	str	r2, [r4, r5]
 80046ea:	604b      	str	r3, [r1, #4]
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f82f 	bl	8004750 <__malloc_unlock>
 80046f2:	f104 000b 	add.w	r0, r4, #11
 80046f6:	1d23      	adds	r3, r4, #4
 80046f8:	f020 0007 	bic.w	r0, r0, #7
 80046fc:	1ac2      	subs	r2, r0, r3
 80046fe:	bf1c      	itt	ne
 8004700:	1a1b      	subne	r3, r3, r0
 8004702:	50a3      	strne	r3, [r4, r2]
 8004704:	e7af      	b.n	8004666 <_malloc_r+0x22>
 8004706:	6862      	ldr	r2, [r4, #4]
 8004708:	42a3      	cmp	r3, r4
 800470a:	bf0c      	ite	eq
 800470c:	f8c8 2000 	streq.w	r2, [r8]
 8004710:	605a      	strne	r2, [r3, #4]
 8004712:	e7eb      	b.n	80046ec <_malloc_r+0xa8>
 8004714:	4623      	mov	r3, r4
 8004716:	6864      	ldr	r4, [r4, #4]
 8004718:	e7ae      	b.n	8004678 <_malloc_r+0x34>
 800471a:	463c      	mov	r4, r7
 800471c:	687f      	ldr	r7, [r7, #4]
 800471e:	e7b6      	b.n	800468e <_malloc_r+0x4a>
 8004720:	461a      	mov	r2, r3
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	42a3      	cmp	r3, r4
 8004726:	d1fb      	bne.n	8004720 <_malloc_r+0xdc>
 8004728:	2300      	movs	r3, #0
 800472a:	6053      	str	r3, [r2, #4]
 800472c:	e7de      	b.n	80046ec <_malloc_r+0xa8>
 800472e:	230c      	movs	r3, #12
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	4630      	mov	r0, r6
 8004734:	f000 f80c 	bl	8004750 <__malloc_unlock>
 8004738:	e794      	b.n	8004664 <_malloc_r+0x20>
 800473a:	6005      	str	r5, [r0, #0]
 800473c:	e7d6      	b.n	80046ec <_malloc_r+0xa8>
 800473e:	bf00      	nop
 8004740:	2000427c 	.word	0x2000427c

08004744 <__malloc_lock>:
 8004744:	4801      	ldr	r0, [pc, #4]	@ (800474c <__malloc_lock+0x8>)
 8004746:	f7ff bf00 	b.w	800454a <__retarget_lock_acquire_recursive>
 800474a:	bf00      	nop
 800474c:	20004274 	.word	0x20004274

08004750 <__malloc_unlock>:
 8004750:	4801      	ldr	r0, [pc, #4]	@ (8004758 <__malloc_unlock+0x8>)
 8004752:	f7ff befb 	b.w	800454c <__retarget_lock_release_recursive>
 8004756:	bf00      	nop
 8004758:	20004274 	.word	0x20004274

0800475c <__svfiscanf_r>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	461d      	mov	r5, r3
 8004762:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004764:	07df      	lsls	r7, r3, #31
 8004766:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800476a:	4606      	mov	r6, r0
 800476c:	460c      	mov	r4, r1
 800476e:	4692      	mov	sl, r2
 8004770:	d405      	bmi.n	800477e <__svfiscanf_r+0x22>
 8004772:	898b      	ldrh	r3, [r1, #12]
 8004774:	0598      	lsls	r0, r3, #22
 8004776:	d402      	bmi.n	800477e <__svfiscanf_r+0x22>
 8004778:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800477a:	f7ff fee6 	bl	800454a <__retarget_lock_acquire_recursive>
 800477e:	2300      	movs	r3, #0
 8004780:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8004784:	4ba8      	ldr	r3, [pc, #672]	@ (8004a28 <__svfiscanf_r+0x2cc>)
 8004786:	93a0      	str	r3, [sp, #640]	@ 0x280
 8004788:	f10d 0804 	add.w	r8, sp, #4
 800478c:	4ba7      	ldr	r3, [pc, #668]	@ (8004a2c <__svfiscanf_r+0x2d0>)
 800478e:	4fa8      	ldr	r7, [pc, #672]	@ (8004a30 <__svfiscanf_r+0x2d4>)
 8004790:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004794:	93a1      	str	r3, [sp, #644]	@ 0x284
 8004796:	9500      	str	r5, [sp, #0]
 8004798:	f89a 9000 	ldrb.w	r9, [sl]
 800479c:	f1b9 0f00 	cmp.w	r9, #0
 80047a0:	f000 816d 	beq.w	8004a7e <__svfiscanf_r+0x322>
 80047a4:	f817 3009 	ldrb.w	r3, [r7, r9]
 80047a8:	f013 0308 	ands.w	r3, r3, #8
 80047ac:	f10a 0501 	add.w	r5, sl, #1
 80047b0:	d019      	beq.n	80047e6 <__svfiscanf_r+0x8a>
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dd0f      	ble.n	80047d8 <__svfiscanf_r+0x7c>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	5cba      	ldrb	r2, [r7, r2]
 80047be:	0711      	lsls	r1, r2, #28
 80047c0:	d401      	bmi.n	80047c6 <__svfiscanf_r+0x6a>
 80047c2:	46aa      	mov	sl, r5
 80047c4:	e7e8      	b.n	8004798 <__svfiscanf_r+0x3c>
 80047c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80047c8:	3201      	adds	r2, #1
 80047ca:	9245      	str	r2, [sp, #276]	@ 0x114
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	3a01      	subs	r2, #1
 80047d2:	6062      	str	r2, [r4, #4]
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	e7ec      	b.n	80047b2 <__svfiscanf_r+0x56>
 80047d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80047da:	4621      	mov	r1, r4
 80047dc:	4630      	mov	r0, r6
 80047de:	4798      	blx	r3
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d0e9      	beq.n	80047b8 <__svfiscanf_r+0x5c>
 80047e4:	e7ed      	b.n	80047c2 <__svfiscanf_r+0x66>
 80047e6:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80047ea:	f040 8088 	bne.w	80048fe <__svfiscanf_r+0x1a2>
 80047ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80047f0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80047f2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80047f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047f8:	bf02      	ittt	eq
 80047fa:	2310      	moveq	r3, #16
 80047fc:	9341      	streq	r3, [sp, #260]	@ 0x104
 80047fe:	f10a 0502 	addeq.w	r5, sl, #2
 8004802:	220a      	movs	r2, #10
 8004804:	46aa      	mov	sl, r5
 8004806:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800480a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800480e:	2b09      	cmp	r3, #9
 8004810:	d91f      	bls.n	8004852 <__svfiscanf_r+0xf6>
 8004812:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004a34 <__svfiscanf_r+0x2d8>
 8004816:	2203      	movs	r2, #3
 8004818:	4658      	mov	r0, fp
 800481a:	f7fb fcd9 	bl	80001d0 <memchr>
 800481e:	b138      	cbz	r0, 8004830 <__svfiscanf_r+0xd4>
 8004820:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004822:	eba0 000b 	sub.w	r0, r0, fp
 8004826:	2301      	movs	r3, #1
 8004828:	4083      	lsls	r3, r0
 800482a:	4313      	orrs	r3, r2
 800482c:	9341      	str	r3, [sp, #260]	@ 0x104
 800482e:	4655      	mov	r5, sl
 8004830:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004834:	2b78      	cmp	r3, #120	@ 0x78
 8004836:	d807      	bhi.n	8004848 <__svfiscanf_r+0xec>
 8004838:	2b57      	cmp	r3, #87	@ 0x57
 800483a:	d811      	bhi.n	8004860 <__svfiscanf_r+0x104>
 800483c:	2b25      	cmp	r3, #37	@ 0x25
 800483e:	d05e      	beq.n	80048fe <__svfiscanf_r+0x1a2>
 8004840:	d858      	bhi.n	80048f4 <__svfiscanf_r+0x198>
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80d2 	beq.w	80049ec <__svfiscanf_r+0x290>
 8004848:	2303      	movs	r3, #3
 800484a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800484c:	230a      	movs	r3, #10
 800484e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004850:	e08f      	b.n	8004972 <__svfiscanf_r+0x216>
 8004852:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004854:	fb02 1103 	mla	r1, r2, r3, r1
 8004858:	3930      	subs	r1, #48	@ 0x30
 800485a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800485c:	4655      	mov	r5, sl
 800485e:	e7d1      	b.n	8004804 <__svfiscanf_r+0xa8>
 8004860:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004864:	2a20      	cmp	r2, #32
 8004866:	d8ef      	bhi.n	8004848 <__svfiscanf_r+0xec>
 8004868:	a101      	add	r1, pc, #4	@ (adr r1, 8004870 <__svfiscanf_r+0x114>)
 800486a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004951 	.word	0x08004951
 8004874:	08004849 	.word	0x08004849
 8004878:	08004849 	.word	0x08004849
 800487c:	080049ab 	.word	0x080049ab
 8004880:	08004849 	.word	0x08004849
 8004884:	08004849 	.word	0x08004849
 8004888:	08004849 	.word	0x08004849
 800488c:	08004849 	.word	0x08004849
 8004890:	08004849 	.word	0x08004849
 8004894:	08004849 	.word	0x08004849
 8004898:	08004849 	.word	0x08004849
 800489c:	080049c1 	.word	0x080049c1
 80048a0:	080049a7 	.word	0x080049a7
 80048a4:	080048fb 	.word	0x080048fb
 80048a8:	080048fb 	.word	0x080048fb
 80048ac:	080048fb 	.word	0x080048fb
 80048b0:	08004849 	.word	0x08004849
 80048b4:	08004963 	.word	0x08004963
 80048b8:	08004849 	.word	0x08004849
 80048bc:	08004849 	.word	0x08004849
 80048c0:	08004849 	.word	0x08004849
 80048c4:	08004849 	.word	0x08004849
 80048c8:	080049d1 	.word	0x080049d1
 80048cc:	0800496b 	.word	0x0800496b
 80048d0:	08004949 	.word	0x08004949
 80048d4:	08004849 	.word	0x08004849
 80048d8:	08004849 	.word	0x08004849
 80048dc:	080049cd 	.word	0x080049cd
 80048e0:	08004849 	.word	0x08004849
 80048e4:	080049a7 	.word	0x080049a7
 80048e8:	08004849 	.word	0x08004849
 80048ec:	08004849 	.word	0x08004849
 80048f0:	08004951 	.word	0x08004951
 80048f4:	3b45      	subs	r3, #69	@ 0x45
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d8a6      	bhi.n	8004848 <__svfiscanf_r+0xec>
 80048fa:	2305      	movs	r3, #5
 80048fc:	e038      	b.n	8004970 <__svfiscanf_r+0x214>
 80048fe:	6863      	ldr	r3, [r4, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	dd0d      	ble.n	8004920 <__svfiscanf_r+0x1c4>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	781a      	ldrb	r2, [r3, #0]
 8004908:	454a      	cmp	r2, r9
 800490a:	f040 80b8 	bne.w	8004a7e <__svfiscanf_r+0x322>
 800490e:	3301      	adds	r3, #1
 8004910:	6862      	ldr	r2, [r4, #4]
 8004912:	6023      	str	r3, [r4, #0]
 8004914:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004916:	3a01      	subs	r2, #1
 8004918:	3301      	adds	r3, #1
 800491a:	6062      	str	r2, [r4, #4]
 800491c:	9345      	str	r3, [sp, #276]	@ 0x114
 800491e:	e750      	b.n	80047c2 <__svfiscanf_r+0x66>
 8004920:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004922:	4621      	mov	r1, r4
 8004924:	4630      	mov	r0, r6
 8004926:	4798      	blx	r3
 8004928:	2800      	cmp	r0, #0
 800492a:	d0eb      	beq.n	8004904 <__svfiscanf_r+0x1a8>
 800492c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800492e:	07da      	lsls	r2, r3, #31
 8004930:	f140 809d 	bpl.w	8004a6e <__svfiscanf_r+0x312>
 8004934:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004936:	2800      	cmp	r0, #0
 8004938:	d061      	beq.n	80049fe <__svfiscanf_r+0x2a2>
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	0659      	lsls	r1, r3, #25
 800493e:	d45e      	bmi.n	80049fe <__svfiscanf_r+0x2a2>
 8004940:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8004944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004948:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800494a:	f042 0220 	orr.w	r2, r2, #32
 800494e:	9241      	str	r2, [sp, #260]	@ 0x104
 8004950:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004956:	9241      	str	r2, [sp, #260]	@ 0x104
 8004958:	2210      	movs	r2, #16
 800495a:	2b6e      	cmp	r3, #110	@ 0x6e
 800495c:	9242      	str	r2, [sp, #264]	@ 0x108
 800495e:	d902      	bls.n	8004966 <__svfiscanf_r+0x20a>
 8004960:	e005      	b.n	800496e <__svfiscanf_r+0x212>
 8004962:	2300      	movs	r3, #0
 8004964:	9342      	str	r3, [sp, #264]	@ 0x108
 8004966:	2303      	movs	r3, #3
 8004968:	e002      	b.n	8004970 <__svfiscanf_r+0x214>
 800496a:	2308      	movs	r3, #8
 800496c:	9342      	str	r3, [sp, #264]	@ 0x108
 800496e:	2304      	movs	r3, #4
 8004970:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	dd45      	ble.n	8004a04 <__svfiscanf_r+0x2a8>
 8004978:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800497a:	0659      	lsls	r1, r3, #25
 800497c:	d404      	bmi.n	8004988 <__svfiscanf_r+0x22c>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	5cba      	ldrb	r2, [r7, r2]
 8004984:	0712      	lsls	r2, r2, #28
 8004986:	d444      	bmi.n	8004a12 <__svfiscanf_r+0x2b6>
 8004988:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800498a:	2b02      	cmp	r3, #2
 800498c:	dc5b      	bgt.n	8004a46 <__svfiscanf_r+0x2ea>
 800498e:	466b      	mov	r3, sp
 8004990:	4622      	mov	r2, r4
 8004992:	a941      	add	r1, sp, #260	@ 0x104
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f893 	bl	8004ac0 <_scanf_chars>
 800499a:	2801      	cmp	r0, #1
 800499c:	d06f      	beq.n	8004a7e <__svfiscanf_r+0x322>
 800499e:	2802      	cmp	r0, #2
 80049a0:	f47f af0f 	bne.w	80047c2 <__svfiscanf_r+0x66>
 80049a4:	e7c2      	b.n	800492c <__svfiscanf_r+0x1d0>
 80049a6:	220a      	movs	r2, #10
 80049a8:	e7d7      	b.n	800495a <__svfiscanf_r+0x1fe>
 80049aa:	4629      	mov	r1, r5
 80049ac:	4640      	mov	r0, r8
 80049ae:	f000 fb65 	bl	800507c <__sccl>
 80049b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80049b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80049ba:	4605      	mov	r5, r0
 80049bc:	2301      	movs	r3, #1
 80049be:	e7d7      	b.n	8004970 <__svfiscanf_r+0x214>
 80049c0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80049c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049c6:	9341      	str	r3, [sp, #260]	@ 0x104
 80049c8:	2300      	movs	r3, #0
 80049ca:	e7d1      	b.n	8004970 <__svfiscanf_r+0x214>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e7cf      	b.n	8004970 <__svfiscanf_r+0x214>
 80049d0:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80049d2:	06c3      	lsls	r3, r0, #27
 80049d4:	f53f aef5 	bmi.w	80047c2 <__svfiscanf_r+0x66>
 80049d8:	9b00      	ldr	r3, [sp, #0]
 80049da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80049dc:	1d19      	adds	r1, r3, #4
 80049de:	9100      	str	r1, [sp, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	07c0      	lsls	r0, r0, #31
 80049e4:	bf4c      	ite	mi
 80049e6:	801a      	strhmi	r2, [r3, #0]
 80049e8:	601a      	strpl	r2, [r3, #0]
 80049ea:	e6ea      	b.n	80047c2 <__svfiscanf_r+0x66>
 80049ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049ee:	07de      	lsls	r6, r3, #31
 80049f0:	d405      	bmi.n	80049fe <__svfiscanf_r+0x2a2>
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	059d      	lsls	r5, r3, #22
 80049f6:	d402      	bmi.n	80049fe <__svfiscanf_r+0x2a2>
 80049f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049fa:	f7ff fda7 	bl	800454c <__retarget_lock_release_recursive>
 80049fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004a02:	e79d      	b.n	8004940 <__svfiscanf_r+0x1e4>
 8004a04:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a06:	4621      	mov	r1, r4
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4798      	blx	r3
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0b3      	beq.n	8004978 <__svfiscanf_r+0x21c>
 8004a10:	e78c      	b.n	800492c <__svfiscanf_r+0x1d0>
 8004a12:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004a14:	3201      	adds	r2, #1
 8004a16:	9245      	str	r2, [sp, #276]	@ 0x114
 8004a18:	6862      	ldr	r2, [r4, #4]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	6062      	str	r2, [r4, #4]
 8004a20:	dd0a      	ble.n	8004a38 <__svfiscanf_r+0x2dc>
 8004a22:	3301      	adds	r3, #1
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	e7aa      	b.n	800497e <__svfiscanf_r+0x222>
 8004a28:	08005163 	.word	0x08005163
 8004a2c:	08004f95 	.word	0x08004f95
 8004a30:	08005614 	.word	0x08005614
 8004a34:	080055f4 	.word	0x080055f4
 8004a38:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	4798      	blx	r3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d09c      	beq.n	800497e <__svfiscanf_r+0x222>
 8004a44:	e772      	b.n	800492c <__svfiscanf_r+0x1d0>
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	dc06      	bgt.n	8004a58 <__svfiscanf_r+0x2fc>
 8004a4a:	466b      	mov	r3, sp
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	a941      	add	r1, sp, #260	@ 0x104
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 f88f 	bl	8004b74 <_scanf_i>
 8004a56:	e7a0      	b.n	800499a <__svfiscanf_r+0x23e>
 8004a58:	4b0e      	ldr	r3, [pc, #56]	@ (8004a94 <__svfiscanf_r+0x338>)
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f43f aeb1 	beq.w	80047c2 <__svfiscanf_r+0x66>
 8004a60:	466b      	mov	r3, sp
 8004a62:	4622      	mov	r2, r4
 8004a64:	a941      	add	r1, sp, #260	@ 0x104
 8004a66:	4630      	mov	r0, r6
 8004a68:	f3af 8000 	nop.w
 8004a6c:	e795      	b.n	800499a <__svfiscanf_r+0x23e>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	0598      	lsls	r0, r3, #22
 8004a72:	f53f af5f 	bmi.w	8004934 <__svfiscanf_r+0x1d8>
 8004a76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a78:	f7ff fd68 	bl	800454c <__retarget_lock_release_recursive>
 8004a7c:	e75a      	b.n	8004934 <__svfiscanf_r+0x1d8>
 8004a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a80:	07da      	lsls	r2, r3, #31
 8004a82:	d405      	bmi.n	8004a90 <__svfiscanf_r+0x334>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	059b      	lsls	r3, r3, #22
 8004a88:	d402      	bmi.n	8004a90 <__svfiscanf_r+0x334>
 8004a8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8c:	f7ff fd5e 	bl	800454c <__retarget_lock_release_recursive>
 8004a90:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004a92:	e755      	b.n	8004940 <__svfiscanf_r+0x1e4>
 8004a94:	00000000 	.word	0x00000000

08004a98 <_vfiscanf_r>:
 8004a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9c:	460d      	mov	r5, r1
 8004a9e:	4616      	mov	r6, r2
 8004aa0:	461f      	mov	r7, r3
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	b118      	cbz	r0, 8004aae <_vfiscanf_r+0x16>
 8004aa6:	6a03      	ldr	r3, [r0, #32]
 8004aa8:	b90b      	cbnz	r3, 8004aae <_vfiscanf_r+0x16>
 8004aaa:	f7ff fa9f 	bl	8003fec <__sinit>
 8004aae:	463b      	mov	r3, r7
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	f7ff be4f 	b.w	800475c <__svfiscanf_r>
	...

08004ac0 <_scanf_chars>:
 8004ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac4:	4615      	mov	r5, r2
 8004ac6:	688a      	ldr	r2, [r1, #8]
 8004ac8:	4680      	mov	r8, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	b932      	cbnz	r2, 8004adc <_scanf_chars+0x1c>
 8004ace:	698a      	ldr	r2, [r1, #24]
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	bf14      	ite	ne
 8004ad4:	f04f 32ff 	movne.w	r2, #4294967295
 8004ad8:	2201      	moveq	r2, #1
 8004ada:	608a      	str	r2, [r1, #8]
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004b70 <_scanf_chars+0xb0>
 8004ae2:	06d1      	lsls	r1, r2, #27
 8004ae4:	bf5f      	itttt	pl
 8004ae6:	681a      	ldrpl	r2, [r3, #0]
 8004ae8:	1d11      	addpl	r1, r2, #4
 8004aea:	6019      	strpl	r1, [r3, #0]
 8004aec:	6816      	ldrpl	r6, [r2, #0]
 8004aee:	2700      	movs	r7, #0
 8004af0:	69a0      	ldr	r0, [r4, #24]
 8004af2:	b188      	cbz	r0, 8004b18 <_scanf_chars+0x58>
 8004af4:	2801      	cmp	r0, #1
 8004af6:	d107      	bne.n	8004b08 <_scanf_chars+0x48>
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	781a      	ldrb	r2, [r3, #0]
 8004afc:	6963      	ldr	r3, [r4, #20]
 8004afe:	5c9b      	ldrb	r3, [r3, r2]
 8004b00:	b953      	cbnz	r3, 8004b18 <_scanf_chars+0x58>
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	d031      	beq.n	8004b6a <_scanf_chars+0xaa>
 8004b06:	e022      	b.n	8004b4e <_scanf_chars+0x8e>
 8004b08:	2802      	cmp	r0, #2
 8004b0a:	d120      	bne.n	8004b4e <_scanf_chars+0x8e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	d41a      	bmi.n	8004b4e <_scanf_chars+0x8e>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	06da      	lsls	r2, r3, #27
 8004b1c:	bf5e      	ittt	pl
 8004b1e:	682b      	ldrpl	r3, [r5, #0]
 8004b20:	781b      	ldrbpl	r3, [r3, #0]
 8004b22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004b26:	682a      	ldr	r2, [r5, #0]
 8004b28:	686b      	ldr	r3, [r5, #4]
 8004b2a:	3201      	adds	r2, #1
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	68a2      	ldr	r2, [r4, #8]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	3a01      	subs	r2, #1
 8004b34:	606b      	str	r3, [r5, #4]
 8004b36:	3701      	adds	r7, #1
 8004b38:	60a2      	str	r2, [r4, #8]
 8004b3a:	b142      	cbz	r2, 8004b4e <_scanf_chars+0x8e>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dcd7      	bgt.n	8004af0 <_scanf_chars+0x30>
 8004b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b44:	4629      	mov	r1, r5
 8004b46:	4640      	mov	r0, r8
 8004b48:	4798      	blx	r3
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0d0      	beq.n	8004af0 <_scanf_chars+0x30>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f013 0310 	ands.w	r3, r3, #16
 8004b54:	d105      	bne.n	8004b62 <_scanf_chars+0xa2>
 8004b56:	68e2      	ldr	r2, [r4, #12]
 8004b58:	3201      	adds	r2, #1
 8004b5a:	60e2      	str	r2, [r4, #12]
 8004b5c:	69a2      	ldr	r2, [r4, #24]
 8004b5e:	b102      	cbz	r2, 8004b62 <_scanf_chars+0xa2>
 8004b60:	7033      	strb	r3, [r6, #0]
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	443b      	add	r3, r7
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	2000      	movs	r0, #0
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b6e:	bf00      	nop
 8004b70:	08005614 	.word	0x08005614

08004b74 <_scanf_i>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	4698      	mov	r8, r3
 8004b7a:	4b74      	ldr	r3, [pc, #464]	@ (8004d4c <_scanf_i+0x1d8>)
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	4682      	mov	sl, r0
 8004b80:	4616      	mov	r6, r2
 8004b82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b86:	b087      	sub	sp, #28
 8004b88:	ab03      	add	r3, sp, #12
 8004b8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b8e:	4b70      	ldr	r3, [pc, #448]	@ (8004d50 <_scanf_i+0x1dc>)
 8004b90:	69a1      	ldr	r1, [r4, #24]
 8004b92:	4a70      	ldr	r2, [pc, #448]	@ (8004d54 <_scanf_i+0x1e0>)
 8004b94:	2903      	cmp	r1, #3
 8004b96:	bf08      	it	eq
 8004b98:	461a      	moveq	r2, r3
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	9201      	str	r2, [sp, #4]
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004ba4:	bf88      	it	hi
 8004ba6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004baa:	4627      	mov	r7, r4
 8004bac:	bf82      	ittt	hi
 8004bae:	eb03 0905 	addhi.w	r9, r3, r5
 8004bb2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004bb6:	60a3      	strhi	r3, [r4, #8]
 8004bb8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004bbc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004bc0:	bf98      	it	ls
 8004bc2:	f04f 0900 	movls.w	r9, #0
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	463d      	mov	r5, r7
 8004bca:	f04f 0b00 	mov.w	fp, #0
 8004bce:	6831      	ldr	r1, [r6, #0]
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	7809      	ldrb	r1, [r1, #0]
 8004bd4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f7fb faf9 	bl	80001d0 <memchr>
 8004bde:	b328      	cbz	r0, 8004c2c <_scanf_i+0xb8>
 8004be0:	f1bb 0f01 	cmp.w	fp, #1
 8004be4:	d159      	bne.n	8004c9a <_scanf_i+0x126>
 8004be6:	6862      	ldr	r2, [r4, #4]
 8004be8:	b92a      	cbnz	r2, 8004bf6 <_scanf_i+0x82>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	2108      	movs	r1, #8
 8004bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf2:	6061      	str	r1, [r4, #4]
 8004bf4:	6022      	str	r2, [r4, #0]
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	68a2      	ldr	r2, [r4, #8]
 8004c00:	1e51      	subs	r1, r2, #1
 8004c02:	60a1      	str	r1, [r4, #8]
 8004c04:	b192      	cbz	r2, 8004c2c <_scanf_i+0xb8>
 8004c06:	6832      	ldr	r2, [r6, #0]
 8004c08:	1c51      	adds	r1, r2, #1
 8004c0a:	6031      	str	r1, [r6, #0]
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	f805 2b01 	strb.w	r2, [r5], #1
 8004c12:	6872      	ldr	r2, [r6, #4]
 8004c14:	3a01      	subs	r2, #1
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	6072      	str	r2, [r6, #4]
 8004c1a:	dc07      	bgt.n	8004c2c <_scanf_i+0xb8>
 8004c1c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004c20:	4631      	mov	r1, r6
 8004c22:	4650      	mov	r0, sl
 8004c24:	4790      	blx	r2
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f040 8085 	bne.w	8004d36 <_scanf_i+0x1c2>
 8004c2c:	f10b 0b01 	add.w	fp, fp, #1
 8004c30:	f1bb 0f03 	cmp.w	fp, #3
 8004c34:	d1cb      	bne.n	8004bce <_scanf_i+0x5a>
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	b90b      	cbnz	r3, 8004c3e <_scanf_i+0xca>
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	4945      	ldr	r1, [pc, #276]	@ (8004d58 <_scanf_i+0x1e4>)
 8004c42:	6960      	ldr	r0, [r4, #20]
 8004c44:	1ac9      	subs	r1, r1, r3
 8004c46:	f000 fa19 	bl	800507c <__sccl>
 8004c4a:	f04f 0b00 	mov.w	fp, #0
 8004c4e:	68a3      	ldr	r3, [r4, #8]
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03d      	beq.n	8004cd2 <_scanf_i+0x15e>
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	6960      	ldr	r0, [r4, #20]
 8004c5a:	f891 c000 	ldrb.w	ip, [r1]
 8004c5e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d035      	beq.n	8004cd2 <_scanf_i+0x15e>
 8004c66:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004c6a:	d124      	bne.n	8004cb6 <_scanf_i+0x142>
 8004c6c:	0510      	lsls	r0, r2, #20
 8004c6e:	d522      	bpl.n	8004cb6 <_scanf_i+0x142>
 8004c70:	f10b 0b01 	add.w	fp, fp, #1
 8004c74:	f1b9 0f00 	cmp.w	r9, #0
 8004c78:	d003      	beq.n	8004c82 <_scanf_i+0x10e>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6873      	ldr	r3, [r6, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	6073      	str	r3, [r6, #4]
 8004c8a:	dd1b      	ble.n	8004cc4 <_scanf_i+0x150>
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	6033      	str	r3, [r6, #0]
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60a3      	str	r3, [r4, #8]
 8004c98:	e7d9      	b.n	8004c4e <_scanf_i+0xda>
 8004c9a:	f1bb 0f02 	cmp.w	fp, #2
 8004c9e:	d1ae      	bne.n	8004bfe <_scanf_i+0x8a>
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004ca6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004caa:	d1c4      	bne.n	8004c36 <_scanf_i+0xc2>
 8004cac:	2110      	movs	r1, #16
 8004cae:	6061      	str	r1, [r4, #4]
 8004cb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb4:	e7a2      	b.n	8004bfc <_scanf_i+0x88>
 8004cb6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	780b      	ldrb	r3, [r1, #0]
 8004cbe:	f805 3b01 	strb.w	r3, [r5], #1
 8004cc2:	e7de      	b.n	8004c82 <_scanf_i+0x10e>
 8004cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4650      	mov	r0, sl
 8004ccc:	4798      	blx	r3
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0df      	beq.n	8004c92 <_scanf_i+0x11e>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	05d9      	lsls	r1, r3, #23
 8004cd6:	d50d      	bpl.n	8004cf4 <_scanf_i+0x180>
 8004cd8:	42bd      	cmp	r5, r7
 8004cda:	d909      	bls.n	8004cf0 <_scanf_i+0x17c>
 8004cdc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004ce0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	4798      	blx	r3
 8004cea:	f105 39ff 	add.w	r9, r5, #4294967295
 8004cee:	464d      	mov	r5, r9
 8004cf0:	42bd      	cmp	r5, r7
 8004cf2:	d028      	beq.n	8004d46 <_scanf_i+0x1d2>
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	f012 0210 	ands.w	r2, r2, #16
 8004cfa:	d113      	bne.n	8004d24 <_scanf_i+0x1b0>
 8004cfc:	702a      	strb	r2, [r5, #0]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	9e01      	ldr	r6, [sp, #4]
 8004d02:	4639      	mov	r1, r7
 8004d04:	4650      	mov	r0, sl
 8004d06:	47b0      	blx	r6
 8004d08:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	f8c8 2000 	str.w	r2, [r8]
 8004d14:	f011 0f20 	tst.w	r1, #32
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	d00f      	beq.n	8004d3c <_scanf_i+0x1c8>
 8004d1c:	6018      	str	r0, [r3, #0]
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60e3      	str	r3, [r4, #12]
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	1bed      	subs	r5, r5, r7
 8004d28:	445d      	add	r5, fp
 8004d2a:	442b      	add	r3, r5
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	b007      	add	sp, #28
 8004d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d36:	f04f 0b00 	mov.w	fp, #0
 8004d3a:	e7ca      	b.n	8004cd2 <_scanf_i+0x15e>
 8004d3c:	07ca      	lsls	r2, r1, #31
 8004d3e:	bf4c      	ite	mi
 8004d40:	8018      	strhmi	r0, [r3, #0]
 8004d42:	6018      	strpl	r0, [r3, #0]
 8004d44:	e7eb      	b.n	8004d1e <_scanf_i+0x1aa>
 8004d46:	2001      	movs	r0, #1
 8004d48:	e7f2      	b.n	8004d30 <_scanf_i+0x1bc>
 8004d4a:	bf00      	nop
 8004d4c:	080055d0 	.word	0x080055d0
 8004d50:	08005415 	.word	0x08005415
 8004d54:	080054f5 	.word	0x080054f5
 8004d58:	08005608 	.word	0x08005608

08004d5c <__sflush_r>:
 8004d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	0716      	lsls	r6, r2, #28
 8004d66:	4605      	mov	r5, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	d454      	bmi.n	8004e16 <__sflush_r+0xba>
 8004d6c:	684b      	ldr	r3, [r1, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc02      	bgt.n	8004d78 <__sflush_r+0x1c>
 8004d72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dd48      	ble.n	8004e0a <__sflush_r+0xae>
 8004d78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d7a:	2e00      	cmp	r6, #0
 8004d7c:	d045      	beq.n	8004e0a <__sflush_r+0xae>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d84:	682f      	ldr	r7, [r5, #0]
 8004d86:	6a21      	ldr	r1, [r4, #32]
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	d030      	beq.n	8004dee <__sflush_r+0x92>
 8004d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	0759      	lsls	r1, r3, #29
 8004d92:	d505      	bpl.n	8004da0 <__sflush_r+0x44>
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d9a:	b10b      	cbz	r3, 8004da0 <__sflush_r+0x44>
 8004d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004da4:	6a21      	ldr	r1, [r4, #32]
 8004da6:	4628      	mov	r0, r5
 8004da8:	47b0      	blx	r6
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	d106      	bne.n	8004dbe <__sflush_r+0x62>
 8004db0:	6829      	ldr	r1, [r5, #0]
 8004db2:	291d      	cmp	r1, #29
 8004db4:	d82b      	bhi.n	8004e0e <__sflush_r+0xb2>
 8004db6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e60 <__sflush_r+0x104>)
 8004db8:	40ca      	lsrs	r2, r1
 8004dba:	07d6      	lsls	r6, r2, #31
 8004dbc:	d527      	bpl.n	8004e0e <__sflush_r+0xb2>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	6062      	str	r2, [r4, #4]
 8004dc2:	04d9      	lsls	r1, r3, #19
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	d504      	bpl.n	8004dd4 <__sflush_r+0x78>
 8004dca:	1c42      	adds	r2, r0, #1
 8004dcc:	d101      	bne.n	8004dd2 <__sflush_r+0x76>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	b903      	cbnz	r3, 8004dd4 <__sflush_r+0x78>
 8004dd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dd6:	602f      	str	r7, [r5, #0]
 8004dd8:	b1b9      	cbz	r1, 8004e0a <__sflush_r+0xae>
 8004dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dde:	4299      	cmp	r1, r3
 8004de0:	d002      	beq.n	8004de8 <__sflush_r+0x8c>
 8004de2:	4628      	mov	r0, r5
 8004de4:	f7ff fbc2 	bl	800456c <_free_r>
 8004de8:	2300      	movs	r3, #0
 8004dea:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dec:	e00d      	b.n	8004e0a <__sflush_r+0xae>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b0      	blx	r6
 8004df4:	4602      	mov	r2, r0
 8004df6:	1c50      	adds	r0, r2, #1
 8004df8:	d1c9      	bne.n	8004d8e <__sflush_r+0x32>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0c6      	beq.n	8004d8e <__sflush_r+0x32>
 8004e00:	2b1d      	cmp	r3, #29
 8004e02:	d001      	beq.n	8004e08 <__sflush_r+0xac>
 8004e04:	2b16      	cmp	r3, #22
 8004e06:	d11e      	bne.n	8004e46 <__sflush_r+0xea>
 8004e08:	602f      	str	r7, [r5, #0]
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e022      	b.n	8004e54 <__sflush_r+0xf8>
 8004e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e12:	b21b      	sxth	r3, r3
 8004e14:	e01b      	b.n	8004e4e <__sflush_r+0xf2>
 8004e16:	690f      	ldr	r7, [r1, #16]
 8004e18:	2f00      	cmp	r7, #0
 8004e1a:	d0f6      	beq.n	8004e0a <__sflush_r+0xae>
 8004e1c:	0793      	lsls	r3, r2, #30
 8004e1e:	680e      	ldr	r6, [r1, #0]
 8004e20:	bf08      	it	eq
 8004e22:	694b      	ldreq	r3, [r1, #20]
 8004e24:	600f      	str	r7, [r1, #0]
 8004e26:	bf18      	it	ne
 8004e28:	2300      	movne	r3, #0
 8004e2a:	eba6 0807 	sub.w	r8, r6, r7
 8004e2e:	608b      	str	r3, [r1, #8]
 8004e30:	f1b8 0f00 	cmp.w	r8, #0
 8004e34:	dde9      	ble.n	8004e0a <__sflush_r+0xae>
 8004e36:	6a21      	ldr	r1, [r4, #32]
 8004e38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e3a:	4643      	mov	r3, r8
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b0      	blx	r6
 8004e42:	2800      	cmp	r0, #0
 8004e44:	dc08      	bgt.n	8004e58 <__sflush_r+0xfc>
 8004e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e58:	4407      	add	r7, r0
 8004e5a:	eba8 0800 	sub.w	r8, r8, r0
 8004e5e:	e7e7      	b.n	8004e30 <__sflush_r+0xd4>
 8004e60:	20400001 	.word	0x20400001

08004e64 <_fflush_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	b913      	cbnz	r3, 8004e74 <_fflush_r+0x10>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	4628      	mov	r0, r5
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	b118      	cbz	r0, 8004e7e <_fflush_r+0x1a>
 8004e76:	6a03      	ldr	r3, [r0, #32]
 8004e78:	b90b      	cbnz	r3, 8004e7e <_fflush_r+0x1a>
 8004e7a:	f7ff f8b7 	bl	8003fec <__sinit>
 8004e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f3      	beq.n	8004e6e <_fflush_r+0xa>
 8004e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e88:	07d0      	lsls	r0, r2, #31
 8004e8a:	d404      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e8c:	0599      	lsls	r1, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_fflush_r+0x32>
 8004e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e92:	f7ff fb5a 	bl	800454a <__retarget_lock_acquire_recursive>
 8004e96:	4628      	mov	r0, r5
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f7ff ff5f 	bl	8004d5c <__sflush_r>
 8004e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ea0:	07da      	lsls	r2, r3, #31
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	d4e4      	bmi.n	8004e70 <_fflush_r+0xc>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	059b      	lsls	r3, r3, #22
 8004eaa:	d4e1      	bmi.n	8004e70 <_fflush_r+0xc>
 8004eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eae:	f7ff fb4d 	bl	800454c <__retarget_lock_release_recursive>
 8004eb2:	e7dd      	b.n	8004e70 <_fflush_r+0xc>

08004eb4 <__swhatbuf_r>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	b096      	sub	sp, #88	@ 0x58
 8004ec0:	4615      	mov	r5, r2
 8004ec2:	461e      	mov	r6, r3
 8004ec4:	da0d      	bge.n	8004ee2 <__swhatbuf_r+0x2e>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2340      	movne	r3, #64	@ 0x40
 8004ed4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ed8:	2000      	movs	r0, #0
 8004eda:	6031      	str	r1, [r6, #0]
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	b016      	add	sp, #88	@ 0x58
 8004ee0:	bd70      	pop	{r4, r5, r6, pc}
 8004ee2:	466a      	mov	r2, sp
 8004ee4:	f000 f9bc 	bl	8005260 <_fstat_r>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	dbec      	blt.n	8004ec6 <__swhatbuf_r+0x12>
 8004eec:	9901      	ldr	r1, [sp, #4]
 8004eee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ef2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ef6:	4259      	negs	r1, r3
 8004ef8:	4159      	adcs	r1, r3
 8004efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004efe:	e7eb      	b.n	8004ed8 <__swhatbuf_r+0x24>

08004f00 <__smakebuf_r>:
 8004f00:	898b      	ldrh	r3, [r1, #12]
 8004f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f04:	079d      	lsls	r5, r3, #30
 8004f06:	4606      	mov	r6, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	d507      	bpl.n	8004f1c <__smakebuf_r+0x1c>
 8004f0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	6123      	str	r3, [r4, #16]
 8004f14:	2301      	movs	r3, #1
 8004f16:	6163      	str	r3, [r4, #20]
 8004f18:	b003      	add	sp, #12
 8004f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f1c:	ab01      	add	r3, sp, #4
 8004f1e:	466a      	mov	r2, sp
 8004f20:	f7ff ffc8 	bl	8004eb4 <__swhatbuf_r>
 8004f24:	9f00      	ldr	r7, [sp, #0]
 8004f26:	4605      	mov	r5, r0
 8004f28:	4639      	mov	r1, r7
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f7ff fb8a 	bl	8004644 <_malloc_r>
 8004f30:	b948      	cbnz	r0, 8004f46 <__smakebuf_r+0x46>
 8004f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f36:	059a      	lsls	r2, r3, #22
 8004f38:	d4ee      	bmi.n	8004f18 <__smakebuf_r+0x18>
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	f043 0302 	orr.w	r3, r3, #2
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e7e2      	b.n	8004f0c <__smakebuf_r+0xc>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	6020      	str	r0, [r4, #0]
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f56:	b15b      	cbz	r3, 8004f70 <__smakebuf_r+0x70>
 8004f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f991 	bl	8005284 <_isatty_r>
 8004f62:	b128      	cbz	r0, 8004f70 <__smakebuf_r+0x70>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	431d      	orrs	r5, r3
 8004f74:	81a5      	strh	r5, [r4, #12]
 8004f76:	e7cf      	b.n	8004f18 <__smakebuf_r+0x18>

08004f78 <lflush>:
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	f003 0309 	and.w	r3, r3, #9
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d103      	bne.n	8004f8a <lflush+0x12>
 8004f82:	4b03      	ldr	r3, [pc, #12]	@ (8004f90 <lflush+0x18>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f7ff bf6d 	b.w	8004e64 <_fflush_r>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	2000001c 	.word	0x2000001c

08004f94 <__srefill_r>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	460c      	mov	r4, r1
 8004f98:	4605      	mov	r5, r0
 8004f9a:	b118      	cbz	r0, 8004fa4 <__srefill_r+0x10>
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <__srefill_r+0x10>
 8004fa0:	f7ff f824 	bl	8003fec <__sinit>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fac:	069e      	lsls	r6, r3, #26
 8004fae:	d408      	bmi.n	8004fc2 <__srefill_r+0x2e>
 8004fb0:	0758      	lsls	r0, r3, #29
 8004fb2:	d445      	bmi.n	8005040 <__srefill_r+0xac>
 8004fb4:	06d9      	lsls	r1, r3, #27
 8004fb6:	d407      	bmi.n	8004fc8 <__srefill_r+0x34>
 8004fb8:	2209      	movs	r2, #9
 8004fba:	602a      	str	r2, [r5, #0]
 8004fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc0:	81a3      	strh	r3, [r4, #12]
 8004fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	071a      	lsls	r2, r3, #28
 8004fca:	d50b      	bpl.n	8004fe4 <__srefill_r+0x50>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f7ff ff48 	bl	8004e64 <_fflush_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d1f4      	bne.n	8004fc2 <__srefill_r+0x2e>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	60a0      	str	r0, [r4, #8]
 8004fdc:	f023 0308 	bic.w	r3, r3, #8
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	61a0      	str	r0, [r4, #24]
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	b91b      	cbnz	r3, 8004ff8 <__srefill_r+0x64>
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	f7ff ff84 	bl	8004f00 <__smakebuf_r>
 8004ff8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004ffc:	07b3      	lsls	r3, r6, #30
 8004ffe:	d00f      	beq.n	8005020 <__srefill_r+0x8c>
 8005000:	2301      	movs	r3, #1
 8005002:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <__srefill_r+0xdc>)
 8005004:	491b      	ldr	r1, [pc, #108]	@ (8005074 <__srefill_r+0xe0>)
 8005006:	481c      	ldr	r0, [pc, #112]	@ (8005078 <__srefill_r+0xe4>)
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	f7ff f819 	bl	8004040 <_fwalk_sglue>
 800500e:	81a6      	strh	r6, [r4, #12]
 8005010:	f006 0609 	and.w	r6, r6, #9
 8005014:	2e09      	cmp	r6, #9
 8005016:	d103      	bne.n	8005020 <__srefill_r+0x8c>
 8005018:	4621      	mov	r1, r4
 800501a:	4628      	mov	r0, r5
 800501c:	f7ff fe9e 	bl	8004d5c <__sflush_r>
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005024:	6963      	ldr	r3, [r4, #20]
 8005026:	6a21      	ldr	r1, [r4, #32]
 8005028:	6022      	str	r2, [r4, #0]
 800502a:	4628      	mov	r0, r5
 800502c:	47b0      	blx	r6
 800502e:	2800      	cmp	r0, #0
 8005030:	6060      	str	r0, [r4, #4]
 8005032:	dc17      	bgt.n	8005064 <__srefill_r+0xd0>
 8005034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005038:	d116      	bne.n	8005068 <__srefill_r+0xd4>
 800503a:	f043 0320 	orr.w	r3, r3, #32
 800503e:	e7bf      	b.n	8004fc0 <__srefill_r+0x2c>
 8005040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005042:	2900      	cmp	r1, #0
 8005044:	d0d2      	beq.n	8004fec <__srefill_r+0x58>
 8005046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800504a:	4299      	cmp	r1, r3
 800504c:	d002      	beq.n	8005054 <__srefill_r+0xc0>
 800504e:	4628      	mov	r0, r5
 8005050:	f7ff fa8c 	bl	800456c <_free_r>
 8005054:	2300      	movs	r3, #0
 8005056:	6363      	str	r3, [r4, #52]	@ 0x34
 8005058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800505a:	6063      	str	r3, [r4, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0c5      	beq.n	8004fec <__srefill_r+0x58>
 8005060:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	2000      	movs	r0, #0
 8005066:	e7ae      	b.n	8004fc6 <__srefill_r+0x32>
 8005068:	2200      	movs	r2, #0
 800506a:	6062      	str	r2, [r4, #4]
 800506c:	e7a6      	b.n	8004fbc <__srefill_r+0x28>
 800506e:	bf00      	nop
 8005070:	20000010 	.word	0x20000010
 8005074:	08004f79 	.word	0x08004f79
 8005078:	20000020 	.word	0x20000020

0800507c <__sccl>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	780b      	ldrb	r3, [r1, #0]
 8005080:	4604      	mov	r4, r0
 8005082:	2b5e      	cmp	r3, #94	@ 0x5e
 8005084:	bf0b      	itete	eq
 8005086:	784b      	ldrbeq	r3, [r1, #1]
 8005088:	1c4a      	addne	r2, r1, #1
 800508a:	1c8a      	addeq	r2, r1, #2
 800508c:	2100      	movne	r1, #0
 800508e:	bf08      	it	eq
 8005090:	2101      	moveq	r1, #1
 8005092:	3801      	subs	r0, #1
 8005094:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005098:	f800 1f01 	strb.w	r1, [r0, #1]!
 800509c:	42a8      	cmp	r0, r5
 800509e:	d1fb      	bne.n	8005098 <__sccl+0x1c>
 80050a0:	b90b      	cbnz	r3, 80050a6 <__sccl+0x2a>
 80050a2:	1e50      	subs	r0, r2, #1
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	f081 0101 	eor.w	r1, r1, #1
 80050aa:	54e1      	strb	r1, [r4, r3]
 80050ac:	4610      	mov	r0, r2
 80050ae:	4602      	mov	r2, r0
 80050b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050b4:	2d2d      	cmp	r5, #45	@ 0x2d
 80050b6:	d005      	beq.n	80050c4 <__sccl+0x48>
 80050b8:	2d5d      	cmp	r5, #93	@ 0x5d
 80050ba:	d016      	beq.n	80050ea <__sccl+0x6e>
 80050bc:	2d00      	cmp	r5, #0
 80050be:	d0f1      	beq.n	80050a4 <__sccl+0x28>
 80050c0:	462b      	mov	r3, r5
 80050c2:	e7f2      	b.n	80050aa <__sccl+0x2e>
 80050c4:	7846      	ldrb	r6, [r0, #1]
 80050c6:	2e5d      	cmp	r6, #93	@ 0x5d
 80050c8:	d0fa      	beq.n	80050c0 <__sccl+0x44>
 80050ca:	42b3      	cmp	r3, r6
 80050cc:	dcf8      	bgt.n	80050c0 <__sccl+0x44>
 80050ce:	3002      	adds	r0, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	3201      	adds	r2, #1
 80050d4:	4296      	cmp	r6, r2
 80050d6:	54a1      	strb	r1, [r4, r2]
 80050d8:	dcfb      	bgt.n	80050d2 <__sccl+0x56>
 80050da:	1af2      	subs	r2, r6, r3
 80050dc:	3a01      	subs	r2, #1
 80050de:	1c5d      	adds	r5, r3, #1
 80050e0:	42b3      	cmp	r3, r6
 80050e2:	bfa8      	it	ge
 80050e4:	2200      	movge	r2, #0
 80050e6:	18ab      	adds	r3, r5, r2
 80050e8:	e7e1      	b.n	80050ae <__sccl+0x32>
 80050ea:	4610      	mov	r0, r2
 80050ec:	e7da      	b.n	80050a4 <__sccl+0x28>

080050ee <__submore>:
 80050ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f2:	460c      	mov	r4, r1
 80050f4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80050f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d11d      	bne.n	800513a <__submore+0x4c>
 80050fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005102:	f7ff fa9f 	bl	8004644 <_malloc_r>
 8005106:	b918      	cbnz	r0, 8005110 <__submore+0x22>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005114:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005116:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800511a:	6360      	str	r0, [r4, #52]	@ 0x34
 800511c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005120:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005124:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005128:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800512c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005130:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005134:	6020      	str	r0, [r4, #0]
 8005136:	2000      	movs	r0, #0
 8005138:	e7e8      	b.n	800510c <__submore+0x1e>
 800513a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800513c:	0077      	lsls	r7, r6, #1
 800513e:	463a      	mov	r2, r7
 8005140:	f000 f8c0 	bl	80052c4 <_realloc_r>
 8005144:	4605      	mov	r5, r0
 8005146:	2800      	cmp	r0, #0
 8005148:	d0de      	beq.n	8005108 <__submore+0x1a>
 800514a:	eb00 0806 	add.w	r8, r0, r6
 800514e:	4601      	mov	r1, r0
 8005150:	4632      	mov	r2, r6
 8005152:	4640      	mov	r0, r8
 8005154:	f7ff f9fb 	bl	800454e <memcpy>
 8005158:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800515c:	f8c4 8000 	str.w	r8, [r4]
 8005160:	e7e9      	b.n	8005136 <__submore+0x48>

08005162 <_ungetc_r>:
 8005162:	b570      	push	{r4, r5, r6, lr}
 8005164:	460d      	mov	r5, r1
 8005166:	1c69      	adds	r1, r5, #1
 8005168:	4606      	mov	r6, r0
 800516a:	4614      	mov	r4, r2
 800516c:	d01e      	beq.n	80051ac <_ungetc_r+0x4a>
 800516e:	b118      	cbz	r0, 8005178 <_ungetc_r+0x16>
 8005170:	6a03      	ldr	r3, [r0, #32]
 8005172:	b90b      	cbnz	r3, 8005178 <_ungetc_r+0x16>
 8005174:	f7fe ff3a 	bl	8003fec <__sinit>
 8005178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800517a:	07da      	lsls	r2, r3, #31
 800517c:	d405      	bmi.n	800518a <_ungetc_r+0x28>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	059b      	lsls	r3, r3, #22
 8005182:	d402      	bmi.n	800518a <_ungetc_r+0x28>
 8005184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005186:	f7ff f9e0 	bl	800454a <__retarget_lock_acquire_recursive>
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	f023 0220 	bic.w	r2, r3, #32
 8005192:	0758      	lsls	r0, r3, #29
 8005194:	81a2      	strh	r2, [r4, #12]
 8005196:	d422      	bmi.n	80051de <_ungetc_r+0x7c>
 8005198:	06d9      	lsls	r1, r3, #27
 800519a:	d40a      	bmi.n	80051b2 <_ungetc_r+0x50>
 800519c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800519e:	07d2      	lsls	r2, r2, #31
 80051a0:	d404      	bmi.n	80051ac <_ungetc_r+0x4a>
 80051a2:	0599      	lsls	r1, r3, #22
 80051a4:	d402      	bmi.n	80051ac <_ungetc_r+0x4a>
 80051a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051a8:	f7ff f9d0 	bl	800454c <__retarget_lock_release_recursive>
 80051ac:	f04f 35ff 	mov.w	r5, #4294967295
 80051b0:	e046      	b.n	8005240 <_ungetc_r+0xde>
 80051b2:	071b      	lsls	r3, r3, #28
 80051b4:	d50f      	bpl.n	80051d6 <_ungetc_r+0x74>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4630      	mov	r0, r6
 80051ba:	f7ff fe53 	bl	8004e64 <_fflush_r>
 80051be:	b120      	cbz	r0, 80051ca <_ungetc_r+0x68>
 80051c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051c2:	07d8      	lsls	r0, r3, #31
 80051c4:	d4f2      	bmi.n	80051ac <_ungetc_r+0x4a>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	e7eb      	b.n	80051a2 <_ungetc_r+0x40>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	60a0      	str	r0, [r4, #8]
 80051ce:	f023 0308 	bic.w	r3, r3, #8
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	61a0      	str	r0, [r4, #24]
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051e0:	6862      	ldr	r2, [r4, #4]
 80051e2:	b2ed      	uxtb	r5, r5
 80051e4:	b1d3      	cbz	r3, 800521c <_ungetc_r+0xba>
 80051e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80051e8:	4293      	cmp	r3, r2
 80051ea:	dc05      	bgt.n	80051f8 <_ungetc_r+0x96>
 80051ec:	4621      	mov	r1, r4
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7ff ff7d 	bl	80050ee <__submore>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d1e3      	bne.n	80051c0 <_ungetc_r+0x5e>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	1e5a      	subs	r2, r3, #1
 80051fc:	6022      	str	r2, [r4, #0]
 80051fe:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	3301      	adds	r3, #1
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800520a:	07da      	lsls	r2, r3, #31
 800520c:	d418      	bmi.n	8005240 <_ungetc_r+0xde>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	059b      	lsls	r3, r3, #22
 8005212:	d415      	bmi.n	8005240 <_ungetc_r+0xde>
 8005214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005216:	f7ff f999 	bl	800454c <__retarget_lock_release_recursive>
 800521a:	e011      	b.n	8005240 <_ungetc_r+0xde>
 800521c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800521e:	6920      	ldr	r0, [r4, #16]
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	f001 0101 	and.w	r1, r1, #1
 8005226:	b168      	cbz	r0, 8005244 <_ungetc_r+0xe2>
 8005228:	4298      	cmp	r0, r3
 800522a:	d20b      	bcs.n	8005244 <_ungetc_r+0xe2>
 800522c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005230:	42a8      	cmp	r0, r5
 8005232:	d107      	bne.n	8005244 <_ungetc_r+0xe2>
 8005234:	3b01      	subs	r3, #1
 8005236:	3201      	adds	r2, #1
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	6062      	str	r2, [r4, #4]
 800523c:	2900      	cmp	r1, #0
 800523e:	d0e6      	beq.n	800520e <_ungetc_r+0xac>
 8005240:	4628      	mov	r0, r5
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8005248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800524c:	6363      	str	r3, [r4, #52]	@ 0x34
 800524e:	2303      	movs	r3, #3
 8005250:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005252:	4623      	mov	r3, r4
 8005254:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	2301      	movs	r3, #1
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	e7ed      	b.n	800523c <_ungetc_r+0xda>

08005260 <_fstat_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d07      	ldr	r5, [pc, #28]	@ (8005280 <_fstat_r+0x20>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	602b      	str	r3, [r5, #0]
 800526e:	f7fb fc7f 	bl	8000b70 <_fstat>
 8005272:	1c43      	adds	r3, r0, #1
 8005274:	d102      	bne.n	800527c <_fstat_r+0x1c>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	b103      	cbz	r3, 800527c <_fstat_r+0x1c>
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	20004270 	.word	0x20004270

08005284 <_isatty_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d06      	ldr	r5, [pc, #24]	@ (80052a0 <_isatty_r+0x1c>)
 8005288:	2300      	movs	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	4608      	mov	r0, r1
 800528e:	602b      	str	r3, [r5, #0]
 8005290:	f7fb fc7e 	bl	8000b90 <_isatty>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_isatty_r+0x1a>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_isatty_r+0x1a>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	20004270 	.word	0x20004270

080052a4 <_sbrk_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d06      	ldr	r5, [pc, #24]	@ (80052c0 <_sbrk_r+0x1c>)
 80052a8:	2300      	movs	r3, #0
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	f7fb fc86 	bl	8000bc0 <_sbrk>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_sbrk_r+0x1a>
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	b103      	cbz	r3, 80052be <_sbrk_r+0x1a>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	20004270 	.word	0x20004270

080052c4 <_realloc_r>:
 80052c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c8:	4607      	mov	r7, r0
 80052ca:	4614      	mov	r4, r2
 80052cc:	460d      	mov	r5, r1
 80052ce:	b921      	cbnz	r1, 80052da <_realloc_r+0x16>
 80052d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	4611      	mov	r1, r2
 80052d6:	f7ff b9b5 	b.w	8004644 <_malloc_r>
 80052da:	b92a      	cbnz	r2, 80052e8 <_realloc_r+0x24>
 80052dc:	f7ff f946 	bl	800456c <_free_r>
 80052e0:	4625      	mov	r5, r4
 80052e2:	4628      	mov	r0, r5
 80052e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e8:	f000 f906 	bl	80054f8 <_malloc_usable_size_r>
 80052ec:	4284      	cmp	r4, r0
 80052ee:	4606      	mov	r6, r0
 80052f0:	d802      	bhi.n	80052f8 <_realloc_r+0x34>
 80052f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052f6:	d8f4      	bhi.n	80052e2 <_realloc_r+0x1e>
 80052f8:	4621      	mov	r1, r4
 80052fa:	4638      	mov	r0, r7
 80052fc:	f7ff f9a2 	bl	8004644 <_malloc_r>
 8005300:	4680      	mov	r8, r0
 8005302:	b908      	cbnz	r0, 8005308 <_realloc_r+0x44>
 8005304:	4645      	mov	r5, r8
 8005306:	e7ec      	b.n	80052e2 <_realloc_r+0x1e>
 8005308:	42b4      	cmp	r4, r6
 800530a:	4622      	mov	r2, r4
 800530c:	4629      	mov	r1, r5
 800530e:	bf28      	it	cs
 8005310:	4632      	movcs	r2, r6
 8005312:	f7ff f91c 	bl	800454e <memcpy>
 8005316:	4629      	mov	r1, r5
 8005318:	4638      	mov	r0, r7
 800531a:	f7ff f927 	bl	800456c <_free_r>
 800531e:	e7f1      	b.n	8005304 <_realloc_r+0x40>

08005320 <_strtol_l.isra.0>:
 8005320:	2b24      	cmp	r3, #36	@ 0x24
 8005322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005326:	4686      	mov	lr, r0
 8005328:	4690      	mov	r8, r2
 800532a:	d801      	bhi.n	8005330 <_strtol_l.isra.0+0x10>
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <_strtol_l.isra.0+0x1e>
 8005330:	f7ff f8e0 	bl	80044f4 <__errno>
 8005334:	2316      	movs	r3, #22
 8005336:	6003      	str	r3, [r0, #0]
 8005338:	2000      	movs	r0, #0
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533e:	4834      	ldr	r0, [pc, #208]	@ (8005410 <_strtol_l.isra.0+0xf0>)
 8005340:	460d      	mov	r5, r1
 8005342:	462a      	mov	r2, r5
 8005344:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005348:	5d06      	ldrb	r6, [r0, r4]
 800534a:	f016 0608 	ands.w	r6, r6, #8
 800534e:	d1f8      	bne.n	8005342 <_strtol_l.isra.0+0x22>
 8005350:	2c2d      	cmp	r4, #45	@ 0x2d
 8005352:	d110      	bne.n	8005376 <_strtol_l.isra.0+0x56>
 8005354:	782c      	ldrb	r4, [r5, #0]
 8005356:	2601      	movs	r6, #1
 8005358:	1c95      	adds	r5, r2, #2
 800535a:	f033 0210 	bics.w	r2, r3, #16
 800535e:	d115      	bne.n	800538c <_strtol_l.isra.0+0x6c>
 8005360:	2c30      	cmp	r4, #48	@ 0x30
 8005362:	d10d      	bne.n	8005380 <_strtol_l.isra.0+0x60>
 8005364:	782a      	ldrb	r2, [r5, #0]
 8005366:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800536a:	2a58      	cmp	r2, #88	@ 0x58
 800536c:	d108      	bne.n	8005380 <_strtol_l.isra.0+0x60>
 800536e:	786c      	ldrb	r4, [r5, #1]
 8005370:	3502      	adds	r5, #2
 8005372:	2310      	movs	r3, #16
 8005374:	e00a      	b.n	800538c <_strtol_l.isra.0+0x6c>
 8005376:	2c2b      	cmp	r4, #43	@ 0x2b
 8005378:	bf04      	itt	eq
 800537a:	782c      	ldrbeq	r4, [r5, #0]
 800537c:	1c95      	addeq	r5, r2, #2
 800537e:	e7ec      	b.n	800535a <_strtol_l.isra.0+0x3a>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f6      	bne.n	8005372 <_strtol_l.isra.0+0x52>
 8005384:	2c30      	cmp	r4, #48	@ 0x30
 8005386:	bf14      	ite	ne
 8005388:	230a      	movne	r3, #10
 800538a:	2308      	moveq	r3, #8
 800538c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005390:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005394:	2200      	movs	r2, #0
 8005396:	fbbc f9f3 	udiv	r9, ip, r3
 800539a:	4610      	mov	r0, r2
 800539c:	fb03 ca19 	mls	sl, r3, r9, ip
 80053a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053a4:	2f09      	cmp	r7, #9
 80053a6:	d80f      	bhi.n	80053c8 <_strtol_l.isra.0+0xa8>
 80053a8:	463c      	mov	r4, r7
 80053aa:	42a3      	cmp	r3, r4
 80053ac:	dd1b      	ble.n	80053e6 <_strtol_l.isra.0+0xc6>
 80053ae:	1c57      	adds	r7, r2, #1
 80053b0:	d007      	beq.n	80053c2 <_strtol_l.isra.0+0xa2>
 80053b2:	4581      	cmp	r9, r0
 80053b4:	d314      	bcc.n	80053e0 <_strtol_l.isra.0+0xc0>
 80053b6:	d101      	bne.n	80053bc <_strtol_l.isra.0+0x9c>
 80053b8:	45a2      	cmp	sl, r4
 80053ba:	db11      	blt.n	80053e0 <_strtol_l.isra.0+0xc0>
 80053bc:	fb00 4003 	mla	r0, r0, r3, r4
 80053c0:	2201      	movs	r2, #1
 80053c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053c6:	e7eb      	b.n	80053a0 <_strtol_l.isra.0+0x80>
 80053c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80053cc:	2f19      	cmp	r7, #25
 80053ce:	d801      	bhi.n	80053d4 <_strtol_l.isra.0+0xb4>
 80053d0:	3c37      	subs	r4, #55	@ 0x37
 80053d2:	e7ea      	b.n	80053aa <_strtol_l.isra.0+0x8a>
 80053d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80053d8:	2f19      	cmp	r7, #25
 80053da:	d804      	bhi.n	80053e6 <_strtol_l.isra.0+0xc6>
 80053dc:	3c57      	subs	r4, #87	@ 0x57
 80053de:	e7e4      	b.n	80053aa <_strtol_l.isra.0+0x8a>
 80053e0:	f04f 32ff 	mov.w	r2, #4294967295
 80053e4:	e7ed      	b.n	80053c2 <_strtol_l.isra.0+0xa2>
 80053e6:	1c53      	adds	r3, r2, #1
 80053e8:	d108      	bne.n	80053fc <_strtol_l.isra.0+0xdc>
 80053ea:	2322      	movs	r3, #34	@ 0x22
 80053ec:	f8ce 3000 	str.w	r3, [lr]
 80053f0:	4660      	mov	r0, ip
 80053f2:	f1b8 0f00 	cmp.w	r8, #0
 80053f6:	d0a0      	beq.n	800533a <_strtol_l.isra.0+0x1a>
 80053f8:	1e69      	subs	r1, r5, #1
 80053fa:	e006      	b.n	800540a <_strtol_l.isra.0+0xea>
 80053fc:	b106      	cbz	r6, 8005400 <_strtol_l.isra.0+0xe0>
 80053fe:	4240      	negs	r0, r0
 8005400:	f1b8 0f00 	cmp.w	r8, #0
 8005404:	d099      	beq.n	800533a <_strtol_l.isra.0+0x1a>
 8005406:	2a00      	cmp	r2, #0
 8005408:	d1f6      	bne.n	80053f8 <_strtol_l.isra.0+0xd8>
 800540a:	f8c8 1000 	str.w	r1, [r8]
 800540e:	e794      	b.n	800533a <_strtol_l.isra.0+0x1a>
 8005410:	08005614 	.word	0x08005614

08005414 <_strtol_r>:
 8005414:	f7ff bf84 	b.w	8005320 <_strtol_l.isra.0>

08005418 <_strtoul_l.isra.0>:
 8005418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800541c:	4e34      	ldr	r6, [pc, #208]	@ (80054f0 <_strtoul_l.isra.0+0xd8>)
 800541e:	4686      	mov	lr, r0
 8005420:	460d      	mov	r5, r1
 8005422:	4628      	mov	r0, r5
 8005424:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005428:	5d37      	ldrb	r7, [r6, r4]
 800542a:	f017 0708 	ands.w	r7, r7, #8
 800542e:	d1f8      	bne.n	8005422 <_strtoul_l.isra.0+0xa>
 8005430:	2c2d      	cmp	r4, #45	@ 0x2d
 8005432:	d110      	bne.n	8005456 <_strtoul_l.isra.0+0x3e>
 8005434:	782c      	ldrb	r4, [r5, #0]
 8005436:	2701      	movs	r7, #1
 8005438:	1c85      	adds	r5, r0, #2
 800543a:	f033 0010 	bics.w	r0, r3, #16
 800543e:	d115      	bne.n	800546c <_strtoul_l.isra.0+0x54>
 8005440:	2c30      	cmp	r4, #48	@ 0x30
 8005442:	d10d      	bne.n	8005460 <_strtoul_l.isra.0+0x48>
 8005444:	7828      	ldrb	r0, [r5, #0]
 8005446:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800544a:	2858      	cmp	r0, #88	@ 0x58
 800544c:	d108      	bne.n	8005460 <_strtoul_l.isra.0+0x48>
 800544e:	786c      	ldrb	r4, [r5, #1]
 8005450:	3502      	adds	r5, #2
 8005452:	2310      	movs	r3, #16
 8005454:	e00a      	b.n	800546c <_strtoul_l.isra.0+0x54>
 8005456:	2c2b      	cmp	r4, #43	@ 0x2b
 8005458:	bf04      	itt	eq
 800545a:	782c      	ldrbeq	r4, [r5, #0]
 800545c:	1c85      	addeq	r5, r0, #2
 800545e:	e7ec      	b.n	800543a <_strtoul_l.isra.0+0x22>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f6      	bne.n	8005452 <_strtoul_l.isra.0+0x3a>
 8005464:	2c30      	cmp	r4, #48	@ 0x30
 8005466:	bf14      	ite	ne
 8005468:	230a      	movne	r3, #10
 800546a:	2308      	moveq	r3, #8
 800546c:	f04f 38ff 	mov.w	r8, #4294967295
 8005470:	2600      	movs	r6, #0
 8005472:	fbb8 f8f3 	udiv	r8, r8, r3
 8005476:	fb03 f908 	mul.w	r9, r3, r8
 800547a:	ea6f 0909 	mvn.w	r9, r9
 800547e:	4630      	mov	r0, r6
 8005480:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005484:	f1bc 0f09 	cmp.w	ip, #9
 8005488:	d810      	bhi.n	80054ac <_strtoul_l.isra.0+0x94>
 800548a:	4664      	mov	r4, ip
 800548c:	42a3      	cmp	r3, r4
 800548e:	dd1e      	ble.n	80054ce <_strtoul_l.isra.0+0xb6>
 8005490:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005494:	d007      	beq.n	80054a6 <_strtoul_l.isra.0+0x8e>
 8005496:	4580      	cmp	r8, r0
 8005498:	d316      	bcc.n	80054c8 <_strtoul_l.isra.0+0xb0>
 800549a:	d101      	bne.n	80054a0 <_strtoul_l.isra.0+0x88>
 800549c:	45a1      	cmp	r9, r4
 800549e:	db13      	blt.n	80054c8 <_strtoul_l.isra.0+0xb0>
 80054a0:	fb00 4003 	mla	r0, r0, r3, r4
 80054a4:	2601      	movs	r6, #1
 80054a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054aa:	e7e9      	b.n	8005480 <_strtoul_l.isra.0+0x68>
 80054ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80054b0:	f1bc 0f19 	cmp.w	ip, #25
 80054b4:	d801      	bhi.n	80054ba <_strtoul_l.isra.0+0xa2>
 80054b6:	3c37      	subs	r4, #55	@ 0x37
 80054b8:	e7e8      	b.n	800548c <_strtoul_l.isra.0+0x74>
 80054ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80054be:	f1bc 0f19 	cmp.w	ip, #25
 80054c2:	d804      	bhi.n	80054ce <_strtoul_l.isra.0+0xb6>
 80054c4:	3c57      	subs	r4, #87	@ 0x57
 80054c6:	e7e1      	b.n	800548c <_strtoul_l.isra.0+0x74>
 80054c8:	f04f 36ff 	mov.w	r6, #4294967295
 80054cc:	e7eb      	b.n	80054a6 <_strtoul_l.isra.0+0x8e>
 80054ce:	1c73      	adds	r3, r6, #1
 80054d0:	d106      	bne.n	80054e0 <_strtoul_l.isra.0+0xc8>
 80054d2:	2322      	movs	r3, #34	@ 0x22
 80054d4:	f8ce 3000 	str.w	r3, [lr]
 80054d8:	4630      	mov	r0, r6
 80054da:	b932      	cbnz	r2, 80054ea <_strtoul_l.isra.0+0xd2>
 80054dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054e0:	b107      	cbz	r7, 80054e4 <_strtoul_l.isra.0+0xcc>
 80054e2:	4240      	negs	r0, r0
 80054e4:	2a00      	cmp	r2, #0
 80054e6:	d0f9      	beq.n	80054dc <_strtoul_l.isra.0+0xc4>
 80054e8:	b106      	cbz	r6, 80054ec <_strtoul_l.isra.0+0xd4>
 80054ea:	1e69      	subs	r1, r5, #1
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	e7f5      	b.n	80054dc <_strtoul_l.isra.0+0xc4>
 80054f0:	08005614 	.word	0x08005614

080054f4 <_strtoul_r>:
 80054f4:	f7ff bf90 	b.w	8005418 <_strtoul_l.isra.0>

080054f8 <_malloc_usable_size_r>:
 80054f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054fc:	1f18      	subs	r0, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bfbc      	itt	lt
 8005502:	580b      	ldrlt	r3, [r1, r0]
 8005504:	18c0      	addlt	r0, r0, r3
 8005506:	4770      	bx	lr

08005508 <_init>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr

08005514 <_fini>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr
