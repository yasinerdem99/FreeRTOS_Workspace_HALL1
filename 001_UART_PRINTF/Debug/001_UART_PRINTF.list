
001_UART_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004470  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004600  08004600  00005600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004684  08004684  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004684  08004684  00005684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800468c  0800468c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004694  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          000041fc  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004268  20004268  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132cb  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c93  00000000  00000000  00019367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  0001c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d55  00000000  00000000  0001d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238c1  00000000  00000000  0001de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135d1  00000000  00000000  0004174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5943  00000000  00000000  00054d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a662  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc0  00000000  00000000  0012a6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012f468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045e8 	.word	0x080045e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080045e8 	.word	0x080045e8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000088 	.word	0x20000088
 80004f0:	20000128 	.word	0x20000128

080004f4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	b29a      	uxth	r2, r3
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	4804      	ldr	r0, [pc, #16]	@ (800051c <_write+0x28>)
 800050c:	f001 fd24 	bl	8001f58 <HAL_UART_Transmit>
	return len;
 8000510:	687b      	ldr	r3, [r7, #4]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000328 	.word	0x20000328

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b08e      	sub	sp, #56	@ 0x38
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fae1 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f835 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8bb 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000532:	f000 f88f 	bl	8000654 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task2 */
  osThreadDef(task2, gorev2, osPriorityNormal, 0, 128);
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <main+0x68>)
 8000538:	f107 041c 	add.w	r4, r7, #28
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f002 f8dc 	bl	800270e <osThreadCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <main+0x6c>)
 800055a:	6013      	str	r3, [r2, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, gorev1, osPriorityIdle, 0, 128);
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <main+0x70>)
 800055e:	463c      	mov	r4, r7
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 800056e:	463b      	mov	r3, r7
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f8cb 	bl	800270e <osThreadCreate>
 8000578:	4603      	mov	r3, r0
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <main+0x74>)
 800057c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800057e:	f002 f8bf 	bl	8002700 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x62>
 8000586:	bf00      	nop
 8000588:	08004608 	.word	0x08004608
 800058c:	20000370 	.word	0x20000370
 8000590:	0800462c 	.word	0x0800462c
 8000594:	20000374 	.word	0x20000374

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fd14 	bl	8003fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <SystemClock_Config+0xb4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <SystemClock_Config+0xb4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <SystemClock_Config+0xb4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <SystemClock_Config+0xb8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <SystemClock_Config+0xb8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <SystemClock_Config+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd2f 	bl	800106c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000614:	f000 f894 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f000 ff92 	bl	800155c <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800063e:	f000 f87f 	bl	8000740 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	@ 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_USART2_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000660:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART2_UART_Init+0x4c>)
 800068c:	f001 fc14 	bl	8001eb8 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f853 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000328 	.word	0x20000328
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_GPIO_Init+0x30>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <gorev2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_gorev2 */
void gorev2(void const * argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	 /* uint8_t txt1[] = "Text from Task 01\r\n";
	  HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 500);
	    osDelay(500);*/

	  printf("1.YASIIN_123\r\n");
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <gorev2+0x1c>)
 80006e6:	f003 fb95 	bl	8003e14 <puts>
	  osDelay(500);
 80006ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ee:	f002 f85a 	bl	80027a6 <osDelay>
	  printf("1.YASIIN_123\r\n");
 80006f2:	bf00      	nop
 80006f4:	e7f6      	b.n	80006e4 <gorev2+0x8>
 80006f6:	bf00      	nop
 80006f8:	08004648 	.word	0x08004648

080006fc <gorev1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gorev1 */
void gorev1(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /*uint8_t txt1[] = "Text from Task 02\r\n";
	  	  HAL_UART_Transmit(&huart2, txt1, sizeof(txt1), 500);
	  	    osDelay(500);*/
	  printf("1.ERDEM\r\n");
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <gorev1+0x1c>)
 8000706:	f003 fb85 	bl	8003e14 <puts>
	  osDelay(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800070e:	f002 f84a 	bl	80027a6 <osDelay>
	  printf("1.ERDEM\r\n");
 8000712:	bf00      	nop
 8000714:	e7f6      	b.n	8000704 <gorev1+0x8>
 8000716:	bf00      	nop
 8000718:	08004658 	.word	0x08004658

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 f9ff 	bl	8000b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40010000 	.word	0x40010000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	4a11      	ldr	r2, [pc, #68]	@ (80007a0 <HAL_MspInit+0x54>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000760:	6453      	str	r3, [r2, #68]	@ 0x44
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <HAL_MspInit+0x54>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <HAL_MspInit+0x54>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	@ 0x40
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <HAL_MspInit+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 faa5 	bl	8000ce0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <HAL_UART_MspInit+0x84>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12b      	bne.n	800081e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a10      	ldr	r2, [pc, #64]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <HAL_UART_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fe:	230c      	movs	r3, #12
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080e:	2307      	movs	r3, #7
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <HAL_UART_MspInit+0x8c>)
 800081a:	f000 fa8b 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40004400 	.word	0x40004400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b2e      	ldr	r3, [pc, #184]	@ (8000904 <HAL_InitTick+0xd0>)
 800084a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084c:	4a2d      	ldr	r2, [pc, #180]	@ (8000904 <HAL_InitTick+0xd0>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6453      	str	r3, [r2, #68]	@ 0x44
 8000854:	4b2b      	ldr	r3, [pc, #172]	@ (8000904 <HAL_InitTick+0xd0>)
 8000856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000860:	f107 020c 	add.w	r2, r7, #12
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f856 	bl	800191c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000870:	f001 f840 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8000874:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000878:	4a23      	ldr	r2, [pc, #140]	@ (8000908 <HAL_InitTick+0xd4>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0c9b      	lsrs	r3, r3, #18
 8000880:	3b01      	subs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000884:	4b21      	ldr	r3, [pc, #132]	@ (800090c <HAL_InitTick+0xd8>)
 8000886:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <HAL_InitTick+0xdc>)
 8000888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <HAL_InitTick+0xd8>)
 800088c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000890:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000892:	4a1e      	ldr	r2, [pc, #120]	@ (800090c <HAL_InitTick+0xd8>)
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_InitTick+0xd8>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <HAL_InitTick+0xd8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	@ (800090c <HAL_InitTick+0xd8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <HAL_InitTick+0xd8>)
 80008ac:	f001 f868 	bl	8001980 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d11b      	bne.n	80008f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008be:	4813      	ldr	r0, [pc, #76]	@ (800090c <HAL_InitTick+0xd8>)
 80008c0:	f001 f8b8 	bl	8001a34 <HAL_TIM_Base_Start_IT>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d111      	bne.n	80008f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d2:	2019      	movs	r0, #25
 80008d4:	f000 fa20 	bl	8000d18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b0f      	cmp	r3, #15
 80008dc:	d808      	bhi.n	80008f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80008de:	2200      	movs	r2, #0
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2019      	movs	r0, #25
 80008e4:	f000 f9fc 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <HAL_InitTick+0xe0>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e002      	b.n	80008f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3730      	adds	r7, #48	@ 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	431bde83 	.word	0x431bde83
 800090c:	20000378 	.word	0x20000378
 8000910:	40010000 	.word	0x40010000
 8000914:	20000004 	.word	0x20000004

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <MemManage_Handler+0x4>

08000930 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <UsageFault_Handler+0x4>

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000954:	4802      	ldr	r0, [pc, #8]	@ (8000960 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000956:	f001 f8dd 	bl	8001b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000378 	.word	0x20000378

08000964 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e00a      	b.n	800098c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000976:	f3af 8000 	nop.w
 800097a:	4601      	mov	r1, r0
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	60ba      	str	r2, [r7, #8]
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	3301      	adds	r3, #1
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	dbf0      	blt.n	8000976 <_read+0x12>
  }

  return len;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <_close>:
  }
  return len;
}

int _close(int file)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c6:	605a      	str	r2, [r3, #4]
  return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_isatty>:

int _isatty(int file)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <_sbrk+0x5c>)
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <_sbrk+0x60>)
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_sbrk+0x64>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <_sbrk+0x68>)
 8000a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d207      	bcs.n	8000a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a38:	f003 fb70 	bl	800411c <__errno>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	220c      	movs	r2, #12
 8000a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	e009      	b.n	8000a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <_sbrk+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20020000 	.word	0x20020000
 8000a68:	00000400 	.word	0x00000400
 8000a6c:	200003c0 	.word	0x200003c0
 8000a70:	20004268 	.word	0x20004268

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f003 fb2f 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd29 	bl	8000520 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000adc:	08004694 	.word	0x08004694
  ldr r2, =_sbss
 8000ae0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ae4:	20004268 	.word	0x20004268

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f8d8 	bl	8000cca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	200f      	movs	r0, #15
 8000b1c:	f7ff fe8a 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe14 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	200003c4 	.word	0x200003c4

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200003c4 	.word	0x200003c4

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ff4c 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf2:	f7ff ff61 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000cf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f7ff ffb1 	bl	8000c64 <NVIC_EncodePriority>
 8000d02:	4602      	mov	r2, r0
 8000d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff80 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff54 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e16b      	b.n	8001028 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 815a 	bne.w	8001022 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d017      	beq.n	8000e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d123      	bne.n	8000e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0203 	and.w	r2, r3, #3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80b4 	beq.w	8001022 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b60      	ldr	r3, [pc, #384]	@ (8001040 <HAL_GPIO_Init+0x30c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8001040 <HAL_GPIO_Init+0x30c>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eca:	4b5d      	ldr	r3, [pc, #372]	@ (8001040 <HAL_GPIO_Init+0x30c>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8001044 <HAL_GPIO_Init+0x310>)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a52      	ldr	r2, [pc, #328]	@ (8001048 <HAL_GPIO_Init+0x314>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d02b      	beq.n	8000f5a <HAL_GPIO_Init+0x226>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a51      	ldr	r2, [pc, #324]	@ (800104c <HAL_GPIO_Init+0x318>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d025      	beq.n	8000f56 <HAL_GPIO_Init+0x222>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a50      	ldr	r2, [pc, #320]	@ (8001050 <HAL_GPIO_Init+0x31c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01f      	beq.n	8000f52 <HAL_GPIO_Init+0x21e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4f      	ldr	r2, [pc, #316]	@ (8001054 <HAL_GPIO_Init+0x320>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x21a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001058 <HAL_GPIO_Init+0x324>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x216>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4d      	ldr	r2, [pc, #308]	@ (800105c <HAL_GPIO_Init+0x328>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x212>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001060 <HAL_GPIO_Init+0x32c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x20e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4b      	ldr	r2, [pc, #300]	@ (8001064 <HAL_GPIO_Init+0x330>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x20a>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00e      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f3e:	2308      	movs	r3, #8
 8000f40:	e00c      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00a      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f46:	2305      	movs	r3, #5
 8000f48:	e008      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e004      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_Init+0x228>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f002 0203 	and.w	r2, r2, #3
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	4093      	lsls	r3, r2
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f6c:	4935      	ldr	r1, [pc, #212]	@ (8001044 <HAL_GPIO_Init+0x310>)
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9e:	4a32      	ldr	r2, [pc, #200]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc8:	4a27      	ldr	r2, [pc, #156]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <HAL_GPIO_Init+0x334>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800101c:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <HAL_GPIO_Init+0x334>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	f67f ae90 	bls.w	8000d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40021400 	.word	0x40021400
 8001060:	40021800 	.word	0x40021800
 8001064:	40021c00 	.word	0x40021c00
 8001068:	40013c00 	.word	0x40013c00

0800106c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e267      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d075      	beq.n	8001176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800108a:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d00c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d112      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b82      	ldr	r3, [pc, #520]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4b7e      	ldr	r3, [pc, #504]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d157      	bne.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e242      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x74>
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a75      	ldr	r2, [pc, #468]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6f      	ldr	r2, [pc, #444]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6c      	ldr	r2, [pc, #432]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 8001104:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a68      	ldr	r2, [pc, #416]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a65      	ldr	r2, [pc, #404]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fd18 	bl	8000b58 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fd14 	bl	8000b58 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	@ 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e207      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xc0>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fd04 	bl	8000b58 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fd00 	bl	8000b58 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	@ 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1f3      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b51      	ldr	r3, [pc, #324]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001182:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b44      	ldr	r3, [pc, #272]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1c7      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4937      	ldr	r1, [pc, #220]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcb9 	bl	8000b58 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fcb5 	bl	8000b58 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1a8      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4925      	ldr	r1, [pc, #148]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <HAL_RCC_OscConfig+0x244>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc98 	bl	8000b58 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc94 	bl	8000b58 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e187      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d016      	beq.n	800128c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fc78 	bl	8000b58 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc74 	bl	8000b58 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e167      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_RCC_OscConfig+0x240>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x200>
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_OscConfig+0x248>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fc61 	bl	8000b58 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	e00e      	b.n	80012b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fc5d 	bl	8000b58 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d907      	bls.n	80012b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e150      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b88      	ldr	r3, [pc, #544]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ea      	bne.n	800129a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8097 	beq.w	8001400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b81      	ldr	r3, [pc, #516]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a7c      	ldr	r2, [pc, #496]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b7a      	ldr	r3, [pc, #488]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b77      	ldr	r3, [pc, #476]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a73      	ldr	r2, [pc, #460]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc1d 	bl	8000b58 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fc19 	bl	8000b58 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e10c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b6a      	ldr	r3, [pc, #424]	@ (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x2ea>
 8001348:	4b64      	ldr	r3, [pc, #400]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134c:	4a63      	ldr	r2, [pc, #396]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	@ 0x70
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x30c>
 800135e:	4b5f      	ldr	r3, [pc, #380]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6713      	str	r3, [r2, #112]	@ 0x70
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136e:	4a5b      	ldr	r2, [pc, #364]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6713      	str	r3, [r2, #112]	@ 0x70
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137c:	4a57      	ldr	r2, [pc, #348]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	@ 0x70
 8001384:	4b55      	ldr	r3, [pc, #340]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001388:	4a54      	ldr	r2, [pc, #336]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbde 	bl	8000b58 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbda 	bl	8000b58 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0cb      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ee      	beq.n	80013a0 <HAL_RCC_OscConfig+0x334>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbc8 	bl	8000b58 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fbc4 	bl	8000b58 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0b5      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ee      	bne.n	80013cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a38      	ldr	r2, [pc, #224]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a1 	beq.w	800154c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140a:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d05c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d141      	bne.n	80014a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb98 	bl	8000b58 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb94 	bl	8000b58 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e087      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	041b      	lsls	r3, r3, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb6d 	bl	8000b58 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb69 	bl	8000b58 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e05c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x416>
 80014a0:	e054      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb56 	bl	8000b58 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb52 	bl	8000b58 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e045      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
 80014ce:	e03d      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e038      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_RCC_OscConfig+0x4ec>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d028      	beq.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d121      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d11a      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800151e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	4293      	cmp	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa84 	bl	8000b58 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fa80 	bl	8000b58 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f896 	bl	8000834 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	0800466c 	.word	0x0800466c
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b090      	sub	sp, #64	@ 0x40
 800172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001740:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d00d      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 800174c:	2b08      	cmp	r3, #8
 800174e:	f200 80a1 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x34>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x3a>
 800175a:	e09b      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 800175e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001760:	e09b      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001764:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001766:	e098      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001772:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	2200      	movs	r2, #0
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	627a      	str	r2, [r7, #36]	@ 0x24
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001790:	2100      	movs	r1, #0
 8001792:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001794:	fb03 f201 	mul.w	r2, r3, r1
 8001798:	2300      	movs	r3, #0
 800179a:	fb00 f303 	mul.w	r3, r0, r3
 800179e:	4413      	add	r3, r2
 80017a0:	4a43      	ldr	r2, [pc, #268]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a2:	fba0 1202 	umull	r1, r2, r0, r2
 80017a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017a8:	460a      	mov	r2, r1
 80017aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ae:	4413      	add	r3, r2
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b4:	2200      	movs	r2, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	61fa      	str	r2, [r7, #28]
 80017ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017c2:	f7fe fd05 	bl	80001d0 <__aeabi_uldivmod>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4613      	mov	r3, r2
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017ce:	e053      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	617a      	str	r2, [r7, #20]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e2:	f04f 0b00 	mov.w	fp, #0
 80017e6:	4652      	mov	r2, sl
 80017e8:	465b      	mov	r3, fp
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0159      	lsls	r1, r3, #5
 80017f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f8:	0150      	lsls	r0, r2, #5
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001802:	eb63 090b 	sbc.w	r9, r3, fp
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181a:	ebb2 0408 	subs.w	r4, r2, r8
 800181e:	eb63 0509 	sbc.w	r5, r3, r9
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	00eb      	lsls	r3, r5, #3
 800182c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001830:	00e2      	lsls	r2, r4, #3
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	eb14 030a 	adds.w	r3, r4, sl
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	eb45 030b 	adc.w	r3, r5, fp
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184e:	4629      	mov	r1, r5
 8001850:	028b      	lsls	r3, r1, #10
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001858:	4621      	mov	r1, r4
 800185a:	028a      	lsls	r2, r1, #10
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	f7fe fcb0 	bl	80001d0 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001896:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800189c:	4618      	mov	r0, r3
 800189e:	3740      	adds	r7, #64	@ 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	017d7840 	.word	0x017d7840

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	@ (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	0800467c 	.word	0x0800467c

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	@ (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	0800467c 	.word	0x0800467c

0800191c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	220f      	movs	r2, #15
 800192a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <HAL_RCC_GetClockConfig+0x60>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e041      	b.n	8001a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f839 	bl	8001a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f9c0 	bl	8001d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e04e      	b.n	8001aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a23      	ldr	r2, [pc, #140]	@ (8001af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d022      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a76:	d01d      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <HAL_TIM_Base_Start_IT+0xc8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d018      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	@ (8001b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d013      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00e      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d009      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	@ (8001b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d004      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d111      	bne.n	8001ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d010      	beq.n	8001ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	e007      	b.n	8001ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800
 8001b04:	40000c00 	.word	0x40000c00
 8001b08:	40010400 	.word	0x40010400
 8001b0c:	40014000 	.word	0x40014000
 8001b10:	40001800 	.word	0x40001800

08001b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8d2 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8c4 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8d5 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0204 	mvn.w	r2, #4
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8ac 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f89e 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8af 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0208 	mvn.w	r2, #8
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f886 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f878 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f889 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d020      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0210 	mvn.w	r2, #16
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2208      	movs	r2, #8
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f860 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f852 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f863 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00c      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fd4e 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f900 	bl	8001ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f834 	bl	8001d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0220 	mvn.w	r2, #32
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8d2 	bl	8001e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a43      	ldr	r2, [pc, #268]	@ (8001e64 <TIM_Base_SetConfig+0x120>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d013      	beq.n	8001d84 <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d62:	d00f      	beq.n	8001d84 <TIM_Base_SetConfig+0x40>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	@ (8001e68 <TIM_Base_SetConfig+0x124>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00b      	beq.n	8001d84 <TIM_Base_SetConfig+0x40>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e6c <TIM_Base_SetConfig+0x128>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <TIM_Base_SetConfig+0x40>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3e      	ldr	r2, [pc, #248]	@ (8001e70 <TIM_Base_SetConfig+0x12c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <TIM_Base_SetConfig+0x40>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e74 <TIM_Base_SetConfig+0x130>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d108      	bne.n	8001d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <TIM_Base_SetConfig+0x120>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d02b      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da4:	d027      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e68 <TIM_Base_SetConfig+0x124>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d023      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e6c <TIM_Base_SetConfig+0x128>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2d      	ldr	r2, [pc, #180]	@ (8001e70 <TIM_Base_SetConfig+0x12c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01b      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e74 <TIM_Base_SetConfig+0x130>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d017      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e78 <TIM_Base_SetConfig+0x134>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e7c <TIM_Base_SetConfig+0x138>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00f      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <TIM_Base_SetConfig+0x13c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a28      	ldr	r2, [pc, #160]	@ (8001e84 <TIM_Base_SetConfig+0x140>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <TIM_Base_SetConfig+0x144>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0xb2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <TIM_Base_SetConfig+0x148>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d108      	bne.n	8001e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a0e      	ldr	r2, [pc, #56]	@ (8001e64 <TIM_Base_SetConfig+0x120>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <TIM_Base_SetConfig+0xf2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a10      	ldr	r2, [pc, #64]	@ (8001e74 <TIM_Base_SetConfig+0x130>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d103      	bne.n	8001e3e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40010400 	.word	0x40010400
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40014400 	.word	0x40014400
 8001e80:	40014800 	.word	0x40014800
 8001e84:	40001800 	.word	0x40001800
 8001e88:	40001c00 	.word	0x40001c00
 8001e8c:	40002000 	.word	0x40002000

08001e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e042      	b.n	8001f50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fc60 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	@ 0x24
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f973 	bl	80021e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d175      	bne.n	8002064 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_UART_Transmit+0x2c>
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e06e      	b.n	8002066 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2221      	movs	r2, #33	@ 0x21
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f96:	f7fe fddf 	bl	8000b58 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_UART_Transmit+0x6c>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e003      	b.n	8001fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fcc:	e02e      	b.n	800202c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f848 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03a      	b.n	8002066 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cb      	bne.n	8001fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	@ 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f814 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e006      	b.n	8002066 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207e:	e03b      	b.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d037      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7fe fd66 	bl	8000b58 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	6a3a      	ldr	r2, [r7, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <UART_WaitOnFlagUntilTimeout+0x30>
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e03a      	b.n	8002118 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d023      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b80      	cmp	r3, #128	@ 0x80
 80020b4:	d020      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b40      	cmp	r3, #64	@ 0x40
 80020ba:	d01d      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d116      	bne.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f81d 	bl	8002120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2208      	movs	r2, #8
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e00f      	b.n	8002118 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	429a      	cmp	r2, r3
 8002114:	d0b4      	beq.n	8002080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002120:	b480      	push	{r7}
 8002122:	b095      	sub	sp, #84	@ 0x54
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002132:	e853 3f00 	ldrex	r3, [r3]
 8002136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002148:	643a      	str	r2, [r7, #64]	@ 0x40
 800214a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800214e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002150:	e841 2300 	strex	r3, r2, [r1]
 8002154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e5      	bne.n	8002128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	e853 3f00 	ldrex	r3, [r3]
 800216a:	61fb      	str	r3, [r7, #28]
   return(result);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800217c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	2b01      	cmp	r3, #1
 8002196:	d119      	bne.n	80021cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	e853 3f00 	ldrex	r3, [r3]
 80021a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 0310 	bic.w	r3, r3, #16
 80021ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021b8:	61ba      	str	r2, [r7, #24]
 80021ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	613b      	str	r3, [r7, #16]
   return(result);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021da:	bf00      	nop
 80021dc:	3754      	adds	r7, #84	@ 0x54
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b0c0      	sub	sp, #256	@ 0x100
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	ea40 0301 	orr.w	r3, r0, r1
 8002210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	431a      	orrs	r2, r3
 8002220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	431a      	orrs	r2, r3
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002240:	f021 010c 	bic.w	r1, r1, #12
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800224e:	430b      	orrs	r3, r1
 8002250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002262:	6999      	ldr	r1, [r3, #24]
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	ea40 0301 	orr.w	r3, r0, r1
 800226e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <UART_SetConfig+0x2cc>)
 8002278:	429a      	cmp	r2, r3
 800227a:	d005      	beq.n	8002288 <UART_SetConfig+0xa0>
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b8d      	ldr	r3, [pc, #564]	@ (80024b8 <UART_SetConfig+0x2d0>)
 8002284:	429a      	cmp	r2, r3
 8002286:	d104      	bne.n	8002292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002288:	f7ff fb34 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 800228c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002290:	e003      	b.n	800229a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002292:	f7ff fb1b 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8002296:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800229a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022a4:	f040 810c 	bne.w	80024c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80022b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80022b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80022ba:	4622      	mov	r2, r4
 80022bc:	462b      	mov	r3, r5
 80022be:	1891      	adds	r1, r2, r2
 80022c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80022c2:	415b      	adcs	r3, r3
 80022c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022ca:	4621      	mov	r1, r4
 80022cc:	eb12 0801 	adds.w	r8, r2, r1
 80022d0:	4629      	mov	r1, r5
 80022d2:	eb43 0901 	adc.w	r9, r3, r1
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ea:	4690      	mov	r8, r2
 80022ec:	4699      	mov	r9, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	eb18 0303 	adds.w	r3, r8, r3
 80022f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80022f8:	462b      	mov	r3, r5
 80022fa:	eb49 0303 	adc.w	r3, r9, r3
 80022fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800230e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002316:	460b      	mov	r3, r1
 8002318:	18db      	adds	r3, r3, r3
 800231a:	653b      	str	r3, [r7, #80]	@ 0x50
 800231c:	4613      	mov	r3, r2
 800231e:	eb42 0303 	adc.w	r3, r2, r3
 8002322:	657b      	str	r3, [r7, #84]	@ 0x54
 8002324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800232c:	f7fd ff50 	bl	80001d0 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <UART_SetConfig+0x2d4>)
 8002336:	fba3 2302 	umull	r2, r3, r3, r2
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	011c      	lsls	r4, r3, #4
 800233e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002342:	2200      	movs	r2, #0
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002348:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800234c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002350:	4642      	mov	r2, r8
 8002352:	464b      	mov	r3, r9
 8002354:	1891      	adds	r1, r2, r2
 8002356:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002358:	415b      	adcs	r3, r3
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800235c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002360:	4641      	mov	r1, r8
 8002362:	eb12 0a01 	adds.w	sl, r2, r1
 8002366:	4649      	mov	r1, r9
 8002368:	eb43 0b01 	adc.w	fp, r3, r1
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800237c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002380:	4692      	mov	sl, r2
 8002382:	469b      	mov	fp, r3
 8002384:	4643      	mov	r3, r8
 8002386:	eb1a 0303 	adds.w	r3, sl, r3
 800238a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800238e:	464b      	mov	r3, r9
 8002390:	eb4b 0303 	adc.w	r3, fp, r3
 8002394:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80023a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80023ac:	460b      	mov	r3, r1
 80023ae:	18db      	adds	r3, r3, r3
 80023b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80023b2:	4613      	mov	r3, r2
 80023b4:	eb42 0303 	adc.w	r3, r2, r3
 80023b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80023c2:	f7fd ff05 	bl	80001d0 <__aeabi_uldivmod>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	4b3b      	ldr	r3, [pc, #236]	@ (80024bc <UART_SetConfig+0x2d4>)
 80023ce:	fba3 2301 	umull	r2, r3, r3, r1
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2264      	movs	r2, #100	@ 0x64
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	1acb      	subs	r3, r1, r3
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80023e2:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <UART_SetConfig+0x2d4>)
 80023e4:	fba3 2302 	umull	r2, r3, r3, r2
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80023f0:	441c      	add	r4, r3
 80023f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023f6:	2200      	movs	r2, #0
 80023f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002404:	4642      	mov	r2, r8
 8002406:	464b      	mov	r3, r9
 8002408:	1891      	adds	r1, r2, r2
 800240a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800240c:	415b      	adcs	r3, r3
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002414:	4641      	mov	r1, r8
 8002416:	1851      	adds	r1, r2, r1
 8002418:	6339      	str	r1, [r7, #48]	@ 0x30
 800241a:	4649      	mov	r1, r9
 800241c:	414b      	adcs	r3, r1
 800241e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800242c:	4659      	mov	r1, fp
 800242e:	00cb      	lsls	r3, r1, #3
 8002430:	4651      	mov	r1, sl
 8002432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002436:	4651      	mov	r1, sl
 8002438:	00ca      	lsls	r2, r1, #3
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	4603      	mov	r3, r0
 8002440:	4642      	mov	r2, r8
 8002442:	189b      	adds	r3, r3, r2
 8002444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002448:	464b      	mov	r3, r9
 800244a:	460a      	mov	r2, r1
 800244c:	eb42 0303 	adc.w	r3, r2, r3
 8002450:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002460:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002468:	460b      	mov	r3, r1
 800246a:	18db      	adds	r3, r3, r3
 800246c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246e:	4613      	mov	r3, r2
 8002470:	eb42 0303 	adc.w	r3, r2, r3
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800247a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800247e:	f7fd fea7 	bl	80001d0 <__aeabi_uldivmod>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <UART_SetConfig+0x2d4>)
 8002488:	fba3 1302 	umull	r1, r3, r3, r2
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	2164      	movs	r1, #100	@ 0x64
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	3332      	adds	r3, #50	@ 0x32
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <UART_SetConfig+0x2d4>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	f003 0207 	and.w	r2, r3, #7
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4422      	add	r2, r4
 80024ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024b0:	e106      	b.n	80026c0 <UART_SetConfig+0x4d8>
 80024b2:	bf00      	nop
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40011400 	.word	0x40011400
 80024bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024c4:	2200      	movs	r2, #0
 80024c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80024ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80024d2:	4642      	mov	r2, r8
 80024d4:	464b      	mov	r3, r9
 80024d6:	1891      	adds	r1, r2, r2
 80024d8:	6239      	str	r1, [r7, #32]
 80024da:	415b      	adcs	r3, r3
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024e2:	4641      	mov	r1, r8
 80024e4:	1854      	adds	r4, r2, r1
 80024e6:	4649      	mov	r1, r9
 80024e8:	eb43 0501 	adc.w	r5, r3, r1
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	00eb      	lsls	r3, r5, #3
 80024f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024fa:	00e2      	lsls	r2, r4, #3
 80024fc:	4614      	mov	r4, r2
 80024fe:	461d      	mov	r5, r3
 8002500:	4643      	mov	r3, r8
 8002502:	18e3      	adds	r3, r4, r3
 8002504:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002508:	464b      	mov	r3, r9
 800250a:	eb45 0303 	adc.w	r3, r5, r3
 800250e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800251e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800252e:	4629      	mov	r1, r5
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	4621      	mov	r1, r4
 8002534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002538:	4621      	mov	r1, r4
 800253a:	008a      	lsls	r2, r1, #2
 800253c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002540:	f7fd fe46 	bl	80001d0 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4b60      	ldr	r3, [pc, #384]	@ (80026cc <UART_SetConfig+0x4e4>)
 800254a:	fba3 2302 	umull	r2, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	011c      	lsls	r4, r3, #4
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800255c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	61b9      	str	r1, [r7, #24]
 800256c:	415b      	adcs	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002574:	4641      	mov	r1, r8
 8002576:	1851      	adds	r1, r2, r1
 8002578:	6139      	str	r1, [r7, #16]
 800257a:	4649      	mov	r1, r9
 800257c:	414b      	adcs	r3, r1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800258c:	4659      	mov	r1, fp
 800258e:	00cb      	lsls	r3, r1, #3
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002596:	4651      	mov	r1, sl
 8002598:	00ca      	lsls	r2, r1, #3
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	4642      	mov	r2, r8
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80025a8:	464b      	mov	r3, r9
 80025aa:	460a      	mov	r2, r1
 80025ac:	eb42 0303 	adc.w	r3, r2, r3
 80025b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80025cc:	4649      	mov	r1, r9
 80025ce:	008b      	lsls	r3, r1, #2
 80025d0:	4641      	mov	r1, r8
 80025d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d6:	4641      	mov	r1, r8
 80025d8:	008a      	lsls	r2, r1, #2
 80025da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80025de:	f7fd fdf7 	bl	80001d0 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	4b38      	ldr	r3, [pc, #224]	@ (80026cc <UART_SetConfig+0x4e4>)
 80025ea:	fba3 2301 	umull	r2, r3, r3, r1
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2264      	movs	r2, #100	@ 0x64
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	1acb      	subs	r3, r1, r3
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	@ 0x32
 80025fc:	4a33      	ldr	r2, [pc, #204]	@ (80026cc <UART_SetConfig+0x4e4>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002608:	441c      	add	r4, r3
 800260a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800260e:	2200      	movs	r2, #0
 8002610:	673b      	str	r3, [r7, #112]	@ 0x70
 8002612:	677a      	str	r2, [r7, #116]	@ 0x74
 8002614:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002618:	4642      	mov	r2, r8
 800261a:	464b      	mov	r3, r9
 800261c:	1891      	adds	r1, r2, r2
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	415b      	adcs	r3, r3
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002628:	4641      	mov	r1, r8
 800262a:	1851      	adds	r1, r2, r1
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	4649      	mov	r1, r9
 8002630:	414b      	adcs	r3, r1
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002640:	4659      	mov	r1, fp
 8002642:	00cb      	lsls	r3, r1, #3
 8002644:	4651      	mov	r1, sl
 8002646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800264a:	4651      	mov	r1, sl
 800264c:	00ca      	lsls	r2, r1, #3
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	4603      	mov	r3, r0
 8002654:	4642      	mov	r2, r8
 8002656:	189b      	adds	r3, r3, r2
 8002658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800265a:	464b      	mov	r3, r9
 800265c:	460a      	mov	r2, r1
 800265e:	eb42 0303 	adc.w	r3, r2, r3
 8002662:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	663b      	str	r3, [r7, #96]	@ 0x60
 800266e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800267c:	4649      	mov	r1, r9
 800267e:	008b      	lsls	r3, r1, #2
 8002680:	4641      	mov	r1, r8
 8002682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002686:	4641      	mov	r1, r8
 8002688:	008a      	lsls	r2, r1, #2
 800268a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800268e:	f7fd fd9f 	bl	80001d0 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <UART_SetConfig+0x4e4>)
 8002698:	fba3 1302 	umull	r1, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2164      	movs	r1, #100	@ 0x64
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	3332      	adds	r3, #50	@ 0x32
 80026aa:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <UART_SetConfig+0x4e4>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 020f 	and.w	r2, r3, #15
 80026b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4422      	add	r2, r4
 80026be:	609a      	str	r2, [r3, #8]
}
 80026c0:	bf00      	nop
 80026c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80026c6:	46bd      	mov	sp, r7
 80026c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026cc:	51eb851f 	.word	0x51eb851f

080026d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e2:	2b84      	cmp	r3, #132	@ 0x84
 80026e4:	d005      	beq.n	80026f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	3303      	adds	r3, #3
 80026f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002704:	f000 fafc 	bl	8002d00 <vTaskStartScheduler>
  
  return osOK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}

0800270e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800270e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002710:	b089      	sub	sp, #36	@ 0x24
 8002712:	af04      	add	r7, sp, #16
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <osThreadCreate+0x54>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685c      	ldr	r4, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691e      	ldr	r6, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffc8 	bl	80026d0 <makeFreeRtosPriority>
 8002740:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800274a:	9202      	str	r2, [sp, #8]
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	9100      	str	r1, [sp, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4632      	mov	r2, r6
 8002754:	4629      	mov	r1, r5
 8002756:	4620      	mov	r0, r4
 8002758:	f000 f8ed 	bl	8002936 <xTaskCreateStatic>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e01c      	b.n	800279c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685c      	ldr	r4, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800276e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ffaa 	bl	80026d0 <makeFreeRtosPriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	9200      	str	r2, [sp, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4632      	mov	r2, r6
 800278a:	4629      	mov	r1, r5
 800278c:	4620      	mov	r0, r4
 800278e:	f000 f932 	bl	80029f6 <xTaskCreate>
 8002792:	4603      	mov	r3, r0
 8002794:	2b01      	cmp	r3, #1
 8002796:	d001      	beq.n	800279c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <osDelay+0x16>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	e000      	b.n	80027be <osDelay+0x18>
 80027bc:	2301      	movs	r3, #1
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fa68 	bl	8002c94 <vTaskDelay>
  
  return osOK;
 80027c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0208 	add.w	r2, r3, #8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f103 0208 	add.w	r2, r3, #8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d103      	bne.n	8002890 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e00c      	b.n	80028aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3308      	adds	r3, #8
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e002      	b.n	800289e <vListInsert+0x2e>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d2f6      	bcs.n	8002898 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	601a      	str	r2, [r3, #0]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d103      	bne.n	8002916 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002936:	b580      	push	{r7, lr}
 8002938:	b08e      	sub	sp, #56	@ 0x38
 800293a:	af04      	add	r7, sp, #16
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	e7fd      	b.n	800295e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61fb      	str	r3, [r7, #28]
}
 800297a:	bf00      	nop
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002980:	23a0      	movs	r3, #160	@ 0xa0
 8002982:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2ba0      	cmp	r3, #160	@ 0xa0
 8002988:	d00b      	beq.n	80029a2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	61bb      	str	r3, [r7, #24]
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80029a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d01e      	beq.n	80029e8 <xTaskCreateStatic+0xb2>
 80029aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029c2:	2300      	movs	r3, #0
 80029c4:	9303      	str	r3, [sp, #12]
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f850 	bl	8002a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e2:	f000 f8ed 	bl	8002bc0 <prvAddNewTaskToReadyList>
 80029e6:	e001      	b.n	80029ec <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029ec:	697b      	ldr	r3, [r7, #20]
	}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3728      	adds	r7, #40	@ 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b08c      	sub	sp, #48	@ 0x30
 80029fa:	af04      	add	r7, sp, #16
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fefc 	bl	8003808 <pvPortMalloc>
 8002a10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a18:	20a0      	movs	r0, #160	@ 0xa0
 8002a1a:	f000 fef5 	bl	8003808 <pvPortMalloc>
 8002a1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a2c:	e005      	b.n	8002a3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f000 ffb8 	bl	80039a4 <vPortFree>
 8002a34:	e001      	b.n	8002a3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d017      	beq.n	8002a70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9303      	str	r3, [sp, #12]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	9302      	str	r3, [sp, #8]
 8002a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f80e 	bl	8002a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a64:	69f8      	ldr	r0, [r7, #28]
 8002a66:	f000 f8ab 	bl	8002bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	e002      	b.n	8002a76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a70:	f04f 33ff 	mov.w	r3, #4294967295
 8002a74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a76:	69bb      	ldr	r3, [r7, #24]
	}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	617b      	str	r3, [r7, #20]
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	e7fd      	b.n	8002ac6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01f      	beq.n	8002b10 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	e012      	b.n	8002afc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	7819      	ldrb	r1, [r3, #0]
 8002ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3334      	adds	r3, #52	@ 0x34
 8002ae6:	460a      	mov	r2, r1
 8002ae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d9e9      	bls.n	8002ad6 <prvInitialiseNewTask+0x56>
 8002b02:	e000      	b.n	8002b06 <prvInitialiseNewTask+0x86>
			{
				break;
 8002b04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b0e:	e003      	b.n	8002b18 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d901      	bls.n	8002b22 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b1e:	2306      	movs	r3, #6
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	2200      	movs	r2, #0
 8002b32:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	3304      	adds	r3, #4
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fe68 	bl	800280e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	3318      	adds	r3, #24
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fe63 	bl	800280e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	f1c3 0207 	rsb	r2, r3, #7
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	334c      	adds	r3, #76	@ 0x4c
 8002b72:	224c      	movs	r2, #76	@ 0x4c
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fa2c 	bl	8003fd4 <memset>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <prvInitialiseNewTask+0x134>)
 8002b80:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <prvInitialiseNewTask+0x138>)
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <prvInitialiseNewTask+0x13c>)
 8002b8c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	69b8      	ldr	r0, [r7, #24]
 8002b94:	f000 fc2a 	bl	80033ec <pxPortInitialiseStack>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002baa:	bf00      	nop
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000411c 	.word	0x2000411c
 8002bb8:	20004184 	.word	0x20004184
 8002bbc:	200041ec 	.word	0x200041ec

08002bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bc8:	f000 fd3e 	bl	8003648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8002c78 <prvAddNewTaskToReadyList+0xb8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a29      	ldr	r2, [pc, #164]	@ (8002c78 <prvAddNewTaskToReadyList+0xb8>)
 8002bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <prvAddNewTaskToReadyList+0xbc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bde:	4a27      	ldr	r2, [pc, #156]	@ (8002c7c <prvAddNewTaskToReadyList+0xbc>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be4:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <prvAddNewTaskToReadyList+0xb8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d110      	bne.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bec:	f000 fad4 	bl	8003198 <prvInitialiseTaskLists>
 8002bf0:	e00d      	b.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bf2:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <prvAddNewTaskToReadyList+0xc0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bfa:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <prvAddNewTaskToReadyList+0xbc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d802      	bhi.n	8002c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <prvAddNewTaskToReadyList+0xbc>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <prvAddNewTaskToReadyList+0xc4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <prvAddNewTaskToReadyList+0xc4>)
 8002c16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <prvAddNewTaskToReadyList+0xc8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <prvAddNewTaskToReadyList+0xc8>)
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4a15      	ldr	r2, [pc, #84]	@ (8002c8c <prvAddNewTaskToReadyList+0xcc>)
 8002c38:	441a      	add	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4610      	mov	r0, r2
 8002c42:	f7ff fdf1 	bl	8002828 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c46:	f000 fd31 	bl	80036ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <prvAddNewTaskToReadyList+0xc0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00e      	beq.n	8002c70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <prvAddNewTaskToReadyList+0xbc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d207      	bcs.n	8002c70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <prvAddNewTaskToReadyList+0xd0>)
 8002c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200004c8 	.word	0x200004c8
 8002c7c:	200003c8 	.word	0x200003c8
 8002c80:	200004d4 	.word	0x200004d4
 8002c84:	200004e4 	.word	0x200004e4
 8002c88:	200004d0 	.word	0x200004d0
 8002c8c:	200003cc 	.word	0x200003cc
 8002c90:	e000ed04 	.word	0xe000ed04

08002c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d018      	beq.n	8002cd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <vTaskDelay+0x64>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <vTaskDelay+0x32>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	60bb      	str	r3, [r7, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	e7fd      	b.n	8002cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002cc6:	f000 f885 	bl	8002dd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb27 	bl	8003320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cd2:	f000 f88d 	bl	8002df0 <xTaskResumeAll>
 8002cd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002cde:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <vTaskDelay+0x68>)
 8002ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200004f0 	.word	0x200004f0
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d0e:	463a      	mov	r2, r7
 8002d10:	1d39      	adds	r1, r7, #4
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fbd2 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	9202      	str	r2, [sp, #8]
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	4921      	ldr	r1, [pc, #132]	@ (8002db4 <vTaskStartScheduler+0xb4>)
 8002d30:	4821      	ldr	r0, [pc, #132]	@ (8002db8 <vTaskStartScheduler+0xb8>)
 8002d32:	f7ff fe00 	bl	8002936 <xTaskCreateStatic>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4a20      	ldr	r2, [pc, #128]	@ (8002dbc <vTaskStartScheduler+0xbc>)
 8002d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dbc <vTaskStartScheduler+0xbc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d44:	2301      	movs	r3, #1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e001      	b.n	8002d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d11b      	bne.n	8002d8c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	613b      	str	r3, [r7, #16]
}
 8002d66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d68:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <vTaskStartScheduler+0xc0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	334c      	adds	r3, #76	@ 0x4c
 8002d6e:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <vTaskStartScheduler+0xc4>)
 8002d70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <vTaskStartScheduler+0xc8>)
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	@ (8002dcc <vTaskStartScheduler+0xcc>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <vTaskStartScheduler+0xd0>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d86:	f000 fbbb 	bl	8003500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d8a:	e00f      	b.n	8002dac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d10b      	bne.n	8002dac <vTaskStartScheduler+0xac>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	60fb      	str	r3, [r7, #12]
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <vTaskStartScheduler+0xa8>
}
 8002dac:	bf00      	nop
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	08004664 	.word	0x08004664
 8002db8:	08003169 	.word	0x08003169
 8002dbc:	200004ec 	.word	0x200004ec
 8002dc0:	200003c8 	.word	0x200003c8
 8002dc4:	2000001c 	.word	0x2000001c
 8002dc8:	200004e8 	.word	0x200004e8
 8002dcc:	200004d4 	.word	0x200004d4
 8002dd0:	200004cc 	.word	0x200004cc

08002dd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002dd8:	4b04      	ldr	r3, [pc, #16]	@ (8002dec <vTaskSuspendAll+0x18>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a03      	ldr	r2, [pc, #12]	@ (8002dec <vTaskSuspendAll+0x18>)
 8002de0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	200004f0 	.word	0x200004f0

08002df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dfe:	4b42      	ldr	r3, [pc, #264]	@ (8002f08 <xTaskResumeAll+0x118>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <xTaskResumeAll+0x2e>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	603b      	str	r3, [r7, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e1e:	f000 fc13 	bl	8003648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e22:	4b39      	ldr	r3, [pc, #228]	@ (8002f08 <xTaskResumeAll+0x118>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	4a37      	ldr	r2, [pc, #220]	@ (8002f08 <xTaskResumeAll+0x118>)
 8002e2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <xTaskResumeAll+0x118>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d161      	bne.n	8002ef8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e34:	4b35      	ldr	r3, [pc, #212]	@ (8002f0c <xTaskResumeAll+0x11c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05d      	beq.n	8002ef8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e3c:	e02e      	b.n	8002e9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e3e:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <xTaskResumeAll+0x120>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fd49 	bl	80028e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3304      	adds	r3, #4
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fd44 	bl	80028e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	2201      	movs	r2, #1
 8002e60:	409a      	lsls	r2, r3
 8002e62:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <xTaskResumeAll+0x124>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	4a2a      	ldr	r2, [pc, #168]	@ (8002f14 <xTaskResumeAll+0x124>)
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4a27      	ldr	r2, [pc, #156]	@ (8002f18 <xTaskResumeAll+0x128>)
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4610      	mov	r0, r2
 8002e84:	f7ff fcd0 	bl	8002828 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8c:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <xTaskResumeAll+0x12c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <xTaskResumeAll+0x130>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <xTaskResumeAll+0x120>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1cc      	bne.n	8002e3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002eaa:	f000 fa19 	bl	80032e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <xTaskResumeAll+0x134>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eba:	f000 f837 	bl	8002f2c <xTaskIncrementTick>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <xTaskResumeAll+0x130>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f1      	bne.n	8002eba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <xTaskResumeAll+0x134>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002edc:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <xTaskResumeAll+0x130>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <xTaskResumeAll+0x138>)
 8002eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef8:	f000 fbd8 	bl	80036ac <vPortExitCritical>

	return xAlreadyYielded;
 8002efc:	68bb      	ldr	r3, [r7, #8]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200004f0 	.word	0x200004f0
 8002f0c:	200004c8 	.word	0x200004c8
 8002f10:	20000488 	.word	0x20000488
 8002f14:	200004d0 	.word	0x200004d0
 8002f18:	200003cc 	.word	0x200003cc
 8002f1c:	200003c8 	.word	0x200003c8
 8002f20:	200004dc 	.word	0x200004dc
 8002f24:	200004d8 	.word	0x200004d8
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f36:	4b4f      	ldr	r3, [pc, #316]	@ (8003074 <xTaskIncrementTick+0x148>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 808f 	bne.w	800305e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f40:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <xTaskIncrementTick+0x14c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f48:	4a4b      	ldr	r2, [pc, #300]	@ (8003078 <xTaskIncrementTick+0x14c>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d121      	bne.n	8002f98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f54:	4b49      	ldr	r3, [pc, #292]	@ (800307c <xTaskIncrementTick+0x150>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	603b      	str	r3, [r7, #0]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <xTaskIncrementTick+0x46>
 8002f76:	4b41      	ldr	r3, [pc, #260]	@ (800307c <xTaskIncrementTick+0x150>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <xTaskIncrementTick+0x154>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a3e      	ldr	r2, [pc, #248]	@ (800307c <xTaskIncrementTick+0x150>)
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4a3e      	ldr	r2, [pc, #248]	@ (8003080 <xTaskIncrementTick+0x154>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003084 <xTaskIncrementTick+0x158>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <xTaskIncrementTick+0x158>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	f000 f9a4 	bl	80032e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f98:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <xTaskIncrementTick+0x15c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d348      	bcc.n	8003034 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fa2:	4b36      	ldr	r3, [pc, #216]	@ (800307c <xTaskIncrementTick+0x150>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <xTaskIncrementTick+0x15c>)
 8002fae:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb2:	601a      	str	r2, [r3, #0]
					break;
 8002fb4:	e03e      	b.n	8003034 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fb6:	4b31      	ldr	r3, [pc, #196]	@ (800307c <xTaskIncrementTick+0x150>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d203      	bcs.n	8002fd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fce:	4a2e      	ldr	r2, [pc, #184]	@ (8003088 <xTaskIncrementTick+0x15c>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fd4:	e02e      	b.n	8003034 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fc81 	bl	80028e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3318      	adds	r3, #24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fc78 	bl	80028e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	4b24      	ldr	r3, [pc, #144]	@ (800308c <xTaskIncrementTick+0x160>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	4a22      	ldr	r2, [pc, #136]	@ (800308c <xTaskIncrementTick+0x160>)
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <xTaskIncrementTick+0x164>)
 8003012:	441a      	add	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7ff fc04 	bl	8002828 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003024:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <xTaskIncrementTick+0x168>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d3b9      	bcc.n	8002fa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003032:	e7b6      	b.n	8002fa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <xTaskIncrementTick+0x168>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303a:	4915      	ldr	r1, [pc, #84]	@ (8003090 <xTaskIncrementTick+0x164>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d901      	bls.n	8003050 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800304c:	2301      	movs	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <xTaskIncrementTick+0x16c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003058:	2301      	movs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e004      	b.n	8003068 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800305e:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <xTaskIncrementTick+0x170>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3301      	adds	r3, #1
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <xTaskIncrementTick+0x170>)
 8003066:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003068:	697b      	ldr	r3, [r7, #20]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200004f0 	.word	0x200004f0
 8003078:	200004cc 	.word	0x200004cc
 800307c:	20000480 	.word	0x20000480
 8003080:	20000484 	.word	0x20000484
 8003084:	200004e0 	.word	0x200004e0
 8003088:	200004e8 	.word	0x200004e8
 800308c:	200004d0 	.word	0x200004d0
 8003090:	200003cc 	.word	0x200003cc
 8003094:	200003c8 	.word	0x200003c8
 8003098:	200004dc 	.word	0x200004dc
 800309c:	200004d8 	.word	0x200004d8

080030a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003150 <vTaskSwitchContext+0xb0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ae:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <vTaskSwitchContext+0xb4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030b4:	e045      	b.n	8003142 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80030b6:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <vTaskSwitchContext+0xb4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030bc:	4b26      	ldr	r3, [pc, #152]	@ (8003158 <vTaskSwitchContext+0xb8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f1c3 031f 	rsb	r3, r3, #31
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4922      	ldr	r1, [pc, #136]	@ (800315c <vTaskSwitchContext+0xbc>)
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	607b      	str	r3, [r7, #4]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <vTaskSwitchContext+0x5a>
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <vTaskSwitchContext+0xbc>)
 800310a:	4413      	add	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	3308      	adds	r3, #8
 8003120:	429a      	cmp	r2, r3
 8003122:	d104      	bne.n	800312e <vTaskSwitchContext+0x8e>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <vTaskSwitchContext+0xc0>)
 8003136:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <vTaskSwitchContext+0xc0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	334c      	adds	r3, #76	@ 0x4c
 800313e:	4a09      	ldr	r2, [pc, #36]	@ (8003164 <vTaskSwitchContext+0xc4>)
 8003140:	6013      	str	r3, [r2, #0]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200004f0 	.word	0x200004f0
 8003154:	200004dc 	.word	0x200004dc
 8003158:	200004d0 	.word	0x200004d0
 800315c:	200003cc 	.word	0x200003cc
 8003160:	200003c8 	.word	0x200003c8
 8003164:	2000001c 	.word	0x2000001c

08003168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003170:	f000 f852 	bl	8003218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <prvIdleTask+0x28>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d9f9      	bls.n	8003170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <prvIdleTask+0x2c>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800318c:	e7f0      	b.n	8003170 <prvIdleTask+0x8>
 800318e:	bf00      	nop
 8003190:	200003cc 	.word	0x200003cc
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	e00c      	b.n	80031be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a12      	ldr	r2, [pc, #72]	@ (80031f8 <prvInitialiseTaskLists+0x60>)
 80031b0:	4413      	add	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fb0b 	bl	80027ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3301      	adds	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d9ef      	bls.n	80031a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031c4:	480d      	ldr	r0, [pc, #52]	@ (80031fc <prvInitialiseTaskLists+0x64>)
 80031c6:	f7ff fb02 	bl	80027ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031ca:	480d      	ldr	r0, [pc, #52]	@ (8003200 <prvInitialiseTaskLists+0x68>)
 80031cc:	f7ff faff 	bl	80027ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031d0:	480c      	ldr	r0, [pc, #48]	@ (8003204 <prvInitialiseTaskLists+0x6c>)
 80031d2:	f7ff fafc 	bl	80027ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031d6:	480c      	ldr	r0, [pc, #48]	@ (8003208 <prvInitialiseTaskLists+0x70>)
 80031d8:	f7ff faf9 	bl	80027ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031dc:	480b      	ldr	r0, [pc, #44]	@ (800320c <prvInitialiseTaskLists+0x74>)
 80031de:	f7ff faf6 	bl	80027ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <prvInitialiseTaskLists+0x78>)
 80031e4:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <prvInitialiseTaskLists+0x64>)
 80031e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <prvInitialiseTaskLists+0x7c>)
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <prvInitialiseTaskLists+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200003cc 	.word	0x200003cc
 80031fc:	20000458 	.word	0x20000458
 8003200:	2000046c 	.word	0x2000046c
 8003204:	20000488 	.word	0x20000488
 8003208:	2000049c 	.word	0x2000049c
 800320c:	200004b4 	.word	0x200004b4
 8003210:	20000480 	.word	0x20000480
 8003214:	20000484 	.word	0x20000484

08003218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800321e:	e019      	b.n	8003254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003220:	f000 fa12 	bl	8003648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003224:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <prvCheckTasksWaitingTermination+0x50>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fb56 	bl	80028e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <prvCheckTasksWaitingTermination+0x54>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3b01      	subs	r3, #1
 800323c:	4a0b      	ldr	r2, [pc, #44]	@ (800326c <prvCheckTasksWaitingTermination+0x54>)
 800323e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <prvCheckTasksWaitingTermination+0x58>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3b01      	subs	r3, #1
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <prvCheckTasksWaitingTermination+0x58>)
 8003248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800324a:	f000 fa2f 	bl	80036ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f810 	bl	8003274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <prvCheckTasksWaitingTermination+0x58>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e1      	bne.n	8003220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000049c 	.word	0x2000049c
 800326c:	200004c8 	.word	0x200004c8
 8003270:	200004b0 	.word	0x200004b0

08003274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	334c      	adds	r3, #76	@ 0x4c
 8003280:	4618      	mov	r0, r3
 8003282:	f000 febf 	bl	8004004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800328c:	2b00      	cmp	r3, #0
 800328e:	d108      	bne.n	80032a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb85 	bl	80039a4 <vPortFree>
				vPortFree( pxTCB );
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb82 	bl	80039a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032a0:	e019      	b.n	80032d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d103      	bne.n	80032b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb79 	bl	80039a4 <vPortFree>
	}
 80032b2:	e010      	b.n	80032d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d00b      	beq.n	80032d6 <prvDeleteTCB+0x62>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60fb      	str	r3, [r7, #12]
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	e7fd      	b.n	80032d2 <prvDeleteTCB+0x5e>
	}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003318 <prvResetNextTaskUnblockTime+0x38>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032f0:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <prvResetNextTaskUnblockTime+0x3c>)
 80032f2:	f04f 32ff 	mov.w	r2, #4294967295
 80032f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032f8:	e008      	b.n	800330c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <prvResetNextTaskUnblockTime+0x38>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a04      	ldr	r2, [pc, #16]	@ (800331c <prvResetNextTaskUnblockTime+0x3c>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000480 	.word	0x20000480
 800331c:	200004e8 	.word	0x200004e8

08003320 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800332a:	4b29      	ldr	r3, [pc, #164]	@ (80033d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003330:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3304      	adds	r3, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fad3 	bl	80028e2 <uxListRemove>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10b      	bne.n	800335a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003342:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	4b21      	ldr	r3, [pc, #132]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4013      	ands	r3, r2
 8003356:	4a20      	ldr	r2, [pc, #128]	@ (80033d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003358:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d10a      	bne.n	8003378 <prvAddCurrentTaskToDelayedList+0x58>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003368:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	481a      	ldr	r0, [pc, #104]	@ (80033dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003372:	f7ff fa59 	bl	8002828 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003376:	e026      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d209      	bcs.n	80033a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003390:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b0f      	ldr	r3, [pc, #60]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f7ff fa67 	bl	8002870 <vListInsert>
}
 80033a2:	e010      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b0a      	ldr	r3, [pc, #40]	@ (80033d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7ff fa5d 	bl	8002870 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d202      	bcs.n	80033c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033c0:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200004cc 	.word	0x200004cc
 80033d4:	200003c8 	.word	0x200003c8
 80033d8:	200004d0 	.word	0x200004d0
 80033dc:	200004b4 	.word	0x200004b4
 80033e0:	20000484 	.word	0x20000484
 80033e4:	20000480 	.word	0x20000480
 80033e8:	200004e8 	.word	0x200004e8

080033ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3b04      	subs	r3, #4
 80033fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3b04      	subs	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f023 0201 	bic.w	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3b04      	subs	r3, #4
 800341a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800341c:	4a0c      	ldr	r2, [pc, #48]	@ (8003450 <pxPortInitialiseStack+0x64>)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b14      	subs	r3, #20
 8003426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3b04      	subs	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f06f 0202 	mvn.w	r2, #2
 800343a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b20      	subs	r3, #32
 8003440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	08003455 	.word	0x08003455

08003454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800345e:	4b13      	ldr	r3, [pc, #76]	@ (80034ac <prvTaskExitError+0x58>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d00b      	beq.n	8003480 <prvTaskExitError+0x2c>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <prvTaskExitError+0x28>
	__asm volatile
 8003480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	60bb      	str	r3, [r7, #8]
}
 8003492:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003494:	bf00      	nop
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0fc      	beq.n	8003496 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034b0:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <pxCurrentTCBConst2>)
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	6808      	ldr	r0, [r1, #0]
 80034b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ba:	f380 8809 	msr	PSP, r0
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f380 8811 	msr	BASEPRI, r0
 80034ca:	4770      	bx	lr
 80034cc:	f3af 8000 	nop.w

080034d0 <pxCurrentTCBConst2>:
 80034d0:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop

080034d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034d8:	4808      	ldr	r0, [pc, #32]	@ (80034fc <prvPortStartFirstTask+0x24>)
 80034da:	6800      	ldr	r0, [r0, #0]
 80034dc:	6800      	ldr	r0, [r0, #0]
 80034de:	f380 8808 	msr	MSP, r0
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8814 	msr	CONTROL, r0
 80034ea:	b662      	cpsie	i
 80034ec:	b661      	cpsie	f
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	df00      	svc	0
 80034f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034fa:	bf00      	nop
 80034fc:	e000ed08 	.word	0xe000ed08

08003500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003506:	4b47      	ldr	r3, [pc, #284]	@ (8003624 <xPortStartScheduler+0x124>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a47      	ldr	r2, [pc, #284]	@ (8003628 <xPortStartScheduler+0x128>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d10b      	bne.n	8003528 <xPortStartScheduler+0x28>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	613b      	str	r3, [r7, #16]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003528:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <xPortStartScheduler+0x124>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a3f      	ldr	r2, [pc, #252]	@ (800362c <xPortStartScheduler+0x12c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10b      	bne.n	800354a <xPortStartScheduler+0x4a>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	60fb      	str	r3, [r7, #12]
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800354a:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <xPortStartScheduler+0x130>)
 800354c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	22ff      	movs	r2, #255	@ 0xff
 800355a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <xPortStartScheduler+0x134>)
 8003570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <xPortStartScheduler+0x138>)
 8003574:	2207      	movs	r2, #7
 8003576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003578:	e009      	b.n	800358e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800357a:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <xPortStartScheduler+0x138>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	4a2d      	ldr	r2, [pc, #180]	@ (8003638 <xPortStartScheduler+0x138>)
 8003582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b80      	cmp	r3, #128	@ 0x80
 8003598:	d0ef      	beq.n	800357a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800359a:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <xPortStartScheduler+0x138>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d00b      	beq.n	80035be <xPortStartScheduler+0xbe>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	60bb      	str	r3, [r7, #8]
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	e7fd      	b.n	80035ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035be:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <xPortStartScheduler+0x138>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <xPortStartScheduler+0x138>)
 80035c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <xPortStartScheduler+0x138>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035d0:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <xPortStartScheduler+0x138>)
 80035d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035dc:	4b17      	ldr	r3, [pc, #92]	@ (800363c <xPortStartScheduler+0x13c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a16      	ldr	r2, [pc, #88]	@ (800363c <xPortStartScheduler+0x13c>)
 80035e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035e8:	4b14      	ldr	r3, [pc, #80]	@ (800363c <xPortStartScheduler+0x13c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a13      	ldr	r2, [pc, #76]	@ (800363c <xPortStartScheduler+0x13c>)
 80035ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80035f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035f4:	f000 f8da 	bl	80037ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <xPortStartScheduler+0x140>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035fe:	f000 f8f9 	bl	80037f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003602:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <xPortStartScheduler+0x144>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a0f      	ldr	r2, [pc, #60]	@ (8003644 <xPortStartScheduler+0x144>)
 8003608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800360c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800360e:	f7ff ff63 	bl	80034d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003612:	f7ff fd45 	bl	80030a0 <vTaskSwitchContext>
	prvTaskExitError();
 8003616:	f7ff ff1d 	bl	8003454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	410fc271 	.word	0x410fc271
 800362c:	410fc270 	.word	0x410fc270
 8003630:	e000e400 	.word	0xe000e400
 8003634:	200004f4 	.word	0x200004f4
 8003638:	200004f8 	.word	0x200004f8
 800363c:	e000ed20 	.word	0xe000ed20
 8003640:	2000000c 	.word	0x2000000c
 8003644:	e000ef34 	.word	0xe000ef34

08003648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	607b      	str	r3, [r7, #4]
}
 8003660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <vPortEnterCritical+0x5c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <vPortEnterCritical+0x5c>)
 800366a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800366c:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <vPortEnterCritical+0x5c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d110      	bne.n	8003696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <vPortEnterCritical+0x60>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <vPortEnterCritical+0x4e>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	603b      	str	r3, [r7, #0]
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <vPortEnterCritical+0x4a>
	}
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	2000000c 	.word	0x2000000c
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <vPortExitCritical+0x50>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <vPortExitCritical+0x26>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	@ (80036fc <vPortExitCritical+0x50>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <vPortExitCritical+0x50>)
 80036da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036dc:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <vPortExitCritical+0x50>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <vPortExitCritical+0x44>
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	2000000c 	.word	0x2000000c

08003700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003700:	f3ef 8009 	mrs	r0, PSP
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4b15      	ldr	r3, [pc, #84]	@ (8003760 <pxCurrentTCBConst>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	f01e 0f10 	tst.w	lr, #16
 8003710:	bf08      	it	eq
 8003712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	6010      	str	r0, [r2, #0]
 800371c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003724:	f380 8811 	msr	BASEPRI, r0
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f7ff fcb6 	bl	80030a0 <vTaskSwitchContext>
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f380 8811 	msr	BASEPRI, r0
 800373c:	bc09      	pop	{r0, r3}
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6808      	ldr	r0, [r1, #0]
 8003742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003746:	f01e 0f10 	tst.w	lr, #16
 800374a:	bf08      	it	eq
 800374c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003750:	f380 8809 	msr	PSP, r0
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w

08003760 <pxCurrentTCBConst>:
 8003760:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop

08003768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	607b      	str	r3, [r7, #4]
}
 8003780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003782:	f7ff fbd3 	bl	8002f2c <xTaskIncrementTick>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <SysTick_Handler+0x40>)
 800378e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f383 8811 	msr	BASEPRI, r3
}
 800379e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <vPortSetupTimerInterrupt+0x34>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037b6:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <vPortSetupTimerInterrupt+0x38>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <vPortSetupTimerInterrupt+0x3c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <vPortSetupTimerInterrupt+0x40>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <vPortSetupTimerInterrupt+0x44>)
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ce:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <vPortSetupTimerInterrupt+0x34>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010
 80037e4:	e000e018 	.word	0xe000e018
 80037e8:	20000000 	.word	0x20000000
 80037ec:	10624dd3 	.word	0x10624dd3
 80037f0:	e000e014 	.word	0xe000e014

080037f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003804 <vPortEnableVFP+0x10>
 80037f8:	6801      	ldr	r1, [r0, #0]
 80037fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037fe:	6001      	str	r1, [r0, #0]
 8003800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003802:	bf00      	nop
 8003804:	e000ed88 	.word	0xe000ed88

08003808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003814:	f7ff fade 	bl	8002dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003818:	4b5c      	ldr	r3, [pc, #368]	@ (800398c <pvPortMalloc+0x184>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003820:	f000 f924 	bl	8003a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003824:	4b5a      	ldr	r3, [pc, #360]	@ (8003990 <pvPortMalloc+0x188>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 8095 	bne.w	800395c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01e      	beq.n	8003876 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003838:	2208      	movs	r2, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f023 0307 	bic.w	r3, r3, #7
 8003850:	3308      	adds	r3, #8
 8003852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <pvPortMalloc+0x6e>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	617b      	str	r3, [r7, #20]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d06f      	beq.n	800395c <pvPortMalloc+0x154>
 800387c:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <pvPortMalloc+0x18c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d86a      	bhi.n	800395c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003886:	4b44      	ldr	r3, [pc, #272]	@ (8003998 <pvPortMalloc+0x190>)
 8003888:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800388a:	4b43      	ldr	r3, [pc, #268]	@ (8003998 <pvPortMalloc+0x190>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003890:	e004      	b.n	800389c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d903      	bls.n	80038ae <pvPortMalloc+0xa6>
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f1      	bne.n	8003892 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038ae:	4b37      	ldr	r3, [pc, #220]	@ (800398c <pvPortMalloc+0x184>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d051      	beq.n	800395c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	4413      	add	r3, r2
 80038c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	1ad2      	subs	r2, r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d920      	bls.n	800391c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <pvPortMalloc+0xfc>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	613b      	str	r3, [r7, #16]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	1ad2      	subs	r2, r2, r3
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003916:	69b8      	ldr	r0, [r7, #24]
 8003918:	f000 f90a 	bl	8003b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <pvPortMalloc+0x18c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <pvPortMalloc+0x18c>)
 8003928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800392a:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <pvPortMalloc+0x18c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <pvPortMalloc+0x194>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d203      	bcs.n	800393e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003936:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <pvPortMalloc+0x18c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <pvPortMalloc+0x194>)
 800393c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <pvPortMalloc+0x188>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	431a      	orrs	r2, r3
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003952:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <pvPortMalloc+0x198>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a11      	ldr	r2, [pc, #68]	@ (80039a0 <pvPortMalloc+0x198>)
 800395a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800395c:	f7ff fa48 	bl	8002df0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <pvPortMalloc+0x17a>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60fb      	str	r3, [r7, #12]
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	e7fd      	b.n	800397e <pvPortMalloc+0x176>
	return pvReturn;
 8003982:	69fb      	ldr	r3, [r7, #28]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3728      	adds	r7, #40	@ 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20004104 	.word	0x20004104
 8003990:	20004118 	.word	0x20004118
 8003994:	20004108 	.word	0x20004108
 8003998:	200040fc 	.word	0x200040fc
 800399c:	2000410c 	.word	0x2000410c
 80039a0:	20004110 	.word	0x20004110

080039a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04f      	beq.n	8003a56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039b6:	2308      	movs	r3, #8
 80039b8:	425b      	negs	r3, r3
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4413      	add	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4b25      	ldr	r3, [pc, #148]	@ (8003a60 <vPortFree+0xbc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <vPortFree+0x46>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60fb      	str	r3, [r7, #12]
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	e7fd      	b.n	80039e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <vPortFree+0x66>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60bb      	str	r3, [r7, #8]
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <vPortFree+0xbc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01e      	beq.n	8003a56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11a      	bne.n	8003a56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <vPortFree+0xbc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a30:	f7ff f9d0 	bl	8002dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <vPortFree+0xc0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <vPortFree+0xc0>)
 8003a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a42:	6938      	ldr	r0, [r7, #16]
 8003a44:	f000 f874 	bl	8003b30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <vPortFree+0xc4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a06      	ldr	r2, [pc, #24]	@ (8003a68 <vPortFree+0xc4>)
 8003a50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a52:	f7ff f9cd 	bl	8002df0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20004118 	.word	0x20004118
 8003a64:	20004108 	.word	0x20004108
 8003a68:	20004114 	.word	0x20004114

08003a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a78:	4b27      	ldr	r3, [pc, #156]	@ (8003b18 <prvHeapInit+0xac>)
 8003a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3307      	adds	r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <prvHeapInit+0xac>)
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <prvHeapInit+0xb0>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <prvHeapInit+0xb0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ab8:	2208      	movs	r2, #8
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0307 	bic.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <prvHeapInit+0xb4>)
 8003acc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <prvHeapInit+0xb4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <prvHeapInit+0xb4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003aec:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <prvHeapInit+0xb4>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <prvHeapInit+0xb8>)
 8003afa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <prvHeapInit+0xbc>)
 8003b02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <prvHeapInit+0xc0>)
 8003b06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	200004fc 	.word	0x200004fc
 8003b1c:	200040fc 	.word	0x200040fc
 8003b20:	20004104 	.word	0x20004104
 8003b24:	2000410c 	.word	0x2000410c
 8003b28:	20004108 	.word	0x20004108
 8003b2c:	20004118 	.word	0x20004118

08003b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b38:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <prvInsertBlockIntoFreeList+0xac>)
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <prvInsertBlockIntoFreeList+0x14>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d8f7      	bhi.n	8003b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d108      	bne.n	8003b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	441a      	add	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d118      	bne.n	8003bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00d      	beq.n	8003bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e008      	b.n	8003bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bae:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <prvInsertBlockIntoFreeList+0xb0>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e003      	b.n	8003bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d002      	beq.n	8003bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	200040fc 	.word	0x200040fc
 8003be0:	20004104 	.word	0x20004104

08003be4 <std>:
 8003be4:	2300      	movs	r3, #0
 8003be6:	b510      	push	{r4, lr}
 8003be8:	4604      	mov	r4, r0
 8003bea:	e9c0 3300 	strd	r3, r3, [r0]
 8003bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bf2:	6083      	str	r3, [r0, #8]
 8003bf4:	8181      	strh	r1, [r0, #12]
 8003bf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bf8:	81c2      	strh	r2, [r0, #14]
 8003bfa:	6183      	str	r3, [r0, #24]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	2208      	movs	r2, #8
 8003c00:	305c      	adds	r0, #92	@ 0x5c
 8003c02:	f000 f9e7 	bl	8003fd4 <memset>
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <std+0x58>)
 8003c08:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <std+0x5c>)
 8003c0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <std+0x60>)
 8003c10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <std+0x64>)
 8003c14:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <std+0x68>)
 8003c18:	6224      	str	r4, [r4, #32]
 8003c1a:	429c      	cmp	r4, r3
 8003c1c:	d006      	beq.n	8003c2c <std+0x48>
 8003c1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c22:	4294      	cmp	r4, r2
 8003c24:	d002      	beq.n	8003c2c <std+0x48>
 8003c26:	33d0      	adds	r3, #208	@ 0xd0
 8003c28:	429c      	cmp	r4, r3
 8003c2a:	d105      	bne.n	8003c38 <std+0x54>
 8003c2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c34:	f000 ba9c 	b.w	8004170 <__retarget_lock_init_recursive>
 8003c38:	bd10      	pop	{r4, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08003e25 	.word	0x08003e25
 8003c40:	08003e47 	.word	0x08003e47
 8003c44:	08003e7f 	.word	0x08003e7f
 8003c48:	08003ea3 	.word	0x08003ea3
 8003c4c:	2000411c 	.word	0x2000411c

08003c50 <stdio_exit_handler>:
 8003c50:	4a02      	ldr	r2, [pc, #8]	@ (8003c5c <stdio_exit_handler+0xc>)
 8003c52:	4903      	ldr	r1, [pc, #12]	@ (8003c60 <stdio_exit_handler+0x10>)
 8003c54:	4803      	ldr	r0, [pc, #12]	@ (8003c64 <stdio_exit_handler+0x14>)
 8003c56:	f000 b869 	b.w	8003d2c <_fwalk_sglue>
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010
 8003c60:	08004471 	.word	0x08004471
 8003c64:	20000020 	.word	0x20000020

08003c68 <cleanup_stdio>:
 8003c68:	6841      	ldr	r1, [r0, #4]
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <cleanup_stdio+0x34>)
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	4604      	mov	r4, r0
 8003c72:	d001      	beq.n	8003c78 <cleanup_stdio+0x10>
 8003c74:	f000 fbfc 	bl	8004470 <_fflush_r>
 8003c78:	68a1      	ldr	r1, [r4, #8]
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <cleanup_stdio+0x38>)
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	d002      	beq.n	8003c86 <cleanup_stdio+0x1e>
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 fbf5 	bl	8004470 <_fflush_r>
 8003c86:	68e1      	ldr	r1, [r4, #12]
 8003c88:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <cleanup_stdio+0x3c>)
 8003c8a:	4299      	cmp	r1, r3
 8003c8c:	d004      	beq.n	8003c98 <cleanup_stdio+0x30>
 8003c8e:	4620      	mov	r0, r4
 8003c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c94:	f000 bbec 	b.w	8004470 <_fflush_r>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000411c 	.word	0x2000411c
 8003ca0:	20004184 	.word	0x20004184
 8003ca4:	200041ec 	.word	0x200041ec

08003ca8 <global_stdio_init.part.0>:
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <global_stdio_init.part.0+0x30>)
 8003cac:	4c0b      	ldr	r4, [pc, #44]	@ (8003cdc <global_stdio_init.part.0+0x34>)
 8003cae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce0 <global_stdio_init.part.0+0x38>)
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	f7ff ff94 	bl	8003be4 <std>
 8003cbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2109      	movs	r1, #9
 8003cc4:	f7ff ff8e 	bl	8003be4 <std>
 8003cc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ccc:	2202      	movs	r2, #2
 8003cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd2:	2112      	movs	r1, #18
 8003cd4:	f7ff bf86 	b.w	8003be4 <std>
 8003cd8:	20004254 	.word	0x20004254
 8003cdc:	2000411c 	.word	0x2000411c
 8003ce0:	08003c51 	.word	0x08003c51

08003ce4 <__sfp_lock_acquire>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	@ (8003cec <__sfp_lock_acquire+0x8>)
 8003ce6:	f000 ba44 	b.w	8004172 <__retarget_lock_acquire_recursive>
 8003cea:	bf00      	nop
 8003cec:	2000425d 	.word	0x2000425d

08003cf0 <__sfp_lock_release>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	@ (8003cf8 <__sfp_lock_release+0x8>)
 8003cf2:	f000 ba3f 	b.w	8004174 <__retarget_lock_release_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000425d 	.word	0x2000425d

08003cfc <__sinit>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4604      	mov	r4, r0
 8003d00:	f7ff fff0 	bl	8003ce4 <__sfp_lock_acquire>
 8003d04:	6a23      	ldr	r3, [r4, #32]
 8003d06:	b11b      	cbz	r3, 8003d10 <__sinit+0x14>
 8003d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d0c:	f7ff bff0 	b.w	8003cf0 <__sfp_lock_release>
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <__sinit+0x28>)
 8003d12:	6223      	str	r3, [r4, #32]
 8003d14:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <__sinit+0x2c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f5      	bne.n	8003d08 <__sinit+0xc>
 8003d1c:	f7ff ffc4 	bl	8003ca8 <global_stdio_init.part.0>
 8003d20:	e7f2      	b.n	8003d08 <__sinit+0xc>
 8003d22:	bf00      	nop
 8003d24:	08003c69 	.word	0x08003c69
 8003d28:	20004254 	.word	0x20004254

08003d2c <_fwalk_sglue>:
 8003d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d30:	4607      	mov	r7, r0
 8003d32:	4688      	mov	r8, r1
 8003d34:	4614      	mov	r4, r2
 8003d36:	2600      	movs	r6, #0
 8003d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d40:	d505      	bpl.n	8003d4e <_fwalk_sglue+0x22>
 8003d42:	6824      	ldr	r4, [r4, #0]
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d1f7      	bne.n	8003d38 <_fwalk_sglue+0xc>
 8003d48:	4630      	mov	r0, r6
 8003d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d907      	bls.n	8003d64 <_fwalk_sglue+0x38>
 8003d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <_fwalk_sglue+0x38>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4638      	mov	r0, r7
 8003d60:	47c0      	blx	r8
 8003d62:	4306      	orrs	r6, r0
 8003d64:	3568      	adds	r5, #104	@ 0x68
 8003d66:	e7e9      	b.n	8003d3c <_fwalk_sglue+0x10>

08003d68 <_puts_r>:
 8003d68:	6a03      	ldr	r3, [r0, #32]
 8003d6a:	b570      	push	{r4, r5, r6, lr}
 8003d6c:	6884      	ldr	r4, [r0, #8]
 8003d6e:	4605      	mov	r5, r0
 8003d70:	460e      	mov	r6, r1
 8003d72:	b90b      	cbnz	r3, 8003d78 <_puts_r+0x10>
 8003d74:	f7ff ffc2 	bl	8003cfc <__sinit>
 8003d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d7a:	07db      	lsls	r3, r3, #31
 8003d7c:	d405      	bmi.n	8003d8a <_puts_r+0x22>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	0598      	lsls	r0, r3, #22
 8003d82:	d402      	bmi.n	8003d8a <_puts_r+0x22>
 8003d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d86:	f000 f9f4 	bl	8004172 <__retarget_lock_acquire_recursive>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	0719      	lsls	r1, r3, #28
 8003d8e:	d502      	bpl.n	8003d96 <_puts_r+0x2e>
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d135      	bne.n	8003e02 <_puts_r+0x9a>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 f8c5 	bl	8003f28 <__swsetup_r>
 8003d9e:	b380      	cbz	r0, 8003e02 <_puts_r+0x9a>
 8003da0:	f04f 35ff 	mov.w	r5, #4294967295
 8003da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003da6:	07da      	lsls	r2, r3, #31
 8003da8:	d405      	bmi.n	8003db6 <_puts_r+0x4e>
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	059b      	lsls	r3, r3, #22
 8003dae:	d402      	bmi.n	8003db6 <_puts_r+0x4e>
 8003db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003db2:	f000 f9df 	bl	8004174 <__retarget_lock_release_recursive>
 8003db6:	4628      	mov	r0, r5
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da04      	bge.n	8003dc8 <_puts_r+0x60>
 8003dbe:	69a2      	ldr	r2, [r4, #24]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dc17      	bgt.n	8003df4 <_puts_r+0x8c>
 8003dc4:	290a      	cmp	r1, #10
 8003dc6:	d015      	beq.n	8003df4 <_puts_r+0x8c>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	6022      	str	r2, [r4, #0]
 8003dce:	7019      	strb	r1, [r3, #0]
 8003dd0:	68a3      	ldr	r3, [r4, #8]
 8003dd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60a3      	str	r3, [r4, #8]
 8003dda:	2900      	cmp	r1, #0
 8003ddc:	d1ed      	bne.n	8003dba <_puts_r+0x52>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da11      	bge.n	8003e06 <_puts_r+0x9e>
 8003de2:	4622      	mov	r2, r4
 8003de4:	210a      	movs	r1, #10
 8003de6:	4628      	mov	r0, r5
 8003de8:	f000 f85f 	bl	8003eaa <__swbuf_r>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0d7      	beq.n	8003da0 <_puts_r+0x38>
 8003df0:	250a      	movs	r5, #10
 8003df2:	e7d7      	b.n	8003da4 <_puts_r+0x3c>
 8003df4:	4622      	mov	r2, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f857 	bl	8003eaa <__swbuf_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d1e7      	bne.n	8003dd0 <_puts_r+0x68>
 8003e00:	e7ce      	b.n	8003da0 <_puts_r+0x38>
 8003e02:	3e01      	subs	r6, #1
 8003e04:	e7e4      	b.n	8003dd0 <_puts_r+0x68>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	220a      	movs	r2, #10
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	e7ee      	b.n	8003df0 <_puts_r+0x88>
	...

08003e14 <puts>:
 8003e14:	4b02      	ldr	r3, [pc, #8]	@ (8003e20 <puts+0xc>)
 8003e16:	4601      	mov	r1, r0
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f7ff bfa5 	b.w	8003d68 <_puts_r>
 8003e1e:	bf00      	nop
 8003e20:	2000001c 	.word	0x2000001c

08003e24 <__sread>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	460c      	mov	r4, r1
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	f000 f952 	bl	80040d4 <_read_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	bfab      	itete	ge
 8003e34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e36:	89a3      	ldrhlt	r3, [r4, #12]
 8003e38:	181b      	addge	r3, r3, r0
 8003e3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e3e:	bfac      	ite	ge
 8003e40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e42:	81a3      	strhlt	r3, [r4, #12]
 8003e44:	bd10      	pop	{r4, pc}

08003e46 <__swrite>:
 8003e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	461f      	mov	r7, r3
 8003e4c:	898b      	ldrh	r3, [r1, #12]
 8003e4e:	05db      	lsls	r3, r3, #23
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	4616      	mov	r6, r2
 8003e56:	d505      	bpl.n	8003e64 <__swrite+0x1e>
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f000 f926 	bl	80040b0 <_lseek_r>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	4632      	mov	r2, r6
 8003e72:	463b      	mov	r3, r7
 8003e74:	4628      	mov	r0, r5
 8003e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e7a:	f000 b93d 	b.w	80040f8 <_write_r>

08003e7e <__sseek>:
 8003e7e:	b510      	push	{r4, lr}
 8003e80:	460c      	mov	r4, r1
 8003e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e86:	f000 f913 	bl	80040b0 <_lseek_r>
 8003e8a:	1c43      	adds	r3, r0, #1
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	bf15      	itete	ne
 8003e90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e9a:	81a3      	strheq	r3, [r4, #12]
 8003e9c:	bf18      	it	ne
 8003e9e:	81a3      	strhne	r3, [r4, #12]
 8003ea0:	bd10      	pop	{r4, pc}

08003ea2 <__sclose>:
 8003ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea6:	f000 b89d 	b.w	8003fe4 <_close_r>

08003eaa <__swbuf_r>:
 8003eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eac:	460e      	mov	r6, r1
 8003eae:	4614      	mov	r4, r2
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b118      	cbz	r0, 8003ebc <__swbuf_r+0x12>
 8003eb4:	6a03      	ldr	r3, [r0, #32]
 8003eb6:	b90b      	cbnz	r3, 8003ebc <__swbuf_r+0x12>
 8003eb8:	f7ff ff20 	bl	8003cfc <__sinit>
 8003ebc:	69a3      	ldr	r3, [r4, #24]
 8003ebe:	60a3      	str	r3, [r4, #8]
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	071a      	lsls	r2, r3, #28
 8003ec4:	d501      	bpl.n	8003eca <__swbuf_r+0x20>
 8003ec6:	6923      	ldr	r3, [r4, #16]
 8003ec8:	b943      	cbnz	r3, 8003edc <__swbuf_r+0x32>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 f82b 	bl	8003f28 <__swsetup_r>
 8003ed2:	b118      	cbz	r0, 8003edc <__swbuf_r+0x32>
 8003ed4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ed8:	4638      	mov	r0, r7
 8003eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	6922      	ldr	r2, [r4, #16]
 8003ee0:	1a98      	subs	r0, r3, r2
 8003ee2:	6963      	ldr	r3, [r4, #20]
 8003ee4:	b2f6      	uxtb	r6, r6
 8003ee6:	4283      	cmp	r3, r0
 8003ee8:	4637      	mov	r7, r6
 8003eea:	dc05      	bgt.n	8003ef8 <__swbuf_r+0x4e>
 8003eec:	4621      	mov	r1, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fabe 	bl	8004470 <_fflush_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d1ed      	bne.n	8003ed4 <__swbuf_r+0x2a>
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	6022      	str	r2, [r4, #0]
 8003f04:	701e      	strb	r6, [r3, #0]
 8003f06:	6962      	ldr	r2, [r4, #20]
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d004      	beq.n	8003f18 <__swbuf_r+0x6e>
 8003f0e:	89a3      	ldrh	r3, [r4, #12]
 8003f10:	07db      	lsls	r3, r3, #31
 8003f12:	d5e1      	bpl.n	8003ed8 <__swbuf_r+0x2e>
 8003f14:	2e0a      	cmp	r6, #10
 8003f16:	d1df      	bne.n	8003ed8 <__swbuf_r+0x2e>
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 faa8 	bl	8004470 <_fflush_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d0d9      	beq.n	8003ed8 <__swbuf_r+0x2e>
 8003f24:	e7d6      	b.n	8003ed4 <__swbuf_r+0x2a>
	...

08003f28 <__swsetup_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <__swsetup_r+0xa8>)
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	460c      	mov	r4, r1
 8003f32:	b118      	cbz	r0, 8003f3c <__swsetup_r+0x14>
 8003f34:	6a03      	ldr	r3, [r0, #32]
 8003f36:	b90b      	cbnz	r3, 8003f3c <__swsetup_r+0x14>
 8003f38:	f7ff fee0 	bl	8003cfc <__sinit>
 8003f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f40:	0719      	lsls	r1, r3, #28
 8003f42:	d422      	bmi.n	8003f8a <__swsetup_r+0x62>
 8003f44:	06da      	lsls	r2, r3, #27
 8003f46:	d407      	bmi.n	8003f58 <__swsetup_r+0x30>
 8003f48:	2209      	movs	r2, #9
 8003f4a:	602a      	str	r2, [r5, #0]
 8003f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	e033      	b.n	8003fc0 <__swsetup_r+0x98>
 8003f58:	0758      	lsls	r0, r3, #29
 8003f5a:	d512      	bpl.n	8003f82 <__swsetup_r+0x5a>
 8003f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f5e:	b141      	cbz	r1, 8003f72 <__swsetup_r+0x4a>
 8003f60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f64:	4299      	cmp	r1, r3
 8003f66:	d002      	beq.n	8003f6e <__swsetup_r+0x46>
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f905 	bl	8004178 <_free_r>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f043 0308 	orr.w	r3, r3, #8
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	b94b      	cbnz	r3, 8003fa2 <__swsetup_r+0x7a>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f98:	d003      	beq.n	8003fa2 <__swsetup_r+0x7a>
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 fab5 	bl	800450c <__smakebuf_r>
 8003fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa6:	f013 0201 	ands.w	r2, r3, #1
 8003faa:	d00a      	beq.n	8003fc2 <__swsetup_r+0x9a>
 8003fac:	2200      	movs	r2, #0
 8003fae:	60a2      	str	r2, [r4, #8]
 8003fb0:	6962      	ldr	r2, [r4, #20]
 8003fb2:	4252      	negs	r2, r2
 8003fb4:	61a2      	str	r2, [r4, #24]
 8003fb6:	6922      	ldr	r2, [r4, #16]
 8003fb8:	b942      	cbnz	r2, 8003fcc <__swsetup_r+0xa4>
 8003fba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003fbe:	d1c5      	bne.n	8003f4c <__swsetup_r+0x24>
 8003fc0:	bd38      	pop	{r3, r4, r5, pc}
 8003fc2:	0799      	lsls	r1, r3, #30
 8003fc4:	bf58      	it	pl
 8003fc6:	6962      	ldrpl	r2, [r4, #20]
 8003fc8:	60a2      	str	r2, [r4, #8]
 8003fca:	e7f4      	b.n	8003fb6 <__swsetup_r+0x8e>
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e7f7      	b.n	8003fc0 <__swsetup_r+0x98>
 8003fd0:	2000001c 	.word	0x2000001c

08003fd4 <memset>:
 8003fd4:	4402      	add	r2, r0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <memset+0xa>
 8003fdc:	4770      	bx	lr
 8003fde:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe2:	e7f9      	b.n	8003fd8 <memset+0x4>

08003fe4 <_close_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d06      	ldr	r5, [pc, #24]	@ (8004000 <_close_r+0x1c>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	602b      	str	r3, [r5, #0]
 8003ff0:	f7fc fcd5 	bl	800099e <_close>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d102      	bne.n	8003ffe <_close_r+0x1a>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	b103      	cbz	r3, 8003ffe <_close_r+0x1a>
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	20004258 	.word	0x20004258

08004004 <_reclaim_reent>:
 8004004:	4b29      	ldr	r3, [pc, #164]	@ (80040ac <_reclaim_reent+0xa8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4283      	cmp	r3, r0
 800400a:	b570      	push	{r4, r5, r6, lr}
 800400c:	4604      	mov	r4, r0
 800400e:	d04b      	beq.n	80040a8 <_reclaim_reent+0xa4>
 8004010:	69c3      	ldr	r3, [r0, #28]
 8004012:	b1ab      	cbz	r3, 8004040 <_reclaim_reent+0x3c>
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	b16b      	cbz	r3, 8004034 <_reclaim_reent+0x30>
 8004018:	2500      	movs	r5, #0
 800401a:	69e3      	ldr	r3, [r4, #28]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	5959      	ldr	r1, [r3, r5]
 8004020:	2900      	cmp	r1, #0
 8004022:	d13b      	bne.n	800409c <_reclaim_reent+0x98>
 8004024:	3504      	adds	r5, #4
 8004026:	2d80      	cmp	r5, #128	@ 0x80
 8004028:	d1f7      	bne.n	800401a <_reclaim_reent+0x16>
 800402a:	69e3      	ldr	r3, [r4, #28]
 800402c:	4620      	mov	r0, r4
 800402e:	68d9      	ldr	r1, [r3, #12]
 8004030:	f000 f8a2 	bl	8004178 <_free_r>
 8004034:	69e3      	ldr	r3, [r4, #28]
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	b111      	cbz	r1, 8004040 <_reclaim_reent+0x3c>
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f89c 	bl	8004178 <_free_r>
 8004040:	6961      	ldr	r1, [r4, #20]
 8004042:	b111      	cbz	r1, 800404a <_reclaim_reent+0x46>
 8004044:	4620      	mov	r0, r4
 8004046:	f000 f897 	bl	8004178 <_free_r>
 800404a:	69e1      	ldr	r1, [r4, #28]
 800404c:	b111      	cbz	r1, 8004054 <_reclaim_reent+0x50>
 800404e:	4620      	mov	r0, r4
 8004050:	f000 f892 	bl	8004178 <_free_r>
 8004054:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004056:	b111      	cbz	r1, 800405e <_reclaim_reent+0x5a>
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f88d 	bl	8004178 <_free_r>
 800405e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004060:	b111      	cbz	r1, 8004068 <_reclaim_reent+0x64>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f888 	bl	8004178 <_free_r>
 8004068:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800406a:	b111      	cbz	r1, 8004072 <_reclaim_reent+0x6e>
 800406c:	4620      	mov	r0, r4
 800406e:	f000 f883 	bl	8004178 <_free_r>
 8004072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004074:	b111      	cbz	r1, 800407c <_reclaim_reent+0x78>
 8004076:	4620      	mov	r0, r4
 8004078:	f000 f87e 	bl	8004178 <_free_r>
 800407c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800407e:	b111      	cbz	r1, 8004086 <_reclaim_reent+0x82>
 8004080:	4620      	mov	r0, r4
 8004082:	f000 f879 	bl	8004178 <_free_r>
 8004086:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004088:	b111      	cbz	r1, 8004090 <_reclaim_reent+0x8c>
 800408a:	4620      	mov	r0, r4
 800408c:	f000 f874 	bl	8004178 <_free_r>
 8004090:	6a23      	ldr	r3, [r4, #32]
 8004092:	b14b      	cbz	r3, 80040a8 <_reclaim_reent+0xa4>
 8004094:	4620      	mov	r0, r4
 8004096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800409a:	4718      	bx	r3
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 f86a 	bl	8004178 <_free_r>
 80040a4:	4631      	mov	r1, r6
 80040a6:	e7bb      	b.n	8004020 <_reclaim_reent+0x1c>
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	2000001c 	.word	0x2000001c

080040b0 <_lseek_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d07      	ldr	r5, [pc, #28]	@ (80040d0 <_lseek_r+0x20>)
 80040b4:	4604      	mov	r4, r0
 80040b6:	4608      	mov	r0, r1
 80040b8:	4611      	mov	r1, r2
 80040ba:	2200      	movs	r2, #0
 80040bc:	602a      	str	r2, [r5, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	f7fc fc94 	bl	80009ec <_lseek>
 80040c4:	1c43      	adds	r3, r0, #1
 80040c6:	d102      	bne.n	80040ce <_lseek_r+0x1e>
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	b103      	cbz	r3, 80040ce <_lseek_r+0x1e>
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	20004258 	.word	0x20004258

080040d4 <_read_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d07      	ldr	r5, [pc, #28]	@ (80040f4 <_read_r+0x20>)
 80040d8:	4604      	mov	r4, r0
 80040da:	4608      	mov	r0, r1
 80040dc:	4611      	mov	r1, r2
 80040de:	2200      	movs	r2, #0
 80040e0:	602a      	str	r2, [r5, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7fc fc3e 	bl	8000964 <_read>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d102      	bne.n	80040f2 <_read_r+0x1e>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	b103      	cbz	r3, 80040f2 <_read_r+0x1e>
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20004258 	.word	0x20004258

080040f8 <_write_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4d07      	ldr	r5, [pc, #28]	@ (8004118 <_write_r+0x20>)
 80040fc:	4604      	mov	r4, r0
 80040fe:	4608      	mov	r0, r1
 8004100:	4611      	mov	r1, r2
 8004102:	2200      	movs	r2, #0
 8004104:	602a      	str	r2, [r5, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fc f9f4 	bl	80004f4 <_write>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_write_r+0x1e>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_write_r+0x1e>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20004258 	.word	0x20004258

0800411c <__errno>:
 800411c:	4b01      	ldr	r3, [pc, #4]	@ (8004124 <__errno+0x8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	2000001c 	.word	0x2000001c

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4d0d      	ldr	r5, [pc, #52]	@ (8004160 <__libc_init_array+0x38>)
 800412c:	4c0d      	ldr	r4, [pc, #52]	@ (8004164 <__libc_init_array+0x3c>)
 800412e:	1b64      	subs	r4, r4, r5
 8004130:	10a4      	asrs	r4, r4, #2
 8004132:	2600      	movs	r6, #0
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	4d0b      	ldr	r5, [pc, #44]	@ (8004168 <__libc_init_array+0x40>)
 800413a:	4c0c      	ldr	r4, [pc, #48]	@ (800416c <__libc_init_array+0x44>)
 800413c:	f000 fa54 	bl	80045e8 <_init>
 8004140:	1b64      	subs	r4, r4, r5
 8004142:	10a4      	asrs	r4, r4, #2
 8004144:	2600      	movs	r6, #0
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f855 3b04 	ldr.w	r3, [r5], #4
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	0800468c 	.word	0x0800468c
 8004164:	0800468c 	.word	0x0800468c
 8004168:	0800468c 	.word	0x0800468c
 800416c:	08004690 	.word	0x08004690

08004170 <__retarget_lock_init_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_acquire_recursive>:
 8004172:	4770      	bx	lr

08004174 <__retarget_lock_release_recursive>:
 8004174:	4770      	bx	lr
	...

08004178 <_free_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4605      	mov	r5, r0
 800417c:	2900      	cmp	r1, #0
 800417e:	d041      	beq.n	8004204 <_free_r+0x8c>
 8004180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004184:	1f0c      	subs	r4, r1, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	bfb8      	it	lt
 800418a:	18e4      	addlt	r4, r4, r3
 800418c:	f000 f8e0 	bl	8004350 <__malloc_lock>
 8004190:	4a1d      	ldr	r2, [pc, #116]	@ (8004208 <_free_r+0x90>)
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	b933      	cbnz	r3, 80041a4 <_free_r+0x2c>
 8004196:	6063      	str	r3, [r4, #4]
 8004198:	6014      	str	r4, [r2, #0]
 800419a:	4628      	mov	r0, r5
 800419c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041a0:	f000 b8dc 	b.w	800435c <__malloc_unlock>
 80041a4:	42a3      	cmp	r3, r4
 80041a6:	d908      	bls.n	80041ba <_free_r+0x42>
 80041a8:	6820      	ldr	r0, [r4, #0]
 80041aa:	1821      	adds	r1, r4, r0
 80041ac:	428b      	cmp	r3, r1
 80041ae:	bf01      	itttt	eq
 80041b0:	6819      	ldreq	r1, [r3, #0]
 80041b2:	685b      	ldreq	r3, [r3, #4]
 80041b4:	1809      	addeq	r1, r1, r0
 80041b6:	6021      	streq	r1, [r4, #0]
 80041b8:	e7ed      	b.n	8004196 <_free_r+0x1e>
 80041ba:	461a      	mov	r2, r3
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	b10b      	cbz	r3, 80041c4 <_free_r+0x4c>
 80041c0:	42a3      	cmp	r3, r4
 80041c2:	d9fa      	bls.n	80041ba <_free_r+0x42>
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	1850      	adds	r0, r2, r1
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d10b      	bne.n	80041e4 <_free_r+0x6c>
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	4401      	add	r1, r0
 80041d0:	1850      	adds	r0, r2, r1
 80041d2:	4283      	cmp	r3, r0
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	d1e0      	bne.n	800419a <_free_r+0x22>
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	6053      	str	r3, [r2, #4]
 80041de:	4408      	add	r0, r1
 80041e0:	6010      	str	r0, [r2, #0]
 80041e2:	e7da      	b.n	800419a <_free_r+0x22>
 80041e4:	d902      	bls.n	80041ec <_free_r+0x74>
 80041e6:	230c      	movs	r3, #12
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	e7d6      	b.n	800419a <_free_r+0x22>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	1821      	adds	r1, r4, r0
 80041f0:	428b      	cmp	r3, r1
 80041f2:	bf04      	itt	eq
 80041f4:	6819      	ldreq	r1, [r3, #0]
 80041f6:	685b      	ldreq	r3, [r3, #4]
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	bf04      	itt	eq
 80041fc:	1809      	addeq	r1, r1, r0
 80041fe:	6021      	streq	r1, [r4, #0]
 8004200:	6054      	str	r4, [r2, #4]
 8004202:	e7ca      	b.n	800419a <_free_r+0x22>
 8004204:	bd38      	pop	{r3, r4, r5, pc}
 8004206:	bf00      	nop
 8004208:	20004264 	.word	0x20004264

0800420c <sbrk_aligned>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	4e0f      	ldr	r6, [pc, #60]	@ (800424c <sbrk_aligned+0x40>)
 8004210:	460c      	mov	r4, r1
 8004212:	6831      	ldr	r1, [r6, #0]
 8004214:	4605      	mov	r5, r0
 8004216:	b911      	cbnz	r1, 800421e <sbrk_aligned+0x12>
 8004218:	f000 f9d6 	bl	80045c8 <_sbrk_r>
 800421c:	6030      	str	r0, [r6, #0]
 800421e:	4621      	mov	r1, r4
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f9d1 	bl	80045c8 <_sbrk_r>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d103      	bne.n	8004232 <sbrk_aligned+0x26>
 800422a:	f04f 34ff 	mov.w	r4, #4294967295
 800422e:	4620      	mov	r0, r4
 8004230:	bd70      	pop	{r4, r5, r6, pc}
 8004232:	1cc4      	adds	r4, r0, #3
 8004234:	f024 0403 	bic.w	r4, r4, #3
 8004238:	42a0      	cmp	r0, r4
 800423a:	d0f8      	beq.n	800422e <sbrk_aligned+0x22>
 800423c:	1a21      	subs	r1, r4, r0
 800423e:	4628      	mov	r0, r5
 8004240:	f000 f9c2 	bl	80045c8 <_sbrk_r>
 8004244:	3001      	adds	r0, #1
 8004246:	d1f2      	bne.n	800422e <sbrk_aligned+0x22>
 8004248:	e7ef      	b.n	800422a <sbrk_aligned+0x1e>
 800424a:	bf00      	nop
 800424c:	20004260 	.word	0x20004260

08004250 <_malloc_r>:
 8004250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004254:	1ccd      	adds	r5, r1, #3
 8004256:	f025 0503 	bic.w	r5, r5, #3
 800425a:	3508      	adds	r5, #8
 800425c:	2d0c      	cmp	r5, #12
 800425e:	bf38      	it	cc
 8004260:	250c      	movcc	r5, #12
 8004262:	2d00      	cmp	r5, #0
 8004264:	4606      	mov	r6, r0
 8004266:	db01      	blt.n	800426c <_malloc_r+0x1c>
 8004268:	42a9      	cmp	r1, r5
 800426a:	d904      	bls.n	8004276 <_malloc_r+0x26>
 800426c:	230c      	movs	r3, #12
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	2000      	movs	r0, #0
 8004272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800434c <_malloc_r+0xfc>
 800427a:	f000 f869 	bl	8004350 <__malloc_lock>
 800427e:	f8d8 3000 	ldr.w	r3, [r8]
 8004282:	461c      	mov	r4, r3
 8004284:	bb44      	cbnz	r4, 80042d8 <_malloc_r+0x88>
 8004286:	4629      	mov	r1, r5
 8004288:	4630      	mov	r0, r6
 800428a:	f7ff ffbf 	bl	800420c <sbrk_aligned>
 800428e:	1c43      	adds	r3, r0, #1
 8004290:	4604      	mov	r4, r0
 8004292:	d158      	bne.n	8004346 <_malloc_r+0xf6>
 8004294:	f8d8 4000 	ldr.w	r4, [r8]
 8004298:	4627      	mov	r7, r4
 800429a:	2f00      	cmp	r7, #0
 800429c:	d143      	bne.n	8004326 <_malloc_r+0xd6>
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d04b      	beq.n	800433a <_malloc_r+0xea>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	4639      	mov	r1, r7
 80042a6:	4630      	mov	r0, r6
 80042a8:	eb04 0903 	add.w	r9, r4, r3
 80042ac:	f000 f98c 	bl	80045c8 <_sbrk_r>
 80042b0:	4581      	cmp	r9, r0
 80042b2:	d142      	bne.n	800433a <_malloc_r+0xea>
 80042b4:	6821      	ldr	r1, [r4, #0]
 80042b6:	1a6d      	subs	r5, r5, r1
 80042b8:	4629      	mov	r1, r5
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7ff ffa6 	bl	800420c <sbrk_aligned>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d03a      	beq.n	800433a <_malloc_r+0xea>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	442b      	add	r3, r5
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	f8d8 3000 	ldr.w	r3, [r8]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	bb62      	cbnz	r2, 800432c <_malloc_r+0xdc>
 80042d2:	f8c8 7000 	str.w	r7, [r8]
 80042d6:	e00f      	b.n	80042f8 <_malloc_r+0xa8>
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	1b52      	subs	r2, r2, r5
 80042dc:	d420      	bmi.n	8004320 <_malloc_r+0xd0>
 80042de:	2a0b      	cmp	r2, #11
 80042e0:	d917      	bls.n	8004312 <_malloc_r+0xc2>
 80042e2:	1961      	adds	r1, r4, r5
 80042e4:	42a3      	cmp	r3, r4
 80042e6:	6025      	str	r5, [r4, #0]
 80042e8:	bf18      	it	ne
 80042ea:	6059      	strne	r1, [r3, #4]
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	bf08      	it	eq
 80042f0:	f8c8 1000 	streq.w	r1, [r8]
 80042f4:	5162      	str	r2, [r4, r5]
 80042f6:	604b      	str	r3, [r1, #4]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f82f 	bl	800435c <__malloc_unlock>
 80042fe:	f104 000b 	add.w	r0, r4, #11
 8004302:	1d23      	adds	r3, r4, #4
 8004304:	f020 0007 	bic.w	r0, r0, #7
 8004308:	1ac2      	subs	r2, r0, r3
 800430a:	bf1c      	itt	ne
 800430c:	1a1b      	subne	r3, r3, r0
 800430e:	50a3      	strne	r3, [r4, r2]
 8004310:	e7af      	b.n	8004272 <_malloc_r+0x22>
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	42a3      	cmp	r3, r4
 8004316:	bf0c      	ite	eq
 8004318:	f8c8 2000 	streq.w	r2, [r8]
 800431c:	605a      	strne	r2, [r3, #4]
 800431e:	e7eb      	b.n	80042f8 <_malloc_r+0xa8>
 8004320:	4623      	mov	r3, r4
 8004322:	6864      	ldr	r4, [r4, #4]
 8004324:	e7ae      	b.n	8004284 <_malloc_r+0x34>
 8004326:	463c      	mov	r4, r7
 8004328:	687f      	ldr	r7, [r7, #4]
 800432a:	e7b6      	b.n	800429a <_malloc_r+0x4a>
 800432c:	461a      	mov	r2, r3
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	42a3      	cmp	r3, r4
 8004332:	d1fb      	bne.n	800432c <_malloc_r+0xdc>
 8004334:	2300      	movs	r3, #0
 8004336:	6053      	str	r3, [r2, #4]
 8004338:	e7de      	b.n	80042f8 <_malloc_r+0xa8>
 800433a:	230c      	movs	r3, #12
 800433c:	6033      	str	r3, [r6, #0]
 800433e:	4630      	mov	r0, r6
 8004340:	f000 f80c 	bl	800435c <__malloc_unlock>
 8004344:	e794      	b.n	8004270 <_malloc_r+0x20>
 8004346:	6005      	str	r5, [r0, #0]
 8004348:	e7d6      	b.n	80042f8 <_malloc_r+0xa8>
 800434a:	bf00      	nop
 800434c:	20004264 	.word	0x20004264

08004350 <__malloc_lock>:
 8004350:	4801      	ldr	r0, [pc, #4]	@ (8004358 <__malloc_lock+0x8>)
 8004352:	f7ff bf0e 	b.w	8004172 <__retarget_lock_acquire_recursive>
 8004356:	bf00      	nop
 8004358:	2000425c 	.word	0x2000425c

0800435c <__malloc_unlock>:
 800435c:	4801      	ldr	r0, [pc, #4]	@ (8004364 <__malloc_unlock+0x8>)
 800435e:	f7ff bf09 	b.w	8004174 <__retarget_lock_release_recursive>
 8004362:	bf00      	nop
 8004364:	2000425c 	.word	0x2000425c

08004368 <__sflush_r>:
 8004368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	0716      	lsls	r6, r2, #28
 8004372:	4605      	mov	r5, r0
 8004374:	460c      	mov	r4, r1
 8004376:	d454      	bmi.n	8004422 <__sflush_r+0xba>
 8004378:	684b      	ldr	r3, [r1, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	dc02      	bgt.n	8004384 <__sflush_r+0x1c>
 800437e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	dd48      	ble.n	8004416 <__sflush_r+0xae>
 8004384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004386:	2e00      	cmp	r6, #0
 8004388:	d045      	beq.n	8004416 <__sflush_r+0xae>
 800438a:	2300      	movs	r3, #0
 800438c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004390:	682f      	ldr	r7, [r5, #0]
 8004392:	6a21      	ldr	r1, [r4, #32]
 8004394:	602b      	str	r3, [r5, #0]
 8004396:	d030      	beq.n	80043fa <__sflush_r+0x92>
 8004398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	0759      	lsls	r1, r3, #29
 800439e:	d505      	bpl.n	80043ac <__sflush_r+0x44>
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	1ad2      	subs	r2, r2, r3
 80043a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043a6:	b10b      	cbz	r3, 80043ac <__sflush_r+0x44>
 80043a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043b0:	6a21      	ldr	r1, [r4, #32]
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b0      	blx	r6
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	d106      	bne.n	80043ca <__sflush_r+0x62>
 80043bc:	6829      	ldr	r1, [r5, #0]
 80043be:	291d      	cmp	r1, #29
 80043c0:	d82b      	bhi.n	800441a <__sflush_r+0xb2>
 80043c2:	4a2a      	ldr	r2, [pc, #168]	@ (800446c <__sflush_r+0x104>)
 80043c4:	410a      	asrs	r2, r1
 80043c6:	07d6      	lsls	r6, r2, #31
 80043c8:	d427      	bmi.n	800441a <__sflush_r+0xb2>
 80043ca:	2200      	movs	r2, #0
 80043cc:	6062      	str	r2, [r4, #4]
 80043ce:	04d9      	lsls	r1, r3, #19
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	6022      	str	r2, [r4, #0]
 80043d4:	d504      	bpl.n	80043e0 <__sflush_r+0x78>
 80043d6:	1c42      	adds	r2, r0, #1
 80043d8:	d101      	bne.n	80043de <__sflush_r+0x76>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	b903      	cbnz	r3, 80043e0 <__sflush_r+0x78>
 80043de:	6560      	str	r0, [r4, #84]	@ 0x54
 80043e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043e2:	602f      	str	r7, [r5, #0]
 80043e4:	b1b9      	cbz	r1, 8004416 <__sflush_r+0xae>
 80043e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043ea:	4299      	cmp	r1, r3
 80043ec:	d002      	beq.n	80043f4 <__sflush_r+0x8c>
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7ff fec2 	bl	8004178 <_free_r>
 80043f4:	2300      	movs	r3, #0
 80043f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80043f8:	e00d      	b.n	8004416 <__sflush_r+0xae>
 80043fa:	2301      	movs	r3, #1
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b0      	blx	r6
 8004400:	4602      	mov	r2, r0
 8004402:	1c50      	adds	r0, r2, #1
 8004404:	d1c9      	bne.n	800439a <__sflush_r+0x32>
 8004406:	682b      	ldr	r3, [r5, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0c6      	beq.n	800439a <__sflush_r+0x32>
 800440c:	2b1d      	cmp	r3, #29
 800440e:	d001      	beq.n	8004414 <__sflush_r+0xac>
 8004410:	2b16      	cmp	r3, #22
 8004412:	d11e      	bne.n	8004452 <__sflush_r+0xea>
 8004414:	602f      	str	r7, [r5, #0]
 8004416:	2000      	movs	r0, #0
 8004418:	e022      	b.n	8004460 <__sflush_r+0xf8>
 800441a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800441e:	b21b      	sxth	r3, r3
 8004420:	e01b      	b.n	800445a <__sflush_r+0xf2>
 8004422:	690f      	ldr	r7, [r1, #16]
 8004424:	2f00      	cmp	r7, #0
 8004426:	d0f6      	beq.n	8004416 <__sflush_r+0xae>
 8004428:	0793      	lsls	r3, r2, #30
 800442a:	680e      	ldr	r6, [r1, #0]
 800442c:	bf08      	it	eq
 800442e:	694b      	ldreq	r3, [r1, #20]
 8004430:	600f      	str	r7, [r1, #0]
 8004432:	bf18      	it	ne
 8004434:	2300      	movne	r3, #0
 8004436:	eba6 0807 	sub.w	r8, r6, r7
 800443a:	608b      	str	r3, [r1, #8]
 800443c:	f1b8 0f00 	cmp.w	r8, #0
 8004440:	dde9      	ble.n	8004416 <__sflush_r+0xae>
 8004442:	6a21      	ldr	r1, [r4, #32]
 8004444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004446:	4643      	mov	r3, r8
 8004448:	463a      	mov	r2, r7
 800444a:	4628      	mov	r0, r5
 800444c:	47b0      	blx	r6
 800444e:	2800      	cmp	r0, #0
 8004450:	dc08      	bgt.n	8004464 <__sflush_r+0xfc>
 8004452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800445a:	81a3      	strh	r3, [r4, #12]
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004464:	4407      	add	r7, r0
 8004466:	eba8 0800 	sub.w	r8, r8, r0
 800446a:	e7e7      	b.n	800443c <__sflush_r+0xd4>
 800446c:	dfbffffe 	.word	0xdfbffffe

08004470 <_fflush_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	690b      	ldr	r3, [r1, #16]
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b913      	cbnz	r3, 8004480 <_fflush_r+0x10>
 800447a:	2500      	movs	r5, #0
 800447c:	4628      	mov	r0, r5
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	b118      	cbz	r0, 800448a <_fflush_r+0x1a>
 8004482:	6a03      	ldr	r3, [r0, #32]
 8004484:	b90b      	cbnz	r3, 800448a <_fflush_r+0x1a>
 8004486:	f7ff fc39 	bl	8003cfc <__sinit>
 800448a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f3      	beq.n	800447a <_fflush_r+0xa>
 8004492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004494:	07d0      	lsls	r0, r2, #31
 8004496:	d404      	bmi.n	80044a2 <_fflush_r+0x32>
 8004498:	0599      	lsls	r1, r3, #22
 800449a:	d402      	bmi.n	80044a2 <_fflush_r+0x32>
 800449c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800449e:	f7ff fe68 	bl	8004172 <__retarget_lock_acquire_recursive>
 80044a2:	4628      	mov	r0, r5
 80044a4:	4621      	mov	r1, r4
 80044a6:	f7ff ff5f 	bl	8004368 <__sflush_r>
 80044aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044ac:	07da      	lsls	r2, r3, #31
 80044ae:	4605      	mov	r5, r0
 80044b0:	d4e4      	bmi.n	800447c <_fflush_r+0xc>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	059b      	lsls	r3, r3, #22
 80044b6:	d4e1      	bmi.n	800447c <_fflush_r+0xc>
 80044b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044ba:	f7ff fe5b 	bl	8004174 <__retarget_lock_release_recursive>
 80044be:	e7dd      	b.n	800447c <_fflush_r+0xc>

080044c0 <__swhatbuf_r>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	b096      	sub	sp, #88	@ 0x58
 80044cc:	4615      	mov	r5, r2
 80044ce:	461e      	mov	r6, r3
 80044d0:	da0d      	bge.n	80044ee <__swhatbuf_r+0x2e>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	bf14      	ite	ne
 80044de:	2340      	movne	r3, #64	@ 0x40
 80044e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044e4:	2000      	movs	r0, #0
 80044e6:	6031      	str	r1, [r6, #0]
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	b016      	add	sp, #88	@ 0x58
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
 80044ee:	466a      	mov	r2, sp
 80044f0:	f000 f848 	bl	8004584 <_fstat_r>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	dbec      	blt.n	80044d2 <__swhatbuf_r+0x12>
 80044f8:	9901      	ldr	r1, [sp, #4]
 80044fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004502:	4259      	negs	r1, r3
 8004504:	4159      	adcs	r1, r3
 8004506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800450a:	e7eb      	b.n	80044e4 <__swhatbuf_r+0x24>

0800450c <__smakebuf_r>:
 800450c:	898b      	ldrh	r3, [r1, #12]
 800450e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004510:	079d      	lsls	r5, r3, #30
 8004512:	4606      	mov	r6, r0
 8004514:	460c      	mov	r4, r1
 8004516:	d507      	bpl.n	8004528 <__smakebuf_r+0x1c>
 8004518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	2301      	movs	r3, #1
 8004522:	6163      	str	r3, [r4, #20]
 8004524:	b003      	add	sp, #12
 8004526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004528:	ab01      	add	r3, sp, #4
 800452a:	466a      	mov	r2, sp
 800452c:	f7ff ffc8 	bl	80044c0 <__swhatbuf_r>
 8004530:	9f00      	ldr	r7, [sp, #0]
 8004532:	4605      	mov	r5, r0
 8004534:	4639      	mov	r1, r7
 8004536:	4630      	mov	r0, r6
 8004538:	f7ff fe8a 	bl	8004250 <_malloc_r>
 800453c:	b948      	cbnz	r0, 8004552 <__smakebuf_r+0x46>
 800453e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004542:	059a      	lsls	r2, r3, #22
 8004544:	d4ee      	bmi.n	8004524 <__smakebuf_r+0x18>
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	e7e2      	b.n	8004518 <__smakebuf_r+0xc>
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	6020      	str	r0, [r4, #0]
 8004556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455a:	81a3      	strh	r3, [r4, #12]
 800455c:	9b01      	ldr	r3, [sp, #4]
 800455e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004562:	b15b      	cbz	r3, 800457c <__smakebuf_r+0x70>
 8004564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f81d 	bl	80045a8 <_isatty_r>
 800456e:	b128      	cbz	r0, 800457c <__smakebuf_r+0x70>
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	81a3      	strh	r3, [r4, #12]
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	431d      	orrs	r5, r3
 8004580:	81a5      	strh	r5, [r4, #12]
 8004582:	e7cf      	b.n	8004524 <__smakebuf_r+0x18>

08004584 <_fstat_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d07      	ldr	r5, [pc, #28]	@ (80045a4 <_fstat_r+0x20>)
 8004588:	2300      	movs	r3, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	f7fc fa10 	bl	80009b6 <_fstat>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d102      	bne.n	80045a0 <_fstat_r+0x1c>
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	b103      	cbz	r3, 80045a0 <_fstat_r+0x1c>
 800459e:	6023      	str	r3, [r4, #0]
 80045a0:	bd38      	pop	{r3, r4, r5, pc}
 80045a2:	bf00      	nop
 80045a4:	20004258 	.word	0x20004258

080045a8 <_isatty_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d06      	ldr	r5, [pc, #24]	@ (80045c4 <_isatty_r+0x1c>)
 80045ac:	2300      	movs	r3, #0
 80045ae:	4604      	mov	r4, r0
 80045b0:	4608      	mov	r0, r1
 80045b2:	602b      	str	r3, [r5, #0]
 80045b4:	f7fc fa0f 	bl	80009d6 <_isatty>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_isatty_r+0x1a>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_isatty_r+0x1a>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	20004258 	.word	0x20004258

080045c8 <_sbrk_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d06      	ldr	r5, [pc, #24]	@ (80045e4 <_sbrk_r+0x1c>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fc fa18 	bl	8000a08 <_sbrk>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_sbrk_r+0x1a>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_sbrk_r+0x1a>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	20004258 	.word	0x20004258

080045e8 <_init>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr

080045f4 <_fini>:
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f6:	bf00      	nop
 80045f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fa:	bc08      	pop	{r3}
 80045fc:	469e      	mov	lr, r3
 80045fe:	4770      	bx	lr
