
005_delete_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002c74  08002c74  00003c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cd4  08002cd4  00003cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cdc  08002cdc  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cdc  08002cdc  00003cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ce0  08002ce0  00003ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002ce4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00003fd0  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fe0  20003fe0  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082e9  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c85  00000000  00000000  0000c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0000dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068a  00000000  00000000  0000e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208f5  00000000  00000000  0000ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009dec  00000000  00000000  0002f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c820c  00000000  00000000  000395eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001017f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f8  00000000  00000000  0010183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00103a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c5c 	.word	0x08002c5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002c5c 	.word	0x08002c5c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000080 	.word	0x20000080

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b08e      	sub	sp, #56	@ 0x38
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 f9ab 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f833 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f88f 	bl	8000660 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_Handler, osPriorityNormal, 0, 128);
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <main+0x64>)
 8000544:	f107 041c 	add.w	r4, r7, #28
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f001 f93e 	bl	80017de <osThreadCreate>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <main+0x68>)
 8000566:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_handler, osPriorityAboveNormal, 0, 128);
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <main+0x6c>)
 800056a:	463c      	mov	r4, r7
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f92d 	bl	80017de <osThreadCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <main+0x70>)
 8000588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f001 f921 	bl	80017d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	bf00      	nop
 8000590:	e7fd      	b.n	800058e <main+0x5e>
 8000592:	bf00      	nop
 8000594:	08002c7c 	.word	0x08002c7c
 8000598:	20000280 	.word	0x20000280
 800059c:	08002ca0 	.word	0x08002ca0
 80005a0:	20000284 	.word	0x20000284

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fb26 	bl	8002c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <SystemClock_Config+0xb4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <SystemClock_Config+0xb4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <SystemClock_Config+0xb4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <SystemClock_Config+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <SystemClock_Config+0xb8>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <SystemClock_Config+0xb8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fc9f 	bl	8000f58 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000620:	f000 f8a0 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f000 ff02 	bl	8001448 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800064a:	f000 f88b 	bl	8000764 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	@ 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_GPIO_Init+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a1e      	ldr	r2, [pc, #120]	@ (80006f8 <MX_GPIO_Init+0x98>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_GPIO_Init+0x98>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_GPIO_Init+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a17      	ldr	r2, [pc, #92]	@ (80006f8 <MX_GPIO_Init+0x98>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_GPIO_Init+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0308 	and.w	r3, r3, #8
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006b4:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006b6:	f000 fc1b 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_GPIO_Init+0xa0>)
 80006ce:	f000 fa5b 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_GPIO_Init+0x9c>)
 80006ec:	f000 fa4c 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40020000 	.word	0x40020000

08000704 <Task1_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Handler */
void Task1_Handler(void const * argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 );
 800070c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000710:	4803      	ldr	r0, [pc, #12]	@ (8000720 <Task1_Handler+0x1c>)
 8000712:	f000 fc06 	bl	8000f22 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f000 f92c 	bl	8000974 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 );
 800071c:	bf00      	nop
 800071e:	e7f5      	b.n	800070c <Task1_Handler+0x8>
 8000720:	40020c00 	.word	0x40020c00

08000724 <Task2_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_handler */
void Task2_handler(void const * argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_handler */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 |GPIO_PIN_15);
 800072c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <Task2_handler+0x34>)
 8000732:	f000 fbf6 	bl	8000f22 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000736:	2064      	movs	r0, #100	@ 0x64
 8000738:	f000 f91c 	bl	8000974 <HAL_Delay>

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)  == GPIO_PIN_SET)
 800073c:	2101      	movs	r1, #1
 800073e:	4807      	ldr	r0, [pc, #28]	@ (800075c <Task2_handler+0x38>)
 8000740:	f000 fbbe 	bl	8000ec0 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d1f0      	bne.n	800072c <Task2_handler+0x8>
	  {
		  osThreadSuspend(Task2Handle);
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <Task2_handler+0x3c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f891 	bl	8001876 <osThreadSuspend>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14 |GPIO_PIN_15);
 8000754:	e7ea      	b.n	800072c <Task2_handler+0x8>
 8000756:	bf00      	nop
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40020000 	.word	0x40020000
 8000760:	20000284 	.word	0x20000284

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a11      	ldr	r2, [pc, #68]	@ (80007c4 <HAL_MspInit+0x54>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x54>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <HAL_MspInit+0x54>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <HAL_MspInit+0x54>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	210f      	movs	r1, #15
 80007b2:	f06f 0001 	mvn.w	r0, #1
 80007b6:	f000 f9be 	bl	8000b36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <NMI_Handler+0x4>

080007d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <UsageFault_Handler+0x4>

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 f897 	bl	8000934 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000806:	f001 fde3 	bl	80023d0 <xTaskGetSchedulerState>
 800080a:	4603      	mov	r3, r0
 800080c:	2b01      	cmp	r3, #1
 800080e:	d001      	beq.n	8000814 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000810:	f001 ffba 	bl	8002788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000874 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f002 f9d3 	bl	8002c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe5f 	bl	8000530 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000880:	08002ce4 	.word	0x08002ce4
  ldr r2, =_sbss
 8000884:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000888:	20003fe0 	.word	0x20003fe0

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f931 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff54 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f93b 	bl	8000b6e <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f911 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	20000288 	.word	0x20000288

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000288 	.word	0x20000288

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	@ (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	@ 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e16b      	b.n	8000e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 815a 	bne.w	8000e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80b4 	beq.w	8000e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	@ (8000e9c <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	@ (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	@ (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_GPIO_Init+0x324>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x20a>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d92:	2308      	movs	r3, #8
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000dae:	2300      	movs	r3, #0
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	f67f ae90 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b085      	sub	sp, #20
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f34:	887a      	ldrh	r2, [r7, #2]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	041a      	lsls	r2, r3, #16
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	400b      	ands	r3, r1
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	619a      	str	r2, [r3, #24]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e267      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d075      	beq.n	8001062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f76:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d00c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f82:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d112      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8e:	4b82      	ldr	r3, [pc, #520]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d05b      	beq.n	8001060 <HAL_RCC_OscConfig+0x108>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d157      	bne.n	8001060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e242      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fbc:	d106      	bne.n	8000fcc <HAL_RCC_OscConfig+0x74>
 8000fbe:	4b76      	ldr	r3, [pc, #472]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a75      	ldr	r2, [pc, #468]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0xb0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b70      	ldr	r3, [pc, #448]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6f      	ldr	r2, [pc, #444]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0xb0>
 8000ff0:	4b69      	ldr	r3, [pc, #420]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a68      	ldr	r2, [pc, #416]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b66      	ldr	r3, [pc, #408]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fca4 	bl	800095c <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fca0 	bl	800095c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	@ 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e207      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0xc0>
 8001036:	e014      	b.n	8001062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fc90 	bl	800095c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fc8c 	bl	800095c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	@ 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1f3      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	4b51      	ldr	r3, [pc, #324]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0xe8>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800106e:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107a:	4b47      	ldr	r3, [pc, #284]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001082:	2b08      	cmp	r3, #8
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001086:	4b44      	ldr	r3, [pc, #272]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x152>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1c7      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4937      	ldr	r1, [pc, #220]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	e03a      	b.n	8001136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c8:	4b34      	ldr	r3, [pc, #208]	@ (800119c <HAL_RCC_OscConfig+0x244>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fc45 	bl	800095c <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fc41 	bl	800095c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e1a8      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4925      	ldr	r1, [pc, #148]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_RCC_OscConfig+0x244>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fc24 	bl	800095c <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fc20 	bl	800095c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e187      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d036      	beq.n	80011b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <HAL_RCC_OscConfig+0x248>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001150:	f7ff fc04 	bl	800095c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fc00 	bl	800095c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e167      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_RCC_OscConfig+0x240>)
 800116c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x200>
 8001176:	e01b      	b.n	80011b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001178:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <HAL_RCC_OscConfig+0x248>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbed 	bl	800095c <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	e00e      	b.n	80011a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fbe9 	bl	800095c <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d907      	bls.n	80011a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e150      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
 8001198:	40023800 	.word	0x40023800
 800119c:	42470000 	.word	0x42470000
 80011a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80011a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1ea      	bne.n	8001186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8097 	beq.w	80012ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c2:	4b81      	ldr	r3, [pc, #516]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b7d      	ldr	r3, [pc, #500]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a7c      	ldr	r2, [pc, #496]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <HAL_RCC_OscConfig+0x474>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4b74      	ldr	r3, [pc, #464]	@ (80013cc <HAL_RCC_OscConfig+0x474>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a73      	ldr	r2, [pc, #460]	@ (80013cc <HAL_RCC_OscConfig+0x474>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fba9 	bl	800095c <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fba5 	bl	800095c <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e10c      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b6a      	ldr	r3, [pc, #424]	@ (80013cc <HAL_RCC_OscConfig+0x474>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x2ea>
 8001234:	4b64      	ldr	r3, [pc, #400]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001238:	4a63      	ldr	r2, [pc, #396]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001240:	e01c      	b.n	800127c <HAL_RCC_OscConfig+0x324>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x30c>
 800124a:	4b5f      	ldr	r3, [pc, #380]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800124e:	4a5e      	ldr	r2, [pc, #376]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6713      	str	r3, [r2, #112]	@ 0x70
 8001256:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125a:	4a5b      	ldr	r2, [pc, #364]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6713      	str	r3, [r2, #112]	@ 0x70
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0x324>
 8001264:	4b58      	ldr	r3, [pc, #352]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001268:	4a57      	ldr	r2, [pc, #348]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001270:	4b55      	ldr	r3, [pc, #340]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001274:	4a54      	ldr	r2, [pc, #336]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001276:	f023 0304 	bic.w	r3, r3, #4
 800127a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d015      	beq.n	80012b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff fb6a 	bl	800095c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fb66 	bl	800095c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0cb      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a2:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0ee      	beq.n	800128c <HAL_RCC_OscConfig+0x334>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fb54 	bl	800095c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b8:	f7ff fb50 	bl	800095c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e0b5      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ce:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80012d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ee      	bne.n	80012b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	4a38      	ldr	r2, [pc, #224]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a1 	beq.w	8001438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012f6:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d05c      	beq.n	80013bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d141      	bne.n	800138e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <HAL_RCC_OscConfig+0x478>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fb24 	bl	800095c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fb20 	bl	800095c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e087      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132a:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001344:	019b      	lsls	r3, r3, #6
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	3b01      	subs	r3, #1
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	491b      	ldr	r1, [pc, #108]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_RCC_OscConfig+0x478>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff faf9 	bl	800095c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff faf5 	bl	800095c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e05c      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x416>
 800138c:	e054      	b.n	8001438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_RCC_OscConfig+0x478>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fae2 	bl	800095c <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fade 	bl	800095c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e045      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_RCC_OscConfig+0x470>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x444>
 80013ba:	e03d      	b.n	8001438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e038      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000
 80013d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_RCC_OscConfig+0x4ec>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d028      	beq.n	8001434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d121      	bne.n	8001434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d11a      	bne.n	8001434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001404:	4013      	ands	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800140a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800140c:	4293      	cmp	r3, r2
 800140e:	d111      	bne.n	8001434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	085b      	lsrs	r3, r3, #1
 800141c:	3b01      	subs	r3, #1
 800141e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001420:	429a      	cmp	r2, r3
 8001422:	d107      	bne.n	8001434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d001      	beq.n	8001438 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0cc      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b68      	ldr	r3, [pc, #416]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d90c      	bls.n	8001484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b65      	ldr	r3, [pc, #404]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b63      	ldr	r3, [pc, #396]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0b8      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800149c:	4b59      	ldr	r3, [pc, #356]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a58      	ldr	r2, [pc, #352]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b4:	4b53      	ldr	r3, [pc, #332]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4a52      	ldr	r2, [pc, #328]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	494d      	ldr	r1, [pc, #308]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d044      	beq.n	8001568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d119      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e07f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d003      	beq.n	8001506 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	2b03      	cmp	r3, #3
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b3f      	ldr	r3, [pc, #252]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e067      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f023 0203 	bic.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4934      	ldr	r1, [pc, #208]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001538:	f7ff fa10 	bl	800095c <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	e00a      	b.n	8001556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff fa0c 	bl	800095c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e04f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 020c 	and.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	429a      	cmp	r2, r3
 8001566:	d1eb      	bne.n	8001540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	4b25      	ldr	r3, [pc, #148]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d20c      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e032      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4916      	ldr	r1, [pc, #88]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	490e      	ldr	r1, [pc, #56]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ce:	f000 f821 	bl	8001614 <HAL_RCC_GetSysClockFreq>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	490a      	ldr	r1, [pc, #40]	@ (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	5ccb      	ldrb	r3, [r1, r3]
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_RCC_ClockConfig+0x1c8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f970 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00
 8001604:	40023800 	.word	0x40023800
 8001608:	08002cc4 	.word	0x08002cc4
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001618:	b090      	sub	sp, #64	@ 0x40
 800161a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800162c:	4b59      	ldr	r3, [pc, #356]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 030c 	and.w	r3, r3, #12
 8001634:	2b08      	cmp	r3, #8
 8001636:	d00d      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x40>
 8001638:	2b08      	cmp	r3, #8
 800163a:	f200 80a1 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x16c>
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x34>
 8001642:	2b04      	cmp	r3, #4
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x3a>
 8001646:	e09b      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001648:	4b53      	ldr	r3, [pc, #332]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x184>)
 800164a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800164c:	e09b      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800164e:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_GetSysClockFreq+0x188>)
 8001650:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001652:	e098      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4b4f      	ldr	r3, [pc, #316]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800165c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165e:	4b4d      	ldr	r3, [pc, #308]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d028      	beq.n	80016bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166a:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	099b      	lsrs	r3, r3, #6
 8001670:	2200      	movs	r2, #0
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	627a      	str	r2, [r7, #36]	@ 0x24
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800167c:	2100      	movs	r1, #0
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_RCC_GetSysClockFreq+0x188>)
 8001680:	fb03 f201 	mul.w	r2, r3, r1
 8001684:	2300      	movs	r3, #0
 8001686:	fb00 f303 	mul.w	r3, r0, r3
 800168a:	4413      	add	r3, r2
 800168c:	4a43      	ldr	r2, [pc, #268]	@ (800179c <HAL_RCC_GetSysClockFreq+0x188>)
 800168e:	fba0 1202 	umull	r1, r2, r0, r2
 8001692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001694:	460a      	mov	r2, r1
 8001696:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001698:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800169a:	4413      	add	r3, r2
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800169e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a0:	2200      	movs	r2, #0
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	61fa      	str	r2, [r7, #28]
 80016a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80016ae:	f7fe fd8f 	bl	80001d0 <__aeabi_uldivmod>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4613      	mov	r3, r2
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ba:	e053      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	2200      	movs	r2, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	617a      	str	r2, [r7, #20]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016ce:	f04f 0b00 	mov.w	fp, #0
 80016d2:	4652      	mov	r2, sl
 80016d4:	465b      	mov	r3, fp
 80016d6:	f04f 0000 	mov.w	r0, #0
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	0159      	lsls	r1, r3, #5
 80016e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e4:	0150      	lsls	r0, r2, #5
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	ebb2 080a 	subs.w	r8, r2, sl
 80016ee:	eb63 090b 	sbc.w	r9, r3, fp
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001702:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001706:	ebb2 0408 	subs.w	r4, r2, r8
 800170a:	eb63 0509 	sbc.w	r5, r3, r9
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	00eb      	lsls	r3, r5, #3
 8001718:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171c:	00e2      	lsls	r2, r4, #3
 800171e:	4614      	mov	r4, r2
 8001720:	461d      	mov	r5, r3
 8001722:	eb14 030a 	adds.w	r3, r4, sl
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	eb45 030b 	adc.w	r3, r5, fp
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173a:	4629      	mov	r1, r5
 800173c:	028b      	lsls	r3, r1, #10
 800173e:	4621      	mov	r1, r4
 8001740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001744:	4621      	mov	r1, r4
 8001746:	028a      	lsls	r2, r1, #10
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800174e:	2200      	movs	r2, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	60fa      	str	r2, [r7, #12]
 8001754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001758:	f7fe fd3a 	bl	80001d0 <__aeabi_uldivmod>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4613      	mov	r3, r2
 8001762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x180>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800177e:	e002      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x184>)
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001788:	4618      	mov	r0, r3
 800178a:	3740      	adds	r7, #64	@ 0x40
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	00f42400 	.word	0x00f42400
 800179c:	017d7840 	.word	0x017d7840

080017a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80017ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b2:	2b84      	cmp	r3, #132	@ 0x84
 80017b4:	d005      	beq.n	80017c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80017b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	3303      	adds	r3, #3
 80017c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80017d4:	f000 fb02 	bl	8001ddc <vTaskStartScheduler>
  
  return osOK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}

080017de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e0:	b089      	sub	sp, #36	@ 0x24
 80017e2:	af04      	add	r7, sp, #16
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <osThreadCreate+0x54>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01c      	beq.n	8001832 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685c      	ldr	r4, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691e      	ldr	r6, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ffc8 	bl	80017a0 <makeFreeRtosPriority>
 8001810:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800181a:	9202      	str	r2, [sp, #8]
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	9100      	str	r1, [sp, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4632      	mov	r2, r6
 8001824:	4629      	mov	r1, r5
 8001826:	4620      	mov	r0, r4
 8001828:	f000 f8ac 	bl	8001984 <xTaskCreateStatic>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e01c      	b.n	800186c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685c      	ldr	r4, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800183e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffaa 	bl	80017a0 <makeFreeRtosPriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	9200      	str	r2, [sp, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4632      	mov	r2, r6
 800185a:	4629      	mov	r1, r5
 800185c:	4620      	mov	r0, r4
 800185e:	f000 f8f1 	bl	8001a44 <xTaskCreate>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d001      	beq.n	800186c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001876 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fa18 	bl	8001cb4 <vTaskSuspend>
  
  return osOK;
 8001884:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0208 	add.w	r2, r3, #8
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f04f 32ff 	mov.w	r2, #4294967295
 80018a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f103 0208 	add.w	r2, r3, #8
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0208 	add.w	r2, r3, #8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6892      	ldr	r2, [r2, #8]
 8001946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6852      	ldr	r2, [r2, #4]
 8001950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d103      	bne.n	8001964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	1e5a      	subs	r2, r3, #1
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	@ 0x38
 8001988:	af04      	add	r7, sp, #16
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80019b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80019b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	61fb      	str	r3, [r7, #28]
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80019ce:	2354      	movs	r3, #84	@ 0x54
 80019d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b54      	cmp	r3, #84	@ 0x54
 80019d6:	d00b      	beq.n	80019f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80019d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019dc:	f383 8811 	msr	BASEPRI, r3
 80019e0:	f3bf 8f6f 	isb	sy
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	61bb      	str	r3, [r7, #24]
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80019f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80019f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01e      	beq.n	8001a36 <xTaskCreateStatic+0xb2>
 80019f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01b      	beq.n	8001a36 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80019fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a10:	2300      	movs	r3, #0
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f850 	bl	8001ace <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a30:	f000 f8d6 	bl	8001be0 <prvAddNewTaskToReadyList>
 8001a34:	e001      	b.n	8001a3a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a3a:	697b      	ldr	r3, [r7, #20]
	}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3728      	adds	r7, #40	@ 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fee5 	bl	8002828 <pvPortMalloc>
 8001a5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00e      	beq.n	8001a84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a66:	2054      	movs	r0, #84	@ 0x54
 8001a68:	f000 fede 	bl	8002828 <pvPortMalloc>
 8001a6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a7a:	e005      	b.n	8001a88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f000 ffa1 	bl	80029c4 <vPortFree>
 8001a82:	e001      	b.n	8001a88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d017      	beq.n	8001abe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9303      	str	r3, [sp, #12]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f80e 	bl	8001ace <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ab2:	69f8      	ldr	r0, [r7, #28]
 8001ab4:	f000 f894 	bl	8001be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	e002      	b.n	8001ac4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b088      	sub	sp, #32
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ade:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f023 0307 	bic.w	r3, r3, #7
 8001af4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	617b      	str	r3, [r7, #20]
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01f      	beq.n	8001b5e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e012      	b.n	8001b4a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	7819      	ldrb	r1, [r3, #0]
 8001b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	3334      	adds	r3, #52	@ 0x34
 8001b34:	460a      	mov	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d9e9      	bls.n	8001b24 <prvInitialiseNewTask+0x56>
 8001b50:	e000      	b.n	8001b54 <prvInitialiseNewTask+0x86>
			{
				break;
 8001b52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b5c:	e003      	b.n	8001b66 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b68:	2b06      	cmp	r3, #6
 8001b6a:	d901      	bls.n	8001b70 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b74:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b7a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7e:	2200      	movs	r2, #0
 8001b80:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b84:	3304      	adds	r3, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fea1 	bl	80018ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8e:	3318      	adds	r3, #24
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fe9c 	bl	80018ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9e:	f1c3 0207 	rsb	r2, r3, #7
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	68f9      	ldr	r1, [r7, #12]
 8001bbe:	69b8      	ldr	r0, [r7, #24]
 8001bc0:	f000 fc24 	bl	800240c <pxPortInitialiseStack>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001be8:	f000 fd3e 	bl	8002668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <prvAddNewTaskToReadyList+0xb8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	4a29      	ldr	r2, [pc, #164]	@ (8001c98 <prvAddNewTaskToReadyList+0xb8>)
 8001bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <prvAddNewTaskToReadyList+0xbc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001bfe:	4a27      	ldr	r2, [pc, #156]	@ (8001c9c <prvAddNewTaskToReadyList+0xbc>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <prvAddNewTaskToReadyList+0xb8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d110      	bne.n	8001c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c0c:	f000 fb22 	bl	8002254 <prvInitialiseTaskLists>
 8001c10:	e00d      	b.n	8001c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <prvAddNewTaskToReadyList+0xc0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <prvAddNewTaskToReadyList+0xbc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d802      	bhi.n	8001c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c28:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <prvAddNewTaskToReadyList+0xbc>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <prvAddNewTaskToReadyList+0xc4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <prvAddNewTaskToReadyList+0xc4>)
 8001c36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <prvAddNewTaskToReadyList+0xc8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <prvAddNewTaskToReadyList+0xc8>)
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <prvAddNewTaskToReadyList+0xcc>)
 8001c58:	441a      	add	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f7ff fe41 	bl	80018e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c66:	f000 fd31 	bl	80026cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <prvAddNewTaskToReadyList+0xc0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <prvAddNewTaskToReadyList+0xbc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <prvAddNewTaskToReadyList+0xd0>)
 8001c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	2000038c 	.word	0x2000038c
 8001c9c:	2000028c 	.word	0x2000028c
 8001ca0:	20000398 	.word	0x20000398
 8001ca4:	200003a8 	.word	0x200003a8
 8001ca8:	20000394 	.word	0x20000394
 8001cac:	20000290 	.word	0x20000290
 8001cb0:	e000ed04 	.word	0xe000ed04

08001cb4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001cbc:	f000 fcd4 	bl	8002668 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <vTaskSuspend+0x18>
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <vTaskSuspend+0x108>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e000      	b.n	8001cce <vTaskSuspend+0x1a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe2b 	bl	8001930 <uxListRemove>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d115      	bne.n	8001d0c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	4936      	ldr	r1, [pc, #216]	@ (8001dc0 <vTaskSuspend+0x10c>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <vTaskSuspend+0x58>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <vTaskSuspend+0x110>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc4 <vTaskSuspend+0x110>)
 8001d0a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3318      	adds	r3, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe09 	bl	8001930 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4828      	ldr	r0, [pc, #160]	@ (8001dc8 <vTaskSuspend+0x114>)
 8001d26:	f7ff fddf 	bl	80018e8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d103      	bne.n	8001d3e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001d3e:	f000 fcc5 	bl	80026cc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <vTaskSuspend+0x118>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001d4a:	f000 fc8d 	bl	8002668 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001d4e:	f000 fb1f 	bl	8002390 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001d52:	f000 fcbb 	bl	80026cc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <vTaskSuspend+0x108>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d128      	bne.n	8001db2 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8001d60:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <vTaskSuspend+0x118>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d018      	beq.n	8001d9a <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <vTaskSuspend+0x11c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <vTaskSuspend+0xd4>
	__asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	60bb      	str	r3, [r7, #8]
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <vTaskSuspend+0x120>)
 8001d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f3bf 8f4f 	dsb	sy
 8001d94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d98:	e00b      	b.n	8001db2 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <vTaskSuspend+0x114>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <vTaskSuspend+0x124>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d103      	bne.n	8001dae <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <vTaskSuspend+0x108>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	}
 8001dac:	e001      	b.n	8001db2 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8001dae:	f000 f9dd 	bl	800216c <vTaskSwitchContext>
	}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000028c 	.word	0x2000028c
 8001dc0:	20000290 	.word	0x20000290
 8001dc4:	20000394 	.word	0x20000394
 8001dc8:	20000378 	.word	0x20000378
 8001dcc:	20000398 	.word	0x20000398
 8001dd0:	200003b4 	.word	0x200003b4
 8001dd4:	e000ed04 	.word	0xe000ed04
 8001dd8:	2000038c 	.word	0x2000038c

08001ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	@ 0x28
 8001de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001dea:	463a      	mov	r2, r7
 8001dec:	1d39      	adds	r1, r7, #4
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb82 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	9202      	str	r2, [sp, #8]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2300      	movs	r3, #0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	460a      	mov	r2, r1
 8001e0a:	491f      	ldr	r1, [pc, #124]	@ (8001e88 <vTaskStartScheduler+0xac>)
 8001e0c:	481f      	ldr	r0, [pc, #124]	@ (8001e8c <vTaskStartScheduler+0xb0>)
 8001e0e:	f7ff fdb9 	bl	8001984 <xTaskCreateStatic>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <vTaskStartScheduler+0xb4>)
 8001e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <vTaskStartScheduler+0xb4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001e20:	2301      	movs	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e001      	b.n	8001e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d116      	bne.n	8001e5e <vTaskStartScheduler+0x82>
	__asm volatile
 8001e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e34:	f383 8811 	msr	BASEPRI, r3
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	f3bf 8f4f 	dsb	sy
 8001e40:	613b      	str	r3, [r7, #16]
}
 8001e42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <vTaskStartScheduler+0xb8>)
 8001e46:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <vTaskStartScheduler+0xbc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e52:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <vTaskStartScheduler+0xc0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e58:	f000 fb62 	bl	8002520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e5c:	e00f      	b.n	8001e7e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d10b      	bne.n	8001e7e <vTaskStartScheduler+0xa2>
	__asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	60fb      	str	r3, [r7, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <vTaskStartScheduler+0x9e>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	08002cbc 	.word	0x08002cbc
 8001e8c:	08002225 	.word	0x08002225
 8001e90:	200003b0 	.word	0x200003b0
 8001e94:	200003ac 	.word	0x200003ac
 8001e98:	20000398 	.word	0x20000398
 8001e9c:	20000390 	.word	0x20000390

08001ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <vTaskSuspendAll+0x18>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a03      	ldr	r2, [pc, #12]	@ (8001eb8 <vTaskSuspendAll+0x18>)
 8001eac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	200003b4 	.word	0x200003b4

08001ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001eca:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <xTaskResumeAll+0x118>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <xTaskResumeAll+0x2e>
	__asm volatile
 8001ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	f3bf 8f4f 	dsb	sy
 8001ee2:	603b      	str	r3, [r7, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	e7fd      	b.n	8001ee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001eea:	f000 fbbd 	bl	8002668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <xTaskResumeAll+0x118>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	4a37      	ldr	r2, [pc, #220]	@ (8001fd4 <xTaskResumeAll+0x118>)
 8001ef6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ef8:	4b36      	ldr	r3, [pc, #216]	@ (8001fd4 <xTaskResumeAll+0x118>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d161      	bne.n	8001fc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f00:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <xTaskResumeAll+0x11c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05d      	beq.n	8001fc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f08:	e02e      	b.n	8001f68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f0a:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <xTaskResumeAll+0x120>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3318      	adds	r3, #24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd0a 	bl	8001930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fd05 	bl	8001930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <xTaskResumeAll+0x124>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe0 <xTaskResumeAll+0x124>)
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <xTaskResumeAll+0x128>)
 8001f46:	441a      	add	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4610      	mov	r0, r2
 8001f50:	f7ff fcca 	bl	80018e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f58:	4b23      	ldr	r3, [pc, #140]	@ (8001fe8 <xTaskResumeAll+0x12c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <xTaskResumeAll+0x130>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f68:	4b1c      	ldr	r3, [pc, #112]	@ (8001fdc <xTaskResumeAll+0x120>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1cc      	bne.n	8001f0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f76:	f000 fa0b 	bl	8002390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <xTaskResumeAll+0x134>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f86:	f000 f837 	bl	8001ff8 <xTaskIncrementTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <xTaskResumeAll+0x130>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f1      	bne.n	8001f86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <xTaskResumeAll+0x134>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <xTaskResumeAll+0x130>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <xTaskResumeAll+0x138>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001fc4:	f000 fb82 	bl	80026cc <vPortExitCritical>

	return xAlreadyYielded;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200003b4 	.word	0x200003b4
 8001fd8:	2000038c 	.word	0x2000038c
 8001fdc:	2000034c 	.word	0x2000034c
 8001fe0:	20000394 	.word	0x20000394
 8001fe4:	20000290 	.word	0x20000290
 8001fe8:	2000028c 	.word	0x2000028c
 8001fec:	200003a0 	.word	0x200003a0
 8001ff0:	2000039c 	.word	0x2000039c
 8001ff4:	e000ed04 	.word	0xe000ed04

08001ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002002:	4b4f      	ldr	r3, [pc, #316]	@ (8002140 <xTaskIncrementTick+0x148>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 808f 	bne.w	800212a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800200c:	4b4d      	ldr	r3, [pc, #308]	@ (8002144 <xTaskIncrementTick+0x14c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002014:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <xTaskIncrementTick+0x14c>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d121      	bne.n	8002064 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002020:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <xTaskIncrementTick+0x150>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <xTaskIncrementTick+0x4a>
	__asm volatile
 800202a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	603b      	str	r3, [r7, #0]
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	e7fd      	b.n	800203e <xTaskIncrementTick+0x46>
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <xTaskIncrementTick+0x150>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b40      	ldr	r3, [pc, #256]	@ (800214c <xTaskIncrementTick+0x154>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3e      	ldr	r2, [pc, #248]	@ (8002148 <xTaskIncrementTick+0x150>)
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4a3e      	ldr	r2, [pc, #248]	@ (800214c <xTaskIncrementTick+0x154>)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b3e      	ldr	r3, [pc, #248]	@ (8002150 <xTaskIncrementTick+0x158>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a3c      	ldr	r2, [pc, #240]	@ (8002150 <xTaskIncrementTick+0x158>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	f000 f996 	bl	8002390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002064:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <xTaskIncrementTick+0x15c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	429a      	cmp	r2, r3
 800206c:	d348      	bcc.n	8002100 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800206e:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <xTaskIncrementTick+0x150>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002078:	4b36      	ldr	r3, [pc, #216]	@ (8002154 <xTaskIncrementTick+0x15c>)
 800207a:	f04f 32ff 	mov.w	r2, #4294967295
 800207e:	601a      	str	r2, [r3, #0]
					break;
 8002080:	e03e      	b.n	8002100 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002082:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <xTaskIncrementTick+0x150>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d203      	bcs.n	80020a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800209a:	4a2e      	ldr	r2, [pc, #184]	@ (8002154 <xTaskIncrementTick+0x15c>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80020a0:	e02e      	b.n	8002100 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	3304      	adds	r3, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc42 	bl	8001930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3318      	adds	r3, #24
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fc39 	bl	8001930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	2201      	movs	r2, #1
 80020c4:	409a      	lsls	r2, r3
 80020c6:	4b24      	ldr	r3, [pc, #144]	@ (8002158 <xTaskIncrementTick+0x160>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	4a22      	ldr	r2, [pc, #136]	@ (8002158 <xTaskIncrementTick+0x160>)
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4a1f      	ldr	r2, [pc, #124]	@ (800215c <xTaskIncrementTick+0x164>)
 80020de:	441a      	add	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7ff fbfe 	bl	80018e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <xTaskIncrementTick+0x168>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3b9      	bcc.n	800206e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020fe:	e7b6      	b.n	800206e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <xTaskIncrementTick+0x168>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002106:	4915      	ldr	r1, [pc, #84]	@ (800215c <xTaskIncrementTick+0x164>)
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d901      	bls.n	800211c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002118:	2301      	movs	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <xTaskIncrementTick+0x16c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e004      	b.n	8002134 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800212a:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <xTaskIncrementTick+0x170>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <xTaskIncrementTick+0x170>)
 8002132:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002134:	697b      	ldr	r3, [r7, #20]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200003b4 	.word	0x200003b4
 8002144:	20000390 	.word	0x20000390
 8002148:	20000344 	.word	0x20000344
 800214c:	20000348 	.word	0x20000348
 8002150:	200003a4 	.word	0x200003a4
 8002154:	200003ac 	.word	0x200003ac
 8002158:	20000394 	.word	0x20000394
 800215c:	20000290 	.word	0x20000290
 8002160:	2000028c 	.word	0x2000028c
 8002164:	200003a0 	.word	0x200003a0
 8002168:	2000039c 	.word	0x2000039c

0800216c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002172:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <vTaskSwitchContext+0xa4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800217a:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <vTaskSwitchContext+0xa8>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002180:	e040      	b.n	8002204 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002182:	4b24      	ldr	r3, [pc, #144]	@ (8002214 <vTaskSwitchContext+0xa8>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <vTaskSwitchContext+0xac>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	f1c3 031f 	rsb	r3, r3, #31
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	491f      	ldr	r1, [pc, #124]	@ (800221c <vTaskSwitchContext+0xb0>)
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80021b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	607b      	str	r3, [r7, #4]
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <vTaskSwitchContext+0x5a>
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <vTaskSwitchContext+0xb0>)
 80021d6:	4413      	add	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3308      	adds	r3, #8
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d104      	bne.n	80021fa <vTaskSwitchContext+0x8e>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <vTaskSwitchContext+0xb4>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	200003b4 	.word	0x200003b4
 8002214:	200003a0 	.word	0x200003a0
 8002218:	20000394 	.word	0x20000394
 800221c:	20000290 	.word	0x20000290
 8002220:	2000028c 	.word	0x2000028c

08002224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800222c:	f000 f852 	bl	80022d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <prvIdleTask+0x28>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d9f9      	bls.n	800222c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <prvIdleTask+0x2c>)
 800223a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002248:	e7f0      	b.n	800222c <prvIdleTask+0x8>
 800224a:	bf00      	nop
 800224c:	20000290 	.word	0x20000290
 8002250:	e000ed04 	.word	0xe000ed04

08002254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	e00c      	b.n	800227a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <prvInitialiseTaskLists+0x60>)
 800226c:	4413      	add	r3, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fb0d 	bl	800188e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3301      	adds	r3, #1
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d9ef      	bls.n	8002260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002280:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <prvInitialiseTaskLists+0x64>)
 8002282:	f7ff fb04 	bl	800188e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002286:	480d      	ldr	r0, [pc, #52]	@ (80022bc <prvInitialiseTaskLists+0x68>)
 8002288:	f7ff fb01 	bl	800188e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <prvInitialiseTaskLists+0x6c>)
 800228e:	f7ff fafe 	bl	800188e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002292:	480c      	ldr	r0, [pc, #48]	@ (80022c4 <prvInitialiseTaskLists+0x70>)
 8002294:	f7ff fafb 	bl	800188e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002298:	480b      	ldr	r0, [pc, #44]	@ (80022c8 <prvInitialiseTaskLists+0x74>)
 800229a:	f7ff faf8 	bl	800188e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <prvInitialiseTaskLists+0x78>)
 80022a0:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <prvInitialiseTaskLists+0x64>)
 80022a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022a4:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <prvInitialiseTaskLists+0x7c>)
 80022a6:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <prvInitialiseTaskLists+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000290 	.word	0x20000290
 80022b8:	2000031c 	.word	0x2000031c
 80022bc:	20000330 	.word	0x20000330
 80022c0:	2000034c 	.word	0x2000034c
 80022c4:	20000360 	.word	0x20000360
 80022c8:	20000378 	.word	0x20000378
 80022cc:	20000344 	.word	0x20000344
 80022d0:	20000348 	.word	0x20000348

080022d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022da:	e019      	b.n	8002310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80022dc:	f000 f9c4 	bl	8002668 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <prvCheckTasksWaitingTermination+0x50>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fb1f 	bl	8001930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <prvCheckTasksWaitingTermination+0x54>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <prvCheckTasksWaitingTermination+0x54>)
 80022fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <prvCheckTasksWaitingTermination+0x58>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <prvCheckTasksWaitingTermination+0x58>)
 8002304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002306:	f000 f9e1 	bl	80026cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f810 	bl	8002330 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <prvCheckTasksWaitingTermination+0x58>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e1      	bne.n	80022dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000360 	.word	0x20000360
 8002328:	2000038c 	.word	0x2000038c
 800232c:	20000374 	.word	0x20000374

08002330 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb3c 	bl	80029c4 <vPortFree>
				vPortFree( pxTCB );
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fb39 	bl	80029c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002352:	e019      	b.n	8002388 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800235a:	2b01      	cmp	r3, #1
 800235c:	d103      	bne.n	8002366 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fb30 	bl	80029c4 <vPortFree>
	}
 8002364:	e010      	b.n	8002388 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800236c:	2b02      	cmp	r3, #2
 800236e:	d00b      	beq.n	8002388 <prvDeleteTCB+0x58>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	60fb      	str	r3, [r7, #12]
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <prvDeleteTCB+0x54>
	}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <prvResetNextTaskUnblockTime+0x38>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023a0:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <prvResetNextTaskUnblockTime+0x3c>)
 80023a2:	f04f 32ff 	mov.w	r2, #4294967295
 80023a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80023a8:	e008      	b.n	80023bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <prvResetNextTaskUnblockTime+0x38>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <prvResetNextTaskUnblockTime+0x3c>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20000344 	.word	0x20000344
 80023cc:	200003ac 	.word	0x200003ac

080023d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80023d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <xTaskGetSchedulerState+0x34>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80023de:	2301      	movs	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e008      	b.n	80023f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023e4:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <xTaskGetSchedulerState+0x38>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80023ec:	2302      	movs	r3, #2
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	e001      	b.n	80023f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80023f6:	687b      	ldr	r3, [r7, #4]
	}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000398 	.word	0x20000398
 8002408:	200003b4 	.word	0x200003b4

0800240c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3b04      	subs	r3, #4
 800241c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3b04      	subs	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3b04      	subs	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800243c:	4a0c      	ldr	r2, [pc, #48]	@ (8002470 <pxPortInitialiseStack+0x64>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3b14      	subs	r3, #20
 8002446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b04      	subs	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f06f 0202 	mvn.w	r2, #2
 800245a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3b20      	subs	r3, #32
 8002460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	08002475 	.word	0x08002475

08002474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <prvTaskExitError+0x58>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d00b      	beq.n	80024a0 <prvTaskExitError+0x2c>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	60fb      	str	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <prvTaskExitError+0x28>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	60bb      	str	r3, [r7, #8]
}
 80024b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024b4:	bf00      	nop
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0fc      	beq.n	80024b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000000c 	.word	0x2000000c

080024d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024d0:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <pxCurrentTCBConst2>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	6808      	ldr	r0, [r1, #0]
 80024d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024da:	f380 8809 	msr	PSP, r0
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f380 8811 	msr	BASEPRI, r0
 80024ea:	4770      	bx	lr
 80024ec:	f3af 8000 	nop.w

080024f0 <pxCurrentTCBConst2>:
 80024f0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop

080024f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <prvPortStartFirstTask+0x24>)
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	6800      	ldr	r0, [r0, #0]
 80024fe:	f380 8808 	msr	MSP, r0
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8814 	msr	CONTROL, r0
 800250a:	b662      	cpsie	i
 800250c:	b661      	cpsie	f
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	df00      	svc	0
 8002518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800251a:	bf00      	nop
 800251c:	e000ed08 	.word	0xe000ed08

08002520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002526:	4b47      	ldr	r3, [pc, #284]	@ (8002644 <xPortStartScheduler+0x124>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a47      	ldr	r2, [pc, #284]	@ (8002648 <xPortStartScheduler+0x128>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10b      	bne.n	8002548 <xPortStartScheduler+0x28>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	60fb      	str	r3, [r7, #12]
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002548:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <xPortStartScheduler+0x124>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3f      	ldr	r2, [pc, #252]	@ (800264c <xPortStartScheduler+0x12c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10b      	bne.n	800256a <xPortStartScheduler+0x4a>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	613b      	str	r3, [r7, #16]
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	e7fd      	b.n	8002566 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800256a:	4b39      	ldr	r3, [pc, #228]	@ (8002650 <xPortStartScheduler+0x130>)
 800256c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	22ff      	movs	r2, #255	@ 0xff
 800257a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <xPortStartScheduler+0x134>)
 8002590:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002592:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <xPortStartScheduler+0x138>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002598:	e009      	b.n	80025ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800259a:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <xPortStartScheduler+0x138>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002658 <xPortStartScheduler+0x138>)
 80025a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b6:	2b80      	cmp	r3, #128	@ 0x80
 80025b8:	d0ef      	beq.n	800259a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <xPortStartScheduler+0x138>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00b      	beq.n	80025de <xPortStartScheduler+0xbe>
	__asm volatile
 80025c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	60bb      	str	r3, [r7, #8]
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	e7fd      	b.n	80025da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <xPortStartScheduler+0x138>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <xPortStartScheduler+0x138>)
 80025e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <xPortStartScheduler+0x138>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025f0:	4a19      	ldr	r2, [pc, #100]	@ (8002658 <xPortStartScheduler+0x138>)
 80025f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <xPortStartScheduler+0x13c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a16      	ldr	r2, [pc, #88]	@ (800265c <xPortStartScheduler+0x13c>)
 8002602:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002606:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <xPortStartScheduler+0x13c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a13      	ldr	r2, [pc, #76]	@ (800265c <xPortStartScheduler+0x13c>)
 800260e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002612:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002614:	f000 f8da 	bl	80027cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <xPortStartScheduler+0x140>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800261e:	f000 f8f9 	bl	8002814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <xPortStartScheduler+0x144>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <xPortStartScheduler+0x144>)
 8002628:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800262c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800262e:	f7ff ff63 	bl	80024f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002632:	f7ff fd9b 	bl	800216c <vTaskSwitchContext>
	prvTaskExitError();
 8002636:	f7ff ff1d 	bl	8002474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	e000ed00 	.word	0xe000ed00
 8002648:	410fc271 	.word	0x410fc271
 800264c:	410fc270 	.word	0x410fc270
 8002650:	e000e400 	.word	0xe000e400
 8002654:	200003b8 	.word	0x200003b8
 8002658:	200003bc 	.word	0x200003bc
 800265c:	e000ed20 	.word	0xe000ed20
 8002660:	2000000c 	.word	0x2000000c
 8002664:	e000ef34 	.word	0xe000ef34

08002668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	607b      	str	r3, [r7, #4]
}
 8002680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <vPortEnterCritical+0x5c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	4a0e      	ldr	r2, [pc, #56]	@ (80026c4 <vPortEnterCritical+0x5c>)
 800268a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <vPortEnterCritical+0x5c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d110      	bne.n	80026b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <vPortEnterCritical+0x60>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	603b      	str	r3, [r7, #0]
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	e7fd      	b.n	80026b2 <vPortEnterCritical+0x4a>
	}
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	e000ed04 	.word	0xe000ed04

080026cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <vPortExitCritical+0x50>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <vPortExitCritical+0x26>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	607b      	str	r3, [r7, #4]
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	e7fd      	b.n	80026ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <vPortExitCritical+0x50>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	4a08      	ldr	r2, [pc, #32]	@ (800271c <vPortExitCritical+0x50>)
 80026fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <vPortExitCritical+0x50>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <vPortExitCritical+0x44>
 8002704:	2300      	movs	r3, #0
 8002706:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800270e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	2000000c 	.word	0x2000000c

08002720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002720:	f3ef 8009 	mrs	r0, PSP
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <pxCurrentTCBConst>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f01e 0f10 	tst.w	lr, #16
 8002730:	bf08      	it	eq
 8002732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273a:	6010      	str	r0, [r2, #0]
 800273c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002744:	f380 8811 	msr	BASEPRI, r0
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f7ff fd0c 	bl	800216c <vTaskSwitchContext>
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f380 8811 	msr	BASEPRI, r0
 800275c:	bc09      	pop	{r0, r3}
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	6808      	ldr	r0, [r1, #0]
 8002762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002766:	f01e 0f10 	tst.w	lr, #16
 800276a:	bf08      	it	eq
 800276c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002770:	f380 8809 	msr	PSP, r0
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w

08002780 <pxCurrentTCBConst>:
 8002780:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop

08002788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	607b      	str	r3, [r7, #4]
}
 80027a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80027a2:	f7ff fc29 	bl	8001ff8 <xTaskIncrementTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027ac:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <xPortSysTickHandler+0x40>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f383 8811 	msr	BASEPRI, r3
}
 80027be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <vPortSetupTimerInterrupt+0x34>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <vPortSetupTimerInterrupt+0x38>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <vPortSetupTimerInterrupt+0x3c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <vPortSetupTimerInterrupt+0x40>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <vPortSetupTimerInterrupt+0x44>)
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027ee:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <vPortSetupTimerInterrupt+0x34>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010
 8002804:	e000e018 	.word	0xe000e018
 8002808:	20000000 	.word	0x20000000
 800280c:	10624dd3 	.word	0x10624dd3
 8002810:	e000e014 	.word	0xe000e014

08002814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002824 <vPortEnableVFP+0x10>
 8002818:	6801      	ldr	r1, [r0, #0]
 800281a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800281e:	6001      	str	r1, [r0, #0]
 8002820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002822:	bf00      	nop
 8002824:	e000ed88 	.word	0xe000ed88

08002828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002834:	f7ff fb34 	bl	8001ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002838:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <pvPortMalloc+0x184>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002840:	f000 f924 	bl	8002a8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002844:	4b5a      	ldr	r3, [pc, #360]	@ (80029b0 <pvPortMalloc+0x188>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8095 	bne.w	800297c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01e      	beq.n	8002896 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002858:	2208      	movs	r2, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	2b00      	cmp	r3, #0
 8002868:	d015      	beq.n	8002896 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f023 0307 	bic.w	r3, r3, #7
 8002870:	3308      	adds	r3, #8
 8002872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <pvPortMalloc+0x6e>
	__asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	617b      	str	r3, [r7, #20]
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d06f      	beq.n	800297c <pvPortMalloc+0x154>
 800289c:	4b45      	ldr	r3, [pc, #276]	@ (80029b4 <pvPortMalloc+0x18c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d86a      	bhi.n	800297c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80028a6:	4b44      	ldr	r3, [pc, #272]	@ (80029b8 <pvPortMalloc+0x190>)
 80028a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80028aa:	4b43      	ldr	r3, [pc, #268]	@ (80029b8 <pvPortMalloc+0x190>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028b0:	e004      	b.n	80028bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d903      	bls.n	80028ce <pvPortMalloc+0xa6>
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f1      	bne.n	80028b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80028ce:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <pvPortMalloc+0x184>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d051      	beq.n	800297c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2208      	movs	r2, #8
 80028de:	4413      	add	r3, r2
 80028e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2308      	movs	r3, #8
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d920      	bls.n	800293c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <pvPortMalloc+0xfc>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	613b      	str	r3, [r7, #16]
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1ad2      	subs	r2, r2, r3
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002936:	69b8      	ldr	r0, [r7, #24]
 8002938:	f000 f90a 	bl	8002b50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <pvPortMalloc+0x18c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <pvPortMalloc+0x18c>)
 8002948:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800294a:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <pvPortMalloc+0x18c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <pvPortMalloc+0x194>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d203      	bcs.n	800295e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002956:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <pvPortMalloc+0x18c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	@ (80029bc <pvPortMalloc+0x194>)
 800295c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <pvPortMalloc+0x188>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	431a      	orrs	r2, r3
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <pvPortMalloc+0x198>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <pvPortMalloc+0x198>)
 800297a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800297c:	f7ff fa9e 	bl	8001ebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <pvPortMalloc+0x17a>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	60fb      	str	r3, [r7, #12]
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	e7fd      	b.n	800299e <pvPortMalloc+0x176>
	return pvReturn;
 80029a2:	69fb      	ldr	r3, [r7, #28]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3728      	adds	r7, #40	@ 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20003fc8 	.word	0x20003fc8
 80029b0:	20003fdc 	.word	0x20003fdc
 80029b4:	20003fcc 	.word	0x20003fcc
 80029b8:	20003fc0 	.word	0x20003fc0
 80029bc:	20003fd0 	.word	0x20003fd0
 80029c0:	20003fd4 	.word	0x20003fd4

080029c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04f      	beq.n	8002a76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80029d6:	2308      	movs	r3, #8
 80029d8:	425b      	negs	r3, r3
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4413      	add	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <vPortFree+0xbc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <vPortFree+0x46>
	__asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	60fb      	str	r3, [r7, #12]
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <vPortFree+0x66>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	60bb      	str	r3, [r7, #8]
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <vPortFree+0xbc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d01e      	beq.n	8002a76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11a      	bne.n	8002a76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <vPortFree+0xbc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a50:	f7ff fa26 	bl	8001ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <vPortFree+0xc0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a09      	ldr	r2, [pc, #36]	@ (8002a84 <vPortFree+0xc0>)
 8002a60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a62:	6938      	ldr	r0, [r7, #16]
 8002a64:	f000 f874 	bl	8002b50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002a68:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <vPortFree+0xc4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a06      	ldr	r2, [pc, #24]	@ (8002a88 <vPortFree+0xc4>)
 8002a70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002a72:	f7ff fa23 	bl	8001ebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20003fdc 	.word	0x20003fdc
 8002a84:	20003fcc 	.word	0x20003fcc
 8002a88:	20003fd8 	.word	0x20003fd8

08002a8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002a96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a98:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <prvHeapInit+0xac>)
 8002a9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00c      	beq.n	8002ac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0307 	bic.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <prvHeapInit+0xac>)
 8002abc:	4413      	add	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <prvHeapInit+0xb0>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <prvHeapInit+0xb0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ad8:	2208      	movs	r2, #8
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <prvHeapInit+0xb4>)
 8002aec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <prvHeapInit+0xb4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <prvHeapInit+0xb4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	1ad2      	subs	r2, r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <prvHeapInit+0xb4>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <prvHeapInit+0xb8>)
 8002b1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <prvHeapInit+0xbc>)
 8002b22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <prvHeapInit+0xc0>)
 8002b26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	200003c0 	.word	0x200003c0
 8002b3c:	20003fc0 	.word	0x20003fc0
 8002b40:	20003fc8 	.word	0x20003fc8
 8002b44:	20003fd0 	.word	0x20003fd0
 8002b48:	20003fcc 	.word	0x20003fcc
 8002b4c:	20003fdc 	.word	0x20003fdc

08002b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b58:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <prvInsertBlockIntoFreeList+0xac>)
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e002      	b.n	8002b64 <prvInsertBlockIntoFreeList+0x14>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d8f7      	bhi.n	8002b5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4413      	add	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d108      	bne.n	8002b92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	441a      	add	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d118      	bne.n	8002bd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <prvInsertBlockIntoFreeList+0xb0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d00d      	beq.n	8002bce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e008      	b.n	8002be0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002bce:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <prvInsertBlockIntoFreeList+0xb0>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e003      	b.n	8002be0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d002      	beq.n	8002bee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20003fc0 	.word	0x20003fc0
 8002c00:	20003fc8 	.word	0x20003fc8

08002c04 <memset>:
 8002c04:	4402      	add	r2, r0
 8002c06:	4603      	mov	r3, r0
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d100      	bne.n	8002c0e <memset+0xa>
 8002c0c:	4770      	bx	lr
 8002c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c12:	e7f9      	b.n	8002c08 <memset+0x4>

08002c14 <__libc_init_array>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	4d0d      	ldr	r5, [pc, #52]	@ (8002c4c <__libc_init_array+0x38>)
 8002c18:	4c0d      	ldr	r4, [pc, #52]	@ (8002c50 <__libc_init_array+0x3c>)
 8002c1a:	1b64      	subs	r4, r4, r5
 8002c1c:	10a4      	asrs	r4, r4, #2
 8002c1e:	2600      	movs	r6, #0
 8002c20:	42a6      	cmp	r6, r4
 8002c22:	d109      	bne.n	8002c38 <__libc_init_array+0x24>
 8002c24:	4d0b      	ldr	r5, [pc, #44]	@ (8002c54 <__libc_init_array+0x40>)
 8002c26:	4c0c      	ldr	r4, [pc, #48]	@ (8002c58 <__libc_init_array+0x44>)
 8002c28:	f000 f818 	bl	8002c5c <_init>
 8002c2c:	1b64      	subs	r4, r4, r5
 8002c2e:	10a4      	asrs	r4, r4, #2
 8002c30:	2600      	movs	r6, #0
 8002c32:	42a6      	cmp	r6, r4
 8002c34:	d105      	bne.n	8002c42 <__libc_init_array+0x2e>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3c:	4798      	blx	r3
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7ee      	b.n	8002c20 <__libc_init_array+0xc>
 8002c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c46:	4798      	blx	r3
 8002c48:	3601      	adds	r6, #1
 8002c4a:	e7f2      	b.n	8002c32 <__libc_init_array+0x1e>
 8002c4c:	08002cdc 	.word	0x08002cdc
 8002c50:	08002cdc 	.word	0x08002cdc
 8002c54:	08002cdc 	.word	0x08002cdc
 8002c58:	08002ce0 	.word	0x08002ce0

08002c5c <_init>:
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	bf00      	nop
 8002c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c62:	bc08      	pop	{r3}
 8002c64:	469e      	mov	lr, r3
 8002c66:	4770      	bx	lr

08002c68 <_fini>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	bf00      	nop
 8002c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6e:	bc08      	pop	{r3}
 8002c70:	469e      	mov	lr, r3
 8002c72:	4770      	bx	lr
