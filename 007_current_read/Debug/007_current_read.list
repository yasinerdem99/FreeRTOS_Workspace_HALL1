
007_current_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003408  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003590  08003590  00004590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d4  080035d4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080035d4  080035d4  000045d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035dc  080035dc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035dc  080035dc  000045dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080035e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000290  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acad  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd6  00000000  00000000  0000fd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  00011920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000713  00000000  00000000  00012270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021600  00000000  00000000  00012983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2c0  00000000  00000000  00033f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6867  00000000  00000000  0003f243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105aaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b74  00000000  00000000  00105af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00108664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003578 	.word	0x08003578

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003578 	.word	0x08003578

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_write>:
/* USER CODE BEGIN 0 */

	MAXREFDES24_Device dev1, dev2;

	int _write(int file, char *ptr, int len)
	{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
		if(file==STDERR_FILENO)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2b02      	cmp	r3, #2
 8000504:	d116      	bne.n	8000534 <_write+0x40>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)RED, strlen(RED) , HAL_MAX_DELAY);
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	2205      	movs	r2, #5
 800050c:	491d      	ldr	r1, [pc, #116]	@ (8000584 <_write+0x90>)
 800050e:	481e      	ldr	r0, [pc, #120]	@ (8000588 <_write+0x94>)
 8000510:	f001 ffce 	bl	80024b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	b29a      	uxth	r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	481a      	ldr	r0, [pc, #104]	@ (8000588 <_write+0x94>)
 8000520:	f001 ffc6 	bl	80024b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)RST, strlen(RST) , HAL_MAX_DELAY);
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	2204      	movs	r2, #4
 800052a:	4918      	ldr	r1, [pc, #96]	@ (800058c <_write+0x98>)
 800052c:	4816      	ldr	r0, [pc, #88]	@ (8000588 <_write+0x94>)
 800052e:	f001 ffbf 	bl	80024b0 <HAL_UART_Transmit>
 8000532:	e021      	b.n	8000578 <_write+0x84>
		}

		else if(file==STDOUT_FILENO)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d116      	bne.n	8000568 <_write+0x74>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)GRN, strlen(GRN) , HAL_MAX_DELAY);
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	2205      	movs	r2, #5
 8000540:	4913      	ldr	r1, [pc, #76]	@ (8000590 <_write+0x9c>)
 8000542:	4811      	ldr	r0, [pc, #68]	@ (8000588 <_write+0x94>)
 8000544:	f001 ffb4 	bl	80024b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	b29a      	uxth	r2, r3
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	68b9      	ldr	r1, [r7, #8]
 8000552:	480d      	ldr	r0, [pc, #52]	@ (8000588 <_write+0x94>)
 8000554:	f001 ffac 	bl	80024b0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)RST, strlen(GRN) , HAL_MAX_DELAY);
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	2205      	movs	r2, #5
 800055e:	490b      	ldr	r1, [pc, #44]	@ (800058c <_write+0x98>)
 8000560:	4809      	ldr	r0, [pc, #36]	@ (8000588 <_write+0x94>)
 8000562:	f001 ffa5 	bl	80024b0 <HAL_UART_Transmit>
 8000566:	e007      	b.n	8000578 <_write+0x84>
		}
		else
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len , HAL_MAX_DELAY);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	b29a      	uxth	r2, r3
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <_write+0x94>)
 8000574:	f001 ff9c 	bl	80024b0 <HAL_UART_Transmit>

		}
		return len;
 8000578:	687b      	ldr	r3, [r7, #4]
	}
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	08003590 	.word	0x08003590
 8000588:	20000134 	.word	0x20000134
 800058c:	08003598 	.word	0x08003598
 8000590:	080035a0 	.word	0x080035a0

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc85 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f843 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f941 	bl	8000828 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a6:	f000 f8a9 	bl	80006fc <MX_SPI1_Init>
  MX_SPI2_Init();
 80005aa:	f000 f8dd 	bl	8000768 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005ae:	f000 f911 	bl	80007d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

   max24_init(&dev1, &hspi1, GPIOC, GPIO_PIN_5, GPIOC, GPIO_PIN_4);
 80005b2:	2310      	movs	r3, #16
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <main+0x74>)
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2320      	movs	r3, #32
 80005bc:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <main+0x74>)
 80005be:	4913      	ldr	r1, [pc, #76]	@ (800060c <main+0x78>)
 80005c0:	4813      	ldr	r0, [pc, #76]	@ (8000610 <main+0x7c>)
 80005c2:	f000 fa74 	bl	8000aae <max24_init>
   max24_init(&dev2, &hspi2, GPIOB, GPIO_PIN_11, GPIOB, GPIO_PIN_10);
 80005c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <main+0x80>)
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <main+0x80>)
 80005d6:	4910      	ldr	r1, [pc, #64]	@ (8000618 <main+0x84>)
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <main+0x88>)
 80005da:	f000 fa68 	bl	8000aae <max24_init>

   max24_setCurrent(&dev1, 10.0f);  // 10 mA gönder
 80005de:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80005e2:	480b      	ldr	r0, [pc, #44]	@ (8000610 <main+0x7c>)
 80005e4:	f000 fa0b 	bl	80009fe <max24_setCurrent>
   max24_setCurrent(&dev2, -5.0f);  // -5 mA gönder
 80005e8:	eeb9 0a04 	vmov.f32	s0, #148	@ 0xc0a00000 -5.0
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <main+0x88>)
 80005ee:	f000 fa06 	bl	80009fe <max24_setCurrent>

   fprintf(stdin, "system started\r\n");
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <main+0x8c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2210      	movs	r2, #16
 80005fa:	2101      	movs	r1, #1
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <main+0x90>)
 80005fe:	f002 fc21 	bl	8002e44 <fwrite>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	bf00      	nop
 8000604:	e7fd      	b.n	8000602 <main+0x6e>
 8000606:	bf00      	nop
 8000608:	40020800 	.word	0x40020800
 800060c:	20000084 	.word	0x20000084
 8000610:	2000017c 	.word	0x2000017c
 8000614:	40020400 	.word	0x40020400
 8000618:	200000dc 	.word	0x200000dc
 800061c:	20000190 	.word	0x20000190
 8000620:	20000018 	.word	0x20000018
 8000624:	080035a8 	.word	0x080035a8

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fcea 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	@ (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	@ 0xa8
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ff09 	bl	80014c4 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f938 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f96a 	bl	80019b4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 f921 	bl	800092c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f001 fb51 	bl	8001df4 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f8e8 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000084 	.word	0x20000084
 8000764:	40013000 	.word	0x40013000

08000768 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SPI2_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_SPI2_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SPI2_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SPI2_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_SPI2_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SPI2_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_SPI2_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SPI2_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SPI2_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_SPI2_Init+0x64>)
 80007ba:	f001 fb1b 	bl	8001df4 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f8b2 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000dc 	.word	0x200000dc
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	@ (8000824 <MX_USART1_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART1_UART_Init+0x4c>)
 800080c:	f001 fe00 	bl	8002410 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f889 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000134 	.word	0x20000134
 8000824:	40011000 	.word	0x40011000

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a36      	ldr	r2, [pc, #216]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b30      	ldr	r3, [pc, #192]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a2f      	ldr	r2, [pc, #188]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b2d      	ldr	r3, [pc, #180]	@ (8000920 <MX_GPIO_Init+0xf8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_GPIO_Init+0xf8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_GPIO_Init+0xf8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <MX_GPIO_Init+0xf8>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_GPIO_Init+0xf8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_1_Pin|CS1_2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2130      	movs	r1, #48	@ 0x30
 80008b2:	481c      	ldr	r0, [pc, #112]	@ (8000924 <MX_GPIO_Init+0xfc>)
 80008b4:	f000 fdec 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS2_1_Pin|CS2_2_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MX_GPIO_Init+0x100>)
 80008c0:	f000 fde6 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_1_Pin CS1_2_Pin */
  GPIO_InitStruct.Pin = CS1_1_Pin|CS1_2_Pin;
 80008c4:	2330      	movs	r3, #48	@ 0x30
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_GPIO_Init+0xfc>)
 80008dc:	f000 fc3c 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80008e0:	f241 0301 	movw	r3, #4097	@ 0x1001
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_GPIO_Init+0x100>)
 80008f6:	f000 fc2f 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS2_1_Pin CS2_2_Pin */
  GPIO_InitStruct.Pin = CS2_1_Pin|CS2_2_Pin;
 80008fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_GPIO_Init+0x100>)
 8000914:	f000 fc20 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40020800 	.word	0x40020800
 8000928:	40020400 	.word	0x40020400

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <max24_convertToDacCode>:

// ------------------------------
// Yardımcı Fonksiyon: DAC Code
// ------------------------------
static uint16_t max24_convertToDacCode(float current_mA, float range_mA)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000942:	edc7 0a00 	vstr	s1, [r7]
    float ratio = (current_mA + range_mA) / (2 * range_mA);
 8000946:	ed97 7a01 	vldr	s14, [r7, #4]
 800094a:	edd7 7a00 	vldr	s15, [r7]
 800094e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000952:	edd7 7a00 	vldr	s15, [r7]
 8000956:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800095a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800095e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ratio < 0.0f) ratio = 0.0f;
 8000962:	edd7 7a03 	vldr	s15, [r7, #12]
 8000966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096e:	d502      	bpl.n	8000976 <max24_convertToDacCode+0x3e>
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
    if (ratio > 1.0f) ratio = 1.0f;
 8000976:	edd7 7a03 	vldr	s15, [r7, #12]
 800097a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800097e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	dd02      	ble.n	800098e <max24_convertToDacCode+0x56>
 8000988:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800098c:	60fb      	str	r3, [r7, #12]
    return (uint16_t)(ratio * 0xFFFF);
 800098e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000992:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80009b0 <max24_convertToDacCode+0x78>
 8000996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099e:	ee17 3a90 	vmov	r3, s15
 80009a2:	b29b      	uxth	r3, r3
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	477fff00 	.word	0x477fff00

080009b4 <max24_xfer>:

// ------------------------------
// SPI Transfer
// ------------------------------
MAX_StatusTypeDef max24_xfer(MAXREFDES24_Device *dev, uint8_t *tx, uint8_t *rx, uint16_t len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	807b      	strh	r3, [r7, #2]
    max24_spi_select(dev->cs_dac_port, dev->cs_dac_pin);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	891b      	ldrh	r3, [r3, #8]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f000 f839 	bl	8000a44 <max24_spi_select>
    MAX_StatusTypeDef status = max24_spi_xfer(dev->hspi, tx, rx, len);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	f000 f852 	bl	8000a84 <max24_spi_xfer>
 80009e0:	4603      	mov	r3, r0
 80009e2:	75fb      	strb	r3, [r7, #23]
    max24_spi_deselect(dev->cs_dac_port, dev->cs_dac_pin);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	891b      	ldrh	r3, [r3, #8]
 80009ec:	4619      	mov	r1, r3
 80009ee:	4610      	mov	r0, r2
 80009f0:	f000 f838 	bl	8000a64 <max24_spi_deselect>
    return status;
 80009f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <max24_setCurrent>:

// ------------------------------
// Akım Ayarlama
// ------------------------------
MAX_StatusTypeDef max24_setCurrent(MAXREFDES24_Device *dev, float current_mA)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	ed87 0a00 	vstr	s0, [r7]
    uint8_t txData[2];
    uint8_t rxData[2];
    uint16_t dacValue = max24_convertToDacCode(current_mA, 20.0f); // ±20 mA aralık
 8000a0a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000a0e:	ed97 0a00 	vldr	s0, [r7]
 8000a12:	f7ff ff91 	bl	8000938 <max24_convertToDacCode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	81fb      	strh	r3, [r7, #14]

    txData[0] = (dacValue >> 8) & 0xFF;
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	733b      	strb	r3, [r7, #12]
    txData[1] = dacValue & 0xFF;
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	737b      	strb	r3, [r7, #13]

    return max24_xfer(dev, txData, rxData, 2);
 8000a2a:	f107 0208 	add.w	r2, r7, #8
 8000a2e:	f107 010c 	add.w	r1, r7, #12
 8000a32:	2302      	movs	r3, #2
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ffbd 	bl	80009b4 <max24_xfer>
 8000a3a:	4603      	mov	r3, r0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <max24_spi_select>:

#include "stm32f4xx_hal.h"
#include "maxrefdes24_spi_stm.h"

void max24_spi_select(void *port, uint16_t pin)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin((GPIO_TypeDef *)port, pin, GPIO_PIN_RESET);
 8000a50:	887b      	ldrh	r3, [r7, #2]
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 fd1a 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <max24_spi_deselect>:

void max24_spi_deselect(void *port, uint16_t pin)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin((GPIO_TypeDef *)port, pin, GPIO_PIN_SET);
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	2201      	movs	r2, #1
 8000a74:	4619      	mov	r1, r3
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 fd0a 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <max24_spi_xfer>:

int max24_spi_xfer(void *hspi, uint8_t *tx, uint8_t *rx, uint16_t len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	807b      	strh	r3, [r7, #2]
    return HAL_SPI_TransmitReceive((SPI_HandleTypeDef *)hspi, tx, rx, len, HAL_MAX_DELAY);
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f001 fa31 	bl	8001f06 <HAL_SPI_TransmitReceive>
 8000aa4:	4603      	mov	r3, r0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <max24_init>:

void max24_init(MAXREFDES24_Device *dev,
                SPI_HandleTypeDef *hspi,
                GPIO_TypeDef *cs_dac_port, uint16_t cs_dac_pin,
                GPIO_TypeDef *cs_dc_port, uint16_t cs_dc_pin)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	807b      	strh	r3, [r7, #2]
    dev->hspi = hspi;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	601a      	str	r2, [r3, #0]
    dev->cs_dac_port = cs_dac_port;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	605a      	str	r2, [r3, #4]
    dev->cs_dac_pin = cs_dac_pin;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	811a      	strh	r2, [r3, #8]
    dev->cs_dc_port = cs_dc_port;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	60da      	str	r2, [r3, #12]
    dev->cs_dc_pin = cs_dc_pin;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	8bba      	ldrh	r2, [r7, #28]
 8000ad8:	821a      	strh	r2, [r3, #16]
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a32      	ldr	r2, [pc, #200]	@ (8000c20 <HAL_SPI_MspInit+0xe8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12c      	bne.n	8000bb4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a30      	ldr	r2, [pc, #192]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a29      	ldr	r2, [pc, #164]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b92:	23e0      	movs	r3, #224	@ 0xe0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	481e      	ldr	r0, [pc, #120]	@ (8000c28 <HAL_SPI_MspInit+0xf0>)
 8000bae:	f000 fad3 	bl	8001158 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bb2:	e031      	b.n	8000c18 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12c      	bne.n	8000c18 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_SPI_MspInit+0xec>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bf6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <HAL_SPI_MspInit+0xf8>)
 8000c14:	f000 faa0 	bl	8001158 <HAL_GPIO_Init>
}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	@ 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40003800 	.word	0x40003800
 8000c30:	40020400 	.word	0x40020400

08000c34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_UART_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12c      	bne.n	8000cb0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	4a17      	ldr	r2, [pc, #92]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a10      	ldr	r2, [pc, #64]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_UART_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <HAL_UART_MspInit+0x8c>)
 8000cac:	f000 fa54 	bl	8001158 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f917 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00a      	b.n	8000d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d34:	f3af 8000 	nop.w
 8000d38:	4601      	mov	r1, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	b2ca      	uxtb	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3301      	adds	r3, #1
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	dbf0      	blt.n	8000d34 <_read+0x12>
  }

  return len;
 8000d52:	687b      	ldr	r3, [r7, #4]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d84:	605a      	str	r2, [r3, #4]
  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_isatty>:

int _isatty(int file)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b085      	sub	sp, #20
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f002 f95a 	bl	80030ac <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200001a4 	.word	0x200001a4
 8000e2c:	200002f8 	.word	0x200002f8

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
 8000e62:	2300      	movs	r3, #0
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:
 8000e66:	58d4      	ldr	r4, [r2, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:
 8000e6c:	18c4      	adds	r4, r0, r3
 8000e6e:	428c      	cmp	r4, r1
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
 8000e76:	2300      	movs	r3, #0
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:
 8000e7e:	42a2      	cmp	r2, r4
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
 8000e82:	f002 f919 	bl	80030b8 <__libc_init_array>
 8000e86:	f7ff fb85 	bl	8000594 <main>
 8000e8a:	4770      	bx	lr
 8000e8c:	20020000 	.word	0x20020000
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000068 	.word	0x20000068
 8000e98:	080035e4 	.word	0x080035e4
 8000e9c:	20000068 	.word	0x20000068
 8000ea0:	200002f8 	.word	0x200002f8

08000ea4 <ADC_IRQHandler>:
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f90d 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe04 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f917 	bl	800113e <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f8ed 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200001a8 	.word	0x200001a8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001a8 	.word	0x200001a8

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	@ 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	@ (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	@ (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	@ (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	@ (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	@ (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_GPIO_Init+0x334>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e267      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d075      	beq.n	80015ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00c      	beq.n	8001508 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b85      	ldr	r3, [pc, #532]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d112      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b82      	ldr	r3, [pc, #520]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b7e      	ldr	r3, [pc, #504]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05b      	beq.n	80015cc <HAL_RCC_OscConfig+0x108>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e242      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x74>
 800152a:	4b76      	ldr	r3, [pc, #472]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a75      	ldr	r2, [pc, #468]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b70      	ldr	r3, [pc, #448]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6f      	ldr	r2, [pc, #444]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b6d      	ldr	r3, [pc, #436]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6c      	ldr	r2, [pc, #432]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xb0>
 800155c:	4b69      	ldr	r3, [pc, #420]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a68      	ldr	r2, [pc, #416]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b66      	ldr	r3, [pc, #408]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a65      	ldr	r2, [pc, #404]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fcfa 	bl	8000f74 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fcf6 	bl	8000f74 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	@ 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e207      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b5b      	ldr	r3, [pc, #364]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xc0>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fce6 	bl	8000f74 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fce2 	bl	8000f74 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1f3      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b51      	ldr	r3, [pc, #324]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0xe8>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d063      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015da:	4b4a      	ldr	r3, [pc, #296]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b47      	ldr	r3, [pc, #284]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d11c      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b44      	ldr	r3, [pc, #272]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	4b41      	ldr	r3, [pc, #260]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d001      	beq.n	8001616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e1c7      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4937      	ldr	r1, [pc, #220]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e03a      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <HAL_RCC_OscConfig+0x244>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fc9b 	bl	8000f74 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fc97 	bl	8000f74 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e1a8      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4925      	ldr	r1, [pc, #148]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e015      	b.n	80016a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_RCC_OscConfig+0x244>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fc7a 	bl	8000f74 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001684:	f7ff fc76 	bl	8000f74 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e187      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d036      	beq.n	800171c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_RCC_OscConfig+0x248>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff fc5a 	bl	8000f74 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc56 	bl	8000f74 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e167      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_RCC_OscConfig+0x240>)
 80016d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x200>
 80016e2:	e01b      	b.n	800171c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_RCC_OscConfig+0x248>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fc43 	bl	8000f74 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	e00e      	b.n	8001710 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fc3f 	bl	8000f74 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d907      	bls.n	8001710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e150      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
 8001704:	40023800 	.word	0x40023800
 8001708:	42470000 	.word	0x42470000
 800170c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001710:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ea      	bne.n	80016f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8097 	beq.w	8001858 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172e:	4b81      	ldr	r3, [pc, #516]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10f      	bne.n	800175a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b7d      	ldr	r3, [pc, #500]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a7c      	ldr	r2, [pc, #496]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b7a      	ldr	r3, [pc, #488]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b77      	ldr	r3, [pc, #476]	@ (8001938 <HAL_RCC_OscConfig+0x474>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b74      	ldr	r3, [pc, #464]	@ (8001938 <HAL_RCC_OscConfig+0x474>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a73      	ldr	r2, [pc, #460]	@ (8001938 <HAL_RCC_OscConfig+0x474>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff fbff 	bl	8000f74 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fbfb 	bl	8000f74 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e10c      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b6a      	ldr	r3, [pc, #424]	@ (8001938 <HAL_RCC_OscConfig+0x474>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x2ea>
 80017a0:	4b64      	ldr	r3, [pc, #400]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a4:	4a63      	ldr	r2, [pc, #396]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ac:	e01c      	b.n	80017e8 <HAL_RCC_OscConfig+0x324>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x30c>
 80017b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0x324>
 80017d0:	4b58      	ldr	r3, [pc, #352]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d4:	4a57      	ldr	r2, [pc, #348]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	@ 0x70
 80017dc:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a54      	ldr	r2, [pc, #336]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d015      	beq.n	800181c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fbc0 	bl	8000f74 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fbbc 	bl	8000f74 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0cb      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	4b49      	ldr	r3, [pc, #292]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0ee      	beq.n	80017f8 <HAL_RCC_OscConfig+0x334>
 800181a:	e014      	b.n	8001846 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fbaa 	bl	8000f74 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff fba6 	bl	8000f74 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0b5      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183a:	4b3e      	ldr	r3, [pc, #248]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ee      	bne.n	8001824 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b39      	ldr	r3, [pc, #228]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a1 	beq.w	80019a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b08      	cmp	r3, #8
 800186c:	d05c      	beq.n	8001928 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d141      	bne.n	80018fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001876:	4b31      	ldr	r3, [pc, #196]	@ (800193c <HAL_RCC_OscConfig+0x478>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fb7a 	bl	8000f74 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fb76 	bl	8000f74 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e087      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	491b      	ldr	r1, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x478>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb4f 	bl	8000f74 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb4b 	bl	8000f74 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e05c      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x416>
 80018f8:	e054      	b.n	80019a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_RCC_OscConfig+0x478>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb38 	bl	8000f74 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb34 	bl	8000f74 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e045      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_RCC_OscConfig+0x470>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x444>
 8001926:	e03d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e038      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000
 800193c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCC_OscConfig+0x4ec>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d028      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d121      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d11a      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001970:	4013      	ands	r3, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001978:	4293      	cmp	r3, r2
 800197a:	d111      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001986:	085b      	lsrs	r3, r3, #1
 8001988:	3b01      	subs	r3, #1
 800198a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0cc      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b68      	ldr	r3, [pc, #416]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d90c      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b65      	ldr	r3, [pc, #404]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b63      	ldr	r3, [pc, #396]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b8      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a20:	4b53      	ldr	r3, [pc, #332]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a52      	ldr	r2, [pc, #328]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	494d      	ldr	r1, [pc, #308]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d044      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d119      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e067      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4934      	ldr	r1, [pc, #208]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7ff fa66 	bl	8000f74 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff fa62 	bl	8000f74 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e04f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d20c      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e032      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4916      	ldr	r1, [pc, #88]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	490e      	ldr	r1, [pc, #56]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3a:	f000 f821 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	490a      	ldr	r1, [pc, #40]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	5ccb      	ldrb	r3, [r1, r3]
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	4a09      	ldr	r2, [pc, #36]	@ (8001b78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f9c6 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00
 8001b70:	40023800 	.word	0x40023800
 8001b74:	080035bc 	.word	0x080035bc
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b094      	sub	sp, #80	@ 0x50
 8001b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b98:	4b79      	ldr	r3, [pc, #484]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d00d      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	f200 80e1 	bhi.w	8001d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb2:	e0db      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b73      	ldr	r3, [pc, #460]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb8:	e0db      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bba:	4b73      	ldr	r3, [pc, #460]	@ (8001d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bbe:	e0d8      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bca:	4b6d      	ldr	r3, [pc, #436]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	2200      	movs	r2, #0
 8001bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	f04f 0000 	mov.w	r0, #0
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	0159      	lsls	r1, r3, #5
 8001c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c04:	0150      	lsls	r0, r2, #5
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	1a51      	subs	r1, r2, r1
 8001c0e:	6139      	str	r1, [r7, #16]
 8001c10:	4629      	mov	r1, r5
 8001c12:	eb63 0301 	sbc.w	r3, r3, r1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c24:	4659      	mov	r1, fp
 8001c26:	018b      	lsls	r3, r1, #6
 8001c28:	4651      	mov	r1, sl
 8001c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2e:	4651      	mov	r1, sl
 8001c30:	018a      	lsls	r2, r1, #6
 8001c32:	4651      	mov	r1, sl
 8001c34:	ebb2 0801 	subs.w	r8, r2, r1
 8001c38:	4659      	mov	r1, fp
 8001c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c52:	4690      	mov	r8, r2
 8001c54:	4699      	mov	r9, r3
 8001c56:	4623      	mov	r3, r4
 8001c58:	eb18 0303 	adds.w	r3, r8, r3
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	462b      	mov	r3, r5
 8001c60:	eb49 0303 	adc.w	r3, r9, r3
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c72:	4629      	mov	r1, r5
 8001c74:	024b      	lsls	r3, r1, #9
 8001c76:	4621      	mov	r1, r4
 8001c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	024a      	lsls	r2, r1, #9
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c86:	2200      	movs	r2, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c90:	f7fe fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c9c:	e058      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	099b      	lsrs	r3, r3, #6
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4611      	mov	r1, r2
 8001caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb8:	4642      	mov	r2, r8
 8001cba:	464b      	mov	r3, r9
 8001cbc:	f04f 0000 	mov.w	r0, #0
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	0159      	lsls	r1, r3, #5
 8001cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cca:	0150      	lsls	r0, r2, #5
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	00eb      	lsls	r3, r5, #3
 8001d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d06:	00e2      	lsls	r2, r4, #3
 8001d08:	4614      	mov	r4, r2
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	4643      	mov	r3, r8
 8001d0e:	18e3      	adds	r3, r4, r3
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	464b      	mov	r3, r9
 8001d14:	eb45 0303 	adc.w	r3, r5, r3
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d26:	4629      	mov	r1, r5
 8001d28:	028b      	lsls	r3, r1, #10
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d30:	4621      	mov	r1, r4
 8001d32:	028a      	lsls	r2, r1, #10
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	61fa      	str	r2, [r7, #28]
 8001d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d44:	f7fe fa40 	bl	80001c8 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d6a:	e002      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3750      	adds	r7, #80	@ 0x50
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000000 	.word	0x20000000

08001da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0a9b      	lsrs	r3, r3, #10
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	080035cc 	.word	0x080035cc

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd0:	f7ff ffdc 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0b5b      	lsrs	r3, r3, #13
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	080035cc 	.word	0x080035cc

08001df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07b      	b.n	8001efe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e16:	d009      	beq.n	8001e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fe76 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	f003 0104 	and.w	r1, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f003 0210 	and.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b08a      	sub	sp, #40	@ 0x28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f18:	f7ff f82c 	bl	8000f74 <HAL_GetTick>
 8001f1c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f24:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d00c      	beq.n	8001f50 <HAL_SPI_TransmitReceive+0x4a>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f3c:	d106      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_SPI_TransmitReceive+0x46>
 8001f46:	7ffb      	ldrb	r3, [r7, #31]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d001      	beq.n	8001f50 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e17f      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0x5c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0x5c>
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e174      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_SPI_TransmitReceive+0x6e>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e16d      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d003      	beq.n	8001f90 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	887a      	ldrh	r2, [r7, #2]
 8001fb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd0:	2b40      	cmp	r3, #64	@ 0x40
 8001fd2:	d007      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fec:	d17e      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_TransmitReceive+0xf6>
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d16c      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002020:	e059      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11b      	bne.n	8002068 <HAL_SPI_TransmitReceive+0x162>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x162>
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	2b01      	cmp	r3, #1
 800203e:	d113      	bne.n	8002068 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	1c9a      	adds	r2, r3, #2
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d119      	bne.n	80020aa <HAL_SPI_TransmitReceive+0x1a4>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d014      	beq.n	80020aa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	b292      	uxth	r2, r2
 800208c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002092:	1c9a      	adds	r2, r3, #2
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a6:	2301      	movs	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020aa:	f7fe ff63 	bl	8000f74 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d80d      	bhi.n	80020d6 <HAL_SPI_TransmitReceive+0x1d0>
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d009      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0bc      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1a0      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x11c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d19b      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x11c>
 80020ea:	e082      	b.n	80021f2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_SPI_TransmitReceive+0x1f4>
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d171      	bne.n	80021de <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002120:	e05d      	b.n	80021de <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d11c      	bne.n	800216a <HAL_SPI_TransmitReceive+0x264>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d017      	beq.n	800216a <HAL_SPI_TransmitReceive+0x264>
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	2b01      	cmp	r3, #1
 800213e:	d114      	bne.n	800216a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	7812      	ldrb	r2, [r2, #0]
 800214c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d119      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x2a6>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d014      	beq.n	80021ac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021a8:	2301      	movs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021ac:	f7fe fee2 	bl	8000f74 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d803      	bhi.n	80021c4 <HAL_SPI_TransmitReceive+0x2be>
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c2:	d102      	bne.n	80021ca <HAL_SPI_TransmitReceive+0x2c4>
 80021c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e038      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d19c      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x21c>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d197      	bne.n	8002122 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021f2:	6a3a      	ldr	r2, [r7, #32]
 80021f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8b6 	bl	8002368 <SPI_EndRxTxTransaction>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e01d      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800224e:	2300      	movs	r3, #0
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	@ 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002268:	f7fe fe84 	bl	8000f74 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002278:	f7fe fe7c 	bl	8000f74 <HAL_GetTick>
 800227c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800227e:	4b39      	ldr	r3, [pc, #228]	@ (8002364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	015b      	lsls	r3, r3, #5
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228e:	e055      	b.n	800233c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d051      	beq.n	800233c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002298:	f7fe fe6c 	bl	8000f74 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d902      	bls.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d13d      	bne.n	800232a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022c6:	d111      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d0:	d004      	beq.n	80022dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022da:	d107      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022f4:	d10f      	bne.n	8002316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e018      	b.n	800235c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e002      	b.n	800233c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3b01      	subs	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	429a      	cmp	r2, r3
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	429a      	cmp	r2, r3
 8002358:	d19a      	bne.n	8002290 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000000 	.word	0x20000000

08002368 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2201      	movs	r2, #1
 800237c:	2102      	movs	r1, #2
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff ff6a 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238e:	f043 0220 	orr.w	r2, r3, #32
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e032      	b.n	8002400 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <SPI_EndRxTxTransaction+0xa0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <SPI_EndRxTxTransaction+0xa4>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	0d5b      	lsrs	r3, r3, #21
 80023a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023b8:	d112      	bne.n	80023e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	@ 0x80
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff ff47 	bl	8002258 <SPI_WaitFlagStateUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d016      	beq.n	80023fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e00f      	b.n	8002400 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	2b80      	cmp	r3, #128	@ 0x80
 80023f8:	d0f2      	beq.n	80023e0 <SPI_EndRxTxTransaction+0x78>
 80023fa:	e000      	b.n	80023fe <SPI_EndRxTxTransaction+0x96>
        break;
 80023fc:	bf00      	nop
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000000 	.word	0x20000000
 800240c:	165e9f81 	.word	0x165e9f81

08002410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e042      	b.n	80024a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fbfc 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	@ 0x24
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f973 	bl	8002740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d175      	bne.n	80025bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_UART_Transmit+0x2c>
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e06e      	b.n	80025be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ee:	f7fe fd41 	bl	8000f74 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	88fa      	ldrh	r2, [r7, #6]
 80024fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002508:	d108      	bne.n	800251c <HAL_UART_Transmit+0x6c>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	e003      	b.n	8002524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002524:	e02e      	b.n	8002584 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	2180      	movs	r1, #128	@ 0x80
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f848 	bl	80025c6 <UART_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e03a      	b.n	80025be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800255c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	3302      	adds	r3, #2
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	e007      	b.n	8002576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	3301      	adds	r3, #1
 8002574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1cb      	bne.n	8002526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	2140      	movs	r1, #64	@ 0x40
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f814 	bl	80025c6 <UART_WaitOnFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e006      	b.n	80025be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025bc:	2302      	movs	r3, #2
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d6:	e03b      	b.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d037      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7fe fcc8 	bl	8000f74 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	6a3a      	ldr	r2, [r7, #32]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e03a      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b80      	cmp	r3, #128	@ 0x80
 800260c:	d020      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b40      	cmp	r3, #64	@ 0x40
 8002612:	d01d      	beq.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b08      	cmp	r3, #8
 8002620:	d116      	bne.n	8002650 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f81d 	bl	8002678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2208      	movs	r2, #8
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00f      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	429a      	cmp	r2, r3
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d0b4      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002678:	b480      	push	{r7}
 800267a:	b095      	sub	sp, #84	@ 0x54
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268a:	e853 3f00 	ldrex	r3, [r3]
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80026a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026a8:	e841 2300 	strex	r3, r2, [r1]
 80026ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e5      	bne.n	8002680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3314      	adds	r3, #20
 80026ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026dc:	e841 2300 	strex	r3, r2, [r1]
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e5      	bne.n	80026b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d119      	bne.n	8002724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	e853 3f00 	ldrex	r3, [r3]
 80026fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f023 0310 	bic.w	r3, r3, #16
 8002706:	647b      	str	r3, [r7, #68]	@ 0x44
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002710:	61ba      	str	r2, [r7, #24]
 8002712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	613b      	str	r3, [r7, #16]
   return(result);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e5      	bne.n	80026f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002732:	bf00      	nop
 8002734:	3754      	adds	r7, #84	@ 0x54
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b0c0      	sub	sp, #256	@ 0x100
 8002746:	af00      	add	r7, sp, #0
 8002748:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	ea40 0301 	orr.w	r3, r0, r1
 8002768:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	431a      	orrs	r2, r3
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	431a      	orrs	r2, r3
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002798:	f021 010c 	bic.w	r1, r1, #12
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027a6:	430b      	orrs	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ba:	6999      	ldr	r1, [r3, #24]
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	ea40 0301 	orr.w	r3, r0, r1
 80027c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002a0c <UART_SetConfig+0x2cc>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d005      	beq.n	80027e0 <UART_SetConfig+0xa0>
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b8d      	ldr	r3, [pc, #564]	@ (8002a10 <UART_SetConfig+0x2d0>)
 80027dc:	429a      	cmp	r2, r3
 80027de:	d104      	bne.n	80027ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e0:	f7ff faf4 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 80027e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027e8:	e003      	b.n	80027f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027ea:	f7ff fadb 	bl	8001da4 <HAL_RCC_GetPCLK1Freq>
 80027ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fc:	f040 810c 	bne.w	8002a18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800280a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800280e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	1891      	adds	r1, r2, r2
 8002818:	65b9      	str	r1, [r7, #88]	@ 0x58
 800281a:	415b      	adcs	r3, r3
 800281c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800281e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002822:	4621      	mov	r1, r4
 8002824:	eb12 0801 	adds.w	r8, r2, r1
 8002828:	4629      	mov	r1, r5
 800282a:	eb43 0901 	adc.w	r9, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002842:	4690      	mov	r8, r2
 8002844:	4699      	mov	r9, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb18 0303 	adds.w	r3, r8, r3
 800284c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002850:	462b      	mov	r3, r5
 8002852:	eb49 0303 	adc.w	r3, r9, r3
 8002856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002866:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800286a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800286e:	460b      	mov	r3, r1
 8002870:	18db      	adds	r3, r3, r3
 8002872:	653b      	str	r3, [r7, #80]	@ 0x50
 8002874:	4613      	mov	r3, r2
 8002876:	eb42 0303 	adc.w	r3, r2, r3
 800287a:	657b      	str	r3, [r7, #84]	@ 0x54
 800287c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002880:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002884:	f7fd fca0 	bl	80001c8 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <UART_SetConfig+0x2d4>)
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	011c      	lsls	r4, r3, #4
 8002896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028a8:	4642      	mov	r2, r8
 80028aa:	464b      	mov	r3, r9
 80028ac:	1891      	adds	r1, r2, r2
 80028ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028b0:	415b      	adcs	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028b8:	4641      	mov	r1, r8
 80028ba:	eb12 0a01 	adds.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb43 0b01 	adc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d8:	4692      	mov	sl, r2
 80028da:	469b      	mov	fp, r3
 80028dc:	4643      	mov	r3, r8
 80028de:	eb1a 0303 	adds.w	r3, sl, r3
 80028e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028e6:	464b      	mov	r3, r9
 80028e8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002900:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002904:	460b      	mov	r3, r1
 8002906:	18db      	adds	r3, r3, r3
 8002908:	643b      	str	r3, [r7, #64]	@ 0x40
 800290a:	4613      	mov	r3, r2
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	647b      	str	r3, [r7, #68]	@ 0x44
 8002912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002916:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800291a:	f7fd fc55 	bl	80001c8 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4611      	mov	r1, r2
 8002924:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <UART_SetConfig+0x2d4>)
 8002926:	fba3 2301 	umull	r2, r3, r3, r1
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	@ 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1acb      	subs	r3, r1, r3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800293a:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <UART_SetConfig+0x2d4>)
 800293c:	fba3 2302 	umull	r2, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002948:	441c      	add	r4, r3
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002954:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002958:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002964:	415b      	adcs	r3, r3
 8002966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800296c:	4641      	mov	r1, r8
 800296e:	1851      	adds	r1, r2, r1
 8002970:	6339      	str	r1, [r7, #48]	@ 0x30
 8002972:	4649      	mov	r1, r9
 8002974:	414b      	adcs	r3, r1
 8002976:	637b      	str	r3, [r7, #52]	@ 0x34
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002984:	4659      	mov	r1, fp
 8002986:	00cb      	lsls	r3, r1, #3
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298e:	4651      	mov	r1, sl
 8002990:	00ca      	lsls	r2, r1, #3
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	4603      	mov	r3, r0
 8002998:	4642      	mov	r2, r8
 800299a:	189b      	adds	r3, r3, r2
 800299c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029a0:	464b      	mov	r3, r9
 80029a2:	460a      	mov	r2, r1
 80029a4:	eb42 0303 	adc.w	r3, r2, r3
 80029a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029d6:	f7fd fbf7 	bl	80001c8 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <UART_SetConfig+0x2d4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	@ 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	3332      	adds	r3, #50	@ 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <UART_SetConfig+0x2d4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a08:	e106      	b.n	8002c18 <UART_SetConfig+0x4d8>
 8002a0a:	bf00      	nop
 8002a0c:	40011000 	.word	0x40011000
 8002a10:	40011400 	.word	0x40011400
 8002a14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	1891      	adds	r1, r2, r2
 8002a30:	6239      	str	r1, [r7, #32]
 8002a32:	415b      	adcs	r3, r3
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a3a:	4641      	mov	r1, r8
 8002a3c:	1854      	adds	r4, r2, r1
 8002a3e:	4649      	mov	r1, r9
 8002a40:	eb43 0501 	adc.w	r5, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	00eb      	lsls	r3, r5, #3
 8002a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a52:	00e2      	lsls	r2, r4, #3
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	18e3      	adds	r3, r4, r3
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a60:	464b      	mov	r3, r9
 8002a62:	eb45 0303 	adc.w	r3, r5, r3
 8002a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a86:	4629      	mov	r1, r5
 8002a88:	008b      	lsls	r3, r1, #2
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a90:	4621      	mov	r1, r4
 8002a92:	008a      	lsls	r2, r1, #2
 8002a94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a98:	f7fd fb96 	bl	80001c8 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ab4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ab8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	61b9      	str	r1, [r7, #24]
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002acc:	4641      	mov	r1, r8
 8002ace:	1851      	adds	r1, r2, r1
 8002ad0:	6139      	str	r1, [r7, #16]
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	414b      	adcs	r3, r1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ae4:	4659      	mov	r1, fp
 8002ae6:	00cb      	lsls	r3, r1, #3
 8002ae8:	4651      	mov	r1, sl
 8002aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aee:	4651      	mov	r1, sl
 8002af0:	00ca      	lsls	r2, r1, #3
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	4642      	mov	r2, r8
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b00:	464b      	mov	r3, r9
 8002b02:	460a      	mov	r2, r1
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b24:	4649      	mov	r1, r9
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	4641      	mov	r1, r8
 8002b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2e:	4641      	mov	r1, r8
 8002b30:	008a      	lsls	r2, r1, #2
 8002b32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b36:	f7fd fb47 	bl	80001c8 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002b42:	fba3 2301 	umull	r2, r3, r3, r1
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	@ 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	3332      	adds	r3, #50	@ 0x32
 8002b54:	4a33      	ldr	r2, [pc, #204]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b60:	441c      	add	r4, r3
 8002b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b66:	2200      	movs	r2, #0
 8002b68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bd4:	4649      	mov	r1, r9
 8002bd6:	008b      	lsls	r3, r1, #2
 8002bd8:	4641      	mov	r1, r8
 8002bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bde:	4641      	mov	r1, r8
 8002be0:	008a      	lsls	r2, r1, #2
 8002be2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002be6:	f7fd faef 	bl	80001c8 <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	@ 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	@ 0x32
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <UART_SetConfig+0x4e4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4422      	add	r2, r4
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c24:	51eb851f 	.word	0x51eb851f

08002c28 <std>:
 8002c28:	2300      	movs	r3, #0
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c36:	6083      	str	r3, [r0, #8]
 8002c38:	8181      	strh	r1, [r0, #12]
 8002c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c3c:	81c2      	strh	r2, [r0, #14]
 8002c3e:	6183      	str	r3, [r0, #24]
 8002c40:	4619      	mov	r1, r3
 8002c42:	2208      	movs	r2, #8
 8002c44:	305c      	adds	r0, #92	@ 0x5c
 8002c46:	f000 f9e3 	bl	8003010 <memset>
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <std+0x58>)
 8002c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <std+0x5c>)
 8002c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <std+0x60>)
 8002c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <std+0x64>)
 8002c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <std+0x68>)
 8002c5c:	6224      	str	r4, [r4, #32]
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d006      	beq.n	8002c70 <std+0x48>
 8002c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c66:	4294      	cmp	r4, r2
 8002c68:	d002      	beq.n	8002c70 <std+0x48>
 8002c6a:	33d0      	adds	r3, #208	@ 0xd0
 8002c6c:	429c      	cmp	r4, r3
 8002c6e:	d105      	bne.n	8002c7c <std+0x54>
 8002c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c78:	f000 ba42 	b.w	8003100 <__retarget_lock_init_recursive>
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	bf00      	nop
 8002c80:	08002e61 	.word	0x08002e61
 8002c84:	08002e83 	.word	0x08002e83
 8002c88:	08002ebb 	.word	0x08002ebb
 8002c8c:	08002edf 	.word	0x08002edf
 8002c90:	200001ac 	.word	0x200001ac

08002c94 <stdio_exit_handler>:
 8002c94:	4a02      	ldr	r2, [pc, #8]	@ (8002ca0 <stdio_exit_handler+0xc>)
 8002c96:	4903      	ldr	r1, [pc, #12]	@ (8002ca4 <stdio_exit_handler+0x10>)
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <stdio_exit_handler+0x14>)
 8002c9a:	f000 b869 	b.w	8002d70 <_fwalk_sglue>
 8002c9e:	bf00      	nop
 8002ca0:	2000000c 	.word	0x2000000c
 8002ca4:	08003401 	.word	0x08003401
 8002ca8:	2000001c 	.word	0x2000001c

08002cac <cleanup_stdio>:
 8002cac:	6841      	ldr	r1, [r0, #4]
 8002cae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce0 <cleanup_stdio+0x34>)
 8002cb0:	4299      	cmp	r1, r3
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	d001      	beq.n	8002cbc <cleanup_stdio+0x10>
 8002cb8:	f000 fba2 	bl	8003400 <_fflush_r>
 8002cbc:	68a1      	ldr	r1, [r4, #8]
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <cleanup_stdio+0x38>)
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	d002      	beq.n	8002cca <cleanup_stdio+0x1e>
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f000 fb9b 	bl	8003400 <_fflush_r>
 8002cca:	68e1      	ldr	r1, [r4, #12]
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <cleanup_stdio+0x3c>)
 8002cce:	4299      	cmp	r1, r3
 8002cd0:	d004      	beq.n	8002cdc <cleanup_stdio+0x30>
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	f000 bb92 	b.w	8003400 <_fflush_r>
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	bf00      	nop
 8002ce0:	200001ac 	.word	0x200001ac
 8002ce4:	20000214 	.word	0x20000214
 8002ce8:	2000027c 	.word	0x2000027c

08002cec <global_stdio_init.part.0>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <global_stdio_init.part.0+0x30>)
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8002d20 <global_stdio_init.part.0+0x34>)
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <global_stdio_init.part.0+0x38>)
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	f7ff ff94 	bl	8002c28 <std>
 8002d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d04:	2201      	movs	r2, #1
 8002d06:	2109      	movs	r1, #9
 8002d08:	f7ff ff8e 	bl	8002c28 <std>
 8002d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d10:	2202      	movs	r2, #2
 8002d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d16:	2112      	movs	r1, #18
 8002d18:	f7ff bf86 	b.w	8002c28 <std>
 8002d1c:	200002e4 	.word	0x200002e4
 8002d20:	200001ac 	.word	0x200001ac
 8002d24:	08002c95 	.word	0x08002c95

08002d28 <__sfp_lock_acquire>:
 8002d28:	4801      	ldr	r0, [pc, #4]	@ (8002d30 <__sfp_lock_acquire+0x8>)
 8002d2a:	f000 b9ea 	b.w	8003102 <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	200002ed 	.word	0x200002ed

08002d34 <__sfp_lock_release>:
 8002d34:	4801      	ldr	r0, [pc, #4]	@ (8002d3c <__sfp_lock_release+0x8>)
 8002d36:	f000 b9e5 	b.w	8003104 <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	200002ed 	.word	0x200002ed

08002d40 <__sinit>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	f7ff fff0 	bl	8002d28 <__sfp_lock_acquire>
 8002d48:	6a23      	ldr	r3, [r4, #32]
 8002d4a:	b11b      	cbz	r3, 8002d54 <__sinit+0x14>
 8002d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d50:	f7ff bff0 	b.w	8002d34 <__sfp_lock_release>
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <__sinit+0x28>)
 8002d56:	6223      	str	r3, [r4, #32]
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <__sinit+0x2c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f5      	bne.n	8002d4c <__sinit+0xc>
 8002d60:	f7ff ffc4 	bl	8002cec <global_stdio_init.part.0>
 8002d64:	e7f2      	b.n	8002d4c <__sinit+0xc>
 8002d66:	bf00      	nop
 8002d68:	08002cad 	.word	0x08002cad
 8002d6c:	200002e4 	.word	0x200002e4

08002d70 <_fwalk_sglue>:
 8002d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d74:	4607      	mov	r7, r0
 8002d76:	4688      	mov	r8, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d80:	f1b9 0901 	subs.w	r9, r9, #1
 8002d84:	d505      	bpl.n	8002d92 <_fwalk_sglue+0x22>
 8002d86:	6824      	ldr	r4, [r4, #0]
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d1f7      	bne.n	8002d7c <_fwalk_sglue+0xc>
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d92:	89ab      	ldrh	r3, [r5, #12]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d907      	bls.n	8002da8 <_fwalk_sglue+0x38>
 8002d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	d003      	beq.n	8002da8 <_fwalk_sglue+0x38>
 8002da0:	4629      	mov	r1, r5
 8002da2:	4638      	mov	r0, r7
 8002da4:	47c0      	blx	r8
 8002da6:	4306      	orrs	r6, r0
 8002da8:	3568      	adds	r5, #104	@ 0x68
 8002daa:	e7e9      	b.n	8002d80 <_fwalk_sglue+0x10>

08002dac <_fwrite_r>:
 8002dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	9c08      	ldr	r4, [sp, #32]
 8002db2:	468a      	mov	sl, r1
 8002db4:	4690      	mov	r8, r2
 8002db6:	fb02 f903 	mul.w	r9, r2, r3
 8002dba:	4606      	mov	r6, r0
 8002dbc:	b118      	cbz	r0, 8002dc6 <_fwrite_r+0x1a>
 8002dbe:	6a03      	ldr	r3, [r0, #32]
 8002dc0:	b90b      	cbnz	r3, 8002dc6 <_fwrite_r+0x1a>
 8002dc2:	f7ff ffbd 	bl	8002d40 <__sinit>
 8002dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dc8:	07dd      	lsls	r5, r3, #31
 8002dca:	d405      	bmi.n	8002dd8 <_fwrite_r+0x2c>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	0598      	lsls	r0, r3, #22
 8002dd0:	d402      	bmi.n	8002dd8 <_fwrite_r+0x2c>
 8002dd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dd4:	f000 f995 	bl	8003102 <__retarget_lock_acquire_recursive>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	0719      	lsls	r1, r3, #28
 8002ddc:	d516      	bpl.n	8002e0c <_fwrite_r+0x60>
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	b1a3      	cbz	r3, 8002e0c <_fwrite_r+0x60>
 8002de2:	2500      	movs	r5, #0
 8002de4:	454d      	cmp	r5, r9
 8002de6:	d01f      	beq.n	8002e28 <_fwrite_r+0x7c>
 8002de8:	68a7      	ldr	r7, [r4, #8]
 8002dea:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8002dee:	3f01      	subs	r7, #1
 8002df0:	2f00      	cmp	r7, #0
 8002df2:	60a7      	str	r7, [r4, #8]
 8002df4:	da04      	bge.n	8002e00 <_fwrite_r+0x54>
 8002df6:	69a3      	ldr	r3, [r4, #24]
 8002df8:	429f      	cmp	r7, r3
 8002dfa:	db0f      	blt.n	8002e1c <_fwrite_r+0x70>
 8002dfc:	290a      	cmp	r1, #10
 8002dfe:	d00d      	beq.n	8002e1c <_fwrite_r+0x70>
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	7019      	strb	r1, [r3, #0]
 8002e08:	3501      	adds	r5, #1
 8002e0a:	e7eb      	b.n	8002de4 <_fwrite_r+0x38>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f000 f8a8 	bl	8002f64 <__swsetup_r>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d0e4      	beq.n	8002de2 <_fwrite_r+0x36>
 8002e18:	2500      	movs	r5, #0
 8002e1a:	e005      	b.n	8002e28 <_fwrite_r+0x7c>
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f000 f861 	bl	8002ee6 <__swbuf_r>
 8002e24:	3001      	adds	r0, #1
 8002e26:	d1ef      	bne.n	8002e08 <_fwrite_r+0x5c>
 8002e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e2a:	07da      	lsls	r2, r3, #31
 8002e2c:	d405      	bmi.n	8002e3a <_fwrite_r+0x8e>
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	059b      	lsls	r3, r3, #22
 8002e32:	d402      	bmi.n	8002e3a <_fwrite_r+0x8e>
 8002e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e36:	f000 f965 	bl	8003104 <__retarget_lock_release_recursive>
 8002e3a:	fbb5 f0f8 	udiv	r0, r5, r8
 8002e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002e44 <fwrite>:
 8002e44:	b507      	push	{r0, r1, r2, lr}
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4803      	ldr	r0, [pc, #12]	@ (8002e5c <fwrite+0x18>)
 8002e50:	6800      	ldr	r0, [r0, #0]
 8002e52:	f7ff ffab 	bl	8002dac <_fwrite_r>
 8002e56:	b003      	add	sp, #12
 8002e58:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5c:	20000018 	.word	0x20000018

08002e60 <__sread>:
 8002e60:	b510      	push	{r4, lr}
 8002e62:	460c      	mov	r4, r1
 8002e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e68:	f000 f8fc 	bl	8003064 <_read_r>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	bfab      	itete	ge
 8002e70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e72:	89a3      	ldrhlt	r3, [r4, #12]
 8002e74:	181b      	addge	r3, r3, r0
 8002e76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e7a:	bfac      	ite	ge
 8002e7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e7e:	81a3      	strhlt	r3, [r4, #12]
 8002e80:	bd10      	pop	{r4, pc}

08002e82 <__swrite>:
 8002e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e86:	461f      	mov	r7, r3
 8002e88:	898b      	ldrh	r3, [r1, #12]
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	4616      	mov	r6, r2
 8002e92:	d505      	bpl.n	8002ea0 <__swrite+0x1e>
 8002e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e98:	2302      	movs	r3, #2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f000 f8d0 	bl	8003040 <_lseek_r>
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	4632      	mov	r2, r6
 8002eae:	463b      	mov	r3, r7
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eb6:	f000 b8e7 	b.w	8003088 <_write_r>

08002eba <__sseek>:
 8002eba:	b510      	push	{r4, lr}
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec2:	f000 f8bd 	bl	8003040 <_lseek_r>
 8002ec6:	1c43      	adds	r3, r0, #1
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	bf15      	itete	ne
 8002ecc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ece:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ed2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ed6:	81a3      	strheq	r3, [r4, #12]
 8002ed8:	bf18      	it	ne
 8002eda:	81a3      	strhne	r3, [r4, #12]
 8002edc:	bd10      	pop	{r4, pc}

08002ede <__sclose>:
 8002ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee2:	f000 b89d 	b.w	8003020 <_close_r>

08002ee6 <__swbuf_r>:
 8002ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee8:	460e      	mov	r6, r1
 8002eea:	4614      	mov	r4, r2
 8002eec:	4605      	mov	r5, r0
 8002eee:	b118      	cbz	r0, 8002ef8 <__swbuf_r+0x12>
 8002ef0:	6a03      	ldr	r3, [r0, #32]
 8002ef2:	b90b      	cbnz	r3, 8002ef8 <__swbuf_r+0x12>
 8002ef4:	f7ff ff24 	bl	8002d40 <__sinit>
 8002ef8:	69a3      	ldr	r3, [r4, #24]
 8002efa:	60a3      	str	r3, [r4, #8]
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	071a      	lsls	r2, r3, #28
 8002f00:	d501      	bpl.n	8002f06 <__swbuf_r+0x20>
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	b943      	cbnz	r3, 8002f18 <__swbuf_r+0x32>
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f82b 	bl	8002f64 <__swsetup_r>
 8002f0e:	b118      	cbz	r0, 8002f18 <__swbuf_r+0x32>
 8002f10:	f04f 37ff 	mov.w	r7, #4294967295
 8002f14:	4638      	mov	r0, r7
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	6922      	ldr	r2, [r4, #16]
 8002f1c:	1a98      	subs	r0, r3, r2
 8002f1e:	6963      	ldr	r3, [r4, #20]
 8002f20:	b2f6      	uxtb	r6, r6
 8002f22:	4283      	cmp	r3, r0
 8002f24:	4637      	mov	r7, r6
 8002f26:	dc05      	bgt.n	8002f34 <__swbuf_r+0x4e>
 8002f28:	4621      	mov	r1, r4
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f000 fa68 	bl	8003400 <_fflush_r>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d1ed      	bne.n	8002f10 <__swbuf_r+0x2a>
 8002f34:	68a3      	ldr	r3, [r4, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	60a3      	str	r3, [r4, #8]
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	6022      	str	r2, [r4, #0]
 8002f40:	701e      	strb	r6, [r3, #0]
 8002f42:	6962      	ldr	r2, [r4, #20]
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d004      	beq.n	8002f54 <__swbuf_r+0x6e>
 8002f4a:	89a3      	ldrh	r3, [r4, #12]
 8002f4c:	07db      	lsls	r3, r3, #31
 8002f4e:	d5e1      	bpl.n	8002f14 <__swbuf_r+0x2e>
 8002f50:	2e0a      	cmp	r6, #10
 8002f52:	d1df      	bne.n	8002f14 <__swbuf_r+0x2e>
 8002f54:	4621      	mov	r1, r4
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 fa52 	bl	8003400 <_fflush_r>
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d0d9      	beq.n	8002f14 <__swbuf_r+0x2e>
 8002f60:	e7d6      	b.n	8002f10 <__swbuf_r+0x2a>
	...

08002f64 <__swsetup_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	4b29      	ldr	r3, [pc, #164]	@ (800300c <__swsetup_r+0xa8>)
 8002f68:	4605      	mov	r5, r0
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	b118      	cbz	r0, 8002f78 <__swsetup_r+0x14>
 8002f70:	6a03      	ldr	r3, [r0, #32]
 8002f72:	b90b      	cbnz	r3, 8002f78 <__swsetup_r+0x14>
 8002f74:	f7ff fee4 	bl	8002d40 <__sinit>
 8002f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7c:	0719      	lsls	r1, r3, #28
 8002f7e:	d422      	bmi.n	8002fc6 <__swsetup_r+0x62>
 8002f80:	06da      	lsls	r2, r3, #27
 8002f82:	d407      	bmi.n	8002f94 <__swsetup_r+0x30>
 8002f84:	2209      	movs	r2, #9
 8002f86:	602a      	str	r2, [r5, #0]
 8002f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	e033      	b.n	8002ffc <__swsetup_r+0x98>
 8002f94:	0758      	lsls	r0, r3, #29
 8002f96:	d512      	bpl.n	8002fbe <__swsetup_r+0x5a>
 8002f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f9a:	b141      	cbz	r1, 8002fae <__swsetup_r+0x4a>
 8002f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fa0:	4299      	cmp	r1, r3
 8002fa2:	d002      	beq.n	8002faa <__swsetup_r+0x46>
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 f8af 	bl	8003108 <_free_r>
 8002faa:	2300      	movs	r3, #0
 8002fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6063      	str	r3, [r4, #4]
 8002fba:	6923      	ldr	r3, [r4, #16]
 8002fbc:	6023      	str	r3, [r4, #0]
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	6923      	ldr	r3, [r4, #16]
 8002fc8:	b94b      	cbnz	r3, 8002fde <__swsetup_r+0x7a>
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd4:	d003      	beq.n	8002fde <__swsetup_r+0x7a>
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 fa5f 	bl	800349c <__smakebuf_r>
 8002fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe2:	f013 0201 	ands.w	r2, r3, #1
 8002fe6:	d00a      	beq.n	8002ffe <__swsetup_r+0x9a>
 8002fe8:	2200      	movs	r2, #0
 8002fea:	60a2      	str	r2, [r4, #8]
 8002fec:	6962      	ldr	r2, [r4, #20]
 8002fee:	4252      	negs	r2, r2
 8002ff0:	61a2      	str	r2, [r4, #24]
 8002ff2:	6922      	ldr	r2, [r4, #16]
 8002ff4:	b942      	cbnz	r2, 8003008 <__swsetup_r+0xa4>
 8002ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ffa:	d1c5      	bne.n	8002f88 <__swsetup_r+0x24>
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
 8002ffe:	0799      	lsls	r1, r3, #30
 8003000:	bf58      	it	pl
 8003002:	6962      	ldrpl	r2, [r4, #20]
 8003004:	60a2      	str	r2, [r4, #8]
 8003006:	e7f4      	b.n	8002ff2 <__swsetup_r+0x8e>
 8003008:	2000      	movs	r0, #0
 800300a:	e7f7      	b.n	8002ffc <__swsetup_r+0x98>
 800300c:	20000018 	.word	0x20000018

08003010 <memset>:
 8003010:	4402      	add	r2, r0
 8003012:	4603      	mov	r3, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <_close_r>:
 8003020:	b538      	push	{r3, r4, r5, lr}
 8003022:	4d06      	ldr	r5, [pc, #24]	@ (800303c <_close_r+0x1c>)
 8003024:	2300      	movs	r3, #0
 8003026:	4604      	mov	r4, r0
 8003028:	4608      	mov	r0, r1
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	f7fd fe96 	bl	8000d5c <_close>
 8003030:	1c43      	adds	r3, r0, #1
 8003032:	d102      	bne.n	800303a <_close_r+0x1a>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	b103      	cbz	r3, 800303a <_close_r+0x1a>
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	200002e8 	.word	0x200002e8

08003040 <_lseek_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4d07      	ldr	r5, [pc, #28]	@ (8003060 <_lseek_r+0x20>)
 8003044:	4604      	mov	r4, r0
 8003046:	4608      	mov	r0, r1
 8003048:	4611      	mov	r1, r2
 800304a:	2200      	movs	r2, #0
 800304c:	602a      	str	r2, [r5, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7fd feab 	bl	8000daa <_lseek>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d102      	bne.n	800305e <_lseek_r+0x1e>
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	b103      	cbz	r3, 800305e <_lseek_r+0x1e>
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	bd38      	pop	{r3, r4, r5, pc}
 8003060:	200002e8 	.word	0x200002e8

08003064 <_read_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4d07      	ldr	r5, [pc, #28]	@ (8003084 <_read_r+0x20>)
 8003068:	4604      	mov	r4, r0
 800306a:	4608      	mov	r0, r1
 800306c:	4611      	mov	r1, r2
 800306e:	2200      	movs	r2, #0
 8003070:	602a      	str	r2, [r5, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	f7fd fe55 	bl	8000d22 <_read>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_read_r+0x1e>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_read_r+0x1e>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	200002e8 	.word	0x200002e8

08003088 <_write_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	@ (80030a8 <_write_r+0x20>)
 800308c:	4604      	mov	r4, r0
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7fd fa2c 	bl	80004f4 <_write>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_write_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_write_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200002e8 	.word	0x200002e8

080030ac <__errno>:
 80030ac:	4b01      	ldr	r3, [pc, #4]	@ (80030b4 <__errno+0x8>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000018 	.word	0x20000018

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4d0d      	ldr	r5, [pc, #52]	@ (80030f0 <__libc_init_array+0x38>)
 80030bc:	4c0d      	ldr	r4, [pc, #52]	@ (80030f4 <__libc_init_array+0x3c>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	2600      	movs	r6, #0
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	4d0b      	ldr	r5, [pc, #44]	@ (80030f8 <__libc_init_array+0x40>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	@ (80030fc <__libc_init_array+0x44>)
 80030cc:	f000 fa54 	bl	8003578 <_init>
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	2600      	movs	r6, #0
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e0:	4798      	blx	r3
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ea:	4798      	blx	r3
 80030ec:	3601      	adds	r6, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	080035dc 	.word	0x080035dc
 80030f4:	080035dc 	.word	0x080035dc
 80030f8:	080035dc 	.word	0x080035dc
 80030fc:	080035e0 	.word	0x080035e0

08003100 <__retarget_lock_init_recursive>:
 8003100:	4770      	bx	lr

08003102 <__retarget_lock_acquire_recursive>:
 8003102:	4770      	bx	lr

08003104 <__retarget_lock_release_recursive>:
 8003104:	4770      	bx	lr
	...

08003108 <_free_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	4605      	mov	r5, r0
 800310c:	2900      	cmp	r1, #0
 800310e:	d041      	beq.n	8003194 <_free_r+0x8c>
 8003110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003114:	1f0c      	subs	r4, r1, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	bfb8      	it	lt
 800311a:	18e4      	addlt	r4, r4, r3
 800311c:	f000 f8e0 	bl	80032e0 <__malloc_lock>
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <_free_r+0x90>)
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	b933      	cbnz	r3, 8003134 <_free_r+0x2c>
 8003126:	6063      	str	r3, [r4, #4]
 8003128:	6014      	str	r4, [r2, #0]
 800312a:	4628      	mov	r0, r5
 800312c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003130:	f000 b8dc 	b.w	80032ec <__malloc_unlock>
 8003134:	42a3      	cmp	r3, r4
 8003136:	d908      	bls.n	800314a <_free_r+0x42>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	1821      	adds	r1, r4, r0
 800313c:	428b      	cmp	r3, r1
 800313e:	bf01      	itttt	eq
 8003140:	6819      	ldreq	r1, [r3, #0]
 8003142:	685b      	ldreq	r3, [r3, #4]
 8003144:	1809      	addeq	r1, r1, r0
 8003146:	6021      	streq	r1, [r4, #0]
 8003148:	e7ed      	b.n	8003126 <_free_r+0x1e>
 800314a:	461a      	mov	r2, r3
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b10b      	cbz	r3, 8003154 <_free_r+0x4c>
 8003150:	42a3      	cmp	r3, r4
 8003152:	d9fa      	bls.n	800314a <_free_r+0x42>
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	1850      	adds	r0, r2, r1
 8003158:	42a0      	cmp	r0, r4
 800315a:	d10b      	bne.n	8003174 <_free_r+0x6c>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	4401      	add	r1, r0
 8003160:	1850      	adds	r0, r2, r1
 8003162:	4283      	cmp	r3, r0
 8003164:	6011      	str	r1, [r2, #0]
 8003166:	d1e0      	bne.n	800312a <_free_r+0x22>
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	6053      	str	r3, [r2, #4]
 800316e:	4408      	add	r0, r1
 8003170:	6010      	str	r0, [r2, #0]
 8003172:	e7da      	b.n	800312a <_free_r+0x22>
 8003174:	d902      	bls.n	800317c <_free_r+0x74>
 8003176:	230c      	movs	r3, #12
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	e7d6      	b.n	800312a <_free_r+0x22>
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	1821      	adds	r1, r4, r0
 8003180:	428b      	cmp	r3, r1
 8003182:	bf04      	itt	eq
 8003184:	6819      	ldreq	r1, [r3, #0]
 8003186:	685b      	ldreq	r3, [r3, #4]
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	bf04      	itt	eq
 800318c:	1809      	addeq	r1, r1, r0
 800318e:	6021      	streq	r1, [r4, #0]
 8003190:	6054      	str	r4, [r2, #4]
 8003192:	e7ca      	b.n	800312a <_free_r+0x22>
 8003194:	bd38      	pop	{r3, r4, r5, pc}
 8003196:	bf00      	nop
 8003198:	200002f4 	.word	0x200002f4

0800319c <sbrk_aligned>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4e0f      	ldr	r6, [pc, #60]	@ (80031dc <sbrk_aligned+0x40>)
 80031a0:	460c      	mov	r4, r1
 80031a2:	6831      	ldr	r1, [r6, #0]
 80031a4:	4605      	mov	r5, r0
 80031a6:	b911      	cbnz	r1, 80031ae <sbrk_aligned+0x12>
 80031a8:	f000 f9d6 	bl	8003558 <_sbrk_r>
 80031ac:	6030      	str	r0, [r6, #0]
 80031ae:	4621      	mov	r1, r4
 80031b0:	4628      	mov	r0, r5
 80031b2:	f000 f9d1 	bl	8003558 <_sbrk_r>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	d103      	bne.n	80031c2 <sbrk_aligned+0x26>
 80031ba:	f04f 34ff 	mov.w	r4, #4294967295
 80031be:	4620      	mov	r0, r4
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	1cc4      	adds	r4, r0, #3
 80031c4:	f024 0403 	bic.w	r4, r4, #3
 80031c8:	42a0      	cmp	r0, r4
 80031ca:	d0f8      	beq.n	80031be <sbrk_aligned+0x22>
 80031cc:	1a21      	subs	r1, r4, r0
 80031ce:	4628      	mov	r0, r5
 80031d0:	f000 f9c2 	bl	8003558 <_sbrk_r>
 80031d4:	3001      	adds	r0, #1
 80031d6:	d1f2      	bne.n	80031be <sbrk_aligned+0x22>
 80031d8:	e7ef      	b.n	80031ba <sbrk_aligned+0x1e>
 80031da:	bf00      	nop
 80031dc:	200002f0 	.word	0x200002f0

080031e0 <_malloc_r>:
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	1ccd      	adds	r5, r1, #3
 80031e6:	f025 0503 	bic.w	r5, r5, #3
 80031ea:	3508      	adds	r5, #8
 80031ec:	2d0c      	cmp	r5, #12
 80031ee:	bf38      	it	cc
 80031f0:	250c      	movcc	r5, #12
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	4606      	mov	r6, r0
 80031f6:	db01      	blt.n	80031fc <_malloc_r+0x1c>
 80031f8:	42a9      	cmp	r1, r5
 80031fa:	d904      	bls.n	8003206 <_malloc_r+0x26>
 80031fc:	230c      	movs	r3, #12
 80031fe:	6033      	str	r3, [r6, #0]
 8003200:	2000      	movs	r0, #0
 8003202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032dc <_malloc_r+0xfc>
 800320a:	f000 f869 	bl	80032e0 <__malloc_lock>
 800320e:	f8d8 3000 	ldr.w	r3, [r8]
 8003212:	461c      	mov	r4, r3
 8003214:	bb44      	cbnz	r4, 8003268 <_malloc_r+0x88>
 8003216:	4629      	mov	r1, r5
 8003218:	4630      	mov	r0, r6
 800321a:	f7ff ffbf 	bl	800319c <sbrk_aligned>
 800321e:	1c43      	adds	r3, r0, #1
 8003220:	4604      	mov	r4, r0
 8003222:	d158      	bne.n	80032d6 <_malloc_r+0xf6>
 8003224:	f8d8 4000 	ldr.w	r4, [r8]
 8003228:	4627      	mov	r7, r4
 800322a:	2f00      	cmp	r7, #0
 800322c:	d143      	bne.n	80032b6 <_malloc_r+0xd6>
 800322e:	2c00      	cmp	r4, #0
 8003230:	d04b      	beq.n	80032ca <_malloc_r+0xea>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	4639      	mov	r1, r7
 8003236:	4630      	mov	r0, r6
 8003238:	eb04 0903 	add.w	r9, r4, r3
 800323c:	f000 f98c 	bl	8003558 <_sbrk_r>
 8003240:	4581      	cmp	r9, r0
 8003242:	d142      	bne.n	80032ca <_malloc_r+0xea>
 8003244:	6821      	ldr	r1, [r4, #0]
 8003246:	1a6d      	subs	r5, r5, r1
 8003248:	4629      	mov	r1, r5
 800324a:	4630      	mov	r0, r6
 800324c:	f7ff ffa6 	bl	800319c <sbrk_aligned>
 8003250:	3001      	adds	r0, #1
 8003252:	d03a      	beq.n	80032ca <_malloc_r+0xea>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	442b      	add	r3, r5
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	f8d8 3000 	ldr.w	r3, [r8]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	bb62      	cbnz	r2, 80032bc <_malloc_r+0xdc>
 8003262:	f8c8 7000 	str.w	r7, [r8]
 8003266:	e00f      	b.n	8003288 <_malloc_r+0xa8>
 8003268:	6822      	ldr	r2, [r4, #0]
 800326a:	1b52      	subs	r2, r2, r5
 800326c:	d420      	bmi.n	80032b0 <_malloc_r+0xd0>
 800326e:	2a0b      	cmp	r2, #11
 8003270:	d917      	bls.n	80032a2 <_malloc_r+0xc2>
 8003272:	1961      	adds	r1, r4, r5
 8003274:	42a3      	cmp	r3, r4
 8003276:	6025      	str	r5, [r4, #0]
 8003278:	bf18      	it	ne
 800327a:	6059      	strne	r1, [r3, #4]
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	bf08      	it	eq
 8003280:	f8c8 1000 	streq.w	r1, [r8]
 8003284:	5162      	str	r2, [r4, r5]
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	4630      	mov	r0, r6
 800328a:	f000 f82f 	bl	80032ec <__malloc_unlock>
 800328e:	f104 000b 	add.w	r0, r4, #11
 8003292:	1d23      	adds	r3, r4, #4
 8003294:	f020 0007 	bic.w	r0, r0, #7
 8003298:	1ac2      	subs	r2, r0, r3
 800329a:	bf1c      	itt	ne
 800329c:	1a1b      	subne	r3, r3, r0
 800329e:	50a3      	strne	r3, [r4, r2]
 80032a0:	e7af      	b.n	8003202 <_malloc_r+0x22>
 80032a2:	6862      	ldr	r2, [r4, #4]
 80032a4:	42a3      	cmp	r3, r4
 80032a6:	bf0c      	ite	eq
 80032a8:	f8c8 2000 	streq.w	r2, [r8]
 80032ac:	605a      	strne	r2, [r3, #4]
 80032ae:	e7eb      	b.n	8003288 <_malloc_r+0xa8>
 80032b0:	4623      	mov	r3, r4
 80032b2:	6864      	ldr	r4, [r4, #4]
 80032b4:	e7ae      	b.n	8003214 <_malloc_r+0x34>
 80032b6:	463c      	mov	r4, r7
 80032b8:	687f      	ldr	r7, [r7, #4]
 80032ba:	e7b6      	b.n	800322a <_malloc_r+0x4a>
 80032bc:	461a      	mov	r2, r3
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	42a3      	cmp	r3, r4
 80032c2:	d1fb      	bne.n	80032bc <_malloc_r+0xdc>
 80032c4:	2300      	movs	r3, #0
 80032c6:	6053      	str	r3, [r2, #4]
 80032c8:	e7de      	b.n	8003288 <_malloc_r+0xa8>
 80032ca:	230c      	movs	r3, #12
 80032cc:	6033      	str	r3, [r6, #0]
 80032ce:	4630      	mov	r0, r6
 80032d0:	f000 f80c 	bl	80032ec <__malloc_unlock>
 80032d4:	e794      	b.n	8003200 <_malloc_r+0x20>
 80032d6:	6005      	str	r5, [r0, #0]
 80032d8:	e7d6      	b.n	8003288 <_malloc_r+0xa8>
 80032da:	bf00      	nop
 80032dc:	200002f4 	.word	0x200002f4

080032e0 <__malloc_lock>:
 80032e0:	4801      	ldr	r0, [pc, #4]	@ (80032e8 <__malloc_lock+0x8>)
 80032e2:	f7ff bf0e 	b.w	8003102 <__retarget_lock_acquire_recursive>
 80032e6:	bf00      	nop
 80032e8:	200002ec 	.word	0x200002ec

080032ec <__malloc_unlock>:
 80032ec:	4801      	ldr	r0, [pc, #4]	@ (80032f4 <__malloc_unlock+0x8>)
 80032ee:	f7ff bf09 	b.w	8003104 <__retarget_lock_release_recursive>
 80032f2:	bf00      	nop
 80032f4:	200002ec 	.word	0x200002ec

080032f8 <__sflush_r>:
 80032f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	0716      	lsls	r6, r2, #28
 8003302:	4605      	mov	r5, r0
 8003304:	460c      	mov	r4, r1
 8003306:	d454      	bmi.n	80033b2 <__sflush_r+0xba>
 8003308:	684b      	ldr	r3, [r1, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	dc02      	bgt.n	8003314 <__sflush_r+0x1c>
 800330e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	dd48      	ble.n	80033a6 <__sflush_r+0xae>
 8003314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003316:	2e00      	cmp	r6, #0
 8003318:	d045      	beq.n	80033a6 <__sflush_r+0xae>
 800331a:	2300      	movs	r3, #0
 800331c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003320:	682f      	ldr	r7, [r5, #0]
 8003322:	6a21      	ldr	r1, [r4, #32]
 8003324:	602b      	str	r3, [r5, #0]
 8003326:	d030      	beq.n	800338a <__sflush_r+0x92>
 8003328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	0759      	lsls	r1, r3, #29
 800332e:	d505      	bpl.n	800333c <__sflush_r+0x44>
 8003330:	6863      	ldr	r3, [r4, #4]
 8003332:	1ad2      	subs	r2, r2, r3
 8003334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003336:	b10b      	cbz	r3, 800333c <__sflush_r+0x44>
 8003338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	2300      	movs	r3, #0
 800333e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003340:	6a21      	ldr	r1, [r4, #32]
 8003342:	4628      	mov	r0, r5
 8003344:	47b0      	blx	r6
 8003346:	1c43      	adds	r3, r0, #1
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	d106      	bne.n	800335a <__sflush_r+0x62>
 800334c:	6829      	ldr	r1, [r5, #0]
 800334e:	291d      	cmp	r1, #29
 8003350:	d82b      	bhi.n	80033aa <__sflush_r+0xb2>
 8003352:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <__sflush_r+0x104>)
 8003354:	40ca      	lsrs	r2, r1
 8003356:	07d6      	lsls	r6, r2, #31
 8003358:	d527      	bpl.n	80033aa <__sflush_r+0xb2>
 800335a:	2200      	movs	r2, #0
 800335c:	6062      	str	r2, [r4, #4]
 800335e:	04d9      	lsls	r1, r3, #19
 8003360:	6922      	ldr	r2, [r4, #16]
 8003362:	6022      	str	r2, [r4, #0]
 8003364:	d504      	bpl.n	8003370 <__sflush_r+0x78>
 8003366:	1c42      	adds	r2, r0, #1
 8003368:	d101      	bne.n	800336e <__sflush_r+0x76>
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	b903      	cbnz	r3, 8003370 <__sflush_r+0x78>
 800336e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003372:	602f      	str	r7, [r5, #0]
 8003374:	b1b9      	cbz	r1, 80033a6 <__sflush_r+0xae>
 8003376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800337a:	4299      	cmp	r1, r3
 800337c:	d002      	beq.n	8003384 <__sflush_r+0x8c>
 800337e:	4628      	mov	r0, r5
 8003380:	f7ff fec2 	bl	8003108 <_free_r>
 8003384:	2300      	movs	r3, #0
 8003386:	6363      	str	r3, [r4, #52]	@ 0x34
 8003388:	e00d      	b.n	80033a6 <__sflush_r+0xae>
 800338a:	2301      	movs	r3, #1
 800338c:	4628      	mov	r0, r5
 800338e:	47b0      	blx	r6
 8003390:	4602      	mov	r2, r0
 8003392:	1c50      	adds	r0, r2, #1
 8003394:	d1c9      	bne.n	800332a <__sflush_r+0x32>
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0c6      	beq.n	800332a <__sflush_r+0x32>
 800339c:	2b1d      	cmp	r3, #29
 800339e:	d001      	beq.n	80033a4 <__sflush_r+0xac>
 80033a0:	2b16      	cmp	r3, #22
 80033a2:	d11e      	bne.n	80033e2 <__sflush_r+0xea>
 80033a4:	602f      	str	r7, [r5, #0]
 80033a6:	2000      	movs	r0, #0
 80033a8:	e022      	b.n	80033f0 <__sflush_r+0xf8>
 80033aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	e01b      	b.n	80033ea <__sflush_r+0xf2>
 80033b2:	690f      	ldr	r7, [r1, #16]
 80033b4:	2f00      	cmp	r7, #0
 80033b6:	d0f6      	beq.n	80033a6 <__sflush_r+0xae>
 80033b8:	0793      	lsls	r3, r2, #30
 80033ba:	680e      	ldr	r6, [r1, #0]
 80033bc:	bf08      	it	eq
 80033be:	694b      	ldreq	r3, [r1, #20]
 80033c0:	600f      	str	r7, [r1, #0]
 80033c2:	bf18      	it	ne
 80033c4:	2300      	movne	r3, #0
 80033c6:	eba6 0807 	sub.w	r8, r6, r7
 80033ca:	608b      	str	r3, [r1, #8]
 80033cc:	f1b8 0f00 	cmp.w	r8, #0
 80033d0:	dde9      	ble.n	80033a6 <__sflush_r+0xae>
 80033d2:	6a21      	ldr	r1, [r4, #32]
 80033d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80033d6:	4643      	mov	r3, r8
 80033d8:	463a      	mov	r2, r7
 80033da:	4628      	mov	r0, r5
 80033dc:	47b0      	blx	r6
 80033de:	2800      	cmp	r0, #0
 80033e0:	dc08      	bgt.n	80033f4 <__sflush_r+0xfc>
 80033e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ea:	81a3      	strh	r3, [r4, #12]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f4:	4407      	add	r7, r0
 80033f6:	eba8 0800 	sub.w	r8, r8, r0
 80033fa:	e7e7      	b.n	80033cc <__sflush_r+0xd4>
 80033fc:	20400001 	.word	0x20400001

08003400 <_fflush_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	690b      	ldr	r3, [r1, #16]
 8003404:	4605      	mov	r5, r0
 8003406:	460c      	mov	r4, r1
 8003408:	b913      	cbnz	r3, 8003410 <_fflush_r+0x10>
 800340a:	2500      	movs	r5, #0
 800340c:	4628      	mov	r0, r5
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	b118      	cbz	r0, 800341a <_fflush_r+0x1a>
 8003412:	6a03      	ldr	r3, [r0, #32]
 8003414:	b90b      	cbnz	r3, 800341a <_fflush_r+0x1a>
 8003416:	f7ff fc93 	bl	8002d40 <__sinit>
 800341a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f3      	beq.n	800340a <_fflush_r+0xa>
 8003422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003424:	07d0      	lsls	r0, r2, #31
 8003426:	d404      	bmi.n	8003432 <_fflush_r+0x32>
 8003428:	0599      	lsls	r1, r3, #22
 800342a:	d402      	bmi.n	8003432 <_fflush_r+0x32>
 800342c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800342e:	f7ff fe68 	bl	8003102 <__retarget_lock_acquire_recursive>
 8003432:	4628      	mov	r0, r5
 8003434:	4621      	mov	r1, r4
 8003436:	f7ff ff5f 	bl	80032f8 <__sflush_r>
 800343a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800343c:	07da      	lsls	r2, r3, #31
 800343e:	4605      	mov	r5, r0
 8003440:	d4e4      	bmi.n	800340c <_fflush_r+0xc>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	059b      	lsls	r3, r3, #22
 8003446:	d4e1      	bmi.n	800340c <_fflush_r+0xc>
 8003448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800344a:	f7ff fe5b 	bl	8003104 <__retarget_lock_release_recursive>
 800344e:	e7dd      	b.n	800340c <_fflush_r+0xc>

08003450 <__swhatbuf_r>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	460c      	mov	r4, r1
 8003454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003458:	2900      	cmp	r1, #0
 800345a:	b096      	sub	sp, #88	@ 0x58
 800345c:	4615      	mov	r5, r2
 800345e:	461e      	mov	r6, r3
 8003460:	da0d      	bge.n	800347e <__swhatbuf_r+0x2e>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	bf14      	ite	ne
 800346e:	2340      	movne	r3, #64	@ 0x40
 8003470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003474:	2000      	movs	r0, #0
 8003476:	6031      	str	r1, [r6, #0]
 8003478:	602b      	str	r3, [r5, #0]
 800347a:	b016      	add	sp, #88	@ 0x58
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	466a      	mov	r2, sp
 8003480:	f000 f848 	bl	8003514 <_fstat_r>
 8003484:	2800      	cmp	r0, #0
 8003486:	dbec      	blt.n	8003462 <__swhatbuf_r+0x12>
 8003488:	9901      	ldr	r1, [sp, #4]
 800348a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800348e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003492:	4259      	negs	r1, r3
 8003494:	4159      	adcs	r1, r3
 8003496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800349a:	e7eb      	b.n	8003474 <__swhatbuf_r+0x24>

0800349c <__smakebuf_r>:
 800349c:	898b      	ldrh	r3, [r1, #12]
 800349e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034a0:	079d      	lsls	r5, r3, #30
 80034a2:	4606      	mov	r6, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	d507      	bpl.n	80034b8 <__smakebuf_r+0x1c>
 80034a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	6123      	str	r3, [r4, #16]
 80034b0:	2301      	movs	r3, #1
 80034b2:	6163      	str	r3, [r4, #20]
 80034b4:	b003      	add	sp, #12
 80034b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b8:	ab01      	add	r3, sp, #4
 80034ba:	466a      	mov	r2, sp
 80034bc:	f7ff ffc8 	bl	8003450 <__swhatbuf_r>
 80034c0:	9f00      	ldr	r7, [sp, #0]
 80034c2:	4605      	mov	r5, r0
 80034c4:	4639      	mov	r1, r7
 80034c6:	4630      	mov	r0, r6
 80034c8:	f7ff fe8a 	bl	80031e0 <_malloc_r>
 80034cc:	b948      	cbnz	r0, 80034e2 <__smakebuf_r+0x46>
 80034ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034d2:	059a      	lsls	r2, r3, #22
 80034d4:	d4ee      	bmi.n	80034b4 <__smakebuf_r+0x18>
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	f043 0302 	orr.w	r3, r3, #2
 80034de:	81a3      	strh	r3, [r4, #12]
 80034e0:	e7e2      	b.n	80034a8 <__smakebuf_r+0xc>
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	6020      	str	r0, [r4, #0]
 80034e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ea:	81a3      	strh	r3, [r4, #12]
 80034ec:	9b01      	ldr	r3, [sp, #4]
 80034ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80034f2:	b15b      	cbz	r3, 800350c <__smakebuf_r+0x70>
 80034f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f81d 	bl	8003538 <_isatty_r>
 80034fe:	b128      	cbz	r0, 800350c <__smakebuf_r+0x70>
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	f023 0303 	bic.w	r3, r3, #3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	81a3      	strh	r3, [r4, #12]
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	431d      	orrs	r5, r3
 8003510:	81a5      	strh	r5, [r4, #12]
 8003512:	e7cf      	b.n	80034b4 <__smakebuf_r+0x18>

08003514 <_fstat_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4d07      	ldr	r5, [pc, #28]	@ (8003534 <_fstat_r+0x20>)
 8003518:	2300      	movs	r3, #0
 800351a:	4604      	mov	r4, r0
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	f7fd fc27 	bl	8000d74 <_fstat>
 8003526:	1c43      	adds	r3, r0, #1
 8003528:	d102      	bne.n	8003530 <_fstat_r+0x1c>
 800352a:	682b      	ldr	r3, [r5, #0]
 800352c:	b103      	cbz	r3, 8003530 <_fstat_r+0x1c>
 800352e:	6023      	str	r3, [r4, #0]
 8003530:	bd38      	pop	{r3, r4, r5, pc}
 8003532:	bf00      	nop
 8003534:	200002e8 	.word	0x200002e8

08003538 <_isatty_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4d06      	ldr	r5, [pc, #24]	@ (8003554 <_isatty_r+0x1c>)
 800353c:	2300      	movs	r3, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	602b      	str	r3, [r5, #0]
 8003544:	f7fd fc26 	bl	8000d94 <_isatty>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_isatty_r+0x1a>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_isatty_r+0x1a>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200002e8 	.word	0x200002e8

08003558 <_sbrk_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4d06      	ldr	r5, [pc, #24]	@ (8003574 <_sbrk_r+0x1c>)
 800355c:	2300      	movs	r3, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fd fc2e 	bl	8000dc4 <_sbrk>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_sbrk_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_sbrk_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	200002e8 	.word	0x200002e8

08003578 <_init>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr

08003584 <_fini>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr
