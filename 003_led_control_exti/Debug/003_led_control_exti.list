
003_led_control_exti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002db4  08002db4  00003db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dec  08002dec  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002dec  08002dec  00003dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df4  08002df4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df4  08002df4  00003df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002df8  08002df8  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002dfc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00003fd0  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003fe0  20003fe0  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008643  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d4d  00000000  00000000  0000c683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0000e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068b  00000000  00000000  0000eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208f5  00000000  00000000  0000f32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e16  00000000  00000000  0002fc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c81fb  00000000  00000000  00039a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101c31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021f4  00000000  00000000  00101c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00103e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d9c 	.word	0x08002d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002d9c 	.word	0x08002d9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000080 	.word	0x20000080

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 f9d7 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f81b 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f877 	bl	8000630 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LED */
  osThreadDef(LED, ledFlashTask, osPriorityHigh, 0, 128);
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <main+0x3c>)
 8000544:	1d3c      	adds	r4, r7, #4
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f998 	bl	800188e <osThreadCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a03      	ldr	r2, [pc, #12]	@ (8000570 <main+0x40>)
 8000562:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000564:	f001 f98c 	bl	8001880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <main+0x38>
 800056c:	08002db8 	.word	0x08002db8
 8000570:	20000280 	.word	0x20000280

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fbde 	bl	8002d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xb4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <SystemClock_Config+0xb8>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	@ (800062c <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fd0f 	bl	8001008 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f8c4 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ff72 	bl	80014f8 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061a:	f000 f8af 	bl	800077c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <MX_GPIO_Init+0xac>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a23      	ldr	r2, [pc, #140]	@ (80006dc <MX_GPIO_Init+0xac>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_GPIO_Init+0xac>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_GPIO_Init+0xac>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_GPIO_Init+0xac>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_GPIO_Init+0xac>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000684:	4816      	ldr	r0, [pc, #88]	@ (80006e0 <MX_GPIO_Init+0xb0>)
 8000686:	f000 fc67 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <MX_GPIO_Init+0xb4>)
 80006a0:	f000 faa6 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <MX_GPIO_Init+0xb0>)
 80006be:	f000 fa97 	bl	8000bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2006      	movs	r0, #6
 80006c8:	f000 fa5b 	bl	8000b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006cc:	2006      	movs	r0, #6
 80006ce:	f000 fa74 	bl	8000bba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40020000 	.word	0x40020000

080006e8 <ledFlashTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ledFlashTask */
void ledFlashTask(void const * argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  if(buttonCount == 0)
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <ledFlashTask+0x8c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d106      	bne.n	8000706 <ledFlashTask+0x1e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80006fe:	481e      	ldr	r0, [pc, #120]	@ (8000778 <ledFlashTask+0x90>)
 8000700:	f000 fc2a 	bl	8000f58 <HAL_GPIO_WritePin>
 8000704:	e7f4      	b.n	80006f0 <ledFlashTask+0x8>
	  }

	  else if (buttonCount == 1)
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <ledFlashTask+0x8c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d109      	bne.n	8000722 <ledFlashTask+0x3a>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800070e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000712:	4819      	ldr	r0, [pc, #100]	@ (8000778 <ledFlashTask+0x90>)
 8000714:	f000 fc39 	bl	8000f8a <HAL_GPIO_TogglePin>
		  osDelay(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071c:	f001 f903 	bl	8001926 <osDelay>
 8000720:	e7e6      	b.n	80006f0 <ledFlashTask+0x8>
	  }
	  else if (buttonCount == 2)
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <ledFlashTask+0x8c>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d109      	bne.n	800073e <ledFlashTask+0x56>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800072a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <ledFlashTask+0x90>)
 8000730:	f000 fc2b 	bl	8000f8a <HAL_GPIO_TogglePin>
		  osDelay(750);
 8000734:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000738:	f001 f8f5 	bl	8001926 <osDelay>
 800073c:	e7d8      	b.n	80006f0 <ledFlashTask+0x8>
	  }
	  else if (buttonCount == 3)
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <ledFlashTask+0x8c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d109      	bne.n	800075a <ledFlashTask+0x72>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000746:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800074a:	480b      	ldr	r0, [pc, #44]	@ (8000778 <ledFlashTask+0x90>)
 800074c:	f000 fc1d 	bl	8000f8a <HAL_GPIO_TogglePin>
		  osDelay(500);
 8000750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000754:	f001 f8e7 	bl	8001926 <osDelay>
 8000758:	e7ca      	b.n	80006f0 <ledFlashTask+0x8>
	  }
	  else if (buttonCount == 4)
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <ledFlashTask+0x8c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d1c6      	bne.n	80006f0 <ledFlashTask+0x8>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000762:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <ledFlashTask+0x90>)
 8000768:	f000 fc0f 	bl	8000f8a <HAL_GPIO_TogglePin>
		  osDelay(250);
 800076c:	20fa      	movs	r0, #250	@ 0xfa
 800076e:	f001 f8da 	bl	8001926 <osDelay>
	  if(buttonCount == 0)
 8000772:	e7bd      	b.n	80006f0 <ledFlashTask+0x8>
 8000774:	20000284 	.word	0x20000284
 8000778:	40020c00 	.word	0x40020c00

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <HAL_MspInit+0x54>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079c:	6453      	str	r3, [r2, #68]	@ 0x44
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x54>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <HAL_MspInit+0x54>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_MspInit+0x54>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 f9d8 	bl	8000b82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <NMI_Handler+0x4>

080007e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <MemManage_Handler+0x4>

080007f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <UsageFault_Handler+0x4>

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f8b7 	bl	800098c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800081e:	f001 fe11 	bl	8002444 <xTaskGetSchedulerState>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d001      	beq.n	800082c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000828:	f002 f84e 	bl	80028c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000834:	2101      	movs	r1, #1
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <EXTI0_IRQHandler+0x38>)
 8000838:	f000 fb76 	bl	8000f28 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b01      	cmp	r3, #1
 8000840:	d10c      	bne.n	800085c <EXTI0_IRQHandler+0x2c>
	{
		buttonCount++;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <EXTI0_IRQHandler+0x3c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <EXTI0_IRQHandler+0x3c>)
 800084c:	701a      	strb	r2, [r3, #0]

		if(buttonCount == 5)
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <EXTI0_IRQHandler+0x3c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d102      	bne.n	800085c <EXTI0_IRQHandler+0x2c>
		{
			buttonCount = 0;
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <EXTI0_IRQHandler+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]


	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fbaf 	bl	8000fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	20000284 	.word	0x20000284

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f002 fa47 	bl	8002d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe33 	bl	8000530 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008d8:	08002dfc 	.word	0x08002dfc
  ldr r2, =_sbss
 80008dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008e0:	20003fe0 	.word	0x20003fe0

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f92b 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff ff34 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f943 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f90b 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000288 	.word	0x20000288

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000288 	.word	0x20000288

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	@ (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	@ (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	@ 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff29 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff3e 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff31 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e16b      	b.n	8000ee4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 815a 	bne.w	8000ede <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d005      	beq.n	8000c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d130      	bne.n	8000ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	f003 0201 	and.w	r2, r3, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d017      	beq.n	8000ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d123      	bne.n	8000d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	69b9      	ldr	r1, [r7, #24]
 8000d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0203 	and.w	r2, r3, #3
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80b4 	beq.w	8000ede <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b60      	ldr	r3, [pc, #384]	@ (8000efc <HAL_GPIO_Init+0x30c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8000efc <HAL_GPIO_Init+0x30c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b5d      	ldr	r3, [pc, #372]	@ (8000efc <HAL_GPIO_Init+0x30c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d92:	4a5b      	ldr	r2, [pc, #364]	@ (8000f00 <HAL_GPIO_Init+0x310>)
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a52      	ldr	r2, [pc, #328]	@ (8000f04 <HAL_GPIO_Init+0x314>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d02b      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a51      	ldr	r2, [pc, #324]	@ (8000f08 <HAL_GPIO_Init+0x318>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d025      	beq.n	8000e12 <HAL_GPIO_Init+0x222>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a50      	ldr	r2, [pc, #320]	@ (8000f0c <HAL_GPIO_Init+0x31c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01f      	beq.n	8000e0e <HAL_GPIO_Init+0x21e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f10 <HAL_GPIO_Init+0x320>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x21a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x216>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f18 <HAL_GPIO_Init+0x328>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x212>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f1c <HAL_GPIO_Init+0x32c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x20e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4b      	ldr	r2, [pc, #300]	@ (8000f20 <HAL_GPIO_Init+0x330>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x20a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00e      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	e00c      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000dfe:	2306      	movs	r3, #6
 8000e00:	e00a      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e06:	2304      	movs	r3, #4
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e16:	2300      	movs	r3, #0
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	f002 0203 	and.w	r2, r2, #3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	4935      	ldr	r1, [pc, #212]	@ (8000f00 <HAL_GPIO_Init+0x310>)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e5a:	4a32      	ldr	r2, [pc, #200]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e60:	4b30      	ldr	r3, [pc, #192]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e84:	4a27      	ldr	r2, [pc, #156]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eae:	4a1d      	ldr	r2, [pc, #116]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <HAL_GPIO_Init+0x334>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	f67f ae90 	bls.w	8000c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021c00 	.word	0x40021c00
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e001      	b.n	8000f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	619a      	str	r2, [r3, #24]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f9c:	887a      	ldrh	r2, [r7, #2]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	041a      	lsls	r2, r3, #16
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	400b      	ands	r3, r1
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d006      	beq.n	8000fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f806 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e267      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d075      	beq.n	8001112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001026:	4b88      	ldr	r3, [pc, #544]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b04      	cmp	r3, #4
 8001030:	d00c      	beq.n	800104c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001032:	4b85      	ldr	r3, [pc, #532]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800103a:	2b08      	cmp	r3, #8
 800103c:	d112      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103e:	4b82      	ldr	r3, [pc, #520]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001046:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800104a:	d10b      	bne.n	8001064 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	4b7e      	ldr	r3, [pc, #504]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d05b      	beq.n	8001110 <HAL_RCC_OscConfig+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d157      	bne.n	8001110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e242      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800106c:	d106      	bne.n	800107c <HAL_RCC_OscConfig+0x74>
 800106e:	4b76      	ldr	r3, [pc, #472]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a75      	ldr	r2, [pc, #468]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x98>
 8001086:	4b70      	ldr	r3, [pc, #448]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a6f      	ldr	r2, [pc, #444]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6d      	ldr	r3, [pc, #436]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6c      	ldr	r2, [pc, #432]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xb0>
 80010a0:	4b69      	ldr	r3, [pc, #420]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a68      	ldr	r2, [pc, #416]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b66      	ldr	r3, [pc, #408]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a65      	ldr	r2, [pc, #404]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc78 	bl	80009b4 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fc74 	bl	80009b4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e207      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5b      	ldr	r3, [pc, #364]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xc0>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc64 	bl	80009b4 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc60 	bl	80009b4 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	@ 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1f3      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0xe8>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800111e:	4b4a      	ldr	r3, [pc, #296]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112a:	4b47      	ldr	r3, [pc, #284]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001136:	4b44      	ldr	r3, [pc, #272]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b41      	ldr	r3, [pc, #260]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c7      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3b      	ldr	r3, [pc, #236]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4937      	ldr	r1, [pc, #220]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b34      	ldr	r3, [pc, #208]	@ (800124c <HAL_RCC_OscConfig+0x244>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117e:	f7ff fc19 	bl	80009b4 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fc15 	bl	80009b4 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a8      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4925      	ldr	r1, [pc, #148]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <HAL_RCC_OscConfig+0x244>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbf8 	bl	80009b4 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbf4 	bl	80009b4 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e187      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d036      	beq.n	8001260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d016      	beq.n	8001228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_RCC_OscConfig+0x248>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff fbd8 	bl	80009b4 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fbd4 	bl	80009b4 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e167      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <HAL_RCC_OscConfig+0x240>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x200>
 8001226:	e01b      	b.n	8001260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <HAL_RCC_OscConfig+0x248>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbc1 	bl	80009b4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001234:	e00e      	b.n	8001254 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fbbd 	bl	80009b4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d907      	bls.n	8001254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e150      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001248:	40023800 	.word	0x40023800
 800124c:	42470000 	.word	0x42470000
 8001250:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1ea      	bne.n	8001236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8097 	beq.w	800139c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001272:	4b81      	ldr	r3, [pc, #516]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b7d      	ldr	r3, [pc, #500]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a7c      	ldr	r2, [pc, #496]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b77      	ldr	r3, [pc, #476]	@ (800147c <HAL_RCC_OscConfig+0x474>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b74      	ldr	r3, [pc, #464]	@ (800147c <HAL_RCC_OscConfig+0x474>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a73      	ldr	r2, [pc, #460]	@ (800147c <HAL_RCC_OscConfig+0x474>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb7d 	bl	80009b4 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fb79 	bl	80009b4 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e10c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <HAL_RCC_OscConfig+0x474>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2ea>
 80012e4:	4b64      	ldr	r3, [pc, #400]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e8:	4a63      	ldr	r2, [pc, #396]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x30c>
 80012fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 80012fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6713      	str	r3, [r2, #112]	@ 0x70
 8001306:	4b5c      	ldr	r3, [pc, #368]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800130a:	4a5b      	ldr	r2, [pc, #364]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	@ 0x70
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0x324>
 8001314:	4b58      	ldr	r3, [pc, #352]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001318:	4a57      	ldr	r2, [pc, #348]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001320:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001324:	4a54      	ldr	r2, [pc, #336]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001334:	f7ff fb3e 	bl	80009b4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133c:	f7ff fb3a 	bl	80009b4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e0cb      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001352:	4b49      	ldr	r3, [pc, #292]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0ee      	beq.n	800133c <HAL_RCC_OscConfig+0x334>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001360:	f7ff fb28 	bl	80009b4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001368:	f7ff fb24 	bl	80009b4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0b5      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137e:	4b3e      	ldr	r3, [pc, #248]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1ee      	bne.n	8001368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d105      	bne.n	800139c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001390:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	4a38      	ldr	r2, [pc, #224]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800139a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a1 	beq.w	80014e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013a6:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d05c      	beq.n	800146c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d141      	bne.n	800143e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <HAL_RCC_OscConfig+0x478>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff faf8 	bl	80009b4 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff faf4 	bl	80009b4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e087      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	4b27      	ldr	r3, [pc, #156]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69da      	ldr	r2, [r3, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fc:	085b      	lsrs	r3, r3, #1
 80013fe:	3b01      	subs	r3, #1
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	491b      	ldr	r1, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_RCC_OscConfig+0x478>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff facd 	bl	80009b4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fac9 	bl	80009b4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e05c      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x416>
 800143c:	e054      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fab6 	bl	80009b4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fab2 	bl	80009b4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e045      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x444>
 800146a:	e03d      	b.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d107      	bne.n	8001484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e038      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001484:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_RCC_OscConfig+0x4ec>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d028      	beq.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d121      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d11a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014bc:	4293      	cmp	r3, r2
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0cc      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b68      	ldr	r3, [pc, #416]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d90c      	bls.n	8001534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b65      	ldr	r3, [pc, #404]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b63      	ldr	r3, [pc, #396]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0b8      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154c:	4b59      	ldr	r3, [pc, #356]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a58      	ldr	r2, [pc, #352]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001564:	4b53      	ldr	r3, [pc, #332]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4a52      	ldr	r2, [pc, #328]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800156e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001570:	4b50      	ldr	r3, [pc, #320]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	494d      	ldr	r1, [pc, #308]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d044      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d119      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e07f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b3f      	ldr	r3, [pc, #252]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3b      	ldr	r3, [pc, #236]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e067      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b37      	ldr	r3, [pc, #220]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4934      	ldr	r1, [pc, #208]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f9e4 	bl	80009b4 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f9e0 	bl	80009b4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e04f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d20c      	bcs.n	8001640 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e032      	b.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4916      	ldr	r1, [pc, #88]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	4313      	orrs	r3, r2
 800165c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d009      	beq.n	800167e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	490e      	ldr	r1, [pc, #56]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800167e:	f000 f821 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 8001682:	4602      	mov	r2, r0
 8001684:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	490a      	ldr	r1, [pc, #40]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f944 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00
 80016b4:	40023800 	.word	0x40023800
 80016b8:	08002ddc 	.word	0x08002ddc
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b090      	sub	sp, #64	@ 0x40
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d00d      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x40>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f200 80a1 	bhi.w	8001830 <HAL_RCC_GetSysClockFreq+0x16c>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_RCC_GetSysClockFreq+0x34>
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x3a>
 80016f6:	e09b      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x184>)
 80016fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016fc:	e09b      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016fe:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 8001700:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001702:	e098      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b4f      	ldr	r3, [pc, #316]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800170e:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d028      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171a:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	099b      	lsrs	r3, r3, #6
 8001720:	2200      	movs	r2, #0
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	627a      	str	r2, [r7, #36]	@ 0x24
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800172c:	2100      	movs	r1, #0
 800172e:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 8001730:	fb03 f201 	mul.w	r2, r3, r1
 8001734:	2300      	movs	r3, #0
 8001736:	fb00 f303 	mul.w	r3, r0, r3
 800173a:	4413      	add	r3, r2
 800173c:	4a43      	ldr	r2, [pc, #268]	@ (800184c <HAL_RCC_GetSysClockFreq+0x188>)
 800173e:	fba0 1202 	umull	r1, r2, r0, r2
 8001742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001744:	460a      	mov	r2, r1
 8001746:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800174a:	4413      	add	r3, r2
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	2200      	movs	r2, #0
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	61fa      	str	r2, [r7, #28]
 8001756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800175a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800175e:	f7fe fd37 	bl	80001d0 <__aeabi_uldivmod>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4613      	mov	r3, r2
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800176a:	e053      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	2200      	movs	r2, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	617a      	str	r2, [r7, #20]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800177e:	f04f 0b00 	mov.w	fp, #0
 8001782:	4652      	mov	r2, sl
 8001784:	465b      	mov	r3, fp
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	0159      	lsls	r1, r3, #5
 8001790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001794:	0150      	lsls	r0, r2, #5
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ebb2 080a 	subs.w	r8, r2, sl
 800179e:	eb63 090b 	sbc.w	r9, r3, fp
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80017ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80017b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80017b6:	ebb2 0408 	subs.w	r4, r2, r8
 80017ba:	eb63 0509 	sbc.w	r5, r3, r9
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	00eb      	lsls	r3, r5, #3
 80017c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017cc:	00e2      	lsls	r2, r4, #3
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	eb14 030a 	adds.w	r3, r4, sl
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	eb45 030b 	adc.w	r3, r5, fp
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 0300 	mov.w	r3, #0
 80017e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ea:	4629      	mov	r1, r5
 80017ec:	028b      	lsls	r3, r1, #10
 80017ee:	4621      	mov	r1, r4
 80017f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f4:	4621      	mov	r1, r4
 80017f6:	028a      	lsls	r2, r1, #10
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fe:	2200      	movs	r2, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001808:	f7fe fce2 	bl	80001d0 <__aeabi_uldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4613      	mov	r3, r2
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x184>)
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001838:	4618      	mov	r0, r3
 800183a:	3740      	adds	r7, #64	@ 0x40
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	017d7840 	.word	0x017d7840

08001850 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	2b84      	cmp	r3, #132	@ 0x84
 8001864:	d005      	beq.n	8001872 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001866:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	3303      	adds	r3, #3
 8001870:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001884:	f000 fae4 	bl	8001e50 <vTaskStartScheduler>
  
  return osOK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}

0800188e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800188e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001890:	b089      	sub	sp, #36	@ 0x24
 8001892:	af04      	add	r7, sp, #16
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <osThreadCreate+0x54>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685c      	ldr	r4, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691e      	ldr	r6, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ffc8 	bl	8001850 <makeFreeRtosPriority>
 80018c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ca:	9202      	str	r2, [sp, #8]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	9100      	str	r1, [sp, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4632      	mov	r2, r6
 80018d4:	4629      	mov	r1, r5
 80018d6:	4620      	mov	r0, r4
 80018d8:	f000 f8ed 	bl	8001ab6 <xTaskCreateStatic>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e01c      	b.n	800191c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685c      	ldr	r4, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffaa 	bl	8001850 <makeFreeRtosPriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4632      	mov	r2, r6
 800190a:	4629      	mov	r1, r5
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f932 	bl	8001b76 <xTaskCreate>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d001      	beq.n	800191c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001926 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <osDelay+0x16>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	e000      	b.n	800193e <osDelay+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fa50 	bl	8001de4 <vTaskDelay>
  
  return osOK;
 8001944:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0208 	add.w	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0208 	add.w	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 0208 	add.w	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a06:	d103      	bne.n	8001a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00c      	b.n	8001a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3308      	adds	r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <vListInsert+0x2e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d2f6      	bcs.n	8001a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6852      	ldr	r2, [r2, #4]
 8001a82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d103      	bne.n	8001a96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08e      	sub	sp, #56	@ 0x38
 8001aba:	af04      	add	r7, sp, #16
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	61fb      	str	r3, [r7, #28]
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b00:	2354      	movs	r3, #84	@ 0x54
 8001b02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	2b54      	cmp	r3, #84	@ 0x54
 8001b08:	d00b      	beq.n	8001b22 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	61bb      	str	r3, [r7, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	e7fd      	b.n	8001b1e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01e      	beq.n	8001b68 <xTaskCreateStatic+0xb2>
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b38:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001b42:	2300      	movs	r3, #0
 8001b44:	9303      	str	r3, [sp, #12]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	f107 0314 	add.w	r3, r7, #20
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f850 	bl	8001c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b62:	f000 f8d5 	bl	8001d10 <prvAddNewTaskToReadyList>
 8001b66:	e001      	b.n	8001b6c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b6c:	697b      	ldr	r3, [r7, #20]
	}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b08c      	sub	sp, #48	@ 0x30
 8001b7a:	af04      	add	r7, sp, #16
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 feec 	bl	8002968 <pvPortMalloc>
 8001b90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b98:	2054      	movs	r0, #84	@ 0x54
 8001b9a:	f000 fee5 	bl	8002968 <pvPortMalloc>
 8001b9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bac:	e005      	b.n	8001bba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f000 ffa8 	bl	8002b04 <vPortFree>
 8001bb4:	e001      	b.n	8001bba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d017      	beq.n	8001bf0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f80e 	bl	8001c00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001be4:	69f8      	ldr	r0, [r7, #28]
 8001be6:	f000 f893 	bl	8001d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	e002      	b.n	8001bf6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001bf6:	69bb      	ldr	r3, [r7, #24]
	}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f023 0307 	bic.w	r3, r3, #7
 8001c26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	617b      	str	r3, [r7, #20]
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01f      	beq.n	8001c90 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	e012      	b.n	8001c7c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	7819      	ldrb	r1, [r3, #0]
 8001c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	3334      	adds	r3, #52	@ 0x34
 8001c66:	460a      	mov	r2, r1
 8001c68:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	d9e9      	bls.n	8001c56 <prvInitialiseNewTask+0x56>
 8001c82:	e000      	b.n	8001c86 <prvInitialiseNewTask+0x86>
			{
				break;
 8001c84:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c8e:	e003      	b.n	8001c98 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d901      	bls.n	8001ca2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe68 	bl	800198e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc0:	3318      	adds	r3, #24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe63 	bl	800198e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ccc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd0:	f1c3 0207 	rsb	r2, r3, #7
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	69b8      	ldr	r0, [r7, #24]
 8001cf2:	f000 fc2b 	bl	800254c <pxPortInitialiseStack>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d08:	bf00      	nop
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d18:	f000 fd46 	bl	80027a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d26:	4b29      	ldr	r3, [pc, #164]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d2e:	4a27      	ldr	r2, [pc, #156]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <prvAddNewTaskToReadyList+0xb8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d110      	bne.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001d3c:	f000 fac4 	bl	80022c8 <prvInitialiseTaskLists>
 8001d40:	e00d      	b.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001d42:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <prvAddNewTaskToReadyList+0xc0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d802      	bhi.n	8001d5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d58:	4a1c      	ldr	r2, [pc, #112]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <prvAddNewTaskToReadyList+0xc4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <prvAddNewTaskToReadyList+0xc4>)
 8001d66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <prvAddNewTaskToReadyList+0xc8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <prvAddNewTaskToReadyList+0xc8>)
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <prvAddNewTaskToReadyList+0xcc>)
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f7ff fe09 	bl	80019a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d96:	f000 fd39 	bl	800280c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <prvAddNewTaskToReadyList+0xc0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <prvAddNewTaskToReadyList+0xbc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <prvAddNewTaskToReadyList+0xd0>)
 8001db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000038c 	.word	0x2000038c
 8001dcc:	2000028c 	.word	0x2000028c
 8001dd0:	20000398 	.word	0x20000398
 8001dd4:	200003a8 	.word	0x200003a8
 8001dd8:	20000394 	.word	0x20000394
 8001ddc:	20000290 	.word	0x20000290
 8001de0:	e000ed04 	.word	0xe000ed04

08001de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001df6:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <vTaskDelay+0x64>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <vTaskDelay+0x32>
	__asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	60bb      	str	r3, [r7, #8]
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	e7fd      	b.n	8001e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e16:	f000 f87d 	bl	8001f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb2f 	bl	8002480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e22:	f000 f885 	bl	8001f30 <xTaskResumeAll>
 8001e26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <vTaskDelay+0x68>)
 8001e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200003b4 	.word	0x200003b4
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001e5e:	463a      	mov	r2, r7
 8001e60:	1d39      	adds	r1, r7, #4
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb48 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	9202      	str	r2, [sp, #8]
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2300      	movs	r3, #0
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	491f      	ldr	r1, [pc, #124]	@ (8001efc <vTaskStartScheduler+0xac>)
 8001e80:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <vTaskStartScheduler+0xb0>)
 8001e82:	f7ff fe18 	bl	8001ab6 <xTaskCreateStatic>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <vTaskStartScheduler+0xb4>)
 8001e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <vTaskStartScheduler+0xb4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001e94:	2301      	movs	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e001      	b.n	8001e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d116      	bne.n	8001ed2 <vTaskStartScheduler+0x82>
	__asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	613b      	str	r3, [r7, #16]
}
 8001eb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <vTaskStartScheduler+0xb8>)
 8001eba:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <vTaskStartScheduler+0xbc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <vTaskStartScheduler+0xc0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ecc:	f000 fbc8 	bl	8002660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ed0:	e00f      	b.n	8001ef2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d10b      	bne.n	8001ef2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8001eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ede:	f383 8811 	msr	BASEPRI, r3
 8001ee2:	f3bf 8f6f 	isb	sy
 8001ee6:	f3bf 8f4f 	dsb	sy
 8001eea:	60fb      	str	r3, [r7, #12]
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	e7fd      	b.n	8001eee <vTaskStartScheduler+0x9e>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08002dd4 	.word	0x08002dd4
 8001f00:	08002299 	.word	0x08002299
 8001f04:	200003b0 	.word	0x200003b0
 8001f08:	200003ac 	.word	0x200003ac
 8001f0c:	20000398 	.word	0x20000398
 8001f10:	20000390 	.word	0x20000390

08001f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <vTaskSuspendAll+0x18>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a03      	ldr	r2, [pc, #12]	@ (8001f2c <vTaskSuspendAll+0x18>)
 8001f20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	200003b4 	.word	0x200003b4

08001f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f3e:	4b42      	ldr	r3, [pc, #264]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <xTaskResumeAll+0x2e>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	603b      	str	r3, [r7, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001f5e:	f000 fc23 	bl	80027a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	4a37      	ldr	r2, [pc, #220]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f6c:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <xTaskResumeAll+0x118>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d161      	bne.n	8002038 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <xTaskResumeAll+0x11c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05d      	beq.n	8002038 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f7c:	e02e      	b.n	8001fdc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <xTaskResumeAll+0x120>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3318      	adds	r3, #24
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd69 	bl	8001a62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd64 	bl	8001a62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8002054 <xTaskResumeAll+0x124>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002054 <xTaskResumeAll+0x124>)
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <xTaskResumeAll+0x128>)
 8001fba:	441a      	add	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f7ff fcf0 	bl	80019a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <xTaskResumeAll+0x12c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001fd6:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <xTaskResumeAll+0x130>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <xTaskResumeAll+0x120>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1cc      	bne.n	8001f7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001fea:	f000 fa0b 	bl	8002404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <xTaskResumeAll+0x134>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ffa:	f000 f837 	bl	800206c <xTaskIncrementTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002004:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <xTaskResumeAll+0x130>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3b01      	subs	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f1      	bne.n	8001ffa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <xTaskResumeAll+0x134>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800201c:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <xTaskResumeAll+0x130>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002024:	2301      	movs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <xTaskResumeAll+0x138>)
 800202a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002038:	f000 fbe8 	bl	800280c <vPortExitCritical>

	return xAlreadyYielded;
 800203c:	68bb      	ldr	r3, [r7, #8]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003b4 	.word	0x200003b4
 800204c:	2000038c 	.word	0x2000038c
 8002050:	2000034c 	.word	0x2000034c
 8002054:	20000394 	.word	0x20000394
 8002058:	20000290 	.word	0x20000290
 800205c:	2000028c 	.word	0x2000028c
 8002060:	200003a0 	.word	0x200003a0
 8002064:	2000039c 	.word	0x2000039c
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002076:	4b4f      	ldr	r3, [pc, #316]	@ (80021b4 <xTaskIncrementTick+0x148>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 808f 	bne.w	800219e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002080:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <xTaskIncrementTick+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002088:	4a4b      	ldr	r2, [pc, #300]	@ (80021b8 <xTaskIncrementTick+0x14c>)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d121      	bne.n	80020d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002094:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <xTaskIncrementTick+0x150>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	603b      	str	r3, [r7, #0]
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <xTaskIncrementTick+0x46>
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <xTaskIncrementTick+0x154>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4a3e      	ldr	r2, [pc, #248]	@ (80021c0 <xTaskIncrementTick+0x154>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <xTaskIncrementTick+0x158>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a3c      	ldr	r2, [pc, #240]	@ (80021c4 <xTaskIncrementTick+0x158>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	f000 f996 	bl	8002404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d348      	bcc.n	8002174 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ec:	4b36      	ldr	r3, [pc, #216]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	601a      	str	r2, [r3, #0]
					break;
 80020f4:	e03e      	b.n	8002174 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f6:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <xTaskIncrementTick+0x150>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d203      	bcs.n	8002116 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800210e:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <xTaskIncrementTick+0x15c>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002114:	e02e      	b.n	8002174 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3304      	adds	r3, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fca1 	bl	8001a62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3318      	adds	r3, #24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc98 	bl	8001a62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	2201      	movs	r2, #1
 8002138:	409a      	lsls	r2, r3
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <xTaskIncrementTick+0x160>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <xTaskIncrementTick+0x160>)
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <xTaskIncrementTick+0x164>)
 8002152:	441a      	add	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fc24 	bl	80019a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <xTaskIncrementTick+0x168>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	429a      	cmp	r2, r3
 800216c:	d3b9      	bcc.n	80020e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800216e:	2301      	movs	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002172:	e7b6      	b.n	80020e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <xTaskIncrementTick+0x168>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800217a:	4915      	ldr	r1, [pc, #84]	@ (80021d0 <xTaskIncrementTick+0x164>)
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d901      	bls.n	8002190 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <xTaskIncrementTick+0x16c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e004      	b.n	80021a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <xTaskIncrementTick+0x170>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <xTaskIncrementTick+0x170>)
 80021a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80021a8:	697b      	ldr	r3, [r7, #20]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200003b4 	.word	0x200003b4
 80021b8:	20000390 	.word	0x20000390
 80021bc:	20000344 	.word	0x20000344
 80021c0:	20000348 	.word	0x20000348
 80021c4:	200003a4 	.word	0x200003a4
 80021c8:	200003ac 	.word	0x200003ac
 80021cc:	20000394 	.word	0x20000394
 80021d0:	20000290 	.word	0x20000290
 80021d4:	2000028c 	.word	0x2000028c
 80021d8:	200003a0 	.word	0x200003a0
 80021dc:	2000039c 	.word	0x2000039c

080021e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021e6:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <vTaskSwitchContext+0xa4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80021ee:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <vTaskSwitchContext+0xa8>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80021f4:	e040      	b.n	8002278 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <vTaskSwitchContext+0xa8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <vTaskSwitchContext+0xac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f1c3 031f 	rsb	r3, r3, #31
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	491f      	ldr	r1, [pc, #124]	@ (8002290 <vTaskSwitchContext+0xb0>)
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	607b      	str	r3, [r7, #4]
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	e7fd      	b.n	800223a <vTaskSwitchContext+0x5a>
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <vTaskSwitchContext+0xb0>)
 800224a:	4413      	add	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3308      	adds	r3, #8
 8002260:	429a      	cmp	r2, r3
 8002262:	d104      	bne.n	800226e <vTaskSwitchContext+0x8e>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <vTaskSwitchContext+0xb4>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	200003b4 	.word	0x200003b4
 8002288:	200003a0 	.word	0x200003a0
 800228c:	20000394 	.word	0x20000394
 8002290:	20000290 	.word	0x20000290
 8002294:	2000028c 	.word	0x2000028c

08002298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80022a0:	f000 f852 	bl	8002348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <prvIdleTask+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d9f9      	bls.n	80022a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <prvIdleTask+0x2c>)
 80022ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80022bc:	e7f0      	b.n	80022a0 <prvIdleTask+0x8>
 80022be:	bf00      	nop
 80022c0:	20000290 	.word	0x20000290
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	e00c      	b.n	80022ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <prvInitialiseTaskLists+0x60>)
 80022e0:	4413      	add	r3, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fb33 	bl	800194e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d9ef      	bls.n	80022d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022f4:	480d      	ldr	r0, [pc, #52]	@ (800232c <prvInitialiseTaskLists+0x64>)
 80022f6:	f7ff fb2a 	bl	800194e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022fa:	480d      	ldr	r0, [pc, #52]	@ (8002330 <prvInitialiseTaskLists+0x68>)
 80022fc:	f7ff fb27 	bl	800194e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <prvInitialiseTaskLists+0x6c>)
 8002302:	f7ff fb24 	bl	800194e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002306:	480c      	ldr	r0, [pc, #48]	@ (8002338 <prvInitialiseTaskLists+0x70>)
 8002308:	f7ff fb21 	bl	800194e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <prvInitialiseTaskLists+0x74>)
 800230e:	f7ff fb1e 	bl	800194e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <prvInitialiseTaskLists+0x78>)
 8002314:	4a05      	ldr	r2, [pc, #20]	@ (800232c <prvInitialiseTaskLists+0x64>)
 8002316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002318:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <prvInitialiseTaskLists+0x7c>)
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <prvInitialiseTaskLists+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000290 	.word	0x20000290
 800232c:	2000031c 	.word	0x2000031c
 8002330:	20000330 	.word	0x20000330
 8002334:	2000034c 	.word	0x2000034c
 8002338:	20000360 	.word	0x20000360
 800233c:	20000378 	.word	0x20000378
 8002340:	20000344 	.word	0x20000344
 8002344:	20000348 	.word	0x20000348

08002348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800234e:	e019      	b.n	8002384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002350:	f000 fa2a 	bl	80027a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002354:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <prvCheckTasksWaitingTermination+0x50>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fb7e 	bl	8001a62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <prvCheckTasksWaitingTermination+0x54>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3b01      	subs	r3, #1
 800236c:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <prvCheckTasksWaitingTermination+0x54>)
 800236e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002370:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3b01      	subs	r3, #1
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800237a:	f000 fa47 	bl	800280c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f810 	bl	80023a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <prvCheckTasksWaitingTermination+0x58>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e1      	bne.n	8002350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000360 	.word	0x20000360
 800239c:	2000038c 	.word	0x2000038c
 80023a0:	20000374 	.word	0x20000374

080023a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d108      	bne.n	80023c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fba2 	bl	8002b04 <vPortFree>
				vPortFree( pxTCB );
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb9f 	bl	8002b04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80023c6:	e019      	b.n	80023fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d103      	bne.n	80023da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fb96 	bl	8002b04 <vPortFree>
	}
 80023d8:	e010      	b.n	80023fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d00b      	beq.n	80023fc <prvDeleteTCB+0x58>
	__asm volatile
 80023e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	60fb      	str	r3, [r7, #12]
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <prvDeleteTCB+0x54>
	}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <prvResetNextTaskUnblockTime+0x38>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <prvResetNextTaskUnblockTime+0x3c>)
 8002416:	f04f 32ff 	mov.w	r2, #4294967295
 800241a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800241c:	e008      	b.n	8002430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800241e:	4b07      	ldr	r3, [pc, #28]	@ (800243c <prvResetNextTaskUnblockTime+0x38>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <prvResetNextTaskUnblockTime+0x3c>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000344 	.word	0x20000344
 8002440:	200003ac 	.word	0x200003ac

08002444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <xTaskGetSchedulerState+0x34>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002452:	2301      	movs	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	e008      	b.n	800246a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <xTaskGetSchedulerState+0x38>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002460:	2302      	movs	r3, #2
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	e001      	b.n	800246a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800246a:	687b      	ldr	r3, [r7, #4]
	}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	20000398 	.word	0x20000398
 800247c:	200003b4 	.word	0x200003b4

08002480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800248a:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <prvAddCurrentTaskToDelayedList+0xb0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002490:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3304      	adds	r3, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fae3 	bl	8001a62 <uxListRemove>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	2201      	movs	r2, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4013      	ands	r3, r2
 80024b6:	4a20      	ldr	r2, [pc, #128]	@ (8002538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d10a      	bne.n	80024d8 <prvAddCurrentTaskToDelayedList+0x58>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	481a      	ldr	r0, [pc, #104]	@ (800253c <prvAddCurrentTaskToDelayedList+0xbc>)
 80024d2:	f7ff fa69 	bl	80019a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024d6:	e026      	b.n	8002526 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d209      	bcs.n	8002504 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <prvAddCurrentTaskToDelayedList+0xc0>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7ff fa77 	bl	80019f0 <vListInsert>
}
 8002502:	e010      	b.n	8002526 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3304      	adds	r3, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f7ff fa6d 	bl	80019f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d202      	bcs.n	8002526 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002520:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000390 	.word	0x20000390
 8002534:	2000028c 	.word	0x2000028c
 8002538:	20000394 	.word	0x20000394
 800253c:	20000378 	.word	0x20000378
 8002540:	20000348 	.word	0x20000348
 8002544:	20000344 	.word	0x20000344
 8002548:	200003ac 	.word	0x200003ac

0800254c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3b04      	subs	r3, #4
 800255c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3b04      	subs	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f023 0201 	bic.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3b04      	subs	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800257c:	4a0c      	ldr	r2, [pc, #48]	@ (80025b0 <pxPortInitialiseStack+0x64>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	3b14      	subs	r3, #20
 8002586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3b04      	subs	r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f06f 0202 	mvn.w	r2, #2
 800259a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3b20      	subs	r3, #32
 80025a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	080025b5 	.word	0x080025b5

080025b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025be:	4b13      	ldr	r3, [pc, #76]	@ (800260c <prvTaskExitError+0x58>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d00b      	beq.n	80025e0 <prvTaskExitError+0x2c>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	60fb      	str	r3, [r7, #12]
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <prvTaskExitError+0x28>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	60bb      	str	r3, [r7, #8]
}
 80025f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025f4:	bf00      	nop
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0fc      	beq.n	80025f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c

08002610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <pxCurrentTCBConst2>)
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800261a:	f380 8809 	msr	PSP, r0
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f380 8811 	msr	BASEPRI, r0
 800262a:	4770      	bx	lr
 800262c:	f3af 8000 	nop.w

08002630 <pxCurrentTCBConst2>:
 8002630:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop

08002638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002638:	4808      	ldr	r0, [pc, #32]	@ (800265c <prvPortStartFirstTask+0x24>)
 800263a:	6800      	ldr	r0, [r0, #0]
 800263c:	6800      	ldr	r0, [r0, #0]
 800263e:	f380 8808 	msr	MSP, r0
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8814 	msr	CONTROL, r0
 800264a:	b662      	cpsie	i
 800264c:	b661      	cpsie	f
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	df00      	svc	0
 8002658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800265a:	bf00      	nop
 800265c:	e000ed08 	.word	0xe000ed08

08002660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002666:	4b47      	ldr	r3, [pc, #284]	@ (8002784 <xPortStartScheduler+0x124>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a47      	ldr	r2, [pc, #284]	@ (8002788 <xPortStartScheduler+0x128>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10b      	bne.n	8002688 <xPortStartScheduler+0x28>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	60fb      	str	r3, [r7, #12]
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002688:	4b3e      	ldr	r3, [pc, #248]	@ (8002784 <xPortStartScheduler+0x124>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3f      	ldr	r2, [pc, #252]	@ (800278c <xPortStartScheduler+0x12c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10b      	bne.n	80026aa <xPortStartScheduler+0x4a>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	613b      	str	r3, [r7, #16]
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop
 80026a8:	e7fd      	b.n	80026a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026aa:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <xPortStartScheduler+0x130>)
 80026ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	22ff      	movs	r2, #255	@ 0xff
 80026ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <xPortStartScheduler+0x134>)
 80026d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026d2:	4b31      	ldr	r3, [pc, #196]	@ (8002798 <xPortStartScheduler+0x138>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026d8:	e009      	b.n	80026ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80026da:	4b2f      	ldr	r3, [pc, #188]	@ (8002798 <xPortStartScheduler+0x138>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3b01      	subs	r3, #1
 80026e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002798 <xPortStartScheduler+0x138>)
 80026e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b80      	cmp	r3, #128	@ 0x80
 80026f8:	d0ef      	beq.n	80026da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026fa:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <xPortStartScheduler+0x138>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00b      	beq.n	800271e <xPortStartScheduler+0xbe>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	60bb      	str	r3, [r7, #8]
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	e7fd      	b.n	800271a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800271e:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <xPortStartScheduler+0x138>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <xPortStartScheduler+0x138>)
 8002726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <xPortStartScheduler+0x138>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002730:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <xPortStartScheduler+0x138>)
 8002732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800273c:	4b17      	ldr	r3, [pc, #92]	@ (800279c <xPortStartScheduler+0x13c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a16      	ldr	r2, [pc, #88]	@ (800279c <xPortStartScheduler+0x13c>)
 8002742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <xPortStartScheduler+0x13c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <xPortStartScheduler+0x13c>)
 800274e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002754:	f000 f8da 	bl	800290c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <xPortStartScheduler+0x140>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800275e:	f000 f8f9 	bl	8002954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <xPortStartScheduler+0x144>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <xPortStartScheduler+0x144>)
 8002768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800276c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800276e:	f7ff ff63 	bl	8002638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002772:	f7ff fd35 	bl	80021e0 <vTaskSwitchContext>
	prvTaskExitError();
 8002776:	f7ff ff1d 	bl	80025b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	e000ed00 	.word	0xe000ed00
 8002788:	410fc271 	.word	0x410fc271
 800278c:	410fc270 	.word	0x410fc270
 8002790:	e000e400 	.word	0xe000e400
 8002794:	200003b8 	.word	0x200003b8
 8002798:	200003bc 	.word	0x200003bc
 800279c:	e000ed20 	.word	0xe000ed20
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	e000ef34 	.word	0xe000ef34

080027a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	607b      	str	r3, [r7, #4]
}
 80027c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <vPortEnterCritical+0x5c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002804 <vPortEnterCritical+0x5c>)
 80027ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <vPortEnterCritical+0x5c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d110      	bne.n	80027f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <vPortEnterCritical+0x60>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	603b      	str	r3, [r7, #0]
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	e7fd      	b.n	80027f2 <vPortEnterCritical+0x4a>
	}
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <vPortExitCritical+0x50>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <vPortExitCritical+0x26>
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	e7fd      	b.n	800282e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <vPortExitCritical+0x50>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	4a08      	ldr	r2, [pc, #32]	@ (800285c <vPortExitCritical+0x50>)
 800283a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <vPortExitCritical+0x50>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <vPortExitCritical+0x44>
 8002844:	2300      	movs	r3, #0
 8002846:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800284e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	2000000c 	.word	0x2000000c

08002860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002860:	f3ef 8009 	mrs	r0, PSP
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <pxCurrentTCBConst>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f01e 0f10 	tst.w	lr, #16
 8002870:	bf08      	it	eq
 8002872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287a:	6010      	str	r0, [r2, #0]
 800287c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002884:	f380 8811 	msr	BASEPRI, r0
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f7ff fca6 	bl	80021e0 <vTaskSwitchContext>
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f380 8811 	msr	BASEPRI, r0
 800289c:	bc09      	pop	{r0, r3}
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	6808      	ldr	r0, [r1, #0]
 80028a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a6:	f01e 0f10 	tst.w	lr, #16
 80028aa:	bf08      	it	eq
 80028ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028b0:	f380 8809 	msr	PSP, r0
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w

080028c0 <pxCurrentTCBConst>:
 80028c0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop

080028c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	607b      	str	r3, [r7, #4]
}
 80028e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028e2:	f7ff fbc3 	bl	800206c <xTaskIncrementTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <xPortSysTickHandler+0x40>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f383 8811 	msr	BASEPRI, r3
}
 80028fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <vPortSetupTimerInterrupt+0x34>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <vPortSetupTimerInterrupt+0x38>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <vPortSetupTimerInterrupt+0x3c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <vPortSetupTimerInterrupt+0x40>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <vPortSetupTimerInterrupt+0x44>)
 800292a:	3b01      	subs	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <vPortSetupTimerInterrupt+0x34>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010
 8002944:	e000e018 	.word	0xe000e018
 8002948:	20000000 	.word	0x20000000
 800294c:	10624dd3 	.word	0x10624dd3
 8002950:	e000e014 	.word	0xe000e014

08002954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002964 <vPortEnableVFP+0x10>
 8002958:	6801      	ldr	r1, [r0, #0]
 800295a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800295e:	6001      	str	r1, [r0, #0]
 8002960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002962:	bf00      	nop
 8002964:	e000ed88 	.word	0xe000ed88

08002968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	@ 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002974:	f7ff face 	bl	8001f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002978:	4b5c      	ldr	r3, [pc, #368]	@ (8002aec <pvPortMalloc+0x184>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002980:	f000 f924 	bl	8002bcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002984:	4b5a      	ldr	r3, [pc, #360]	@ (8002af0 <pvPortMalloc+0x188>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 8095 	bne.w	8002abc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01e      	beq.n	80029d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002998:	2208      	movs	r2, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d015      	beq.n	80029d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f023 0307 	bic.w	r3, r3, #7
 80029b0:	3308      	adds	r3, #8
 80029b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <pvPortMalloc+0x6e>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	617b      	str	r3, [r7, #20]
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d06f      	beq.n	8002abc <pvPortMalloc+0x154>
 80029dc:	4b45      	ldr	r3, [pc, #276]	@ (8002af4 <pvPortMalloc+0x18c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d86a      	bhi.n	8002abc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029e6:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <pvPortMalloc+0x190>)
 80029e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029ea:	4b43      	ldr	r3, [pc, #268]	@ (8002af8 <pvPortMalloc+0x190>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029f0:	e004      	b.n	80029fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d903      	bls.n	8002a0e <pvPortMalloc+0xa6>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a0e:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <pvPortMalloc+0x184>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d051      	beq.n	8002abc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	4413      	add	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	2308      	movs	r3, #8
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d920      	bls.n	8002a7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <pvPortMalloc+0xfc>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	613b      	str	r3, [r7, #16]
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad2      	subs	r2, r2, r3
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a76:	69b8      	ldr	r0, [r7, #24]
 8002a78:	f000 f90a 	bl	8002c90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <pvPortMalloc+0x18c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	4a1b      	ldr	r2, [pc, #108]	@ (8002af4 <pvPortMalloc+0x18c>)
 8002a88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002af4 <pvPortMalloc+0x18c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <pvPortMalloc+0x194>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d203      	bcs.n	8002a9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <pvPortMalloc+0x18c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <pvPortMalloc+0x194>)
 8002a9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <pvPortMalloc+0x188>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <pvPortMalloc+0x198>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <pvPortMalloc+0x198>)
 8002aba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002abc:	f7ff fa38 	bl	8001f30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <pvPortMalloc+0x17a>
	__asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	60fb      	str	r3, [r7, #12]
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	e7fd      	b.n	8002ade <pvPortMalloc+0x176>
	return pvReturn;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	@ 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20003fc8 	.word	0x20003fc8
 8002af0:	20003fdc 	.word	0x20003fdc
 8002af4:	20003fcc 	.word	0x20003fcc
 8002af8:	20003fc0 	.word	0x20003fc0
 8002afc:	20003fd0 	.word	0x20003fd0
 8002b00:	20003fd4 	.word	0x20003fd4

08002b04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04f      	beq.n	8002bb6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b16:	2308      	movs	r3, #8
 8002b18:	425b      	negs	r3, r3
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <vPortFree+0xbc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <vPortFree+0x46>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	60fb      	str	r3, [r7, #12]
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <vPortFree+0x66>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60bb      	str	r3, [r7, #8]
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <vPortFree+0xbc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01e      	beq.n	8002bb6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11a      	bne.n	8002bb6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <vPortFree+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b90:	f7ff f9c0 	bl	8001f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <vPortFree+0xc0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <vPortFree+0xc0>)
 8002ba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ba2:	6938      	ldr	r0, [r7, #16]
 8002ba4:	f000 f874 	bl	8002c90 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <vPortFree+0xc4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a06      	ldr	r2, [pc, #24]	@ (8002bc8 <vPortFree+0xc4>)
 8002bb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002bb2:	f7ff f9bd 	bl	8001f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20003fdc 	.word	0x20003fdc
 8002bc4:	20003fcc 	.word	0x20003fcc
 8002bc8:	20003fd8 	.word	0x20003fd8

08002bcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bd2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002bd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <prvHeapInit+0xac>)
 8002bda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3307      	adds	r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <prvHeapInit+0xac>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <prvHeapInit+0xb0>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <prvHeapInit+0xb0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c18:	2208      	movs	r2, #8
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <prvHeapInit+0xb4>)
 8002c2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <prvHeapInit+0xb4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c36:	4b12      	ldr	r3, [pc, #72]	@ (8002c80 <prvHeapInit+0xb4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	1ad2      	subs	r2, r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <prvHeapInit+0xb4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <prvHeapInit+0xb8>)
 8002c5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a09      	ldr	r2, [pc, #36]	@ (8002c88 <prvHeapInit+0xbc>)
 8002c62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <prvHeapInit+0xc0>)
 8002c66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c6a:	601a      	str	r2, [r3, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	200003c0 	.word	0x200003c0
 8002c7c:	20003fc0 	.word	0x20003fc0
 8002c80:	20003fc8 	.word	0x20003fc8
 8002c84:	20003fd0 	.word	0x20003fd0
 8002c88:	20003fcc 	.word	0x20003fcc
 8002c8c:	20003fdc 	.word	0x20003fdc

08002c90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c98:	4b28      	ldr	r3, [pc, #160]	@ (8002d3c <prvInsertBlockIntoFreeList+0xac>)
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e002      	b.n	8002ca4 <prvInsertBlockIntoFreeList+0x14>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d8f7      	bhi.n	8002c9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	4413      	add	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d108      	bne.n	8002cd2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	441a      	add	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d118      	bne.n	8002d18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <prvInsertBlockIntoFreeList+0xb0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d00d      	beq.n	8002d0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	441a      	add	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e008      	b.n	8002d20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <prvInsertBlockIntoFreeList+0xb0>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e003      	b.n	8002d20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d002      	beq.n	8002d2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20003fc0 	.word	0x20003fc0
 8002d40:	20003fc8 	.word	0x20003fc8

08002d44 <memset>:
 8002d44:	4402      	add	r2, r0
 8002d46:	4603      	mov	r3, r0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d100      	bne.n	8002d4e <memset+0xa>
 8002d4c:	4770      	bx	lr
 8002d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d52:	e7f9      	b.n	8002d48 <memset+0x4>

08002d54 <__libc_init_array>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	4d0d      	ldr	r5, [pc, #52]	@ (8002d8c <__libc_init_array+0x38>)
 8002d58:	4c0d      	ldr	r4, [pc, #52]	@ (8002d90 <__libc_init_array+0x3c>)
 8002d5a:	1b64      	subs	r4, r4, r5
 8002d5c:	10a4      	asrs	r4, r4, #2
 8002d5e:	2600      	movs	r6, #0
 8002d60:	42a6      	cmp	r6, r4
 8002d62:	d109      	bne.n	8002d78 <__libc_init_array+0x24>
 8002d64:	4d0b      	ldr	r5, [pc, #44]	@ (8002d94 <__libc_init_array+0x40>)
 8002d66:	4c0c      	ldr	r4, [pc, #48]	@ (8002d98 <__libc_init_array+0x44>)
 8002d68:	f000 f818 	bl	8002d9c <_init>
 8002d6c:	1b64      	subs	r4, r4, r5
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	2600      	movs	r6, #0
 8002d72:	42a6      	cmp	r6, r4
 8002d74:	d105      	bne.n	8002d82 <__libc_init_array+0x2e>
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7c:	4798      	blx	r3
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7ee      	b.n	8002d60 <__libc_init_array+0xc>
 8002d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d86:	4798      	blx	r3
 8002d88:	3601      	adds	r6, #1
 8002d8a:	e7f2      	b.n	8002d72 <__libc_init_array+0x1e>
 8002d8c:	08002df4 	.word	0x08002df4
 8002d90:	08002df4 	.word	0x08002df4
 8002d94:	08002df4 	.word	0x08002df4
 8002d98:	08002df8 	.word	0x08002df8

08002d9c <_init>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	bf00      	nop
 8002da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da2:	bc08      	pop	{r3}
 8002da4:	469e      	mov	lr, r3
 8002da6:	4770      	bx	lr

08002da8 <_fini>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	bf00      	nop
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr
